{
  "title": {
    "text": "RFC 4122 - A Universally Unique IDentifier (UUID) URN Namespace",
    "ja": "RFC 4122 - ユニバーサルユニークIDentifier（UUID）URN名前空間"
  },
  "number": 4122,
  "created_at": "2020-08-15 18:28:06.787629+09:00",
  "updated_by": "",
  "contents": [
    {
      "indent": 0,
      "text": "Network Working Group                                           P. Leach\nRequest for Comments: 4122                                     Microsoft\nCategory: Standards Track                                    M. Mealling\n                                                Refactored Networks, LLC\n                                                                 R. Salz\n                                              DataPower Technology, Inc.\n                                                               July 2005",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 10,
      "text": "A Universally Unique IDentifier (UUID) URN Namespace",
      "ja": "ユニバーサルユニークIDentifier（UUID）URN名前空間"
    },
    {
      "indent": 0,
      "text": "Status of This Memo",
      "ja": "本文書の状態"
    },
    {
      "indent": 3,
      "text": "This document specifies an Internet standards track protocol for the Internet community, and requests discussion and suggestions for improvements. Please refer to the current edition of the \"Internet Official Protocol Standards\" (STD 1) for the standardization state and status of this protocol. Distribution of this memo is unlimited.",
      "ja": "このドキュメントは、インターネットコミュニティのインターネット標準トラックプロトコルを指定し、改善のための議論と提案を要求します。このプロトコルの標準化状態とステータスについては、「インターネット公式プロトコル標準」（STD 1）の最新版を参照してください。このメモの配布は無制限です。"
    },
    {
      "indent": 0,
      "text": "Copyright Notice",
      "ja": "著作権表示"
    },
    {
      "indent": 3,
      "text": "Copyright (C) The Internet Society (2005).",
      "ja": "Copyright（C）The Internet Society（2005）。"
    },
    {
      "indent": 0,
      "text": "Abstract",
      "ja": "概要"
    },
    {
      "indent": 3,
      "text": "This specification defines a Uniform Resource Name namespace for UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier). A UUID is 128 bits long, and can guarantee uniqueness across space and time. UUIDs were originally used in the Apollo Network Computing System and later in the Open Software Foundation's (OSF) Distributed Computing Environment (DCE), and then in Microsoft Windows platforms.",
      "ja": "この仕様は、GUID（Globally Unique IDentifier）とも呼ばれるUUID（Universally Unique IDentifier）のUniform Resource Name名前空間を定義します。 UUIDは128ビット長であり、空間と時間全体の一意性を保証できます。 UUIDは元々Apollo Network Computing Systemで使用され、その後Open Software Foundation（OSF）の分散コンピューティング環境（DCE）で使用され、その後Microsoft Windowsプラットフォームで使用されました。"
    },
    {
      "indent": 3,
      "text": "This specification is derived from the DCE specification with the kind permission of the OSF (now known as The Open Group). Information from earlier versions of the DCE specification have been incorporated into this document.",
      "ja": "この仕様は、OSF（現在はThe Open Groupとして知られています）の許可を得て、DCE仕様から派生しています。 DCE仕様の以前のバージョンの情報は、このドキュメントに組み込まれています。"
    },
    {
      "indent": 0,
      "text": "Table of Contents",
      "ja": "目次"
    },
    {
      "indent": 3,
      "text": "1. Introduction . . . . . . . . . . . . . . . . . . . . . . . . .  2\n2. Motivation . . . . . . . . . . . . . . . . . . . . . . . . . .  3\n3. Namespace Registration Template  . . . . . . . . . . . . . . .  3\n4. Specification  . . . . . . . . . . . . . . . . . . . . . . . .  5\n   4.1. Format. . . . . . . . . . . . . . . . . . . . . . . . . .  5\n        4.1.1. Variant. . . . . . . . . . . . . . . . . . . . . .  6\n        4.1.2. Layout and Byte Order. . . . . . . . . . . . . . .  6\n        4.1.3. Version. . . . . . . . . . . . . . . . . . . . . .  7\n        4.1.4. Timestamp. . . . . . . . . . . . . . . . . . . . .  8\n        4.1.5. Clock Sequence . . . . . . . . . . . . . . . . . .  8\n        4.1.6. Node . . . . . . . . . . . . . . . . . . . . . . .  9\n        4.1.7. Nil UUID . . . . . . . . . . . . . . . . . . . . .  9\n   4.2. Algorithms for Creating a Time-Based UUID . . . . . . . .  9\n        4.2.1. Basic Algorithm. . . . . . . . . . . . . . . . . . 10\n        4.2.2. Generation Details . . . . . . . . . . . . . . . . 12\n   4.3. Algorithm for Creating a Name-Based UUID. . . . . . . . . 13\n   4.4. Algorithms for Creating a UUID from Truly Random or\n        Pseudo-Random Numbers . . . . . . . . . . . . . . . . . . 14\n   4.5. Node IDs that Do Not Identify the Host. . . . . . . . . . 15\n5. Community Considerations . . . . . . . . . . . . . . . . . . . 15\n6. Security Considerations  . . . . . . . . . . . . . . . . . . . 16\n7. Acknowledgments  . . . . . . . . . . . . . . . . . . . . . . . 16\n8. Normative References . . . . . . . . . . . . . . . . . . . . . 16\nA. Appendix A - Sample Implementation . . . . . . . . . . . . . . 18\nB. Appendix B - Sample Output of utest  . . . . . . . . . . . . . 29\nC. Appendix C - Some Name Space IDs . . . . . . . . . . . . . . . 30",
      "raw": true,
      "toc": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "1. Introduction",
      "section_title": true,
      "ja": "1. はじめに"
    },
    {
      "indent": 3,
      "text": "This specification defines a Uniform Resource Name namespace for UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier). A UUID is 128 bits long, and requires no central registration process.",
      "ja": "この仕様は、GUID（Globally Unique IDentifier）とも呼ばれるUUID（Universally Unique IDentifier）のUniform Resource Name名前空間を定義します。 UUIDは128ビット長で、中央登録プロセスを必要としません。"
    },
    {
      "indent": 3,
      "text": "The information here is meant to be a concise guide for those wishing to implement services using UUIDs as URNs. Nothing in this document should be construed to override the DCE standards that defined UUIDs.",
      "ja": "ここの情報は、URNとしてUUIDを使用してサービスを実装したい人のための簡潔なガイドとなることを意図しています。このドキュメントでは、UUIDを定義したDCE標準をオーバーライドするものと解釈してはなりません。"
    },
    {
      "indent": 3,
      "text": "There is an ITU-T Recommendation and ISO/IEC Standard [3] that are derived from earlier versions of this document. Both sets of specifications have been aligned, and are fully technically compatible. In addition, a global registration function is being provided by the Telecommunications Standardisation Bureau of ITU-T; for details see <http://www.itu.int/ITU-T/asn1/uuid.html>.",
      "ja": "このドキュメントの以前のバージョンから派生したITU-T勧告とISO / IEC標準[3]があります。仕様の両方のセットが調整され、完全に技術的に互換性があります。さらに、ITU-Tの電気通信標準化局によってグローバル登録機能が提供されています。詳細については、<http://www.itu.int/ITU-T/asn1/uuid.html>を参照してください。"
    },
    {
      "indent": 0,
      "text": "2. Motivation",
      "section_title": true,
      "ja": "2. 動機"
    },
    {
      "indent": 3,
      "text": "One of the main reasons for using UUIDs is that no centralized authority is required to administer them (although one format uses IEEE 802 node identifiers, others do not). As a result, generation on demand can be completely automated, and used for a variety of purposes. The UUID generation algorithm described here supports very high allocation rates of up to 10 million per second per machine if necessary, so that they could even be used as transaction IDs.",
      "ja": "UUIDを使用する主な理由の1つは、UUIDを管理するために一元化された権限が必要ないことです（1つの形式はIEEE 802ノード識別子を使用しますが、他の形式は使用しません）。その結果、オンデマンドでの生成を完全に自動化し、さまざまな目的に使用できます。ここで説明するUUID生成アルゴリズムは、必要に応じてマシンあたり1秒あたり最大1,000万という非常に高い割り当て率をサポートしているため、トランザクションIDとしても使用できます。"
    },
    {
      "indent": 3,
      "text": "UUIDs are of a fixed size (128 bits) which is reasonably small compared to other alternatives. This lends itself well to sorting, ordering, and hashing of all sorts, storing in databases, simple allocation, and ease of programming in general.",
      "ja": "UUIDは固定サイズ（128ビット）で、他の代替と比較してかなり小さいです。これは、すべての種類の並べ替え、順序付け、ハッシュ化、データベースへの格納、単純な割り当て、および一般的なプログラミングの容易さに適しています。"
    },
    {
      "indent": 3,
      "text": "Since UUIDs are unique and persistent, they make excellent Uniform Resource Names. The unique ability to generate a new UUID without a registration process allows for UUIDs to be one of the URNs with the lowest minting cost.",
      "ja": "UUIDは一意で永続的であるため、優れたUniform Resource Nameになります。登録プロセスなしで新しいUUIDを生成する独自の機能により、UUIDを最小の鋳造コストでURNの1つにすることができます。"
    },
    {
      "indent": 0,
      "text": "3. Namespace Registration Template",
      "section_title": true,
      "ja": "3. 名前空間登録テンプレート"
    },
    {
      "indent": 3,
      "text": "Namespace ID: UUID Registration Information: Registration date: 2003-10-01",
      "ja": "名前空間ID：UUID登録情報：登録日：2003-10-01"
    },
    {
      "indent": 3,
      "text": "Declared registrant of the namespace: JTC 1/SC6 (ASN.1 Rapporteur Group)",
      "ja": "名前空間の登録者として宣言：JTC 1 / SC6（ASN.1 Rapporteur Group）"
    },
    {
      "indent": 3,
      "text": "Declaration of syntactic structure: A UUID is an identifier that is unique across both space and time, with respect to the space of all UUIDs. Since a UUID is a fixed size and contains a time field, it is possible for values to rollover (around A.D. 3400, depending on the specific algorithm used). A UUID can be used for multiple purposes, from tagging objects with an extremely short lifetime, to reliably identifying very persistent objects across a network.",
      "ja": "構文構造の宣言：UUIDは、すべてのUUIDの空間に関して、空間と時間の両方で一意の識別子です。 UUIDは固定サイズで時間フィールドが含まれているため、値がロールオーバーされる可能性があります（使用される特定のアルゴリズムによっては、A.D。3400あたり）。 UUIDは、ライフタイムが非常に短いオブジェクトにタグを付けることから、ネットワーク全体で非常に永続的なオブジェクトを確実に識別することまで、さまざまな目的で使用できます。"
    },
    {
      "indent": 6,
      "text": "The internal representation of a UUID is a specific sequence of bits in memory, as described in Section 4. To accurately represent a UUID as a URN, it is necessary to convert the bit sequence to a string representation.",
      "ja": "セクション4で説明するように、UUIDの内部表現はメモリ内の特定のビットシーケンスです。UUIDをURNとして正確に表現するには、ビットシーケンスを文字列表現に変換する必要があります。"
    },
    {
      "indent": 6,
      "text": "Each field is treated as an integer and has its value printed as a zero-filled hexadecimal digit string with the most significant digit first. The hexadecimal values \"a\" through \"f\" are output as lower case characters and are case insensitive on input.",
      "ja": "各フィールドは整数として扱われ、その値はゼロで埋められた16進数の文字列として出力され、最上位の数字が最初に表示されます。 16進値 \"a\"から \"f\"は小文字として出力され、入力では大文字と小文字は区別されません。"
    },
    {
      "indent": 6,
      "text": "The formal definition of the UUID string representation is provided by the following ABNF [7]:",
      "ja": "UUID文字列表現の正式な定義は、次のABNF [7]によって提供されます。"
    },
    {
      "indent": 6,
      "text": "UUID                   = time-low \"-\" time-mid \"-\"\n                         time-high-and-version \"-\"\n                         clock-seq-and-reserved\n                         clock-seq-low \"-\" node\ntime-low               = 4hexOctet\ntime-mid               = 2hexOctet\ntime-high-and-version  = 2hexOctet\nclock-seq-and-reserved = hexOctet\nclock-seq-low          = hexOctet\nnode                   = 6hexOctet\nhexOctet               = hexDigit hexDigit\nhexDigit =\n      \"0\" / \"1\" / \"2\" / \"3\" / \"4\" / \"5\" / \"6\" / \"7\" / \"8\" / \"9\" /\n      \"a\" / \"b\" / \"c\" / \"d\" / \"e\" / \"f\" /\n      \"A\" / \"B\" / \"C\" / \"D\" / \"E\" / \"F\"",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "The following is an example of the string representation of a UUID as a URN:",
      "ja": "以下は、URNとしてのUUIDの文字列表現の例です。"
    },
    {
      "indent": 3,
      "text": "urn:uuid:f81d4fae-7dec-11d0-a765-00a0c91e6bf6",
      "ja": "urn：uuid：f81d4fae-7dec-11d0-a765-00a0c91e6bf6"
    },
    {
      "indent": 3,
      "text": "Relevant ancillary documentation: [1][2] Identifier uniqueness considerations: This document specifies three algorithms to generate UUIDs: the first leverages the unique values of 802 MAC addresses to guarantee uniqueness, the second uses pseudo-random number generators, and the third uses cryptographic hashing and application-provided text strings. As a result, the UUIDs generated according to the mechanisms here will be unique from all other UUIDs that have been or will be assigned.",
      "ja": "関連する補助ドキュメント：[1] [2]識別子の一意性に関する考慮事項：このドキュメントでは、UUIDを生成する3つのアルゴリズムを指定します。最初のアルゴリズムは、802 MACアドレスの一意の値を利用して一意性を保証し、2番目は疑似乱数ジェネレータを使用し、3番目は使用します暗号化ハッシュおよびアプリケーション提供のテキスト文字列。その結果、ここでのメカニズムに従って生成されたUUIDは、割り当てられている、または割り当てられる他のすべてのUUIDとは異なります。"
    },
    {
      "indent": 3,
      "text": "Identifier persistence considerations: UUIDs are inherently very difficult to resolve in a global sense. This, coupled with the fact that UUIDs are temporally unique within their spatial context, ensures that UUIDs will remain as persistent as possible.",
      "ja": "識別子の永続性に関する考慮事項：UUIDは本質的にグローバルな意味で解決するのが非常に困難です。これは、UUIDが空間コンテキスト内で一時的に一意であるという事実と相まって、UUIDが可能な限り永続的なままであることを保証します。"
    },
    {
      "indent": 0,
      "text": " Process of identifier assignment: Generating a UUID does not require that a registration authority be contacted. One algorithm requires a unique value over space for each generator. This value is typically an IEEE 802 MAC address, usually already available on network-connected hosts. The address can be assigned from an address block obtained from the IEEE registration authority. If no such address is available, or privacy concerns make its use undesirable, Section 4.5 specifies two alternatives. Another approach is to use version 3 or version 4 UUIDs as defined below.",
      "ja": "識別子割り当てのプロセス：UUIDを生成するために、登録機関に連絡する必要はありません。 1つのアルゴリズムでは、ジェネレーターごとにスペース全体で一意の値が必要です。この値は通常、IEEE 802 MACアドレスであり、通常、ネットワーク接続されたホストですでに利用可能です。アドレスは、IEEE登録局から取得したアドレスブロックから割り当てることができます。そのようなアドレスが利用できない場合、またはプライバシーの懸念によりその使用が望ましくない場合は、セクション4.5で2つの選択肢を指定します。別のアプローチは、以下に定義されているようにバージョン3またはバージョン4のUUIDを使用することです。"
    },
    {
      "indent": 3,
      "text": "Process for identifier resolution: Since UUIDs are not globally resolvable, this is not applicable.",
      "ja": "識別子解決のプロセス：UUIDはグローバルに解決できないため、これは適用されません。"
    },
    {
      "indent": 3,
      "text": "Rules for Lexical Equivalence: Consider each field of the UUID to be an unsigned integer as shown in the table in section Section 4.1.2. Then, to compare a pair of UUIDs, arithmetically compare the corresponding fields from each UUID in order of significance and according to their data type. Two UUIDs are equal if and only if all the corresponding fields are equal.",
      "ja": "字句の同等性のルール：セクション4.1.2の表に示すように、UUIDの各フィールドを符号なし整数と見なします。次に、UUIDのペアを比較するために、各UUIDの対応するフィールドを、データの順序に従って、重要度順に算術的に比較します。 2つのUUIDが等しいのは、対応するフィールドがすべて等しい場合だけです。"
    },
    {
      "indent": 6,
      "text": "As an implementation note, equality comparison can be performed on many systems by doing the appropriate byte-order canonicalization, and then treating the two UUIDs as 128-bit unsigned integers.",
      "ja": "実装上の注意として、同等の比較は、適切なバイト順の正規化を実行し、2つのUUIDを128ビットの符号なし整数として処理することにより、多くのシステムで実行できます。"
    },
    {
      "indent": 6,
      "text": "UUIDs, as defined in this document, can also be ordered lexicographically. For a pair of UUIDs, the first one follows the second if the most significant field in which the UUIDs differ is greater for the first UUID. The second precedes the first if the most significant field in which the UUIDs differ is greater for the second UUID.",
      "ja": "このドキュメントで定義されているUUIDは、辞書式順序で並べることもできます。 UUIDのペアの場合、最初のUUIDのUUIDが異なる最も重要なフィールドが大きい場合、最初のUUIDは2番目のUUIDの後に続きます。 2番目のUUIDのUUIDが異なる最も重要なフィールドが大きい場合、2番目のフィールドが最初のフィールドに先行します。"
    },
    {
      "indent": 3,
      "text": "Conformance with URN Syntax: The string representation of a UUID is fully compatible with the URN syntax. When converting from a bit-oriented, in-memory representation of a UUID into a URN, care must be taken to strictly adhere to the byte order issues mentioned in the string representation section.",
      "ja": "URN構文への準拠：UUIDの文字列表現は、URN構文と完全に互換性があります。 UUIDのビット指向のメモリ内表現からURNに変換するときは、文字列表現のセクションで説明したバイトオーダーの問題に厳密に従う必要があります。"
    },
    {
      "indent": 3,
      "text": "Validation mechanism: Apart from determining whether the timestamp portion of the UUID is in the future and therefore not yet assignable, there is no mechanism for determining whether a UUID is 'valid'.",
      "ja": "検証メカニズム：UUIDのタイムスタンプ部分が将来のものであり、したがってまだ割り当て可能かどうかを判断すること以外に、UUIDが「有効」かどうかを判断するメカニズムはありません。"
    },
    {
      "indent": 3,
      "text": "Scope: UUIDs are global in scope.",
      "ja": "スコープ：UUIDはスコープ内でグローバルです。"
    },
    {
      "indent": 0,
      "text": "4. Specification",
      "section_title": true,
      "ja": "4. 仕様"
    },
    {
      "indent": 0,
      "text": "4.1. Format",
      "section_title": true,
      "ja": "4.1. フォーマット"
    },
    {
      "indent": 3,
      "text": "The UUID format is 16 octets; some bits of the eight octet variant field specified below determine finer structure.",
      "ja": "UUID形式は16オクテットです。以下に指定された8オクテットバリアントフィールドのいくつかのビットは、より細かい構造を決定します。"
    },
    {
      "indent": 0,
      "text": "4.1.1. Variant",
      "section_title": true,
      "ja": "4.1.1. バリアント"
    },
    {
      "indent": 3,
      "text": "The variant field determines the layout of the UUID. That is, the interpretation of all other bits in the UUID depends on the setting of the bits in the variant field. As such, it could more accurately be called a type field; we retain the original term for compatibility. The variant field consists of a variable number of the most significant bits of octet 8 of the UUID.",
      "ja": "バリアントフィールドは、UUIDのレイアウトを決定します。つまり、UUIDの他のすべてのビットの解釈は、バリアントフィールドのビットの設定に依存します。そのため、より正確にタイプフィールドと呼ぶことができます。互換性のために元の用語を保持します。バリアントフィールドは、UUIDのオクテット8の可変ビットの最上位ビットで構成されます。"
    },
    {
      "indent": 3,
      "text": "The following table lists the contents of the variant field, where the letter \"x\" indicates a \"don't-care\" value.",
      "ja": "次の表は、バリアントフィールドの内容を示しています。文字「x」は「ドントケア」の値を示しています。"
    },
    {
      "indent": 3,
      "text": "Msb0 Msb1 Msb2 Description",
      "ja": "Msb0 Msb1 Msb2説明"
    },
    {
      "indent": 4,
      "text": "0 x x Reserved, NCS backward compatibility.",
      "ja": "0 x x予約済み、NCS下位互換性。"
    },
    {
      "indent": 4,
      "text": "1 0 x The variant specified in this document.",
      "ja": "1 0 xこのドキュメントで指定されているバリアント。"
    },
    {
      "indent": 4,
      "text": "1 1 0 Reserved, Microsoft Corporation backward compatibility",
      "ja": "1 1 0予約済み、Microsoft Corporationの下位互換性"
    },
    {
      "indent": 4,
      "text": "1 1 1 Reserved for future definition.",
      "ja": "1 1 1将来の定義のために予約されています。"
    },
    {
      "indent": 3,
      "text": "Interoperability, in any form, with variants other than the one defined here is not guaranteed, and is not likely to be an issue in practice.",
      "ja": "ここで定義されているもの以外のバリアントとの相互運用性は、保証されておらず、実際に問題になることはほとんどありません。"
    },
    {
      "indent": 0,
      "text": "4.1.2. Layout and Byte Order",
      "section_title": true,
      "ja": "4.1.2. レイアウトとバイト順"
    },
    {
      "indent": 3,
      "text": "To minimize confusion about bit assignments within octets, the UUID record definition is defined only in terms of fields that are integral numbers of octets. The fields are presented with the most significant one first.",
      "ja": "オクテット内のビット割り当てに関する混乱を最小限に抑えるため、UUIDレコード定義は、オクテットの整数であるフィールドに関してのみ定義されます。フィールドには、最も重要なフィールドが最初に表示されます。"
    },
    {
      "indent": 3,
      "text": "Field Data Type Octet Note #",
      "ja": "フィールドデータタイプオクテットノート＃"
    },
    {
      "indent": 3,
      "text": "time_low unsigned 32 0-3 The low field of the bit integer timestamp",
      "ja": "time_low unsigned 32 0-3ビット整数タイムスタンプの低フィールド"
    },
    {
      "indent": 3,
      "text": "time_mid unsigned 16 4-5 The middle field of the bit integer timestamp",
      "ja": "time_mid unsigned 16 4-5ビット整数タイムスタンプの中央フィールド"
    },
    {
      "indent": 3,
      "text": "time_hi_and_version unsigned 16 6-7 The high field of the bit integer timestamp multiplexed with the version number",
      "ja": "time_hi_and_version unsigned 16 6-7バージョン番号と多重化されたビット整数タイムスタンプの高フィールド"
    },
    {
      "indent": 3,
      "text": "clock_seq_hi_and_rese unsigned 8 8 The high field of the rved bit integer clock sequence multiplexed with the variant",
      "ja": "clock_seq_hi_and_rese unsigned 8 8バリアントと多重化された可変ビット整数クロックシーケンスの高フィールド"
    },
    {
      "indent": 3,
      "text": "clock_seq_low unsigned 8 9 The low field of the bit integer clock sequence",
      "ja": "clock_seq_low unsigned 8 9ビット整数クロックシーケンスの低フィールド"
    },
    {
      "indent": 3,
      "text": "node unsigned 48 10-15 The spatially unique bit integer node identifier",
      "ja": "node unsigned 48 10-15空間的に一意のビット整数ノード識別子"
    },
    {
      "indent": 3,
      "text": "In the absence of explicit application or presentation protocol specification to the contrary, a UUID is encoded as a 128-bit object, as follows:",
      "ja": "それとは逆に、明示的なアプリケーションまたはプレゼンテーションプロトコルの仕様がない場合、UUIDは次のように128ビットオブジェクトとしてエンコードされます。"
    },
    {
      "indent": 3,
      "text": "The fields are encoded as 16 octets, with the sizes and order of the fields defined above, and with each field encoded with the Most Significant Byte first (known as network byte order). Note that the field names, particularly for multiplexed fields, follow historical practice.",
      "ja": "フィールドは16オクテットとしてエンコードされ、サイズとフィールドの順序は上記で定義され、各フィールドは最初に最上位バイト（ネットワークバイトオーダーと呼ばれる）でエンコードされます。特に多重化されたフィールドのフィールド名は、歴史的な慣例に従っていることに注意してください。"
    },
    {
      "indent": 3,
      "text": "0                   1                   2                   3\n 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                          time_low                             |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|       time_mid                |         time_hi_and_version   |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|clk_seq_hi_res |  clk_seq_low  |         node (0-1)            |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                         node (2-5)                            |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "4.1.3. Version",
      "section_title": true,
      "ja": "4.1.3. バージョン"
    },
    {
      "indent": 3,
      "text": "The version number is in the most significant 4 bits of the time stamp (bits 4 through 7 of the time_hi_and_version field).",
      "ja": "バージョン番号は、タイムスタンプの最上位4ビット（time_hi_and_versionフィールドのビット4〜7）にあります。"
    },
    {
      "indent": 3,
      "text": "The following table lists the currently-defined versions for this UUID variant.",
      "ja": "次の表に、このUUIDバリアントの現在定義されているバージョンを示します。"
    },
    {
      "indent": 3,
      "text": "Msb0 Msb1 Msb2 Msb3 Version Description",
      "ja": "Msb0 Msb1 Msb2 Msb3バージョン説明"
    },
    {
      "indent": 4,
      "text": "0 0 0 1 1 The time-based version specified in this document.",
      "ja": "0 0 0 1 1このドキュメントで指定されている時間ベースのバージョン。"
    },
    {
      "indent": 4,
      "text": "0 0 1 0 2 DCE Security version, with embedded POSIX UIDs.",
      "ja": "0 0 1 0 2 POSIX UIDが埋め込まれたDCEセキュリティバージョン。"
    },
    {
      "indent": 4,
      "text": "0 0 1 1 3 The name-based version specified in this document that uses MD5 hashing.",
      "ja": "0 0 1 1 3このドキュメントで指定されている、MD5ハッシュを使用する名前ベースのバージョン。"
    },
    {
      "indent": 4,
      "text": "0 1 0 0 4 The randomly or pseudo-randomly generated version specified in this document.",
      "ja": "0 1 0 0 4このドキュメントで指定されているランダムまたは疑似ランダムに生成されたバージョン。"
    },
    {
      "indent": 4,
      "text": "0 1 0 1 5 The name-based version specified in this document that uses SHA-1 hashing.",
      "ja": "0 1 0 1 5このドキュメントで指定されている、SHA-1ハッシュを使用する名前ベースのバージョン。"
    },
    {
      "indent": 3,
      "text": "The version is more accurately a sub-type; again, we retain the term for compatibility.",
      "ja": "バージョンはより正確にはサブタイプです。繰り返しになりますが、互換性の用語はそのまま残しています。"
    },
    {
      "indent": 0,
      "text": "4.1.4. Timestamp",
      "section_title": true,
      "ja": "4.1.4. タイムスタンプ"
    },
    {
      "indent": 3,
      "text": "The timestamp is a 60-bit value. For UUID version 1, this is represented by Coordinated Universal Time (UTC) as a count of 100- nanosecond intervals since 00:00:00.00, 15 October 1582 (the date of Gregorian reform to the Christian calendar).",
      "ja": "タイムスタンプは60ビット値です。 UUIDバージョン1の場合、これは協定世界時（UTC）によって、1582年10月15日の00：00：00.00（キリスト教暦へのグレゴリオ暦の改定の日付）以降の100ナノ秒間隔のカウントとして表されます。"
    },
    {
      "indent": 3,
      "text": "For systems that do not have UTC available, but do have the local time, they may use that instead of UTC, as long as they do so consistently throughout the system. However, this is not recommended since generating the UTC from local time only needs a time zone offset.",
      "ja": "UTCは利用できないが現地時間はあるシステムの場合、システム全体で一貫して使用されている限り、UTCの代わりにそれを使用できます。ただし、現地時間からUTCを生成するのに必要なのはタイムゾーンオフセットだけなので、これはお勧めできません。"
    },
    {
      "indent": 3,
      "text": "For UUID version 3 or 5, the timestamp is a 60-bit value constructed from a name as described in Section 4.3.",
      "ja": "UUIDバージョン3または5の場合、タイムスタンプは、セクション4.3で説明されている名前から構成される60ビット値です。"
    },
    {
      "indent": 3,
      "text": "For UUID version 4, the timestamp is a randomly or pseudo-randomly generated 60-bit value, as described in Section 4.4.",
      "ja": "UUIDバージョン4の場合、タイムスタンプは、セクション4.4で説明されているように、ランダムまたは疑似ランダムに生成された60ビット値です。"
    },
    {
      "indent": 0,
      "text": "4.1.5. Clock Sequence",
      "section_title": true,
      "ja": "4.1.5. クロックシーケンス"
    },
    {
      "indent": 3,
      "text": "For UUID version 1, the clock sequence is used to help avoid duplicates that could arise when the clock is set backwards in time or if the node ID changes.",
      "ja": "UUIDバージョン1の場合、クロックシーケンスは、クロックが時間的に逆に設定されている場合、またはノードIDが変更された場合に発生する可能性のある重複を回避するために使用されます。"
    },
    {
      "indent": 3,
      "text": "If the clock is set backwards, or might have been set backwards (e.g., while the system was powered off), and the UUID generator can not be sure that no UUIDs were generated with timestamps larger than the value to which the clock was set, then the clock sequence has to be changed. If the previous value of the clock sequence is known, it can just be incremented; otherwise it should be set to a random or high-quality pseudo-random value.",
      "ja": "クロックが逆に設定されている場合、または逆に設定されている可能性がある場合（システムの電源がオフになっている場合など）、UUIDジェネレーターは、クロックが設定された値より大きいタイムスタンプを持つUUIDが生成されなかったことを確認できません。次に、クロックシーケンスを変更する必要があります。クロックシーケンスの以前の値がわかっている場合は、インクリメントできます。それ以外の場合は、ランダムまたは高品質の疑似ランダム値に設定する必要があります。"
    },
    {
      "indent": 3,
      "text": "Similarly, if the node ID changes (e.g., because a network card has been moved between machines), setting the clock sequence to a random number minimizes the probability of a duplicate due to slight differences in the clock settings of the machines. If the value of clock sequence associated with the changed node ID were known, then the clock sequence could just be incremented, but that is unlikely.",
      "ja": "同様に、ノードIDが変更された場合（たとえば、ネットワークカードがマシン間で移動されたため）、クロックシーケンスを乱数に設定すると、マシンのクロック設定のわずかな違いによる重複の可能性が最小限に抑えられます。変更されたノードIDに関連付けられたクロックシーケンスの値がわかっている場合、クロックシーケンスはインクリメントされるだけですが、それはありそうもありません。"
    },
    {
      "indent": 3,
      "text": "The clock sequence MUST be originally (i.e., once in the lifetime of a system) initialized to a random number to minimize the correlation across systems. This provides maximum protection against node identifiers that may move or switch from system to system rapidly. The initial value MUST NOT be correlated to the node identifier.",
      "ja": "クロックシーケンスは、システム全体の相関を最小限に抑えるために、最初に（つまり、システムの存続期間に1回）乱数に初期化する必要があります。これにより、システムからシステムに急速に移動または切り替わる可能性のあるノード識別子に対する最大の保護が提供されます。初期値はノード識別子と相関してはいけません。"
    },
    {
      "indent": 3,
      "text": "For UUID version 3 or 5, the clock sequence is a 14-bit value constructed from a name as described in Section 4.3.",
      "ja": "UUIDバージョン3または5の場合、クロックシーケンスは、セクション4.3で説明されている名前から構築された14ビット値です。"
    },
    {
      "indent": 3,
      "text": "For UUID version 4, clock sequence is a randomly or pseudo-randomly generated 14-bit value as described in Section 4.4.",
      "ja": "UUIDバージョン4の場合、4.4で説明されているように、クロックシーケンスはランダムまたは擬似ランダムに生成された14ビット値です。"
    },
    {
      "indent": 0,
      "text": "4.1.6. Node",
      "section_title": true,
      "ja": "4.1.6. ので"
    },
    {
      "indent": 3,
      "text": "For UUID version 1, the node field consists of an IEEE 802 MAC address, usually the host address. For systems with multiple IEEE 802 addresses, any available one can be used. The lowest addressed octet (octet number 10) contains the global/local bit and the unicast/multicast bit, and is the first octet of the address transmitted on an 802.3 LAN.",
      "ja": "UUIDバージョン1の場合、ノードフィールドはIEEE 802 MACアドレス、通常はホストアドレスで構成されます。複数のIEEE 802アドレスを持つシステムの場合、使用可能なアドレスを使用できます。最も低いアドレス指定オクテット（オクテット番号10）には、グローバル/ローカルビットとユニキャスト/マルチキャストビットが含まれており、802.3 LANで送信されるアドレスの最初のオクテットです。"
    },
    {
      "indent": 3,
      "text": "For systems with no IEEE address, a randomly or pseudo-randomly generated value may be used; see Section 4.5. The multicast bit must be set in such addresses, in order that they will never conflict with addresses obtained from network cards.",
      "ja": "IEEEアドレスを持たないシステムの場合、ランダムまたは擬似ランダムに生成された値を使用できます。セクション4.5を参照してください。マルチキャストビットは、ネットワークカードから取得したアドレスと競合しないように、そのようなアドレスに設定する必要があります。"
    },
    {
      "indent": 3,
      "text": "For UUID version 3 or 5, the node field is a 48-bit value constructed from a name as described in Section 4.3.",
      "ja": "UUIDバージョン3または5の場合、ノードフィールドは、セクション4.3で説明されている名前から構築された48ビット値です。"
    },
    {
      "indent": 3,
      "text": "For UUID version 4, the node field is a randomly or pseudo-randomly generated 48-bit value as described in Section 4.4.",
      "ja": "UUIDバージョン4の場合、ノードフィールドは、セクション4.4で説明されているように、ランダムまたは疑似ランダムに生成された48ビット値です。"
    },
    {
      "indent": 0,
      "text": "4.1.7. Nil UUID",
      "section_title": true,
      "ja": "4.1.7. なしUUID"
    },
    {
      "indent": 3,
      "text": "The nil UUID is special form of UUID that is specified to have all 128 bits set to zero.",
      "ja": "nil UUIDは、128ビットすべてをゼロに設定するように指定されたUUIDの特殊な形式です。"
    },
    {
      "indent": 0,
      "text": "4.2. Algorithms for Creating a Time-Based UUID",
      "section_title": true,
      "ja": "4.2. 時間ベースのUUIDを作成するためのアルゴリズム"
    },
    {
      "indent": 3,
      "text": "Various aspects of the algorithm for creating a version 1 UUID are discussed in the following sections.",
      "ja": "以下のセクションでは、バージョン1 UUIDを作成するためのアルゴリズムのさまざまな側面について説明します。"
    },
    {
      "indent": 0,
      "text": "4.2.1. Basic Algorithm",
      "section_title": true,
      "ja": "4.2.1. 基本的なアルゴリズム"
    },
    {
      "indent": 3,
      "text": "The following algorithm is simple, correct, and inefficient:",
      "ja": "次のアルゴリズムは単純で正確で非効率的です。"
    },
    {
      "indent": 3,
      "text": "o Obtain a system-wide global lock",
      "ja": "o システム全体のグローバルロックを取得する"
    },
    {
      "indent": 3,
      "text": "o From a system-wide shared stable store (e.g., a file), read the UUID generator state: the values of the timestamp, clock sequence, and node ID used to generate the last UUID.",
      "ja": "o システム全体の共有安定ストア（ファイルなど）から、UUIDジェネレーターの状態（タイムスタンプの値、クロックシーケンス、最後のUUIDの生成に使用されたノードID）を読み取ります。"
    },
    {
      "indent": 3,
      "text": "o Get the current time as a 60-bit count of 100-nanosecond intervals since 00:00:00.00, 15 October 1582.",
      "ja": "o 現在の時刻を、1582年10月15日の00：00：00.00以降の100ナノ秒間隔の60ビットカウントとして取得します。"
    },
    {
      "indent": 3,
      "text": "o Get the current node ID.",
      "ja": "o 現在のノードIDを取得します。"
    },
    {
      "indent": 3,
      "text": "o If the state was unavailable (e.g., non-existent or corrupted), or the saved node ID is different than the current node ID, generate a random clock sequence value.",
      "ja": "o 状態が利用できない（存在しない、破損しているなど）か、保存されたノードIDが現在のノードIDと異なる場合は、ランダムなクロックシーケンス値を生成します。"
    },
    {
      "indent": 3,
      "text": "o If the state was available, but the saved timestamp is later than the current timestamp, increment the clock sequence value.",
      "ja": "o 状態は利用可能であるが、保存されたタイムスタンプが現在のタイムスタンプよりも遅い場合は、クロックシーケンス値をインクリメントします。"
    },
    {
      "indent": 3,
      "text": "o Save the state (current timestamp, clock sequence, and node ID) back to the stable store.",
      "ja": "o 状態（現在のタイムスタンプ、クロックシーケンス、ノードID）を安定したストアに保存します。"
    },
    {
      "indent": 3,
      "text": "o Release the global lock.",
      "ja": "o グローバルロックを解放します。"
    },
    {
      "indent": 3,
      "text": "o Format a UUID from the current timestamp, clock sequence, and node ID values according to the steps in Section 4.2.2.",
      "ja": "o セクション4.2.2の手順に従って、現在のタイムスタンプ、クロックシーケンス、ノードID値からUUIDをフォーマットします。"
    },
    {
      "indent": 3,
      "text": "If UUIDs do not need to be frequently generated, the above algorithm may be perfectly adequate. For higher performance requirements, however, issues with the basic algorithm include:",
      "ja": "UUIDを頻繁に生成する必要がない場合は、上記のアルゴリズムで十分です。ただし、より高いパフォーマンス要件の場合、基本的なアルゴリズムの問​​題には次のものがあります。"
    },
    {
      "indent": 3,
      "text": "o Reading the state from stable storage each time is inefficient.",
      "ja": "o 安定したストレージから状態を毎回読み取るのは非効率的です。"
    },
    {
      "indent": 3,
      "text": "o The resolution of the system clock may not be 100-nanoseconds.",
      "ja": "o システムクロックの解像度は100ナノ秒ではない場合があります。"
    },
    {
      "indent": 3,
      "text": "o Writing the state to stable storage each time is inefficient.",
      "ja": "o 状態を安定したストレージに毎回書き込むのは非効率的です。"
    },
    {
      "indent": 3,
      "text": "o Sharing the state across process boundaries may be inefficient.",
      "ja": "o プロセスの境界を越えて状態を共有すると、非効率になる場合があります。"
    },
    {
      "indent": 3,
      "text": "Each of these issues can be addressed in a modular fashion by local improvements in the functions that read and write the state and read the clock. We address each of them in turn in the following sections.",
      "ja": "これらの各問題は、状態の読み取りと書き込み、およびクロックの読み取りを行う機能をローカルで改善することにより、モジュール方式で対処できます。次のセクションでは、それぞれについて順に説明します。"
    },
    {
      "indent": 0,
      "text": "4.2.1.1. Reading Stable Storage",
      "section_title": true,
      "ja": "4.2.1.1. 安定したストレージの読み取り"
    },
    {
      "indent": 3,
      "text": "The state only needs to be read from stable storage once at boot time, if it is read into a system-wide shared volatile store (and updated whenever the stable store is updated).",
      "ja": "状態がシステム全体の共有揮発性ストアに読み込まれる場合（および安定ストアが更新されるたびに更新される場合）、状態は起動時に安定ストレージから一度だけ読み取る必要があります。"
    },
    {
      "indent": 3,
      "text": "If an implementation does not have any stable store available, then it can always say that the values were unavailable. This is the least desirable implementation because it will increase the frequency of creation of new clock sequence numbers, which increases the probability of duplicates.",
      "ja": "実装に利用可能な安定したストアがない場合、常に値が利用できなかったと言うことができます。新しいクロックシーケンス番号が作成される頻度が高くなり、重複の可能性が高くなるため、これは最も望ましくない実装です。"
    },
    {
      "indent": 3,
      "text": "If the node ID can never change (e.g., the net card is inseparable from the system), or if any change also reinitializes the clock sequence to a random value, then instead of keeping it in stable store, the current node ID may be returned.",
      "ja": "ノードIDが変更できない場合（たとえば、ネットカードがシステムから切り離せない場合）、または変更によってクロックシーケンスがランダムな値に再初期化される場合は、安定したストアに保持する代わりに、現在のノードIDが返されることがあります。 。"
    },
    {
      "indent": 0,
      "text": "4.2.1.2. System Clock Resolution",
      "section_title": true,
      "ja": "4.2.1.2. システムクロックの解像度"
    },
    {
      "indent": 3,
      "text": "The timestamp is generated from the system time, whose resolution may be less than the resolution of the UUID timestamp.",
      "ja": "タイムスタンプはシステム時刻から生成され、その解像度はUUIDタイムスタンプの解像度よりも低い場合があります。"
    },
    {
      "indent": 3,
      "text": "If UUIDs do not need to be frequently generated, the timestamp can simply be the system time multiplied by the number of 100-nanosecond intervals per system time interval.",
      "ja": "UUIDを頻繁に生成する必要がない場合、タイムスタンプは、システム時間にシステム時間間隔あたりの100ナノ秒間隔の数を掛けたものにすることができます。"
    },
    {
      "indent": 3,
      "text": "If a system overruns the generator by requesting too many UUIDs within a single system time interval, the UUID service MUST either return an error, or stall the UUID generator until the system clock catches up.",
      "ja": "システムが単一のシステム時間間隔内に要求するUUIDが多すぎるためにジェネレーターがオーバーランする場合、UUIDサービスはエラーを返すか、システムクロックが追いつくまでUUIDジェネレーターを停止させる必要があります。"
    },
    {
      "indent": 3,
      "text": "A high resolution timestamp can be simulated by keeping a count of the number of UUIDs that have been generated with the same value of the system time, and using it to construct the low order bits of the timestamp. The count will range between zero and the number of 100-nanosecond intervals per system time interval.",
      "ja": "システム時刻と同じ値で生成されたUUIDの数をカウントし、それを使用してタイムスタンプの下位ビットを構築することにより、高解像度のタイムスタンプをシミュレートできます。カウントの範囲は、ゼロからシステム時間間隔ごとの100ナノ秒間隔の数までです。"
    },
    {
      "indent": 3,
      "text": "Note: If the processors overrun the UUID generation frequently, additional node identifiers can be allocated to the system, which will permit higher speed allocation by making multiple UUIDs potentially available for each time stamp value.",
      "ja": "注：プロセッサーがUUID生成を頻繁にオーバーランする場合、追加のノードIDをシステムに割り当てることができます。これにより、各タイムスタンプ値に複数のUUIDを使用できるようになるため、より高速な割り当てが可能になります。"
    },
    {
      "indent": 0,
      "text": "4.2.1.3. Writing Stable Storage",
      "section_title": true,
      "ja": "4.2.1.3. 安定したストレージの作成"
    },
    {
      "indent": 0,
      "text": " The state does not always need to be written to stable store every time a UUID is generated. The timestamp in the stable store can be periodically set to a value larger than any yet used in a UUID. As long as the generated UUIDs have timestamps less than that value, and the clock sequence and node ID remain unchanged, only the shared volatile copy of the state needs to be updated. Furthermore, if the timestamp value in stable store is in the future by less than the typical time it takes the system to reboot, a crash will not cause a reinitialization of the clock sequence.",
      "ja": "UUIDが生成されるたびに、状態を常に安定したストアに書き込む必要はありません。安定したストアのタイムスタンプは、UUIDでまだ使用されていない値よりも大きい値に定期的に設定できます。生成されたUUIDのタイムスタンプがその値よりも小さく、クロックシーケンスとノードIDが変更されていない限り、状態の共有揮発性コピーのみを更新する必要があります。さらに、安定したストアのタイムスタンプ値が将来、システムの再起動にかかる通常の時間より短い場合、クラッシュによってクロックシーケンスが再初期化されることはありません。"
    },
    {
      "indent": 0,
      "text": "4.2.1.4. Sharing State Across Processes",
      "section_title": true,
      "ja": "4.2.1.4. プロセス間での状態の共有"
    },
    {
      "indent": 3,
      "text": "If it is too expensive to access shared state each time a UUID is generated, then the system-wide generator can be implemented to allocate a block of time stamps each time it is called; a per-process generator can allocate from that block until it is exhausted.",
      "ja": "UUIDが生成されるたびに共有状態にアクセスするにはコストがかかりすぎる場合は、システム全体のジェネレーターを実装して、呼び出されるたびにタイムスタンプのブロックを割り当てることができます。プロセスごとのジェネレータは、そのブロックが使い尽くされるまでそのブロックから割り当てることができます。"
    },
    {
      "indent": 0,
      "text": "4.2.2. Generation Details",
      "section_title": true,
      "ja": "4.2.2. 世代の詳細"
    },
    {
      "indent": 3,
      "text": "Version 1 UUIDs are generated according to the following algorithm:",
      "ja": "バージョン1のUUIDは、次のアルゴリズムに従って生成されます。"
    },
    {
      "indent": 3,
      "text": "o Determine the values for the UTC-based timestamp and clock sequence to be used in the UUID, as described in Section 4.2.1.",
      "ja": "o セクション4.2.1の説明に従って、UUIDで使用されるUTCベースのタイムスタンプとクロックシーケンスの値を決定します。"
    },
    {
      "indent": 3,
      "text": "o For the purposes of this algorithm, consider the timestamp to be a 60-bit unsigned integer and the clock sequence to be a 14-bit unsigned integer. Sequentially number the bits in a field, starting with zero for the least significant bit.",
      "ja": "o このアルゴリズムでは、タイムスタンプを60ビットの符号なし整数、クロックシーケンスを14ビットの符号なし整数と見なします。最下位ビットのゼロから始めて、フィールドのビットに順番に番号を付けます。"
    },
    {
      "indent": 3,
      "text": "o Set the time_low field equal to the least significant 32 bits (bits zero through 31) of the timestamp in the same order of significance.",
      "ja": "o time_lowフィールドを、タイムスタンプの最下位32ビット（ビット0から31）と同じ順序で同じ順序で設定します。"
    },
    {
      "indent": 3,
      "text": "o Set the time_mid field equal to bits 32 through 47 from the timestamp in the same order of significance.",
      "ja": "o 同じ重要度の順序でタイムスタンプからビット32〜47に等しいtime_midフィールドを設定します。"
    },
    {
      "indent": 3,
      "text": "o Set the 12 least significant bits (bits zero through 11) of the time_hi_and_version field equal to bits 48 through 59 from the timestamp in the same order of significance.",
      "ja": "o time_hi_and_versionフィールドの12の最下位ビット（ビット0〜11）を、タイムスタンプのビット48〜59と同じ順序で、重要度の同じ順に設定します。"
    },
    {
      "indent": 3,
      "text": "o Set the four most significant bits (bits 12 through 15) of the time_hi_and_version field to the 4-bit version number corresponding to the UUID version being created, as shown in the table above.",
      "ja": "o 上記の表に示すように、time_hi_and_versionフィールドの最上位4ビット（ビット12〜15）を、作成するUUIDバージョンに対応する4ビットバージョン番号に設定します。"
    },
    {
      "indent": 3,
      "text": "o Set the clock_seq_low field to the eight least significant bits (bits zero through 7) of the clock sequence in the same order of significance.",
      "ja": "o clock_seq_lowフィールドを、クロックシーケンスの最下位8ビット（ビット0〜7）に、同じ重要度の順序で設定します。"
    },
    {
      "indent": 3,
      "text": "o Set the 6 least significant bits (bits zero through 5) of the clock_seq_hi_and_reserved field to the 6 most significant bits (bits 8 through 13) of the clock sequence in the same order of significance.",
      "ja": "o clock_seq_hi_and_reservedフィールドの最下位6ビット（ビット0〜5）を、クロックシーケンスの最上位6ビット（ビット8〜13）と同じ順序で設定します。"
    },
    {
      "indent": 3,
      "text": "o Set the two most significant bits (bits 6 and 7) of the clock_seq_hi_and_reserved to zero and one, respectively.",
      "ja": "o clock_seq_hi_and_reservedの最上位2ビット（ビット6と7）をそれぞれ0と1に設定します。"
    },
    {
      "indent": 3,
      "text": "o Set the node field to the 48-bit IEEE address in the same order of significance as the address.",
      "ja": "o ノードフィールドを、アドレスと同じ順序で48ビットIEEEアドレスに設定します。"
    },
    {
      "indent": 0,
      "text": "4.3. Algorithm for Creating a Name-Based UUID",
      "section_title": true,
      "ja": "4.3. 名前ベースのUUIDを作成するためのアルゴリズム"
    },
    {
      "indent": 3,
      "text": "The version 3 or 5 UUID is meant for generating UUIDs from \"names\" that are drawn from, and unique within, some \"name space\". The concept of name and name space should be broadly construed, and not limited to textual names. For example, some name spaces are the domain name system, URLs, ISO Object IDs (OIDs), X.500 Distinguished Names (DNs), and reserved words in a programming language. The mechanisms or conventions used for allocating names and ensuring their uniqueness within their name spaces are beyond the scope of this specification.",
      "ja": "バージョン3または5のUUIDは、「名前空間」から抽出され、その中で一意である「名前」からUUIDを生成するためのものです。名前と名前空間の概念は広く解釈されるべきであり、テキストの名前に限定されません。たとえば、一部の名前空間は、ドメインネームシステム、URL、ISOオブジェクトID（OID）、X.500識別名（DN）、およびプログラミング言語の予約語です。名前の割り当てと名前空間内での一意性の確保に使用されるメカニズムまたは規則は、この仕様の範囲を超えています。"
    },
    {
      "indent": 3,
      "text": "The requirements for these types of UUIDs are as follows:",
      "ja": "これらのタイプのUUIDの要件は次のとおりです。"
    },
    {
      "indent": 3,
      "text": "o The UUIDs generated at different times from the same name in the same namespace MUST be equal.",
      "ja": "o 同じ名前空間の同じ名前から異なる時間に生成されたUUIDは同じでなければなりません。"
    },
    {
      "indent": 3,
      "text": "o The UUIDs generated from two different names in the same namespace should be different (with very high probability).",
      "ja": "o 同じ名前空間内の2つの異なる名前から生成されたUUIDは、異なる可能性があります（非常に高い確率で）。"
    },
    {
      "indent": 3,
      "text": "o The UUIDs generated from the same name in two different namespaces should be different with (very high probability).",
      "ja": "o 2つの異なる名前空間で同じ名前から生成されたUUIDは、異なる可能性があります（非常に高い確率）。"
    },
    {
      "indent": 3,
      "text": "o If two UUIDs that were generated from names are equal, then they were generated from the same name in the same namespace (with very high probability).",
      "ja": "o 名前から生成された2つのUUIDが等しい場合、それらは同じ名前空間の同じ名前から生成されました（非常に高い確率で）。"
    },
    {
      "indent": 3,
      "text": "The algorithm for generating a UUID from a name and a name space are as follows:",
      "ja": "名前と名前空間からUUIDを生成するアルゴリズムは次のとおりです。"
    },
    {
      "indent": 3,
      "text": "o Allocate a UUID to use as a \"name space ID\" for all UUIDs generated from names in that name space; see Appendix C for some pre-defined values.",
      "ja": "o その名前空間の名前から生成されたすべてのUUIDの「名前空間ID」として使用するUUIDを割り当てます。定義済みの値については、付録Cを参照してください。"
    },
    {
      "indent": 3,
      "text": "o Choose either MD5 [4] or SHA-1 [8] as the hash algorithm; If backward compatibility is not an issue, SHA-1 is preferred.",
      "ja": "o ハッシュアルゴリズムとしてMD5 [4]またはSHA-1 [8]を選択します。下位互換性が問題でない場合は、SHA-1が推奨されます。"
    },
    {
      "indent": 3,
      "text": "o Convert the name to a canonical sequence of octets (as defined by the standards or conventions of its name space); put the name space ID in network byte order.",
      "ja": "o 名前をオクテットの標準的なシーケンスに変換します（その名前空間の標準または規則で定義されています）。名前空間IDをネットワークのバイト順に並べます。"
    },
    {
      "indent": 3,
      "text": "o Compute the hash of the name space ID concatenated with the name.",
      "ja": "o 名前と連結された名前空間IDのハッシュを計算します。"
    },
    {
      "indent": 3,
      "text": "o Set octets zero through 3 of the time_low field to octets zero through 3 of the hash.",
      "ja": "o time_lowフィールドのオクテット0〜3をハッシュのオクテット0〜3に設定します。"
    },
    {
      "indent": 3,
      "text": "o Set octets zero and one of the time_mid field to octets 4 and 5 of the hash.",
      "ja": "o オクテット0とtime_midフィールドの1つをハッシュのオクテット4および5に設定します。"
    },
    {
      "indent": 3,
      "text": "o Set octets zero and one of the time_hi_and_version field to octets 6 and 7 of the hash.",
      "ja": "o オクテット0およびtime_hi_and_versionフィールドの1つをハッシュのオクテット6および7に設定します。"
    },
    {
      "indent": 3,
      "text": "o Set the four most significant bits (bits 12 through 15) of the time_hi_and_version field to the appropriate 4-bit version number from Section 4.1.3.",
      "ja": "o time_hi_and_versionフィールドの最上位4ビット（ビット12〜15）を、セクション4.1.3の適切な4ビットバージョン番号に設定します。"
    },
    {
      "indent": 3,
      "text": "o Set the clock_seq_hi_and_reserved field to octet 8 of the hash.",
      "ja": "o clock_seq_hi_and_reservedフィールドをハッシュのオクテット8に設定します。"
    },
    {
      "indent": 3,
      "text": "o Set the two most significant bits (bits 6 and 7) of the clock_seq_hi_and_reserved to zero and one, respectively.",
      "ja": "o clock_seq_hi_and_reservedの最上位2ビット（ビット6と7）をそれぞれ0と1に設定します。"
    },
    {
      "indent": 3,
      "text": "o Set the clock_seq_low field to octet 9 of the hash.",
      "ja": "o clock_seq_lowフィールドをハッシュのオクテット9に設定します。"
    },
    {
      "indent": 3,
      "text": "o Set octets zero through five of the node field to octets 10 through 15 of the hash.",
      "ja": "o ノードフィールドのオクテット0〜5をハッシュのオクテット10〜15に設定します。"
    },
    {
      "indent": 3,
      "text": "o Convert the resulting UUID to local byte order.",
      "ja": "o 結果のUUIDをローカルバイトオーダーに変換します。"
    },
    {
      "indent": 0,
      "text": "4.4. Algorithms for Creating a UUID from Truly Random or Pseudo-Random Numbers",
      "ja": "4.4. 真の乱数または疑似乱数からUUIDを作成するためのアルゴリズム"
    },
    {
      "indent": 3,
      "text": "The version 4 UUID is meant for generating UUIDs from truly-random or pseudo-random numbers.",
      "ja": "バージョン4のUUIDは、真に乱数または疑似乱数からUUIDを生成するためのものです。"
    },
    {
      "indent": 3,
      "text": "The algorithm is as follows:",
      "ja": "アルゴリズムは次のとおりです。"
    },
    {
      "indent": 3,
      "text": "o Set the two most significant bits (bits 6 and 7) of the clock_seq_hi_and_reserved to zero and one, respectively.",
      "ja": "o clock_seq_hi_and_reservedの最上位2ビット（ビット6と7）をそれぞれ0と1に設定します。"
    },
    {
      "indent": 3,
      "text": "o Set the four most significant bits (bits 12 through 15) of the time_hi_and_version field to the 4-bit version number from Section 4.1.3.",
      "ja": "o time_hi_and_versionフィールドの最上位4ビット（ビット12〜15）を、セクション4.1.3の4ビットバージョン番号に設定します。"
    },
    {
      "indent": 3,
      "text": "o Set all the other bits to randomly (or pseudo-randomly) chosen values.",
      "ja": "o 他のすべてのビットをランダムに（または疑似ランダムに）選択した値に設定します。"
    },
    {
      "indent": 3,
      "text": "See Section 4.5 for a discussion on random numbers.",
      "ja": "乱数の説明については、セクション4.5を参照してください。"
    },
    {
      "indent": 0,
      "text": "4.5. Node IDs that Do Not Identify the Host",
      "section_title": true,
      "ja": "4.5. ホストを識別しないノードID"
    },
    {
      "indent": 3,
      "text": "This section describes how to generate a version 1 UUID if an IEEE 802 address is not available, or its use is not desired.",
      "ja": "このセクションでは、IEEE 802アドレスが使用できない場合、またはその使用が望ましくない場合に、バージョン1 UUIDを生成する方法について説明します。"
    },
    {
      "indent": 3,
      "text": "One approach is to contact the IEEE and get a separate block of addresses. At the time of writing, the application could be found at <http://standards.ieee.org/regauth/oui/pilot-ind.html>, and the cost was US$550.",
      "ja": "1つのアプローチは、IEEEに連絡して、個別のアドレスブロックを取得することです。執筆時点では、アプリケーションは<http://standards.ieee.org/regauth/oui/pilot-ind.html>にあり、費用は550ドルでした。"
    },
    {
      "indent": 3,
      "text": "A better solution is to obtain a 47-bit cryptographic quality random number and use it as the low 47 bits of the node ID, with the least significant bit of the first octet of the node ID set to one. This bit is the unicast/multicast bit, which will never be set in IEEE 802 addresses obtained from network cards. Hence, there can never be a conflict between UUIDs generated by machines with and without network cards. (Recall that the IEEE 802 spec talks about transmission order, which is the opposite of the in-memory representation that is discussed in this document.)",
      "ja": "より良い解決策は、47ビットの暗号品質の乱数を取得し、それをノードIDの下位47ビットとして使用し、ノードIDの最初のオクテットの最下位ビットを1に設定することです。このビットはユニキャスト/マルチキャストビットであり、ネットワークカードから取得したIEEE 802アドレスでは設定されません。したがって、ネットワークカードがあるマシンとないカードで生成されたUUIDが競合することは決してありません。 （IEEE 802仕様は送信順序について話していることを思い出してください。これは、このドキュメントで説明されているメモリ内表現の反対です。）"
    },
    {
      "indent": 3,
      "text": "For compatibility with earlier specifications, note that this document uses the unicast/multicast bit, instead of the arguably more correct local/global bit.",
      "ja": "以前の仕様との互換性のために、このドキュメントでは、間違いなくより正確なローカル/グローバルビットの代わりに、ユニキャスト/マルチキャストビットを使用していることに注意してください。"
    },
    {
      "indent": 3,
      "text": "Advice on generating cryptographic-quality random numbers can be found in RFC1750 [5].",
      "ja": "暗号品質の乱数の生成に関するアドバイスは、RFC1750 [5]にあります。"
    },
    {
      "indent": 3,
      "text": "In addition, items such as the computer's name and the name of the operating system, while not strictly speaking random, will help differentiate the results from those obtained by other systems.",
      "ja": "さらに、厳密にはランダムではありませんが、コンピューターの名前やオペレーティングシステムの名前などの項目は、他のシステムで得られた結果と区別するのに役立ちます。"
    },
    {
      "indent": 3,
      "text": "The exact algorithm to generate a node ID using these data is system specific, because both the data available and the functions to obtain them are often very system specific. A generic approach, however, is to accumulate as many sources as possible into a buffer, use a message digest such as MD5 [4] or SHA-1 [8], take an arbitrary 6 bytes from the hash value, and set the multicast bit as described above.",
      "ja": "これらのデータを使用してノードIDを生成する正確なアルゴリズムは、システム固有です。これは、利用可能なデータとそれらを取得する関数の両方が非常にシステム固有であることが多いためです。ただし、一般的なアプローチは、できるだけ多くのソースをバッファに蓄積し、MD5 [4]やSHA-1 [8]などのメッセージダイジェストを使用し、ハッシュ値から任意の6バイトを取得して、マルチキャストを設定することです。上記のビット。"
    },
    {
      "indent": 0,
      "text": "5. Community Considerations",
      "section_title": true,
      "ja": "5. コミュニティの考慮事項"
    },
    {
      "indent": 3,
      "text": "The use of UUIDs is extremely pervasive in computing. They comprise the core identifier infrastructure for many operating systems (Microsoft Windows) and applications (the Mozilla browser) and in many cases, become exposed to the Web in many non-standard ways.",
      "ja": "UUIDの使用は、コンピューティングにおいて非常に広まっています。これらは、多くのオペレーティングシステム（Microsoft Windows）およびアプリケーション（Mozillaブラウザ）のコア識別子インフラストラクチャを構成し、多くの場合、非標準的な方法でWebに公開されます。"
    },
    {
      "indent": 3,
      "text": "This specification attempts to standardize that practice as openly as possible and in a way that attempts to benefit the entire Internet.",
      "ja": "この仕様は、その慣行をできるだけオープンに、インターネット全体に利益をもたらすように標準化しようとしています。"
    },
    {
      "indent": 0,
      "text": "6. Security Considerations",
      "section_title": true,
      "ja": "6. セキュリティに関する考慮事項"
    },
    {
      "indent": 3,
      "text": "Do not assume that UUIDs are hard to guess; they should not be used as security capabilities (identifiers whose mere possession grants access), for example. A predictable random number source will exacerbate the situation.",
      "ja": "UUIDが推測しにくいと思い込まないでください。たとえば、セキュリティ機能（単なる所有物がアクセスを許可する識別子）として使用しないでください。予測可能な乱数ソースは状況を悪化させます。"
    },
    {
      "indent": 3,
      "text": "Do not assume that it is easy to determine if a UUID has been slightly transposed in order to redirect a reference to another object. Humans do not have the ability to easily check the integrity of a UUID by simply glancing at it.",
      "ja": "参照を別のオブジェクトにリダイレクトするために、UUIDがわずかに転置されているかどうかを簡単に判断できるとは限りません。人間は、単にそれをちらっと見ただけではUUIDの完全性を簡単にチェックすることができません。"
    },
    {
      "indent": 3,
      "text": "Distributed applications generating UUIDs at a variety of hosts must be willing to rely on the random number source at all hosts. If this is not feasible, the namespace variant should be used.",
      "ja": "さまざまなホストでUUIDを生成する分散アプリケーションは、すべてのホストで乱数ソースに依存する必要があります。これが不可能な場合は、名前空間バリアントを使用する必要があります。"
    },
    {
      "indent": 0,
      "text": "7. Acknowledgments",
      "section_title": true,
      "ja": "7. 謝辞"
    },
    {
      "indent": 3,
      "text": "This document draws heavily on the OSF DCE specification for UUIDs. Ted Ts'o provided helpful comments, especially on the byte ordering section which we mostly plagiarized from a proposed wording he supplied (all errors in that section are our responsibility, however).",
      "ja": "このドキュメントは、UUIDのOSF DCE仕様に重点を置いています。 Ted Ts'oは、彼が提供した提案された表現からほとんど盗用したバイト順序セクションについて、役立つコメントを提供しました（ただし、そのセクションのすべてのエラーは私たちの責任です）。"
    },
    {
      "indent": 3,
      "text": "We are also grateful to the careful reading and bit-twiddling of Ralf S. Engelschall, John Larmouth, and Paul Thorpe. Professor Larmouth was also invaluable in achieving coordination with ISO/IEC.",
      "ja": "ラルフ・S・エンゲルシャル、ジョン・ラーマス、ポール・ソープの注意深い読みといじりにも感謝しています。ラーマス教授はまた、ISO / IECとの調整を達成する上で非常に貴重でした。"
    },
    {
      "indent": 0,
      "text": "8. Normative References",
      "section_title": true,
      "ja": "8. 引用文献"
    },
    {
      "indent": 3,
      "text": "[1] Zahn, L., Dineen, T., and P. Leach, \"Network Computing Architecture\", ISBN 0-13-611674-4, January 1990.",
      "ja": "[1] Zahn、L.、Dineen、T。、およびP. Leach、「Network Computing Architecture」、ISBN 0-13-611674-4、1990年1月。"
    },
    {
      "indent": 3,
      "text": "[2] \"DCE: Remote Procedure Call\", Open Group CAE Specification C309, ISBN 1-85912-041-5, August 1994.",
      "ja": "[2] 「DCE：リモートプロシージャコール」、Open Group CAE仕様C309、ISBN 1-85912-041-5、1994年8月。"
    },
    {
      "indent": 3,
      "text": "[3] ISO/IEC 9834-8:2004 Information Technology, \"Procedures for the operation of OSI Registration Authorities: Generation and registration of Universally Unique Identifiers (UUIDs) and their use as ASN.1 Object Identifier components\" ITU-T Rec. X.667, 2004.",
      "ja": "[3] ISO / IEC 9834-8：2004情報技術、「OSI Registration Authoritiesの運用手順：Universally Unique Identifier（UUID）の生成と登録、およびASN.1 Object Identifierコンポーネントとしての使用」ITU-T Rec。 X.667、2004。"
    },
    {
      "indent": 3,
      "text": "[4] Rivest, R., \"The MD5 Message-Digest Algorithm \", RFC 1321, April 1992.",
      "ja": "[4] Rivest、R。、「MD5メッセージダイジェストアルゴリズム」、RFC 1321、1992年4月。"
    },
    {
      "indent": 3,
      "text": "[5] Eastlake, D., 3rd, Schiller, J., and S. Crocker, \"Randomness Requirements for Security\", BCP 106, RFC 4086, June 2005.",
      "ja": "[5] Eastlake、D.、3rd、Schiller、J.、and S. Crocker、 \"Randomness Requirements for Security\"、BCP 106、RFC 4086、June 2005。"
    },
    {
      "indent": 3,
      "text": "[6] Moats, R., \"URN Syntax\", RFC 2141, May 1997.",
      "ja": "[6] Moats、R。、「URN構文」、RFC 2141、1997年5月。"
    },
    {
      "indent": 3,
      "text": "[7] Crocker, D. and P. Overell, \"Augmented BNF for Syntax Specifications: ABNF\", RFC 2234, November 1997.",
      "ja": "[7] Crocker、D。およびP. Overell、「構文仕様の拡張BNF：ABNF」、RFC 2234、1997年11月。"
    },
    {
      "indent": 3,
      "text": "[8] National Institute of Standards and Technology, \"Secure Hash Standard\", FIPS PUB 180-1, April 1995, <http://www.itl.nist.gov/fipspubs/fip180-1.htm>.",
      "ja": "[8] 国立標準技術研究所、「Secure Hash Standard」、FIPS PUB 180-1、1995年4月、<http://www.itl.nist.gov/fipspubs/fip180-1.htm>。"
    },
    {
      "indent": 0,
      "text": "Appendix A. Appendix A - Sample Implementation",
      "section_title": true,
      "ja": "付録A.付録A-サンプル実装"
    },
    {
      "indent": 3,
      "text": "This implementation consists of 5 files: uuid.h, uuid.c, sysdep.h, sysdep.c and utest.c. The uuid.* files are the system independent implementation of the UUID generation algorithms described above, with all the optimizations described above except efficient state sharing across processes included. The code has been tested on Linux (Red Hat 4.0) with GCC (2.7.2), and Windows NT 4.0 with VC++ 5.0. The code assumes 64-bit integer support, which makes it much clearer.",
      "ja": "この実装は、uuid.h、uuid.c、sysdep.h、sysdep.c、およびutest.cの5つのファイルで構成されています。 uuid。*ファイルは、上記のUUID生成アルゴリズムのシステムに依存しない実装であり、プロセス間の効率的な状態共有を除いて、上記のすべての最適化が含まれています。コードは、GCC（2.7.2）を搭載したLinux（Red Hat 4.0）、およびVC ++ 5.0を搭載したWindows NT 4.0でテストされています。コードは64ビット整数のサポートを想定しているため、より明確になります。"
    },
    {
      "indent": 3,
      "text": "All the following source files should have the following copyright notice included:",
      "ja": "以下のすべてのソースファイルには、次の著作権表示を含める必要があります。"
    },
    {
      "indent": 0,
      "text": "copyrt.h",
      "ja": "copyrt.h"
    },
    {
      "indent": 0,
      "text": "/*\n** Copyright (c) 1990- 1993, 1996 Open Software Foundation, Inc.\n** Copyright (c) 1989 by Hewlett-Packard Company, Palo Alto, Ca. &\n** Digital Equipment Corporation, Maynard, Mass.\n** Copyright (c) 1998 Microsoft.\n** To anyone who acknowledges that this file is provided \"AS IS\"\n** without any express or implied warranty: permission to use, copy,\n** modify, and distribute this file for any purpose is hereby\n** granted without fee, provided that the above copyright notices and\n** this notice appears in all source code copies, and that none of\n** the names of Open Software Foundation, Inc., Hewlett-Packard\n** Company, Microsoft, or Digital Equipment Corporation be used in\n** advertising or publicity pertaining to distribution of the software\n** without specific, written prior permission. Neither Open Software\n** Foundation, Inc., Hewlett-Packard Company, Microsoft, nor Digital\n** Equipment Corporation makes any representations about the\n** suitability of this software for any purpose.\n*/",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "uuid.h",
      "ja": "uuid.h"
    },
    {
      "indent": 0,
      "text": "#include \"copyrt.h\"\n#undef uuid_t\ntypedef struct {\n    unsigned32  time_low;\n    unsigned16  time_mid;\n    unsigned16  time_hi_and_version;\n    unsigned8   clock_seq_hi_and_reserved;\n    unsigned8   clock_seq_low;\n    byte        node[6];\n} uuid_t;",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "/* uuid_create -- generate a UUID */\nint uuid_create(uuid_t * uuid);",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "/* uuid_create_md5_from_name -- create a version 3 (MD5) UUID using a\n   \"name\" from a \"name space\" */\nvoid uuid_create_md5_from_name(\n    uuid_t *uuid,         /* resulting UUID */\n    uuid_t nsid,          /* UUID of the namespace */\n    void *name,           /* the name from which to generate a UUID */\n    int namelen           /* the length of the name */\n);",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "/* uuid_create_sha1_from_name -- create a version 5 (SHA-1) UUID\n   using a \"name\" from a \"name space\" */\nvoid uuid_create_sha1_from_name(",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "    uuid_t *uuid,         /* resulting UUID */\n    uuid_t nsid,          /* UUID of the namespace */\n    void *name,           /* the name from which to generate a UUID */\n    int namelen           /* the length of the name */\n);",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "/* uuid_compare --  Compare two UUID's \"lexically\" and return\n        -1   u1 is lexically before u2\n         0   u1 is equal to u2\n         1   u1 is lexically after u2\n   Note that lexical ordering is not temporal ordering!\n*/\nint uuid_compare(uuid_t *u1, uuid_t *u2);",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "uuid.c",
      "ja": "uuid.c"
    },
    {
      "indent": 0,
      "text": "#include \"copyrt.h\"\n#include <string.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\n#include \"sysdep.h\"\n#include \"uuid.h\"",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "/* various forward declarations */\nstatic int read_state(unsigned16 *clockseq, uuid_time_t *timestamp,\n    uuid_node_t *node);\nstatic void write_state(unsigned16 clockseq, uuid_time_t timestamp,\n    uuid_node_t node);\nstatic void format_uuid_v1(uuid_t *uuid, unsigned16 clockseq,\n    uuid_time_t timestamp, uuid_node_t node);",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "static void format_uuid_v3or5(uuid_t *uuid, unsigned char hash[16],\n    int v);\nstatic void get_current_time(uuid_time_t *timestamp);\nstatic unsigned16 true_random(void);",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "/* uuid_create -- generator a UUID */\nint uuid_create(uuid_t *uuid)\n{\n     uuid_time_t timestamp, last_time;\n     unsigned16 clockseq;\n     uuid_node_t node;\n     uuid_node_t last_node;\n     int f;",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 5,
      "text": "/* acquire system-wide lock so we're alone */\nLOCK;\n/* get time, node ID, saved state from non-volatile storage */\nget_current_time(&timestamp);\nget_ieee_node_identifier(&node);\nf = read_state(&clockseq, &last_time, &last_node);",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 5,
      "text": "/* if no NV state, or if clock went backwards, or node ID\n   changed (e.g., new network card) change clockseq */\nif (!f || memcmp(&node, &last_node, sizeof node))\n    clockseq = true_random();\nelse if (timestamp < last_time)\n    clockseq++;",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 5,
      "text": "/* save the state for next time */\nwrite_state(clockseq, timestamp, node);",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 5,
      "text": "UNLOCK;",
      "ja": "ロック解除;"
    },
    {
      "indent": 0,
      "text": "     /* stuff fields into the UUID */\n     format_uuid_v1(uuid, clockseq, timestamp, node);\n     return 1;\n}",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "/* format_uuid_v1 -- make a UUID from the timestamp, clockseq,\n                     and node ID */\nvoid format_uuid_v1(uuid_t* uuid, unsigned16 clock_seq,\n                    uuid_time_t timestamp, uuid_node_t node)\n{\n    /* Construct a version 1 uuid with the information we've gathered\n       plus a few constants. */\n    uuid->time_low = (unsigned long)(timestamp & 0xFFFFFFFF);\n    uuid->time_mid = (unsigned short)((timestamp >> 32) & 0xFFFF);\n    uuid->time_hi_and_version =",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "        (unsigned short)((timestamp >> 48) & 0x0FFF);\n    uuid->time_hi_and_version |= (1 << 12);\n    uuid->clock_seq_low = clock_seq & 0xFF;\n    uuid->clock_seq_hi_and_reserved = (clock_seq & 0x3F00) >> 8;\n    uuid->clock_seq_hi_and_reserved |= 0x80;\n    memcpy(&uuid->node, &node, sizeof uuid->node);\n}",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "/* data type for UUID generator persistent state */\ntypedef struct {\n    uuid_time_t  ts;       /* saved timestamp */\n    uuid_node_t  node;     /* saved node ID */\n    unsigned16   cs;       /* saved clock sequence */\n} uuid_state;",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "static uuid_state st;",
      "ja": "静的uuid_state st;"
    },
    {
      "indent": 0,
      "text": "/* read_state -- read UUID generator state from non-volatile store */\nint read_state(unsigned16 *clockseq, uuid_time_t *timestamp,\n               uuid_node_t *node)\n{\n    static int inited = 0;\n    FILE *fp;",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "    /* only need to read state once per boot */\n    if (!inited) {\n        fp = fopen(\"state\", \"rb\");\n        if (fp == NULL)\n            return 0;\n        fread(&st, sizeof st, 1, fp);\n        fclose(fp);\n        inited = 1;\n    }\n    *clockseq = st.cs;\n    *timestamp = st.ts;\n    *node = st.node;\n    return 1;\n}",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "/* write_state -- save UUID generator state back to non-volatile\n   storage */\nvoid write_state(unsigned16 clockseq, uuid_time_t timestamp,\n                 uuid_node_t node)\n{\n    static int inited = 0;\n    static uuid_time_t next_save;\n    FILE* fp;",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 4,
      "text": "if (!inited) {\n    next_save = timestamp;\n    inited = 1;\n}",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "    /* always save state to volatile shared state */\n    st.cs = clockseq;\n    st.ts = timestamp;\n    st.node = node;\n    if (timestamp >= next_save) {\n        fp = fopen(\"state\", \"wb\");\n        fwrite(&st, sizeof st, 1, fp);\n        fclose(fp);\n        /* schedule next save for 10 seconds from now */\n        next_save = timestamp + (10 * 10 * 1000 * 1000);\n    }\n}",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "/* get-current_time -- get time as 60-bit 100ns ticks since UUID epoch.\n   Compensate for the fact that real clock resolution is\n   less than 100ns. */\nvoid get_current_time(uuid_time_t *timestamp)\n{\n    static int inited = 0;\n    static uuid_time_t time_last;\n    static unsigned16 uuids_this_tick;\n    uuid_time_t time_now;",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 4,
      "text": "if (!inited) {\n    get_system_time(&time_now);\n    uuids_this_tick = UUIDS_PER_TICK;\n    inited = 1;\n}",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 4,
      "text": "for ( ; ; ) {\n    get_system_time(&time_now);",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 8,
      "text": "/* if clock reading changed since last UUID generated, */\nif (time_last != time_now) {\n    /* reset count of uuids gen'd with this clock reading */\n    uuids_this_tick = 0;\n    time_last = time_now;\n    break;\n}\nif (uuids_this_tick < UUIDS_PER_TICK) {\n    uuids_this_tick++;\n    break;\n}",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "        /* going too fast for our clock; spin */\n    }\n    /* add the count of uuids to low order bits of the clock reading */\n    *timestamp = time_now + uuids_this_tick;\n}",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "/* true_random -- generate a crypto-quality random number.\n   **This sample doesn't do that.** */\nstatic unsigned16 true_random(void)\n{\n    static int inited = 0;\n    uuid_time_t time_now;",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 4,
      "text": "if (!inited) {\n    get_system_time(&time_now);\n    time_now = time_now / UUIDS_PER_TICK;\n    srand((unsigned int)\n           (((time_now >> 32) ^ time_now) & 0xffffffff));\n    inited = 1;\n}",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "    return rand();\n}",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "/* uuid_create_md5_from_name -- create a version 3 (MD5) UUID using a\n   \"name\" from a \"name space\" */\nvoid uuid_create_md5_from_name(uuid_t *uuid, uuid_t nsid, void *name,\n                               int namelen)\n{\n    MD5_CTX c;\n    unsigned char hash[16];\n    uuid_t net_nsid;",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 4,
      "text": "/* put name space ID in network byte order so it hashes the same\n   no matter what endian machine we're on */\nnet_nsid = nsid;\nnet_nsid.time_low = htonl(net_nsid.time_low);\nnet_nsid.time_mid = htons(net_nsid.time_mid);\nnet_nsid.time_hi_and_version = htons(net_nsid.time_hi_and_version);",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 4,
      "text": "MD5Init(&c);\nMD5Update(&c, &net_nsid, sizeof net_nsid);\nMD5Update(&c, name, namelen);\nMD5Final(hash, &c);",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "    /* the hash is in network byte order at this point */\n    format_uuid_v3or5(uuid, hash, 3);\n}\nvoid uuid_create_sha1_from_name(uuid_t *uuid, uuid_t nsid, void *name,\n                                int namelen)\n{\n    SHA_CTX c;\n    unsigned char hash[20];\n    uuid_t net_nsid;",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 4,
      "text": "/* put name space ID in network byte order so it hashes the same\n   no matter what endian machine we're on */\nnet_nsid = nsid;\nnet_nsid.time_low = htonl(net_nsid.time_low);\nnet_nsid.time_mid = htons(net_nsid.time_mid);\nnet_nsid.time_hi_and_version = htons(net_nsid.time_hi_and_version);",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 4,
      "text": "SHA1_Init(&c);\nSHA1_Update(&c, &net_nsid, sizeof net_nsid);\nSHA1_Update(&c, name, namelen);\nSHA1_Final(hash, &c);",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "    /* the hash is in network byte order at this point */\n    format_uuid_v3or5(uuid, hash, 5);\n}",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "/* format_uuid_v3or5 -- make a UUID from a (pseudo)random 128-bit\n   number */\nvoid format_uuid_v3or5(uuid_t *uuid, unsigned char hash[16], int v)\n{\n    /* convert UUID to local byte order */\n    memcpy(uuid, hash, sizeof *uuid);\n    uuid->time_low = ntohl(uuid->time_low);\n    uuid->time_mid = ntohs(uuid->time_mid);\n    uuid->time_hi_and_version = ntohs(uuid->time_hi_and_version);",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "    /* put in the variant and version bits */\n    uuid->time_hi_and_version &= 0x0FFF;\n    uuid->time_hi_and_version |= (v << 12);\n    uuid->clock_seq_hi_and_reserved &= 0x3F;\n    uuid->clock_seq_hi_and_reserved |= 0x80;\n}",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "/* uuid_compare --  Compare two UUID's \"lexically\" and return */\n#define CHECK(f1, f2) if (f1 != f2) return f1 < f2 ? -1 : 1;\nint uuid_compare(uuid_t *u1, uuid_t *u2)\n{\n    int i;",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 4,
      "text": "CHECK(u1->time_low, u2->time_low);\nCHECK(u1->time_mid, u2->time_mid);",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "    CHECK(u1->time_hi_and_version, u2->time_hi_and_version);\n    CHECK(u1->clock_seq_hi_and_reserved, u2->clock_seq_hi_and_reserved);\n    CHECK(u1->clock_seq_low, u2->clock_seq_low)\n    for (i = 0; i < 6; i++) {\n        if (u1->node[i] < u2->node[i])\n            return -1;\n        if (u1->node[i] > u2->node[i])\n            return 1;\n    }\n    return 0;\n}\n#undef CHECK",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "sysdep.h",
      "ja": "sysdep.h"
    },
    {
      "indent": 0,
      "text": "#include \"copyrt.h\"\n/* remove the following define if you aren't running WIN32 */\n#define WININC 0",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "#ifdef WININC\n#include <windows.h>\n#else\n#include <sys/types.h>\n#include <sys/time.h>\n#include <sys/sysinfo.h>\n#endif",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "#include \"global.h\"\n/* change to point to where MD5 .h's live; RFC 1321 has sample\n   implementation */\n#include \"md5.h\"",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "/* set the following to the number of 100ns ticks of the actual\n   resolution of your system's clock */\n#define UUIDS_PER_TICK 1024",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "/* Set the following to a calls to get and release a global lock */\n#define LOCK\n#define UNLOCK",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "typedef unsigned long   unsigned32;\ntypedef unsigned short  unsigned16;\ntypedef unsigned char   unsigned8;\ntypedef unsigned char   byte;",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "/* Set this to what your compiler uses for 64-bit data type */\n#ifdef WININC",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "#define unsigned64_t unsigned __int64\n#define I64(C) C\n#else\n#define unsigned64_t unsigned long long\n#define I64(C) C##LL\n#endif",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "typedef unsigned64_t uuid_time_t;\ntypedef struct {\n    char nodeID[6];\n} uuid_node_t;",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "void get_ieee_node_identifier(uuid_node_t *node);\nvoid get_system_time(uuid_time_t *uuid_time);\nvoid get_random_info(char seed[16]);",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "sysdep.c",
      "ja": "sysdep.c"
    },
    {
      "indent": 0,
      "text": "#include \"copyrt.h\"\n#include <stdio.h>\n#include \"sysdep.h\"",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "/* system dependent call to get IEEE node ID.\n   This sample implementation generates a random node ID. */\nvoid get_ieee_node_identifier(uuid_node_t *node)\n{\n    static inited = 0;\n    static uuid_node_t saved_node;\n    char seed[16];\n    FILE *fp;",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "    if (!inited) {\n        fp = fopen(\"nodeid\", \"rb\");\n        if (fp) {\n            fread(&saved_node, sizeof saved_node, 1, fp);\n            fclose(fp);\n        }\n        else {\n            get_random_info(seed);\n            seed[0] |= 0x01;\n            memcpy(&saved_node, seed, sizeof saved_node);\n            fp = fopen(\"nodeid\", \"wb\");\n            if (fp) {\n                fwrite(&saved_node, sizeof saved_node, 1, fp);\n                fclose(fp);\n            }\n        }\n        inited = 1;\n    }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "    *node = saved_node;\n}",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "/* system dependent call to get the current system time. Returned as\n   100ns ticks since UUID epoch, but resolution may be less than\n   100ns. */\n#ifdef _WINDOWS_",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "void get_system_time(uuid_time_t *uuid_time)\n{\n    ULARGE_INTEGER time;",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 4,
      "text": "/* NT keeps time in FILETIME format which is 100ns ticks since\n   Jan 1, 1601. UUIDs use time in 100ns ticks since Oct 15, 1582.\n   The difference is 17 Days in Oct + 30 (Nov) + 31 (Dec)\n   + 18 years and 5 leap days. */\nGetSystemTimeAsFileTime((FILETIME *)&time);\ntime.QuadPart +=",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "          (unsigned __int64) (1000*1000*10)       // seconds\n        * (unsigned __int64) (60 * 60 * 24)       // days\n        * (unsigned __int64) (17+30+31+365*18+5); // # of days\n    *uuid_time = time.QuadPart;\n}",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "/* Sample code, not for use in production; see RFC 1750 */\nvoid get_random_info(char seed[16])\n{\n    MD5_CTX c;\n    struct {\n        MEMORYSTATUS m;\n        SYSTEM_INFO s;\n        FILETIME t;\n        LARGE_INTEGER pc;\n        DWORD tc;\n        DWORD l;\n        char hostname[MAX_COMPUTERNAME_LENGTH + 1];\n    } r;",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 4,
      "text": "MD5Init(&c);\nGlobalMemoryStatus(&r.m);\nGetSystemInfo(&r.s);\nGetSystemTimeAsFileTime(&r.t);\nQueryPerformanceCounter(&r.pc);\nr.tc = GetTickCount();",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "    r.l = MAX_COMPUTERNAME_LENGTH + 1;\n    GetComputerName(r.hostname, &r.l);\n    MD5Update(&c, &r, sizeof r);\n    MD5Final(seed, &c);\n}",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "#else",
      "ja": "＃そうしないと"
    },
    {
      "indent": 0,
      "text": "void get_system_time(uuid_time_t *uuid_time)\n{\n    struct timeval tp;",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 4,
      "text": "gettimeofday(&tp, (struct timezone *)0);",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "    /* Offset between UUID formatted times and Unix formatted times.\n       UUID UTC base time is October 15, 1582.\n       Unix base time is January 1, 1970.*/\n    *uuid_time = ((unsigned64)tp.tv_sec * 10000000)\n        + ((unsigned64)tp.tv_usec * 10)\n        + I64(0x01B21DD213814000);\n}",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "/* Sample code, not for use in production; see RFC 1750 */\nvoid get_random_info(char seed[16])\n{\n    MD5_CTX c;\n    struct {\n        struct sysinfo s;\n        struct timeval t;\n        char hostname[257];\n    } r;",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "    MD5Init(&c);\n    sysinfo(&r.s);\n    gettimeofday(&r.t, (struct timezone *)0);\n    gethostname(r.hostname, 256);\n    MD5Update(&c, &r, sizeof r);\n    MD5Final(seed, &c);\n}",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "#endif",
      "ja": "#endif"
    },
    {
      "indent": 0,
      "text": "utest.c",
      "ja": "utest.c"
    },
    {
      "indent": 0,
      "text": "#include \"copyrt.h\"\n#include \"sysdep.h\"\n#include <stdio.h>\n#include \"uuid.h\"\nuuid_t NameSpace_DNS = { /* 6ba7b810-9dad-11d1-80b4-00c04fd430c8 */\n    0x6ba7b810,\n    0x9dad,\n    0x11d1,\n    0x80, 0xb4, 0x00, 0xc0, 0x4f, 0xd4, 0x30, 0xc8\n};",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "/* puid -- print a UUID */\nvoid puid(uuid_t u)\n{\n    int i;",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "    printf(\"%8.8x-%4.4x-%4.4x-%2.2x%2.2x-\", u.time_low, u.time_mid,\n    u.time_hi_and_version, u.clock_seq_hi_and_reserved,\n    u.clock_seq_low);\n    for (i = 0; i < 6; i++)\n        printf(\"%2.2x\", u.node[i]);\n    printf(\"\\n\");\n}",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "/* Simple driver for UUID generator */\nvoid main(int argc, char **argv)\n{\n    uuid_t u;\n    int f;",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 4,
      "text": "uuid_create(&u);\nprintf(\"uuid_create(): \"); puid(u);",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "    f = uuid_compare(&u, &u);\n    printf(\"uuid_compare(u,u): %d\\n\", f);     /* should be 0 */\n    f = uuid_compare(&u, &NameSpace_DNS);\n    printf(\"uuid_compare(u, NameSpace_DNS): %d\\n\", f); /* s.b. 1 */\n    f = uuid_compare(&NameSpace_DNS, &u);\n    printf(\"uuid_compare(NameSpace_DNS, u): %d\\n\", f); /* s.b. -1 */\n    uuid_create_md5_from_name(&u, NameSpace_DNS, \"www.widgets.com\", 15);\n    printf(\"uuid_create_md5_from_name(): \"); puid(u);\n}",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "Appendix B. Appendix B - Sample Output of utest",
      "section_title": true,
      "ja": "付録B.付録B-utestの出力例"
    },
    {
      "indent": 5,
      "text": "uuid_create(): 7d444840-9dc0-11d1-b245-5ffdce74fad2\nuuid_compare(u,u): 0\nuuid_compare(u, NameSpace_DNS): 1\nuuid_compare(NameSpace_DNS, u): -1\nuuid_create_md5_from_name(): e902893a-9d22-3c7e-a7b8-d6e313b71d9f",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "Appendix C. Appendix C - Some Name Space IDs",
      "section_title": true,
      "ja": "付録C.付録C-一部の名前空間ID"
    },
    {
      "indent": 3,
      "text": "This appendix lists the name space IDs for some potentially interesting name spaces, as initialized C structures and in the string representation defined above.",
      "ja": "この付録では、初期化されたC構造として、および上で定義された文字列表現として、興味深い可能性のある名前空間の名前空間IDをリストします。"
    },
    {
      "indent": 3,
      "text": "/* Name string is a fully-qualified domain name */\nuuid_t NameSpace_DNS = { /* 6ba7b810-9dad-11d1-80b4-00c04fd430c8 */\n    0x6ba7b810,\n    0x9dad,\n    0x11d1,\n    0x80, 0xb4, 0x00, 0xc0, 0x4f, 0xd4, 0x30, 0xc8\n};",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "/* Name string is a URL */\nuuid_t NameSpace_URL = { /* 6ba7b811-9dad-11d1-80b4-00c04fd430c8 */\n    0x6ba7b811,\n    0x9dad,\n    0x11d1,\n    0x80, 0xb4, 0x00, 0xc0, 0x4f, 0xd4, 0x30, 0xc8\n};",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "/* Name string is an ISO OID */\nuuid_t NameSpace_OID = { /* 6ba7b812-9dad-11d1-80b4-00c04fd430c8 */\n    0x6ba7b812,\n    0x9dad,\n    0x11d1,\n    0x80, 0xb4, 0x00, 0xc0, 0x4f, 0xd4, 0x30, 0xc8\n};",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "/* Name string is an X.500 DN (in DER or a text output format) */\nuuid_t NameSpace_X500 = { /* 6ba7b814-9dad-11d1-80b4-00c04fd430c8 */\n    0x6ba7b814,\n    0x9dad,\n    0x11d1,\n    0x80, 0xb4, 0x00, 0xc0, 0x4f, 0xd4, 0x30, 0xc8\n};",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "Authors' Addresses",
      "ja": "著者のアドレス"
    },
    {
      "indent": 3,
      "text": "Paul J. Leach Microsoft 1 Microsoft Way Redmond, WA 98052 US",
      "ja": "ポールJ.リーチマイクロソフト1マイクロソフトウェイレドモンド、ワシントン98052米国"
    },
    {
      "indent": 3,
      "text": "Phone: +1 425-882-8080\nEMail: paulle@microsoft.com",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "Michael Mealling Refactored Networks, LLC 1635 Old Hwy 41 Suite 112, Box 138 Kennesaw, GA 30152 US",
      "ja": "Michael Mealling Refactored Networks、LLC 1635 Old Hwy 41 Suite 112、Box 138 Kennesaw、GA 30152 US"
    },
    {
      "indent": 3,
      "text": "Phone: +1-678-581-9656\nEMail: michael@refactored-networks.com\nURI: http://www.refactored-networks.com",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "Rich Salz DataPower Technology, Inc. 1 Alewife Center Cambridge, MA 02142 US",
      "ja": "Rich Salz DataPower Technology、Inc. 1 Alewife Center Cambridge、MA 02142 US"
    },
    {
      "indent": 0,
      "text": "   Phone: +1 617-864-0455\n   EMail: rsalz@datapower.com\n   URI:   http://www.datapower.com\nFull Copyright Statement",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "Copyright (C) The Internet Society (2005).",
      "ja": "Copyright（C）The Internet Society（2005）。"
    },
    {
      "indent": 3,
      "text": "This document is subject to the rights, licenses and restrictions contained in BCP 78, and except as set forth therein, the authors retain all their rights.",
      "ja": "このドキュメントは、BCP 78に含まれる権利、ライセンス、および制限の対象であり、そこに記載されている場合を除き、著者はすべての権利を保持します。"
    },
    {
      "indent": 3,
      "text": "This document and the information contained herein are provided on an \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE INFORMATION HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.",
      "ja": "このドキュメントとここに含まれる情報は、「現状のまま」で提供され、寄稿者、彼/彼女の代理人、または組織（ある場合）、インターネットエンジニアリングおよびインターネットエンジニアリングタスクフォースは、すべての保証を明示的または明示的に後援します。ここに含まれる情報の使用により、商品性または特定の目的への適合性に関するいかなる権利または黙示の保証も侵害されないという保証を含みますが、これに限定されるものではありません。"
    },
    {
      "indent": 0,
      "text": "Intellectual Property",
      "ja": "知的財産"
    },
    {
      "indent": 3,
      "text": "The IETF takes no position regarding the validity or scope of any Intellectual Property Rights or other rights that might be claimed to pertain to the implementation or use of the technology described in this document or the extent to which any license under such rights might or might not be available; nor does it represent that it has made any independent effort to identify any such rights. Information on the procedures with respect to rights in RFC documents can be found in BCP 78 and BCP 79.",
      "ja": "IETFは、このドキュメントに記載されているテクノロジーの実装または使用に関連すると主張される可能性がある知的財産権またはその他の権利の有効性または範囲、またはそのような権利に基づくライセンスが適用されるかどうかに関係なく、いかなる立場も取りません。利用できる;また、そのような権利を特定するために独立した取り組みを行ったことを表すものでもありません。 RFC文書の権利に関する手順に関する情報は、BCP 78およびBCP 79にあります。"
    },
    {
      "indent": 3,
      "text": "Copies of IPR disclosures made to the IETF Secretariat and any assurances of licenses to be made available, or the result of an attempt made to obtain a general license or permission for the use of such proprietary rights by implementers or users of this specification can be obtained from the IETF on-line IPR repository at http://www.ietf.org/ipr.",
      "ja": "IETF事務局に対して行われたIPR開示のコピー、および使用可能にされるライセンスの保証、または一般ライセンスを取得する試みの結果、またはこの仕様の実装者またはユーザーがそのような所有権を使用するための許可を取得できるhttp://www.ietf.org/iprのIETFオンラインIPRリポジトリから。"
    },
    {
      "indent": 3,
      "text": "The IETF invites any interested party to bring to its attention any copyrights, patents or patent applications, or other proprietary rights that may cover technology that may be required to implement this standard. Please address the information to the IETF at ietf-ipr@ietf.org.",
      "ja": "IETFは、この規格を実装するために必要となる可能性のある技術をカバーする可能性のある著作権、特許、特許出願、またはその他の所有権に注意を向けるよう、関係者に呼びかけます。 IEETのietf-ipr@ietf.orgに情報を送信してください。"
    },
    {
      "indent": 0,
      "text": "Acknowledgement",
      "ja": "謝辞"
    },
    {
      "indent": 3,
      "text": "Funding for the RFC Editor function is currently provided by the Internet Society.",
      "ja": "RFC Editor機能への資金提供は、現在Internet Societyから提供されています。"
    }
  ]
}