{
  "title": {
    "text": "RFC 8682 - TinyMT32 Pseudorandom Number Generator (PRNG)",
    "ja": "RFC 8682 - TinyMT32疑似乱数ジェネレータ（PRNG）"
  },
  "number": 8682,
  "created_at": "2020-08-17 20:20:17.008134+09:00",
  "updated_by": "",
  "contents": [
    {
      "indent": 0,
      "text": "Internet Engineering Task Force (IETF)                          M. Saito\nRequest for Comments: 8682                                  M. Matsumoto\nCategory: Standards Track                           Hiroshima University\nISSN: 2070-1721                                             V. Roca, Ed.\n                                                             E. Baccelli\n                                                                   INRIA\n                                                            January 2020",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 13,
      "text": "TinyMT32 Pseudorandom Number Generator (PRNG)",
      "ja": "TinyMT32疑似乱数ジェネレータ（PRNG）"
    },
    {
      "indent": 0,
      "text": "Abstract",
      "ja": "概要"
    },
    {
      "indent": 3,
      "text": "This document describes the TinyMT32 Pseudorandom Number Generator (PRNG), which produces 32-bit pseudorandom unsigned integers and aims at having a simple-to-use and deterministic solution. This PRNG is a small-sized variant of the Mersenne Twister (MT) PRNG. The main advantage of TinyMT32 over MT is the use of a small internal state, compatible with most target platforms that include embedded devices, while keeping reasonably good randomness that represents a significant improvement compared to the Park-Miller Linear Congruential PRNG. However, neither the TinyMT nor MT PRNG is meant to be used for cryptographic applications.",
      "ja": "このドキュメントでは、32ビットの疑似乱数の符号なし整数を生成し、使いやすく確定的なソリューションを提供することを目的としたTinyMT32疑似乱数ジェネレータ（PRNG）について説明します。このPRNGは、メルセンヌツイスター（MT）PRNGの小型版です。 MTに対するTinyMT32の主な利点は、組み込みデバイスを含むほとんどのターゲットプラットフォームと互換性のある小さな内部状態を使用しながら、パークミラー線形合同PRNGと比較して大幅な改善を表す適度なランダム性を維持することです。ただし、TinyMTとMT PRNGのどちらも暗号化アプリケーションで使用するためのものではありません。"
    },
    {
      "indent": 0,
      "text": "Status of This Memo",
      "ja": "本文書の状態"
    },
    {
      "indent": 3,
      "text": "This is an Internet Standards Track document.",
      "ja": "これはInternet Standards Trackドキュメントです。"
    },
    {
      "indent": 3,
      "text": "This document is a product of the Internet Engineering Task Force (IETF). It represents the consensus of the IETF community. It has received public review and has been approved for publication by the Internet Engineering Steering Group (IESG). Further information on Internet Standards is available in Section 2 of RFC 7841.",
      "ja": "このドキュメントは、IETF（Internet Engineering Task Force）の製品です。これは、IETFコミュニティのコンセンサスを表しています。公開レビューを受け、インターネットエンジニアリングステアリンググループ（IESG）による公開が承認されました。インターネット標準の詳細については、RFC 7841のセクション2をご覧ください。"
    },
    {
      "indent": 3,
      "text": "Information about the current status of this document, any errata, and how to provide feedback on it may be obtained at https://www.rfc-editor.org/info/rfc8682.",
      "ja": "このドキュメントの現在のステータス、エラータ、およびフィードバックの提供方法に関する情報は、https：//www.rfc-editor.org/info/rfc8682で入手できます。"
    },
    {
      "indent": 0,
      "text": "Copyright Notice",
      "ja": "著作権表示"
    },
    {
      "indent": 3,
      "text": "Copyright (c) 2020 IETF Trust and the persons identified as the document authors. All rights reserved.",
      "ja": "著作権（c）2020 IETFトラストおよびドキュメントの作成者として識別された人物。全著作権所有。"
    },
    {
      "indent": 3,
      "text": "This document is subject to BCP 78 and the IETF Trust's Legal Provisions Relating to IETF Documents (https://trustee.ietf.org/license-info) in effect on the date of publication of this document. Please review these documents carefully, as they describe your rights and restrictions with respect to this document. Code Components extracted from this document must include Simplified BSD License text as described in Section 4.e of the Trust Legal Provisions and are provided without warranty as described in the Simplified BSD License.",
      "ja": "この文書は、BCP 78およびIETF文書に関するIETFトラストの法的規定（https://trustee.ietf.org/license-info）の対象であり、この文書の発行日に有効です。これらのドキュメントは、このドキュメントに関するあなたの権利と制限を説明しているため、注意深く確認してください。このドキュメントから抽出されたコードコンポーネントには、Trust Legal Provisionsのセクション4.eに記載されているSimplified BSD Licenseテキストが含まれている必要があり、Simplified BSD Licenseに記載されているように保証なしで提供されます。"
    },
    {
      "indent": 0,
      "text": "Table of Contents",
      "ja": "目次"
    },
    {
      "indent": 3,
      "text": "1.  Introduction\n  1.1.  Requirements Language\n2.  TinyMT32 PRNG Specification\n  2.1.  TinyMT32 Source Code\n  2.2.  TinyMT32 Usage\n  2.3.  Specific Implementation Validation and Deterministic\n        Behavior\n3.  Security Considerations\n4.  IANA Considerations\n5.  References\n  5.1.  Normative References\n  5.2.  Informative References\nAcknowledgments\nAuthors' Addresses",
      "raw": true,
      "toc": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "1. Introduction",
      "section_title": true,
      "ja": "1. はじめに"
    },
    {
      "indent": 3,
      "text": "This document specifies the TinyMT32 PRNG as a specialization of the reference implementation version 1.1 (2015/04/24) by Mutsuo Saito and Makoto Matsumoto from Hiroshima University, which can be found at [TinyMT-web] (the TinyMT website) and [TinyMT-dev] (the GitHub site). This specialization aims at having a simple-to-use and deterministic PRNG, as explained below. However, the TinyMT32 PRNG is not meant to be used for cryptographic applications.",
      "ja": "このドキュメントでは、TinyMT32 PRNGを[TinyMT-web]（TinyMTのWebサイト）および[TinyMT]にある広島大学の斉藤睦夫および松本誠によるリファレンス実装バージョン1.1（2015/04/24）の特殊化として指定しています。 -dev]（GitHubサイト）。この専門化は、以下に説明するように、使いやすく決定論的なPRNGを持つことを目的としています。ただし、TinyMT32 PRNGは暗号化アプリケーションで使用するためのものではありません。"
    },
    {
      "indent": 3,
      "text": "TinyMT is a new, small-sized variant of the Mersenne Twister (MT) PRNG introduced in 2011 [MT98]. This document focuses on the TinyMT32 variant (rather than TinyMT64) of the TinyMT PRNG, which outputs 32-bit unsigned integers.",
      "ja": "TinyMTは、2011年に導入されたMersenne Twister（MT）PRNGの新しい小型バージョンです[MT98]。このドキュメントでは、32ビットの符号なし整数を出力するTinyMT PRNGの（TinyMT64ではなく）TinyMT32バリアントに焦点を当てています。"
    },
    {
      "indent": 3,
      "text": "The purpose of TinyMT is not to replace the Mersenne Twister: TinyMT has a far shorter period (2^(127) - 1) than MT. The merit of TinyMT is in the small size of the 127-bit internal state, far smaller than the 19937 bits of MT. The outputs of TinyMT satisfy several statistical tests for non-cryptographic randomness, including BigCrush in TestU01 [TestU01] and AdaptiveCrush [AdaptiveCrush], leaving it well placed for non-cryptographic usage, especially given the small size of its internal state (see [TinyMT-web]). From this point of view, TinyMT32 represents a major improvement with respect to the Park-Miller Linear Congruential PRNG (e.g., as specified in [RFC5170]), which suffers from several known limitations (see, for instance, [PTVF92], Section 7.1, p. 279 and [RFC8681], Appendix B).",
      "ja": "TinyMTの目的はメルセンヌツイスターを置き換えることではありません。TinyMTの周期はMTよりもはるかに短い（2 ^（127）-1）。 TinyMTのメリットは、127ビットの内部状態のサイズが小さいことです。これは、MTの19937ビットよりもはるかに小さいです。 TinyMTの出力は、TestC01のBigCrush [TestU01]とAdaptiveCrush [AdaptiveCrush]を含む非暗号化ランダム性のいくつかの統計的テストを満たし、特に内部状態のサイズが小さいことを考えると、非暗号化使用のために適切に配置されます（[TinyMT -ウェブ]）。この観点から見ると、TinyMT32は、パークミラー線形合同PRNG（たとえば、[RFC5170]で指定されている）に比べて大幅な改善を表しており、いくつかの既知の制限があります（たとえば、[PTVF92]、セクション7.1を参照）。 、p。279および[RFC8681]、付録B）。"
    },
    {
      "indent": 3,
      "text": "The TinyMT32 PRNG initialization depends, among other things, on a parameter set, namely (mat1, mat2, tmat). In order to facilitate the use of this PRNG and to make the sequence of pseudorandom numbers depend only on the seed value, this specification requires the use of a specific parameter set (see Section 2.1). This is a major difference with respect to the implementation version 1.1 (2015/04/24), which leaves this parameter set unspecified.",
      "ja": "TinyMT32 PRNGの初期化は、とりわけ（mat1、mat2、tmat）パラメータセットに依存します。このPRNGの使用を容易にし、疑似乱数のシーケンスがシード値のみに依存するようにするために、この仕様では特定のパラメータセットを使用する必要があります（セクション2.1を参照）。これは、このパラメーターセットを未指定のままにする実装バージョン1.1（2015/04/24）との大きな違いです。"
    },
    {
      "indent": 3,
      "text": "Finally, the determinism of this PRNG for a given seed has been carefully checked (see Section 2.3). This means that the same sequence of pseudorandom numbers should be generated, no matter the target execution platform and compiler, for a given initial seed value. This determinism can be a key requirement, as is the case with [RFC8681], which normatively depends on this specification.",
      "ja": "最後に、特定のシードに対するこのPRNGの決定論は慎重にチェックされました（セクション2.3を参照）。これは、指定された初期シード値に対して、ターゲットの実行プラットフォームやコンパイラに関係なく、同じ一連の疑似乱数を生成する必要があることを意味します。この決定性は、[RFC8681]の場合と同様に、この仕様に規範的に依存する重要な要件になる可能性があります。"
    },
    {
      "indent": 0,
      "text": "1.1. Requirements Language",
      "section_title": true,
      "ja": "1.1. 要件言語"
    },
    {
      "indent": 3,
      "text": "The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as described in BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all capitals, as shown here.",
      "ja": "キーワード「MUST」、「MUST NOT」、「REQUIRED」、「SHALL」、「SHALL NOT」、「SHOULD」、「SHOULD NOT」、「RECOMMENDED」、「NOT RECOMMENDED」、「MAY」、「OPTIONALこのドキュメントの「」は、BCP 14 [RFC2119] [RFC8174]で説明されているように解釈されます。"
    },
    {
      "indent": 0,
      "text": "2. TinyMT32 PRNG Specification",
      "section_title": true,
      "ja": "2. TinyMT32 PRNG仕様"
    },
    {
      "indent": 0,
      "text": "2.1. TinyMT32 Source Code",
      "section_title": true,
      "ja": "2.1. TinyMT32ソースコード"
    },
    {
      "indent": 3,
      "text": "The TinyMT32 PRNG must be initialized with a parameter set that needs to be well chosen. In this specification, for the sake of simplicity, the following parameter set MUST be used:",
      "ja": "TinyMT32 PRNGは、適切に選択する必要があるパラメータセットで初期化する必要があります。この仕様では、簡単にするために、次のパラメータセットを使用する必要があります。"
    },
    {
      "indent": 3,
      "text": "* mat1 = 0x8f7011ee = 2406486510",
      "ja": "* mat1 = 0x8f7011ee = 2406486510"
    },
    {
      "indent": 3,
      "text": "* mat2 = 0xfc78ff1f = 4235788063",
      "ja": "* Maq = 0 x 2 x 1 x 1 P = 4235788063"
    },
    {
      "indent": 3,
      "text": "* tmat = 0x3793fdff = 932445695",
      "ja": "* 完了= 0 x x x x x x x x df = 932445695"
    },
    {
      "indent": 3,
      "text": "This parameter set is the first entry of the precalculated parameter sets in tinymt32dc/tinymt32dc.0.1048576.txt by Kenji Rikitake, available at [TinyMT-params]. This is also the parameter set used in [KR12].",
      "ja": "このパラメータセットは、[TinyMT-params]で入手できる、Rikitake Rikitakeによるtinymt32dc / tinymt32dc.0.1048576.txtの事前計算されたパラメータセットの最初のエントリです。これは、[KR12]で使用されるパラメータセットでもあります。"
    },
    {
      "indent": 3,
      "text": "The TinyMT32 PRNG reference implementation is reproduced in Figure 1. This is a C language implementation written for C99 [C99]. This reference implementation differs from the original source code as follows:",
      "ja": "TinyMT32 PRNGリファレンス実装は、図1に再現されています。これは、C99 [C99]用に書かれたC言語実装です。このリファレンス実装は、次の点で元のソースコードと異なります。"
    },
    {
      "indent": 3,
      "text": "* The original authors, who are coauthors of this document, have granted IETF the rights to publish this version with a license and copyright that are in accordance with BCP 78 and the IETF Trust's Legal Provisions Relating to IETF Documents (http://trustee.ietf.org/license-info).",
      "ja": "* このドキュメントの共著者である元の作者は、BCP 78およびIETFドキュメントに関するIETFトラストの法的規定（http：//trustee.ietf）に準拠したライセンスと著作権を使用して、このバージョンを公開する権利をIETFに付与しています。 .org / license-info）。"
    },
    {
      "indent": 3,
      "text": "* The source code initially spread over the tinymt32.h and tinymt32.c files has been merged.",
      "ja": "* 最初はtinymt32.hおよびtinymt32.cファイルに広がるソースコードがマージされました。"
    },
    {
      "indent": 3,
      "text": "* The unused parts of the original source code have been removed. This is the case of the tinymt32_init_by_array() alternative initialization function. This is also the case of the period_certification() function after having checked it is not required with the chosen parameter set.",
      "ja": "* 元のソースコードの未使用部分は削除されました。これは、tinymt32_init_by_array()代替初期化関数の場合です。これは、選択したパラメータセットでは不要であることを確認した後、period_certification()関数の場合にも当てはまります。"
    },
    {
      "indent": 3,
      "text": "* The unused constants TINYMT32_MEXP and TINYMT32_MUL have been removed.",
      "ja": "* 未使用の定数TINYMT32_MEXPおよびTINYMT32_MULは削除されました。"
    },
    {
      "indent": 3,
      "text": "* The appropriate parameter set has been added to the initialization function.",
      "ja": "* 初期化関数に適切なパラメータセットが追加されました。"
    },
    {
      "indent": 3,
      "text": "* The function order has been changed.",
      "ja": "* 関数の順序が変更されました。"
    },
    {
      "indent": 3,
      "text": "* Certain internal variables have been renamed for compactness purposes.",
      "ja": "* 特定の内部変数は、簡潔にするために名前が変更されました。"
    },
    {
      "indent": 3,
      "text": "* The const qualifier has been added to the constant definitions.",
      "ja": "* const修飾子が定数定義に追加されました。"
    },
    {
      "indent": 3,
      "text": "* The code that was dependent on the representation of negative integers by 2's complements has been replaced by a more portable version.",
      "ja": "* 2の補数による負の整数の表現に依存していたコードは、より移植性の高いバージョンに置き換えられました。"
    },
    {
      "indent": 3,
      "text": "<CODE BEGINS>\n/**\n * Tiny Mersenne Twister: only 127-bit internal state.\n * Derived from the reference implementation version 1.1 (2015/04/24)\n * by Mutsuo Saito (Hiroshima University) and Makoto Matsumoto\n * (Hiroshima University).\n */\n#include <stdint.h>",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "/**\n * tinymt32 internal state vector and parameters\n */\ntypedef struct {\n    uint32_t status[4];\n    uint32_t mat1;\n    uint32_t mat2;\n    uint32_t tmat;\n} tinymt32_t;",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "static void tinymt32_next_state (tinymt32_t* s);\nstatic uint32_t tinymt32_temper (tinymt32_t* s);",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "/**\n * Parameter set to use for this IETF specification. Don't change.\n * This parameter set is the first entry of the precalculated\n * parameter sets in tinymt32dc/tinymt32dc.0.1048576.txt by\n * Kenji Rikitake, available at:\n *    https://github.com/jj1bdx/tinymtdc-longbatch/.\n * It is also the parameter set used in:\n *    Rikitake, K., \"TinyMT pseudo random number generator for\n *    Erlang\", Proceedings of the 11th ACM SIGPLAN Erlang Workshop,\n *    September 2012.\n */\nconst uint32_t  TINYMT32_MAT1_PARAM = UINT32_C(0x8f7011ee);\nconst uint32_t  TINYMT32_MAT2_PARAM = UINT32_C(0xfc78ff1f);\nconst uint32_t  TINYMT32_TMAT_PARAM = UINT32_C(0x3793fdff);",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "/**\n * This function initializes the internal state array with a\n * 32-bit unsigned integer seed.\n * @param s     pointer to tinymt internal state.\n * @param seed  a 32-bit unsigned integer used as a seed.\n */\nvoid tinymt32_init (tinymt32_t* s, uint32_t seed)\n{\n    const uint32_t    MIN_LOOP = 8;\n    const uint32_t    PRE_LOOP = 8;\n    s->status[0] = seed;\n    s->status[1] = s->mat1 = TINYMT32_MAT1_PARAM;\n    s->status[2] = s->mat2 = TINYMT32_MAT2_PARAM;\n    s->status[3] = s->tmat = TINYMT32_TMAT_PARAM;\n    for (int i = 1; i < MIN_LOOP; i++) {\n        s->status[i & 3] ^= i + UINT32_C(1812433253)\n            * (s->status[(i - 1) & 3]\n               ^ (s->status[(i - 1) & 3] >> 30));\n    }\n    /*\n     * NB: The parameter set of this specification warrants\n     * that none of the possible 2^^32 seeds leads to an\n     * all-zero 127-bit internal state. Therefore, the\n     * period_certification() function of the original\n     * TinyMT32 source code has been safely removed. If\n     * another parameter set is used, this function will\n     * have to be reintroduced here.\n     */\n    for (int i = 0; i < PRE_LOOP; i++) {\n        tinymt32_next_state(s);\n    }\n}",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "/**\n * This function outputs a 32-bit unsigned integer from\n * the internal state.\n * @param s     pointer to tinymt internal state.\n * @return      32-bit unsigned integer r (0 <= r < 2^32).\n */\nuint32_t tinymt32_generate_uint32 (tinymt32_t* s)\n{\n    tinymt32_next_state(s);\n    return tinymt32_temper(s);\n}",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "/**\n * Internal tinymt32 constants and functions.\n * Users should not call these functions directly.\n */\nconst uint32_t  TINYMT32_SH0 = 1;\nconst uint32_t  TINYMT32_SH1 = 10;\nconst uint32_t  TINYMT32_SH8 = 8;\nconst uint32_t  TINYMT32_MASK = UINT32_C(0x7fffffff);",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "/**\n * This function changes the internal state of tinymt32.\n * @param s     pointer to tinymt internal state.\n */\nstatic void tinymt32_next_state (tinymt32_t* s)\n{\n    uint32_t x;\n    uint32_t y;",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "    y = s->status[3];\n    x = (s->status[0] & TINYMT32_MASK)\n        ^ s->status[1]\n        ^ s->status[2];\n    x ^= (x << TINYMT32_SH0);\n    y ^= (y >> TINYMT32_SH0) ^ x;\n    s->status[0] = s->status[1];\n    s->status[1] = s->status[2];\n    s->status[2] = x ^ (y << TINYMT32_SH1);\n    s->status[3] = y;\n    /*\n     * The if (y & 1) {...} block below replaces:\n     *     s->status[1] ^= -((int32_t)(y & 1)) & s->mat1;\n     *     s->status[2] ^= -((int32_t)(y & 1)) & s->mat2;\n     * The adopted code is equivalent to the original code\n     * but does not depend on the representation of negative\n     * integers by 2's complements. It is therefore more\n     * portable but includes an if branch, which may slow\n     * down the generation speed.\n     */\n    if (y & 1) {\n         s->status[1] ^= s->mat1;\n         s->status[2] ^= s->mat2;\n     }\n}",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "/**\n * This function outputs a 32-bit unsigned integer from\n * the internal state.\n * @param s     pointer to tinymt internal state.\n * @return      32-bit unsigned pseudorandom number.\n */\nstatic uint32_t tinymt32_temper (tinymt32_t* s)\n{\n    uint32_t t0, t1;\n    t0 = s->status[3];\n    t1 = s->status[0] + (s->status[2] >> TINYMT32_SH8);\n    t0 ^= t1;\n    /*\n     * The if (t1 & 1) {...} block below replaces:\n     *     t0 ^= -((int32_t)(t1 & 1)) & s->tmat;\n     * The adopted code is equivalent to the original code\n     * but does not depend on the representation of negative\n     * integers by 2's complements. It is therefore more\n     * portable but includes an if branch, which may slow\n     * down the generation speed.\n     */\n    if (t1 & 1) {\n        t0 ^= s->tmat;\n    }\n    return t0;\n}\n<CODE ENDS>",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 16,
      "text": "Figure 1: TinyMT32 Reference Implementation",
      "ja": "図1：TinyMT32リファレンス実装"
    },
    {
      "indent": 0,
      "text": "2.2. TinyMT32 Usage",
      "section_title": true,
      "ja": "2.2. TinyMT32の使用"
    },
    {
      "indent": 3,
      "text": "This PRNG MUST first be initialized with the following function:",
      "ja": "このPRNGは、最初に次の関数で初期化する必要があります。"
    },
    {
      "indent": 6,
      "text": "void tinymt32_init (tinymt32_t* s, uint32_t seed);",
      "ja": "void tinymt32_init（tinymt32_t * s、uint32_tシード）;"
    },
    {
      "indent": 3,
      "text": "It takes as input a 32-bit unsigned integer used as a seed (note that value 0 is permitted by TinyMT32). This function also takes as input a pointer to an instance of a tinymt32_t structure that needs to be allocated by the caller but is left uninitialized. This structure will then be updated by the various TinyMT32 functions in order to keep the internal state of the PRNG. The use of this structure admits several instances of this PRNG to be used in parallel, each of them having its own instance of the structure.",
      "ja": "これは、シードとして使用される32ビットの符号なし整数を入力として受け取ります（TinyMT32では値0が許可されていることに注意してください）。この関数は、呼び出し元が割り当てる必要があるが初期化されていないtinymt32_t構造体のインスタンスへのポインターも入力として受け取ります。この構造は、PRNGの内部状態を維持するために、さまざまなTinyMT32関数によって更新されます。この構造を使用すると、このPRNGの複数のインスタンスを並行して使用でき、それぞれに独自の構造のインスタンスがあります。"
    },
    {
      "indent": 3,
      "text": "Then, each time a new 32-bit pseudorandom unsigned integer between 0 and 2^(32) - 1 inclusive is needed, the following function is used:",
      "ja": "次に、0から2 ^（32）-1までの新しい32ビットの疑似乱数の符号なし整数が必要になるたびに、次の関数が使用されます。"
    },
    {
      "indent": 6,
      "text": "uint32_t tinymt32_generate_uint32 (tinymt32_t * s);",
      "ja": "uint32_t tinymt32_generate_uint32（tinymt32_t * s）;"
    },
    {
      "indent": 3,
      "text": "Of course, the tinymt32_t structure must be left unchanged by the caller between successive calls to this function.",
      "ja": "もちろん、tinymt32_t構造体は、この関数への連続した呼び出しの間に呼び出し元が変更しないでおく必要があります。"
    },
    {
      "indent": 0,
      "text": "2.3. Specific Implementation Validation and Deterministic Behavior",
      "section_title": true,
      "ja": "2.3. 特定の実装の検証と確定的動作"
    },
    {
      "indent": 3,
      "text": "For a given seed, PRNG determinism can be a requirement (e.g., with [RFC8681]). Consequently, any implementation of the TinyMT32 PRNG in line with this specification MUST have the same output as that provided by the reference implementation of Figure 1. In order to increase the compliancy confidence, this document proposes the following criteria. Using a seed value of 1, the first 50 values returned by tinymt32_generate_uint32(s) as 32-bit unsigned integers are equal to the values provided in Figure 2, which are to be read line by line. Note that these values come from the tinymt/ check32.out.txt file provided by the PRNG authors to validate implementations of TinyMT32 as part of the MersenneTwister-Lab/TinyMT GitHub repository.",
      "ja": "特定のシードでは、PRNGの確定性が要件になる場合があります（[RFC8681]など）。したがって、この仕様に沿ったTinyMT32 PRNGの実装は、図1の参照実装によって提供されるものと同じ出力を持つ必要があります。準拠の信頼性を高めるために、このドキュメントでは次の基準を提案します。シード値1を使用すると、tinymt32_generate_uint32（s）によって32ビットの符号なし整数として返される最初の50個の値は、図2で提供される値に等しく、1行ずつ読み取られます。これらの値は、MersenneTwister-Lab / TinyMT GitHubリポジトリの一部としてTinyMT32の実装を検証するためにPRNG作成者によって提供されたtinymt / check32.out.txtファイルから取得されていることに注意してください。"
    },
    {
      "indent": 3,
      "text": "2545341989 981918433 3715302833 2387538352 3591001365 3820442102 2114400566 2196103051 2783359912 764534509 643179475 1822416315 881558334 4207026366 3690273640 3240535687 2921447122 3984931427 4092394160 44209675 2188315343 2908663843 1834519336 3774670961 3019990707 4065554902 1239765502 4035716197 3412127188 552822483 161364450 353727785 140085994 149132008 2547770827 4064042525 4078297538 2057335507 622384752 2041665899 2193913817 1080849512 33160901 662956935 642999063 3384709977 1723175122 3866752252 521822317 2292524454",
      "ja": "2545341989 981918433 3715302833 2387538352 3591001365 3820442102 2114400566 2196103051 2783359912 764534509 643179475 1822416315 881558334 4207026366 3690273640 3240535687 2921447122 3984931427 4092394160 44209675 2188315343 2908663843 1834519336 3774670961 3019990707 4065554902 1239765502 4035716197 3412127188 552822483 161364450 353727785 140085994 149132008 2547770827 4064042525 4078297538 2057335507 622384752 2041665899 2193913817 1080849512 33160901 662956935 642999063 3384709977 1723175122 3866752252 521822317 2292524454"
    },
    {
      "indent": 4,
      "text": "Figure 2: First 50 decimal values (to be read per line) returned by tinymt32_generate_uint32(s) as 32-bit unsigned integers, with a seed value of 1",
      "ja": "図2：tinymt32_generate_uint32（s）によって32ビットの符号なし整数としてシード値1で返される最初の50個の10進値（1行ごとに読み取る）"
    },
    {
      "indent": 3,
      "text": "In particular, the deterministic behavior of the Figure 1 source code has been checked across several platforms: high-end laptops running 64-bit Mac OS X and Linux/Ubuntu; a board featuring a 32-bit ARM Cortex-A15 and running 32-bit Linux/Ubuntu; several embedded cards featuring either an ARM Cortex-M0+, a Cortex-M3, or a Cortex-M4 32-bit microcontroller, all of them running RIOT [Baccelli18]; two low-end embedded cards featuring either a 16-bit microcontroller (TI MSP430) or an 8-bit microcontroller (Arduino ATMEGA2560), both of them running RIOT.",
      "ja": "特に、図1のソースコードの確定的な動作は、いくつかのプラットフォームにわたって確認されています。64ビットMac OS XおよびLinux / Ubuntuを実行するハイエンドラップトップ。 32ビットARM Cortex-A15を搭載し、32ビットLinux / Ubuntuを実行するボード。 ARM Cortex-M0 +、Cortex-M3、またはCortex-M4 32ビットマイクロコントローラーのいずれかを搭載し、すべてRIOT [Baccelli18]を実行するいくつかの組み込みカード。 16ビットマイクロコントローラー（TI MSP430）または8ビットマイクロコントローラー（Arduino ATMEGA2560）を搭載した2枚のローエンド組み込みカード。どちらもRIOTを実行しています。"
    },
    {
      "indent": 3,
      "text": "This specification only outputs 32-bit unsigned pseudorandom numbers and does not try to map this output to a smaller integer range (e.g., between 10 and 49 inclusive). If a specific use case needs such a mapping, it will have to provide its own function. In that case, if PRNG determinism is also required, the use of a floating point (single or double precision) to perform this mapping should probably be avoided, as these calculations may lead to different rounding errors across different target platforms. Great care should also be taken to not introduce biases in the randomness of the mapped output (which may be the case with some mapping algorithms) incompatible with the use-case requirements. The details of how to perform such a mapping are out of scope of this document.",
      "ja": "この仕様は、32ビットの符号なし疑似乱数のみを出力し、この出力をより小さな整数範囲（たとえば、10から49まで）にマッピングしようとはしません。特定のユースケースでこのようなマッピングが必要な場合は、独自の機能を提供する必要があります。その場合、PRNG決定論も必要な場合は、浮動小数点（単精度または倍精度）を使用してこのマッピングを実行することは、これらの計算が異なるターゲットプラットフォーム間で異なる丸めエラーを引き起こす可能性があるので、おそらく避けるべきです。ユースケースの要件と互換性のない、マッピングされた出力のランダム性（一部のマッピングアルゴリズムの場合）にバイアスを導入しないように、十分な注意を払う必要もあります。そのようなマッピングを実行する方法の詳細は、このドキュメントの範囲外です。"
    },
    {
      "indent": 0,
      "text": "3. Security Considerations",
      "section_title": true,
      "ja": "3. セキュリティに関する考慮事項"
    },
    {
      "indent": 3,
      "text": "The authors do not believe the present specification generates specific security risks per se. However, the TinyMT and MT PRNG must not be used for cryptographic applications.",
      "ja": "著者は、現在の仕様自体が特定のセキュリティリスクを生成するとは考えていません。ただし、TinyMTおよびMT PRNGを暗号化アプリケーションに使用しないでください。"
    },
    {
      "indent": 0,
      "text": "4. IANA Considerations",
      "section_title": true,
      "ja": "4. IANAに関する考慮事項"
    },
    {
      "indent": 3,
      "text": "This document has no IANA actions.",
      "ja": "このドキュメントにはIANAアクションはありません。"
    },
    {
      "indent": 0,
      "text": "5. References",
      "section_title": true,
      "ja": "5. 参考文献"
    },
    {
      "indent": 0,
      "text": "5.1. Normative References",
      "section_title": true,
      "ja": "5.1. 引用文献"
    },
    {
      "indent": 3,
      "text": "[C99] International Organization for Standardization, \"Programming languages - C: C99, correction 3:2007\", ISO/ IEC 9899:1999/Cor 3:2007, November 2007.",
      "ja": "[C99]国際標準化機構、「プログラミング言語-C：C99、修正3：2007」、ISO / IEC 9899：1999 / Cor 3：2007、2007年11月。"
    },
    {
      "indent": 3,
      "text": "[RFC2119] Bradner, S., \"Key words for use in RFCs to Indicate Requirement Levels\", BCP 14, RFC 2119, DOI 10.17487/RFC2119, March 1997, <https://www.rfc-editor.org/info/rfc2119>.",
      "ja": "[RFC2119] Bradner、S。、「要件レベルを示すためにRFCで使用するキーワード」、BCP 14、RFC 2119、DOI 10.17487 / RFC2119、1997年3月、<https://www.rfc-editor.org/info/ rfc2119>。"
    },
    {
      "indent": 3,
      "text": "[RFC8174] Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174, May 2017, <https://www.rfc-editor.org/info/rfc8174>.",
      "ja": "[RFC8174] Leiba、B。、「RFC 2119キーワードの大文字と小文字のあいまいさ」、BCP 14、RFC 8174、DOI 10.17487 / RFC8174、2017年5月、<https://www.rfc-editor.org/info/ rfc8174>。"
    },
    {
      "indent": 0,
      "text": "5.2. Informative References",
      "section_title": true,
      "ja": "5.2. 参考引用"
    },
    {
      "indent": 3,
      "text": "[AdaptiveCrush] Haramoto, H., \"Automation of Statistical Tests on Randomness to Obtain Clearer Conclusion\", Monte Carlo and Quasi-Monte Carlo Methods 2008, DOI 10.1007/978-3-642-04107-5_26, November 2009, <http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/ ADAPTIVE>.",
      "ja": "[AdaptiveCrush]原本博、「ランダムネスに関する統計的テストの自動化による明確な結論の取得」、モンテカルロおよび準モンテカルロ法2008、DOI 10.1007 / 978-3-642-04107-5_26、2009年11月、<http： //www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/ ADAPTIVE>。"
    },
    {
      "indent": 3,
      "text": "[Baccelli18] Baccelli, E., Gundogan, C., Hahm, O., Kietzmann, P., Lenders, M. S., Petersen, H., Schleiser, K., Schmidt, T. C., and M. Wahlisch, \"RIOT: An Open Source Operating System for Low-End Embedded Devices in the IoT\", IEEE Internet of Things Journal, Volume 5, Issue 6, DOI 10.1109/JIOT.2018.2815038, December 2018, <https://doi.org/10.1109/JIOT.2018.2815038>.",
      "ja": "[Baccelli18] Baccelli、E.、Gundogan、C.、Hahm、O.、Kietzmann、P.、Lenders、MS、Petersen、H.、Schleiser、K.、Schmidt、TC、およびM. Wahlisch、「RIOT：An IoTのローエンド組み込みデバイス向けオープンソースオペレーティングシステム」、IEEE Internet of Things Journal、Volume 5、Issue 6、DOI 10.1109 / JIOT.2018.2815038、2018年12月、<https://doi.org/10.1109/JIOT。 2018.2815038>。"
    },
    {
      "indent": 3,
      "text": "[KR12] Rikitake, K., \"TinyMT pseudo random number generator for Erlang\", Proceedings of the 11th ACM SIGPLAN Erlang Workshop, pp. 67-72, DOI 10.1145/2364489.2364504, September 2012, <https://doi.org/10.1145/2364489.2364504>.",
      "ja": "[KR12] Rikitake、K.、 \"TinyMT pseudo random number generator for Erlang\"、Proceedings of the 11th ACM SIGPLAN Erlang Workshop、pp。67-72、DOI 10.1145 / 2364489.2364504、September 2012、<https://doi.org/ 10.1145 / 2364489.2364504>。"
    },
    {
      "indent": 3,
      "text": "[MT98] Matsumoto, M. and T. Nishimura, \"Mersenne twister: A 623-dimensionally equidistributed uniform pseudo-random number generator\", ACM Transactions on Modeling and Computer Simulation (TOMACS), Volume 8, Issue 1, pp. 3-30, DOI 10.1145/272991.272995, January 1998, <https://doi.org/10.1145/272991.272995>.",
      "ja": "[MT98]松本雅人、西村哲夫、「メルセンヌツイスター：623次元の等分布一様疑似乱数ジェネレータ」、モデリングとコンピュータシミュレーションに関するACMトランザクション（TOMACS）、第8巻、第1号、3ページ。 30、DOI 10.1145 / 272991.272995、1998年1月、<https://doi.org/10.1145/272991.272995>。"
    },
    {
      "indent": 3,
      "text": "[PTVF92] Press, W., Teukolsky, S., Vetterling, W., and B. Flannery, \"Numerical recipes in C (2nd ed.): the art of scientific computing\", Cambridge University Press, ISBN 0-521-43108-5, 1992.",
      "ja": "[PTVF92]プレス、W。、トゥコルスキー、S。、ベタリング、W。、およびB.フラナリー、「Cの数値レシピ（第2版）：科学計算の芸術」、ケンブリッジ大学出版局、ISBN 0-521- 43108-5、1992。"
    },
    {
      "indent": 3,
      "text": "[RFC5170] Roca, V., Neumann, C., and D. Furodet, \"Low Density Parity Check (LDPC) Staircase and Triangle Forward Error Correction (FEC) Schemes\", RFC 5170, DOI 10.17487/RFC5170, June 2008, <https://www.rfc-editor.org/info/rfc5170>.",
      "ja": "[RFC5170] Roca、V.、Neumann、C。、およびD. Furodet、「低密度パリティチェック（LDPC）階段および三角形前方誤り訂正（FEC）スキーム」、RFC 5170、DOI 10.17487 / RFC5170、2008年6月、< https://www.rfc-editor.org/info/rfc5170>。"
    },
    {
      "indent": 3,
      "text": "[RFC8681] Roca, V. and B. Teibi, \"Sliding Window Random Linear Code (RLC) Forward Erasure Correction (FEC) Schemes for FECFRAME\", RFC 8681, DOI 10.17487/RFC8681, January 2020, <https://www.rfc-editor.org/info/rfc8681>.",
      "ja": "[RFC8681] Roca、V。およびB. Teibi、「FECFRAMEのスライディングウィンドウランダムリニアコード（RLC）前方消失訂正（FEC）スキーム」、RFC 8681、DOI 10.17487 / RFC8681、2020年1月、<https：// www。 rfc-editor.org/info/rfc8681>。"
    },
    {
      "indent": 3,
      "text": "[TestU01] L'Ecuyer, P. and R. Simard, \"TestU01: A C library for empirical testing of random number generators\", ACM Transactions on Mathematical Software (TOMS), Volume 33, Issue 4, Article 22, DOI 10.1145/1268776.1268777, August 2007, <http://simul.iro.umontreal.ca/testu01/tu01.html>.",
      "ja": "[TestU01] L'Ecuyer、P。およびR. Simard、「TestU01：乱数ジェネレータの経験的テストのためのACライブラリ」、ACM Transactions on Mathematical Software（TOMS）、Volume 33、Issue 22、Article 22、DOI 10.1145 / 1268776.1268777 、2007年8月、<http://simul.iro.umontreal.ca/testu01/tu01.html>。"
    },
    {
      "indent": 3,
      "text": "[TinyMT-dev] \"Tiny Mersenne Twister (TinyMT)\", commit 9d7ca3c, March 2018, <https://github.com/MersenneTwister-Lab/TinyMT>.",
      "ja": "[TinyMT-dev]「Tiny Mersenne Twister（TinyMT）」、コミット9d7ca3c、2018年3月、<https://github.com/MersenneTwister-Lab/TinyMT>。"
    },
    {
      "indent": 3,
      "text": "[TinyMT-params] \"TinyMT pre-calculated parameter list\", commit 30079eb, March 2013, <https://github.com/jj1bdx/tinymtdc-longbatch>.",
      "ja": "[TinyMT-params]「TinyMT事前計算済みパラメーターリスト」、コミット30079eb、2013年3月、<https://github.com/jj1bdx/tinymtdc-longbatch>。"
    },
    {
      "indent": 3,
      "text": "[TinyMT-web] Saito, M. and M. Matsumoto, \"Tiny Mersenne Twister (TinyMT)\", <http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/TINYMT/>.",
      "ja": "[TinyMT-web]斉藤雅人、松本真美、 \"Tiny Mersenne Twister（TinyMT）\"、<http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/TINYMT />。"
    },
    {
      "indent": 0,
      "text": "Acknowledgments",
      "ja": "謝辞"
    },
    {
      "indent": 3,
      "text": "The authors would like to thank Belkacem Teibi, with whom we explored TinyMT32 specificities when looking to an alternative to the Park-Miller Linear Congruential PRNG. The authors would also like to thank Carl Wallace; Stewart Bryant; Greg Skinner; Mike Heard; the three TSVWG chairs, Wesley Eddy (our shepherd), David Black, and Gorry Fairhurst; as well as Spencer Dawkins and Mirja Kuehlewind. Last but not least, the authors are really grateful to the IESG members, in particular Benjamin Kaduk, Eric Rescorla, Adam Roach, Roman Danyliw, Barry Leiba, Martin Vigoureux, and Eric Vyncke for their highly valuable feedback that greatly contributed to improving this specification.",
      "ja": "著者は、パークミラー線形合同PRNGの代替を検討する際にTinyMT32の特異性を調査したBelkacem Teibiに感謝します。著者はカール・ウォレスにも感謝します。スチュワートブライアント;グレッグスキナー;マイク・ハード; TSVWGの3つの椅子、ウェズリーエディ（私たちの羊飼い）、デビッドブラック、ゴーリーフェアハースト。スペンサードーキンスとミルハキュールウィンドも同様です。最後に重要なこととして、著者はIESGメンバー、特にBenjamin Kaduk、Eric Rescorla、Adam Roach、Roman Danyliw、Barry Leiba、Martin Vigoureux、およびEric Vynckeに、この仕様の改善に大きく貢献した非常に貴重なフィードバックに本当に感謝しています。"
    },
    {
      "indent": 0,
      "text": "Authors' Addresses",
      "ja": "著者のアドレス"
    },
    {
      "indent": 3,
      "text": "Mutsuo Saito Hiroshima University Japan",
      "ja": "むつお さいと ひろしま うにゔぇｒしｔｙ じゃぱん"
    },
    {
      "indent": 3,
      "text": "Email: saito@math.sci.hiroshima-u.ac.jp",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "Makoto Matsumoto Hiroshima University Japan",
      "ja": "まこと まつもと ひろしま うにゔぇｒしｔｙ じゃぱん"
    },
    {
      "indent": 3,
      "text": "Email: m-mat@math.sci.hiroshima-u.ac.jp",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "Vincent Roca (editor) INRIA Univ. Grenoble Alpes France",
      "ja": "ヴィンセントロカ（編集者）INRIA大学グルノーブルアルプフランス"
    },
    {
      "indent": 3,
      "text": "Email: vincent.roca@inria.fr",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "Emmanuel Baccelli INRIA France",
      "ja": "Emmanuel Baccelli INRIAフランス"
    },
    {
      "indent": 3,
      "text": "Email: emmanuel.baccelli@inria.fr",
      "raw": true,
      "ja": ""
    }
  ]
}