{
  "title": {
    "text": "RFC 8473 - Token Binding over HTTP",
    "ja": "RFC 8473 - HTTPを介したトークンのバインド"
  },
  "number": 8473,
  "created_at": "2020-08-23 19:13:46.867164+09:00",
  "updated_by": "",
  "contents": [
    {
      "indent": 0,
      "text": "Internet Engineering Task Force (IETF)                          A. Popov\nRequest for Comments: 8473                                   M. Nystroem\nCategory: Standards Track                                Microsoft Corp.\nISSN: 2070-1721                                          D. Balfanz, Ed.\n                                                               N. Harper\n                                                             Google Inc.\n                                                               J. Hodges\n                                                  Kings Mountain Systems\n                                                            October 2018",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 24,
      "text": "Token Binding over HTTP",
      "ja": "HTTPを介したトークンのバインド"
    },
    {
      "indent": 0,
      "text": "Abstract",
      "ja": "概要"
    },
    {
      "indent": 3,
      "text": "This document describes a collection of mechanisms that allow HTTP servers to cryptographically bind security tokens (such as cookies and OAuth tokens) to TLS connections.",
      "ja": "このドキュメントでは、HTTPサーバーがセキュリティトークン（CookieやOAuthトークンなど）をTLS接続に暗号でバインドできるようにするメカニズムのコレクションについて説明します。"
    },
    {
      "indent": 3,
      "text": "We describe both first-party and federated scenarios. In a first-party scenario, an HTTP server is able to cryptographically bind the security tokens that it issues to a client -- and that the client subsequently returns to the server -- to the TLS connection between the client and the server. Such bound security tokens are protected from misuse, since the server can generally detect if they are replayed inappropriately, e.g., over other TLS connections.",
      "ja": "ファーストパーティシナリオとフェデレーションシナリオの両方について説明します。ファーストパーティのシナリオでは、HTTPサーバーは、クライアントに発行するセキュリティトークンを暗号化してバインドでき、クライアントがサーバーに戻るときに、クライアントとサーバー間のTLS接続にバインドします。サーバーは一般に、たとえば他のTLS接続を介して不適切に再生されたかどうかを検出できるため、このようなバインドされたセキュリティトークンは誤用から保護されます。"
    },
    {
      "indent": 3,
      "text": "Federated Token Bindings, on the other hand, allow servers to cryptographically bind security tokens to a TLS connection that the client has with a different server than the one issuing the token.",
      "ja": "一方、フェデレーテッドトークンバインドを使用すると、サーバーは、セキュリティトークンを、クライアントがトークンを発行するサーバーとは異なるサーバーとのTLS接続に暗号でバインドできるようになります。"
    },
    {
      "indent": 3,
      "text": "This document is a companion document to \"The Token Binding Protocol Version 1.0\" (RFC 8471).",
      "ja": "このドキュメントは、「トークンバインディングプロトコルバージョン1.0」（RFC 8471）の関連ドキュメントです。"
    },
    {
      "indent": 0,
      "text": "Status of This Memo",
      "ja": "本文書の状態"
    },
    {
      "indent": 3,
      "text": "This is an Internet Standards Track document.",
      "ja": "これはInternet Standards Trackドキュメントです。"
    },
    {
      "indent": 3,
      "text": "This document is a product of the Internet Engineering Task Force (IETF). It represents the consensus of the IETF community. It has received public review and has been approved for publication by the Internet Engineering Steering Group (IESG). Further information on Internet Standards is available in Section 2 of RFC 7841.",
      "ja": "このドキュメントは、IETF（Internet Engineering Task Force）の製品です。これは、IETFコミュニティのコンセンサスを表しています。公開レビューを受け、インターネットエンジニアリングステアリンググループ（IESG）による公開が承認されました。インターネット標準の詳細については、RFC 7841のセクション2をご覧ください。"
    },
    {
      "indent": 3,
      "text": "Information about the current status of this document, any errata, and how to provide feedback on it may be obtained at https://www.rfc-editor.org/info/rfc8473.",
      "ja": "このドキュメントの現在のステータス、正誤表、およびフィードバックの提供方法に関する情報は、https：//www.rfc-editor.org/info/rfc8473で入手できます。"
    },
    {
      "indent": 0,
      "text": "Copyright Notice",
      "ja": "著作権表示"
    },
    {
      "indent": 3,
      "text": "Copyright (c) 2018 IETF Trust and the persons identified as the document authors. All rights reserved.",
      "ja": "Copyright（c）2018 IETF Trustおよびドキュメントの作成者として識別された人物。全著作権所有。"
    },
    {
      "indent": 3,
      "text": "This document is subject to BCP 78 and the IETF Trust's Legal Provisions Relating to IETF Documents (https://trustee.ietf.org/license-info) in effect on the date of publication of this document. Please review these documents carefully, as they describe your rights and restrictions with respect to this document. Code Components extracted from this document must include Simplified BSD License text as described in Section 4.e of the Trust Legal Provisions and are provided without warranty as described in the Simplified BSD License.",
      "ja": "この文書は、BCP 78およびIETF文書に関するIETFトラストの法的規定（https://trustee.ietf.org/license-info）の対象であり、この文書の発行日に有効です。これらのドキュメントは、このドキュメントに関するあなたの権利と制限を説明しているため、注意深く確認してください。このドキュメントから抽出されたコードコンポーネントには、Trust Legal Provisionsのセクション4.eに記載されているSimplified BSD Licenseのテキストが含まれている必要があり、Simplified BSD Licenseに記載されているように保証なしで提供されます。"
    },
    {
      "indent": 0,
      "text": "Table of Contents",
      "ja": "目次"
    },
    {
      "indent": 3,
      "text": "1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   3\n  1.1.  Requirements Language . . . . . . . . . . . . . . . . . .   3\n2.  The Sec-Token-Binding HTTP Request Header Field . . . . . . .   4\n  2.1.  HTTPS Token Binding Key-Pair Scoping  . . . . . . . . . .   5\n3.  TLS Renegotiation . . . . . . . . . . . . . . . . . . . . . .   6\n4.  First-Party Use Cases . . . . . . . . . . . . . . . . . . . .   7\n5.  Federation Use Cases  . . . . . . . . . . . . . . . . . . . .   7\n  5.1.  Introduction  . . . . . . . . . . . . . . . . . . . . . .   7\n  5.2.  Overview  . . . . . . . . . . . . . . . . . . . . . . . .   8\n  5.3.  HTTP Redirects  . . . . . . . . . . . . . . . . . . . . .  10\n  5.4.  Negotiated Key Parameters . . . . . . . . . . . . . . . .  12\n  5.5.  Federation Example  . . . . . . . . . . . . . . . . . . .  13\n6.  Implementation Considerations . . . . . . . . . . . . . . . .  15\n7.  Security Considerations . . . . . . . . . . . . . . . . . . .  16\n  7.1.  Security Token Replay . . . . . . . . . . . . . . . . . .  16\n  7.2.  Sensitivity of the Sec-Token-Binding Header . . . . . . .  16\n  7.3.  Securing Federated Sign-On Protocols  . . . . . . . . . .  17\n8.  Privacy Considerations  . . . . . . . . . . . . . . . . . . .  20\n  8.1.  Scoping of Token Binding Key Pairs  . . . . . . . . . . .  20\n  8.2.  Lifetime of Token Binding Key Pairs . . . . . . . . . . .  20\n  8.3.  Correlation . . . . . . . . . . . . . . . . . . . . . . .  21\n9.  IANA Considerations . . . . . . . . . . . . . . . . . . . . .  22\n10. References  . . . . . . . . . . . . . . . . . . . . . . . . .  22\n  10.1.  Normative References . . . . . . . . . . . . . . . . . .  22\n  10.2.  Informative References . . . . . . . . . . . . . . . . .  23\nAcknowledgements  . . . . . . . . . . . . . . . . . . . . . . . .  25\nAuthors' Addresses  . . . . . . . . . . . . . . . . . . . . . . .  25",
      "raw": true,
      "toc": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "1. Introduction",
      "section_title": true,
      "ja": "1. はじめに"
    },
    {
      "indent": 3,
      "text": "The Token Binding protocol [RFC8471] defines a Token Binding ID for a TLS connection between a client and a server. The Token Binding ID of a TLS connection is constructed using the public key of a private-public key pair. The client proves possession of the corresponding private key. This Token Binding key pair is long-lived. That is, subsequent TLS connections between the same client and server have the same Token Binding ID, unless specifically reset, e.g., by the user. When issuing a security token (e.g., an HTTP cookie or an OAuth token [RFC6749]) to a client, the server can include the Token Binding ID in the token, thus cryptographically binding the token to TLS connections between that particular client and server, and inoculating the token against abuse (reuse, attempted impersonation, etc.) by attackers.",
      "ja": "トークンバインディングプロトコル[RFC8471]は、クライアントとサーバー間のTLS接続のトークンバインディングIDを定義します。 TLS接続のトークンバインディングIDは、秘密鍵と公開鍵のペアの公開鍵を使用して構築されます。クライアントは、対応する秘密鍵の所有を証明します。このトークンバインディングキーペアは長期間有効です。つまり、ユーザーなどによって特にリセットされない限り、同じクライアントとサーバー間の後続のTLS接続は同じトークンバインディングIDを持ちます。セキュリティトークン（HTTP CookieまたはOAuthトークン[RFC6749]など）をクライアントに発行する場合、サーバーはトークンバインディングIDをトークンに含めることができます。これにより、特定のクライアントとサーバー間のTLS接続にトークンを暗号的にバインドします。攻撃者による悪用（再利用、なりすましの試みなど）に対してトークンを接種する。"
    },
    {
      "indent": 3,
      "text": "While the Token Binding protocol [RFC8471] defines a message format for establishing a Token Binding ID, it does not specify how this message is embedded in higher-level protocols. The purpose of this specification is to define how TokenBindingMessages are embedded in HTTP (both versions 1.1 [RFC7230] and 2 [RFC7540]). Note that TokenBindingMessages are only defined if the underlying transport uses TLS. This means that Token Binding over HTTP is only defined when HTTP is layered on top of TLS (commonly referred to as HTTPS [RFC2818]).",
      "ja": "トークンバインディングプロトコル[RFC8471]は、トークンバインディングIDを確立するためのメッセージ形式を定義しますが、このメッセージを上位レベルのプロトコルに埋め込む方法は指定していません。この仕様の目的は、TokenBindingMessagesをHTTPに埋め込む方法を定義することです（バージョン1.1 [RFC7230]と2 [RFC7540]の両方）。 TokenBindingMessagesは、基になるトランスポートがTLSを使用する場合にのみ定義されることに注意してください。つまり、HTTPを介したトークンバインディングは、HTTPがTLS（一般的にHTTPS [RFC2818]と呼ばれる）の上に階層化されている場合にのみ定義されます。"
    },
    {
      "indent": 3,
      "text": "HTTP clients establish a Token Binding ID with a server by including a special HTTP header field in HTTP requests. The HTTP header field value is a base64url-encoded TokenBindingMessage.",
      "ja": "HTTPクライアントは、HTTPリクエストに特別なHTTPヘッダーフィールドを含めることにより、サーバーとのトークンバインディングIDを確立します。 HTTPヘッダーフィールドの値は、base64urlでエンコードされたTokenBindingMessageです。"
    },
    {
      "indent": 3,
      "text": "A TokenBindingMessage allows a client to establish multiple Token Binding IDs with the server by including multiple TokenBinding structures. By default, a client will establish a Provided Token Binding ID with the server, indicating a Token Binding ID that the client will persistently use with the server. Under certain conditions, the client can also include a Referred Token Binding ID in the TokenBindingMessage, indicating a Token Binding ID that the client is using with a different server than the one that the TokenBindingMessage is sent to. This is useful in federation scenarios.",
      "ja": "TokenBindingMessageを使用すると、クライアントは、複数のTokenBinding構造を含めることにより、サーバーとの複数のトークンバインディングIDを確立できます。デフォルトでは、クライアントはサーバーで提供されたトークンバインディングIDを確立し、クライアントがサーバーで永続的に使用するトークンバインディングIDを示します。特定の条件下では、クライアントは、Referred Token Binding IDをTokenBindingMessageに含めることもできます。これは、TokenBindingMessageの送信先とは異なるサーバーでクライアントが使用しているトークンバインディングIDを示します。これはフェデレーションシナリオで役立ちます。"
    },
    {
      "indent": 0,
      "text": "1.1. Requirements Language",
      "section_title": true,
      "ja": "1.1. 要件言語"
    },
    {
      "indent": 3,
      "text": "The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as described in BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all capitals, as shown here.",
      "ja": "キーワード「MUST」、「MUST NOT」、「REQUIRED」、「SHALL」、「SHALL NOT」、「SHOULD」、「SHOULD NOT」、「RECOMMENDED」、「NOT RECOMMENDED」、「MAY」、「OPTIONALこのドキュメントの「」は、BCP 14 [RFC2119] [RFC8174]で説明されているように解釈されます。"
    },
    {
      "indent": 0,
      "text": "2. The Sec-Token-Binding HTTP Request Header Field",
      "section_title": true,
      "ja": "2. Sec-Token-Binding HTTPリクエストヘッダーフィールド"
    },
    {
      "indent": 3,
      "text": "Once a client and server have negotiated the Token Binding protocol with HTTP/1.1 or HTTP/2 (see [RFC8471] and [RFC8472]), clients MUST include a Sec-Token-Binding header field in their HTTP requests and MUST include only one such header field per HTTP request. Also, the Sec-Token-Binding header field MUST NOT be included in HTTP responses. The ABNF of the Sec-Token-Binding header field is (per the style of [RFC7230]; see also Section 8.3 of [RFC7231]):",
      "ja": "クライアントとサーバーがトークンバインディングプロトコルをHTTP / 1.1またはHTTP / 2（[RFC8471]および[RFC8472]を参照）とネゴシエートすると、クライアントはHTTPリクエストにSec-Token-Bindingヘッダーフィールドを含めなければならず、1つだけを含めなければなりません（MUST）。 HTTPリクエストごとのこのようなヘッダーフィールド。また、Sec-Token-BindingヘッダーフィールドをHTTP応答に含めることはできません。 Sec-Token-BindingヘッダーフィールドのABNFは（[RFC7230]のスタイルによる。[RFC7231]のセクション8.3も参照）："
    },
    {
      "indent": 6,
      "text": "Sec-Token-Binding = EncodedTokenBindingMessage",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "The header field name is Sec-Token-Binding, and its single value, EncodedTokenBindingMessage, is a base64url encoding of a single TokenBindingMessage, as defined in [RFC8471]. The base64url encoding uses the URL and filename safe character set described in Section 5 of [RFC4648], with all trailing padding characters (i.e., \"=\") omitted and without the inclusion of any line breaks, whitespace, or other additional characters.",
      "ja": "ヘッダーフィールド名はSec-Token-Bindingであり、その単一の値EncodedTokenBindingMessageは、[RFC8471]で定義されているように、単一のTokenBindingMessageのbase64urlエンコーディングです。 base64urlエンコーディングは、[RFC4648]のセクション5で説明されているURLとファイル名の安全な文字セットを使用し、末尾の埋め込み文字（「=」など）をすべて省略し、改行、空白、その他の追加文字を含めません。"
    },
    {
      "indent": 3,
      "text": "For example:",
      "ja": "例えば："
    },
    {
      "indent": 2,
      "text": "Sec-Token-Binding: AIkAAgBBQFzK4_bhAqLDwRQxqJWte33d7hZ0hZWHwk-miKPg4E\\ 9fcgs7gBPoz-9RfuDfN9WCw6keHEw1ZPQMGs9CxpuHm-YAQM_j\\ aOwwej6a-cQBGU7CJpUHOvXG4VvjNq8jDsvta9Y8_bPEPj25Gg\\ mKiPjhJEtZA6mJ_9SNifLvVBTi7fR9wSAAAA",
      "ja": "SEC-トークンバインディング：AIkAAgBBQFzK4_bhAqLDwRQxqJWte33d7hZ0hZWHwk-miKPg4E \\ 9fcgs7gBPoz-9RfuDfN9WCw6keHEw1ZPQMGs9CxpuHm-YAQM_j \\ aOwwej6a-cQBGU7CJpUHOvXG4VvjNq8jDsvta9Y8_bPEPj25Gg \\ mKiPjhJEtZA6mJ_9SNifLvVBTi7fR9wSAAAA"
    },
    {
      "indent": 3,
      "text": "(Note that the backslashes and line breaks are provided to ease readability; they are not part of the actual encoded message.)",
      "ja": "（バックスラッシュと改行は読みやすくするために提供されていることに注意してください。これらは実際のエンコードされたメッセージの一部ではありません。）"
    },
    {
      "indent": 3,
      "text": "If the server receives more than one Sec-Token-Binding header field in an HTTP request, then the server MUST reject the message with a 400 (Bad Request) HTTP status code. Additionally, the Sec-Token-Binding header field:",
      "ja": "サーバーがHTTPリクエストで複数のSec-Token-Bindingヘッダーフィールドを受信する場合、サーバーは400（Bad Request）HTTPステータスコードでメッセージを拒否する必要があります。さらに、Sec-Token-Bindingヘッダーフィールド："
    },
    {
      "indent": 3,
      "text": "o SHOULD NOT be stored by origin servers on PUT requests,",
      "ja": "o オリジンサーバーがPUTリクエストに保存するべきではありません。"
    },
    {
      "indent": 3,
      "text": "o MAY be listed by a server in a Vary response header field, and",
      "ja": "o サーバーによってVary応答ヘッダーフィールドにリストされる場合があります。"
    },
    {
      "indent": 3,
      "text": "o MUST NOT be used in HTTP trailers.",
      "ja": "o HTTPトレーラーでは使用しないでください。"
    },
    {
      "indent": 3,
      "text": "The TokenBindingMessage MUST contain exactly one TokenBinding structure with a TokenBindingType value of provided_token_binding, which MUST be signed with the Token Binding private key used by the client for connections between itself and the server that the HTTP request is sent to (clients use different Token Binding key pairs for different servers; see Section 2.1 below). The Token Binding ID",
      "ja": "TokenBindingMessageは、providered_token_bindingのTokenBindingType値を持つTokenBinding構造を1つだけ含む必要があり、HTTPリクエストの送信先であるサーバーとの間の接続にクライアントが使用するトークンバインディングのプライベートキーで署名する必要があります（クライアントは異なるトークンバインディングキーを使用します）異なるサーバーのペア;以下のセクション2.1を参照）。トークンバインディングID"
    },
    {
      "indent": 3,
      "text": "established by this TokenBinding is called a \"Provided Token Binding ID\".",
      "ja": "このTokenBindingによって確立されたものは、「提供されたトークンバインディングID」と呼ばれます。"
    },
    {
      "indent": 3,
      "text": "The TokenBindingMessage MAY also contain exactly one TokenBinding structure with a TokenBindingType value of referred_token_binding, as specified in Section 5.3. In addition to the latter, or rather than the latter, the TokenBindingMessage MAY contain other TokenBinding structures. This is specific to the use case in question; such use cases are outside the scope of this specification.",
      "ja": "TokenBindingMessageには、セクション5.3で指定されているように、referred_token_bindingのTokenBindingType値を持つTokenBinding構造が1つだけ含まれている場合があります。後者に加えて、または後者ではなく、TokenBindingMessageに他のTokenBinding構造が含まれる場合があります。これは問題のユースケースに固有です。このような使用例は、この仕様の範囲外です。"
    },
    {
      "indent": 3,
      "text": "A TokenBindingMessage is validated by the server as described in Section 4.2 (\"Server Processing Rules\") of [RFC8471]. If validation fails and a Token Binding is rejected, any associated bound tokens MUST also be rejected by the server. HTTP requests containing invalid tokens MUST be rejected. In this case, the server application MAY return HTTP status code 400 (Bad Request) or proceed with an application-specific \"invalid token\" response (e.g., directing the client to re-authenticate and present a different token), or terminate the connection.",
      "ja": "[RFC8471]のセクション4.2（「サーバー処理ルール」）で説明されているように、TokenBindingMessageはサーバーによって検証されます。検証が失敗し、トークンバインディングが拒否された場合、関連付けられたバインドされたトークンもサーバーによって拒否される必要があります。無効なトークンを含むHTTPリクエストは拒否する必要があります。この場合、サーバーアプリケーションはHTTPステータスコード400（不正な要求）を返すか、アプリケーション固有の「無効なトークン」応答（クライアントに再認証して別のトークンを提示するように指示するなど）を続行するか、接続を終了する場合があります。 。"
    },
    {
      "indent": 3,
      "text": "In HTTP/2, the client SHOULD use header compression [RFC7541] to avoid the overhead of repeating the same header field in subsequent HTTP requests.",
      "ja": "HTTP / 2では、クライアントは後続のHTTPリクエストで同じヘッダーフィールドを繰り返すオーバーヘッドを回避するためにヘッダー圧縮[RFC7541]を使用する必要があります（SHOULD）。"
    },
    {
      "indent": 0,
      "text": "2.1. HTTPS Token Binding Key-Pair Scoping",
      "section_title": true,
      "ja": "2.1. HTTPSトークンバインディングキーペアスコープ"
    },
    {
      "indent": 3,
      "text": "HTTPS is used in conjunction with various application protocols and application contexts, in various ways. For example, general-purpose web browsing is one such HTTP-based application context. Within that context, HTTP cookies [RFC6265] are typically utilized for state management, including client authentication. A related, though distinct, example of other HTTP-based application contexts is where OAuth tokens [RFC6749] are utilized to manage authorization for third-party application access to resources. The token-scoping rules of these two examples can differ: the scoping rules for cookies are concisely specified in [RFC6265], whereas OAuth is a framework and defines various token types with various scopings, some of which are determined by the encompassing application.",
      "ja": "HTTPSは、さまざまなアプリケーションプロトコルおよびアプリケーションコンテキストと組み合わせて、さまざまな方法で使用されます。たとえば、汎用のWebブラウジングは、そのようなHTTPベースのアプリケーションコンテキストの1つです。そのコンテキスト内では、HTTP Cookie [RFC6265]は通常、クライアント認証を含む状態管理に使用されます。他のHTTPベースのアプリケーションコンテキストの関連しますが、別個の例ですが、OAuthトークン[RFC6749]を使用して、リソースへのサードパーティアプリケーションアクセスの承認を管理します。これら2つの例のトークンスコープ規則は異なる場合があります。Cookieのスコープ規則は[RFC6265]で簡潔に指定されていますが、OAuthはフレームワークであり、さまざまなスコープを持つさまざまなトークンタイプを定義します。"
    },
    {
      "indent": 3,
      "text": "The scoping of Token Binding key pairs generated by web browsers for the purpose of binding HTTP cookies MUST be no wider than the granularity of a \"registered domain\" (also known as \"effective top-level domain + 1\", or \"eTLD+1\"). An origin's \"registered domain\" is the origin's host's public suffix plus the label to its left (where the term \"public suffix\" is defined in the \"NOTE:\" paragraph in Section 5.3 of [RFC6265] as \"a domain that is controlled by a public registry\"). For example, for \"https://www.example.com\", the public suffix (eTLD) is \"com\", and the registered domain (eTLD+1) is",
      "ja": "HTTP Cookieをバインドする目的でWebブラウザーによって生成されたトークンバインディングキーペアのスコープは、「登録済みドメイン」（「有効なトップレベルドメイン+ 1」または「eTLD + 1」とも呼ばれます）の粒度よりも広くてはなりません（MUST）。 \"）。オリジンの「登録済みドメイン」は、オリジンのホストのパブリックサフィックスとその左側のラベルです（「パブリックサフィックス」という用語は、[RFC6265]のセクション5.3の「注記：」段落で「によって制御されるドメイン」として定義されています公共レジストリ」）。たとえば、「https://www.example.com」の場合、パブリックサフィックス（eTLD）は「com」であり、登録済みドメイン（eTLD + 1）は"
    },
    {
      "indent": 3,
      "text": "\"example.com\". User Agents SHOULD use an up-to-date public suffix list, such as the one maintained by Mozilla [PSL].",
      "ja": "「example.com」。ユーザーエージェントは、Mozilla [PSL]によって維持されているリストなど、最新のパブリックサフィックスリストを使用する必要があります（SHOULD）。"
    },
    {
      "indent": 3,
      "text": "This means that in practice the scope of a Token Binding key pair is no larger than the scope of a cookie allowed by a web browser. If a web browser restricts cookies to a narrower scope than registered domains, the scope of Token Binding key pairs MAY also be narrower. This applies to the use of Token Binding key pairs in first-party use cases, as well as in federation use cases defined in this specification (Section 5).",
      "ja": "つまり、実際には、トークンバインディングキーペアのスコープは、Webブラウザで許可されているCookieのスコープよりも大きくありません。 WebブラウザがCookieを登録済みドメインよりも狭い範囲に制限している場合、トークンバインディングキーペアの範囲もより狭い可能性があります。これは、ファーストパーティのユースケース、およびこの仕様で定義されているフェデレーションのユースケース（セクション5）でのトークンバインディングキーペアの使用に適用されます。"
    },
    {
      "indent": 3,
      "text": "Key pairs used to bind other application tokens, such as OAuth tokens or \"OpenID Connect\" ID Tokens [OpenID.Core], SHOULD adhere to the above eTLD+1 scoping requirement for those tokens being employed in first-party or federation scenarios. Applications other than web browsers MAY use different key-pair scoping rules. See also Section 8.1 below.",
      "ja": "OAuthトークンや「OpenID Connect」IDトークン[OpenID.Core]などの他のアプリケーショントークンをバインドするために使用されるキーペアは、ファーストパーティまたはフェデレーションシナリオで使用されるこれらのトークンに対する上記のeTLD + 1スコープ要件に準拠する必要があります。 Webブラウザー以外のアプリケーションは、異なるキーペアスコープルールを使用する場合があります。以下のセクション8.1も参照してください。"
    },
    {
      "indent": 3,
      "text": "Scoping rules for other HTTP-based application contexts are outside the scope of this specification.",
      "ja": "他のHTTPベースのアプリケーションコンテキストのスコープ規則は、この仕様の範囲外です。"
    },
    {
      "indent": 0,
      "text": "3. TLS Renegotiation",
      "section_title": true,
      "ja": "3. TLS再ネゴシエーション"
    },
    {
      "indent": 3,
      "text": "Token Binding over HTTP/1.1 [RFC7230] can be performed in combination with TLS renegotiation. In this case, renegotiation MUST only occur between a client's HTTP request and the server's response, the client MUST NOT send any pipelined requests, and the client MUST NOT initiate renegotiation. (That is, the client may only send a renegotiation ClientHello in response to the server's HelloRequest.) These conditions ensure that both the client and the server can clearly identify which TLS Exported Keying Material value [RFC5705] to use when generating or verifying the TokenBindingMessage. This also prevents a TokenBindingMessage from being split across TLS renegotiation boundaries due to TLS message fragmentation; see Section 6.2.1 of [RFC5246].",
      "ja": "HTTP / 1.1上のトークンバインディング[RFC7230]は、TLS再ネゴシエーションと組み合わせて実行できます。この場合、再ネゴシエーションはクライアントのHTTP要求とサーバーの応答の間でのみ発生しなければならず、クライアントはパイプライン要求を送信してはならず（MUST）、クライアントは再ネゴシエーションを開始してはなりません（MUST NOT）。 （つまり、クライアントはサーバーのHelloRequestに応答して再ネゴシエーションClientHelloのみを送信できます。）これらの条件により、クライアントとサーバーの両方が、TokenBindingMessageを生成または検証するときに使用するTLS Exported Keying Material値[RFC5705]を明確に識別できます。 。これにより、TLSメッセージの断片化が原因で、TokenBindingMessageがTLS再ネゴシエーション境界を越えて分割されることも防止されます。 [RFC5246]のセクション6.2.1を参照してください。"
    },
    {
      "indent": 3,
      "text": "(Note: This document deals with TLS 1.2 and therefore refers to RFC 5246 (which has been obsoleted by RFC 8446); [TOKENBIND-TLS13] addresses Token Binding in TLS 1.3.)",
      "ja": "（注：このドキュメントはTLS 1.2を扱っているため、RFC 5246に言及しています（RFC 8446によって廃止されました）。[TOKENBIND-TLS13]はTLS 1.3のトークンバインディングに対応しています。）"
    },
    {
      "indent": 0,
      "text": "4. First-Party Use Cases",
      "section_title": true,
      "ja": "4. ファーストパーティのユースケース"
    },
    {
      "indent": 3,
      "text": "In a first-party use case (also known as a \"same-site\" use case), an HTTP server issues a security token such as a cookie (or similar) to a client and expects the client to return the security token at a later time, e.g., in order to authenticate. Binding the security token to the TLS connection between the client and the server protects the security token from misuse, since the server can detect if the security token is replayed inappropriately, e.g., over other TLS connections.",
      "ja": "ファーストパーティのユースケース（「同じサイト」のユースケースとも呼ばれます）では、HTTPサーバーはCookie（または同様のもの）などのセキュリティトークンをクライアントに発行し、クライアントがクライアントでセキュリティトークンを返すことを期待します。後で、たとえば認証するため。セキュリティトークンをクライアントとサーバー間のTLS接続にバインドすると、サーバーがセキュリティトークンが不適切に（たとえば他のTLS接続を介して）再生されたかどうかを検出できるため、セキュリティトークンが悪用されるのを防ぎます。"
    },
    {
      "indent": 3,
      "text": "See Section 5 of [RFC8471] for general guidance regarding the binding of security tokens and their subsequent validation.",
      "ja": "セキュリティトークンのバインドとその後の検証に関する一般的なガイダンスについては、[RFC8471]のセクション5を参照してください。"
    },
    {
      "indent": 0,
      "text": "5. Federation Use Cases",
      "section_title": true,
      "ja": "5. フェデレーションの使用例"
    },
    {
      "indent": 0,
      "text": "5.1. Introduction",
      "section_title": true,
      "ja": "5.1. はじめに"
    },
    {
      "indent": 3,
      "text": "For privacy reasons, clients use different Token Binding key pairs to establish Provided Token Binding IDs with different servers. As a result, a server cannot bind a security token (such as an OAuth token or an OpenID Connect ID Token [OpenID.Core]) to a TLS connection that the client has with a different server. This is, however, a common requirement in federation scenarios: for example, an Identity Provider may wish to issue an identity token to a client and cryptographically bind that token to the TLS connection between the client and a Relying Party.",
      "ja": "プライバシー上の理由から、クライアントは異なるトークンバインディングキーペアを使用して、異なるサーバーで提供されたトークンバインディングIDを確立します。その結果、サーバーはセキュリティトークン（OAuthトークンやOpenID Connect IDトークン[OpenID.Core]など）を、クライアントが別のサーバーと持っているTLS接続にバインドできません。ただし、これはフェデレーションシナリオの一般的な要件です。たとえば、IDプロバイダーはIDトークンをクライアントに発行し、そのトークンをクライアントと証明書利用者間のTLS接続に暗号でバインドする場合があります。"
    },
    {
      "indent": 3,
      "text": "In this section, we describe mechanisms to achieve this. The common idea among these mechanisms is that a server (called the \"Token Consumer\" in this document) signals to the client that it should reveal the Provided Token Binding ID that is used between the client and itself to another server (called the \"Token Provider\" in this document). Also common across the mechanisms is how the Token Binding ID is revealed to the Token Provider: the client uses the Token Binding protocol [RFC8471] and includes a TokenBinding structure in the Sec-Token-Binding HTTP header field defined above. What differs between the various mechanisms is how the Token Consumer signals to the client that it should reveal the Token Binding ID to the Token Provider. Below, we specify one such mechanism, which is suitable for redirect-based interactions between Token Consumers and Token Providers.",
      "ja": "このセクションでは、これを実現するメカニズムについて説明します。これらのメカニズムの共通の考え方は、サーバー（このドキュメントでは「トークンコンシューマー」と呼ばれます）は、クライアントとそれ自体の間で使用される提供トークンバインディングID（「トークン」と呼ばれます）を明らかにする必要があることをクライアントに通知するということです。このドキュメントの「プロバイダー」）。また、メカニズム全体で共通するのは、トークンバインディングIDがトークンプロバイダーに公開される方法です。クライアントはトークンバインディングプロトコル[RFC8471]を使用し、上で定義したSec-Token-Binding HTTPヘッダーフィールドにTokenBinding構造を含めます。さまざまなメカニズムの違いは、トークンコンシューマーがトークンバインディングIDをトークンプロバイダーに公開する必要があることをクライアントに通知する方法です。以下では、そのようなメカニズムの1つを指定します。これは、トークンコンシューマーとトークンプロバイダー間のリダイレクトベースの対話に適しています。"
    },
    {
      "indent": 3,
      "text": "Client                        Token Consumer         Token Provider\n+--------+                        +----+                +-----+\n| Client |                        | TC |                | TP  |\n+--------+                        +----+                +-----+\n    |                               |                      |\n    |                               |                      |\n    |                               |                      |\n    | Client interacts w/TC         |                      |\n    | using TokenBindingID TBID1:   |                      |\n    | TBMSG[[provided_token_binding,|                      |\n    |        TBID1, signature]]     |                      |\n    |------------------------------>|                      |\n    |                               |                      |\n    | Client interacts w/TP                                |\n    | using TokenBindingID TBID2:                          |\n    | TBMSG[[provided_token_binding,                       |\n    |        TBID2, signature]]                            |\n    |----------------------------------------------------->|\n    |                                                      |\n    |                               |                      |\n    | TC signals permission to      |                      |\n    | reveal TBID1 to TP            |                      |\n    |<------------------------------|                      |\n    |                               |                      |\n    |                                                      |\n    | Client interacts w/TP                                |\n    | using TokenBindingID TBID1 and TBID2:                |\n    | TBMSG[[provided_token_binding,                       |\n    |        TBID2, signature],                            |\n    |       [referred_token_binding,                       |\n    |        TBID1, signature]]                            |\n    |----------------------------------------------------->|\n    |                                                      |\n    |                               |                      |\n    |                               |                      |",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "5.2. Overview",
      "section_title": true,
      "ja": "5.2. 概観"
    },
    {
      "indent": 3,
      "text": "In a federated sign-on protocol, an Identity Provider issues an identity token to a client, which sends the identity token to a Relying Party to authenticate itself. Examples of this include OpenID Connect (in which the identity token is called an \"ID Token\") and the Security Assertion Markup Language (SAML) [OASIS.saml-core-2.0-os] (in which the identity token is a SAML assertion).",
      "ja": "フェデレーテッドサインオンプロトコルでは、IDプロバイダーはIDトークンをクライアントに発行し、クライアントはIDトークンを証明書利用者に送信して自分自身を認証します。この例には、OpenID Connect（IDトークンが「IDトークン」と呼ばれる）およびSecurity Assertion Markup Language（SAML）[OASIS.saml-core-2.0-os]（IDトークンがSAMLアサーションである）が含まれます）。"
    },
    {
      "indent": 3,
      "text": "To better protect the security of the identity token, the Identity Provider may wish to bind the identity token to the TLS connection between the client and the Relying Party, thus ensuring that only said client can use the identity token. The Relying Party will compare the Token Binding ID (or a cryptographic hash of it) in the identity token with the Token Binding ID (or a hash thereof) of the TLS connection between this Relying Party and the client.",
      "ja": "IDトークンのセキュリティをよりよく保護するために、IDプロバイダーはIDトークンをクライアントと依拠当事者間のTLS接続にバインドして、そのクライアントだけがIDトークンを使用できるようにする場合があります。証明書利用者は、IDトークン内のトークンバインディングID（またはその暗号化ハッシュ）を、この証明書利用者とクライアント間のTLS接続のトークンバインディングID（またはそのハッシュ）と比較します。"
    },
    {
      "indent": 3,
      "text": "This is an example of a federation scenario, which more generally can be described as follows:",
      "ja": "これはフェデレーションシナリオの例であり、より一般的には次のように説明できます。"
    },
    {
      "indent": 3,
      "text": "o A Token Consumer causes the client to issue a token request to the Token Provider. The goal is for the client to obtain a token and then use it with the Token Consumer.",
      "ja": "o トークンコンシューマは、クライアントにトークンリクエストをトークンプロバイダーに発行させます。目標は、クライアントがトークンを取得し、それをトークンコンシューマで使用することです。"
    },
    {
      "indent": 3,
      "text": "o The client delivers the token request to the Token Provider.",
      "ja": "o クライアントはトークン要求をトークンプロバイダーに配信します。"
    },
    {
      "indent": 3,
      "text": "o The Token Provider issues the token. The token is issued for the specific Token Consumer who requested it (thus preventing malicious Token Consumers from using tokens with other Token Consumers). The token is, however, typically a bearer token, meaning that any client can use it with the Token Consumer -- not just the client to which it was issued.",
      "ja": "o トークンプロバイダーはトークンを発行します。トークンは、それを要求した特定のトークンコンシューマに対して発行されます（したがって、悪意のあるトークンコンシューマが他のトークンコンシューマでトークンを使用するのを防ぎます）。ただし、トークンは通常、ベアラートークンです。つまり、トークンは、それが発行されたクライアントだけでなく、トークンコンシューマでも使用できます。"
    },
    {
      "indent": 3,
      "text": "o Therefore, in the previous step, the Token Provider may want to include in the token the Token Binding ID (or a cryptographic hash of it) that the client uses when communicating with the Token Consumer, thus binding the token to the client's Token Binding key pair. The client proves possession of the private key when communicating with the Token Consumer through the Token Binding protocol [RFC8471] and uses the corresponding public key of this key pair as a component of the Token Binding ID. Comparing the Token Binding ID from the token to the Token Binding ID established with the client allows the Token Consumer to verify that the token was sent to it by the legitimate client.",
      "ja": "o したがって、前の手順で、トークンプロバイダーは、クライアントがトークンコンシューマーと通信するときに使用するトークンバインディングID（またはその暗号化ハッシュ）をトークンに含めて、トークンをクライアントのトークンバインディングキーにバインドすることができます。ペア。クライアントは、トークンバインディングプロトコル[RFC8471]を介してトークンコンシューマと通信するときに秘密キーを所有していることを証明し、このキーペアの対応する公開キーをトークンバインディングIDのコンポーネントとして使用します。トークンバインディングIDをトークンからクライアントで確立されたトークンバインディングIDと比較することにより、トークンコンシューマは、正当なクライアントによってトークンがトークンバインディングに送信されたことを確認できます。"
    },
    {
      "indent": 3,
      "text": "o To allow the Token Provider to include the Token Binding ID in the token, the Token Binding ID between the client and the Token Consumer must therefore be communicated to the Token Provider along with the token request. Communicating a Token Binding ID involves proving possession of a private key and is described in the Token Binding protocol [RFC8471].",
      "ja": "o したがって、トークンプロバイダーがトークンバインディングIDをトークンに含めることができるようにするには、クライアントとトークンコンシューマー間のトークンバインディングIDを、トークンリクエストと共にトークンプロバイダーに伝達する必要があります。トークンバインディングIDの伝達には、秘密鍵の所有を証明することが含まれ、トークンバインディングプロトコル[RFC8471]で説明されています。"
    },
    {
      "indent": 3,
      "text": "The client will perform this last operation only if the Token Consumer requests the client to do so.",
      "ja": "クライアントは、トークンコンシューマがクライアントに要求した場合にのみ、この最後の操作を実行します。"
    },
    {
      "indent": 3,
      "text": "Below, we specify how Token Consumers can signal this request in redirect-based federation protocols. Note that this assumes that the federated sign-on flow starts at the Token Consumer or, at the very least, includes a redirect from the Token Consumer to the Token Provider. It is outside the scope of this document to specify similar mechanisms for flows that do not include such redirects.",
      "ja": "以下では、トークンコンシューマがリダイレクトベースのフェデレーションプロトコルでこのリクエストをシグナリングする方法を指定します。これは、フェデレーションサインオンフローがトークンコンシューマで開始するか、少なくともトークンコンシューマからトークンプロバイダへのリダイレクトを含むことを前提としています。このようなリダイレクトを含まないフローに対して同様のメカニズムを指定することは、このドキュメントの範囲外です。"
    },
    {
      "indent": 0,
      "text": "5.3. HTTP Redirects",
      "section_title": true,
      "ja": "5.3. HTTPリダイレクト"
    },
    {
      "indent": 3,
      "text": "When a Token Consumer redirects the client to a Token Provider as a means to deliver the token request, it SHOULD include an Include-Referred-Token-Binding-ID HTTP response header field in its HTTP response. The ABNF of the Include-Referred-Token-Binding-ID header is (per the style of [RFC7230]; see also Section 8.3 of [RFC7231]):",
      "ja": "トークンコンシューマがトークンリクエストを配信する手段としてクライアントをトークンプロバイダにリダイレクトする場合、HTTP応答にInclude-Referred-Token-Binding-ID HTTP応答ヘッダーフィールドを含める必要があります。 Include-Referred-Token-Binding-IDヘッダーのABNFは（[RFC7230]のスタイルによる。[RFC7231]のセクション8.3も参照）："
    },
    {
      "indent": 6,
      "text": "Include-Referred-Token-Binding-ID = \"true\"",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "Where the header field name is \"Include-Referred-Token-Binding-ID\" and the field value of \"true\" is case insensitive. For example:",
      "ja": "ヘッダーフィールド名が「Include-Referred-Token-Binding-ID」であり、「true」のフィールド値では大文字と小文字が区別されません。例えば："
    },
    {
      "indent": 6,
      "text": "Include-Referred-Token-Binding-ID: true",
      "ja": "Include-Referred-Token-Binding-ID：true"
    },
    {
      "indent": 3,
      "text": "Including this response header field signals to the client that it should reveal, to the Token Provider, the Token Binding ID used between itself and the Token Consumer. In the absence of this response header field, the client will not disclose any information about the Token Binding used between the client and the Token Consumer to the Token Provider.",
      "ja": "この応答ヘッダーフィールドを含めると、それ自体とトークンコンシューマーの間で使用されるトークンバインディングIDがトークンプロバイダーに明らかにされることをクライアントに通知します。この応答ヘッダーフィールドがない場合、クライアントは、クライアントとトークンコンシューマー間で使用されるトークンバインディングに関する情報をトークンプロバイダーに開示しません。"
    },
    {
      "indent": 3,
      "text": "As illustrated in Section 5.5, when a client receives this header field, it should take the TokenBindingID [RFC8471] of the provided TokenBinding from the referrer and create a referred TokenBinding with it to include in the TokenBindingMessage in the redirect request. In other words, the Token Binding message in the redirect request to the Token Provider now includes one provided binding and one referred binding, the latter constructed from the binding between the client and the Token Consumer.",
      "ja": "セクション5.5に示すように、クライアントがこのヘッダーフィールドを受信すると、提供されたTokenBindingのTokenBindingID [RFC8471]を参照元から取得し、それを使用して参照トークンバインディングを作成して、リダイレクトリクエストのTokenBindingMessageに含める必要があります。言い換えると、トークンプロバイダーへのリダイレクト要求のトークンバインディングメッセージには、1つの提供されたバインディングと1つの参照されたバインディングが含まれ、後者はクライアントとトークンコンシューマー間のバインディングから構築されます。"
    },
    {
      "indent": 3,
      "text": "When a client receives the Include-Referred-Token-Binding-ID header, it includes the referred Token Binding even if both the Token Provider and the Token Consumer fall under the same eTLD+1 and the provided and Referred Token Binding IDs are the same.",
      "ja": "クライアントがInclude-Referred-Token-Binding-IDヘッダーを受信すると、トークンプロバイダーとトークンコンシューマーの両方が同じeTLD + 1に該当し、提供されたトークンと参照されたトークンバインディングIDが同じであっても、参照されたトークンバインディングが含まれます。"
    },
    {
      "indent": 0,
      "text": " The referred Token Binding is sent only in the initial request resulting from the HTTP response that included the Include-Referred-Token-Binding-ID header. Should the response to that initial request be a further redirect, the original referred Token Binding is no longer included in subsequent requests. (A new referred Token Binding may be included if the redirecting endpoint itself responded with an Include-Referred-Token-Binding-ID response header.)",
      "ja": "参照されたトークンバインディングは、Include-Referred-Token-Binding-IDヘッダーを含むHTTP応答からの最初のリクエストでのみ送信されます。その最初の要求への応答がさらにリダイレクトである場合、元の参照されたトークンバインディングは以降の要求に含まれなくなります。 （リダイレクトされたエンドポイント自体がInclude-Referred-Token-Binding-ID応答ヘッダーで応答した場合、新しく参照されたトークンバインディングが含まれることがあります。）"
    },
    {
      "indent": 3,
      "text": "If the Include-Referred-Token-Binding-ID header field is received in response to a request that did not include the Sec-Token-Binding header field, the client MUST ignore the Include-Referred-Token-Binding-ID header field.",
      "ja": "Sec-Token-Bindingヘッダーフィールドが含まれていないリクエストへの応答としてInclude-Referred-Token-Binding-IDヘッダーフィールドを受信した場合、クライアントはInclude-Referred-Token-Binding-IDヘッダーフィールドを無視する必要があります。"
    },
    {
      "indent": 3,
      "text": "This header field only has meaning if the HTTP status code is a redirection code (300-399) and MUST be ignored by the client for any other status codes. As described in Section 2, if the client supports the Token Binding protocol and has negotiated the Token Binding protocol with both the Token Consumer and the Token Provider, it sends the Sec-Token-Binding header field to the Token Provider with each HTTP request.",
      "ja": "このヘッダーフィールドは、HTTPステータスコードがリダイレクトコード（300-399）である場合にのみ意味があり、他のステータスコードについてはクライアントによって無視される必要があります。セクション2で説明したように、クライアントがトークンバインディングプロトコルをサポートし、トークンコンシューマーとトークンプロバイダーの両方とトークンバインディングプロトコルをネゴシエートした場合、クライアントはSec-Token-Bindingヘッダーフィールドを各HTTP要求と共にトークンプロバイダーに送信します。"
    },
    {
      "indent": 3,
      "text": "The TokenBindingMessage included in the redirect request to the Token Provider SHOULD contain a TokenBinding with a TokenBindingType value of referred_token_binding. If included, this TokenBinding MUST be signed with the Token Binding private key used by the client for connections between itself and the Token Consumer (more specifically, the server that issued the Include-Referred-Token-Binding-ID response header field). The Token Binding ID established by this TokenBinding is called a \"Referred Token Binding ID\".",
      "ja": "トークンプロバイダーへのリダイレクト要求に含まれるTokenBindingMessageには、TokenBindingType値がreferred_token_bindingのTokenBindingが含まれている必要があります（SHOULD）。含まれる場合、このTokenBindingは、それ自体とトークンコンシューマー（具体的には、Include-Referred-Token-Binding-ID応答ヘッダーフィールドを発行したサーバー）間の接続にクライアントが使用するトークンバインディングの秘密キーで署名する必要があります。このTokenBindingによって確立されたトークンバインディングIDは、「参照トークンバインディングID」と呼ばれます。"
    },
    {
      "indent": 3,
      "text": "As described above, the TokenBindingMessage MUST additionally contain a Provided Token Binding ID, i.e., a TokenBinding structure with a TokenBindingType value of provided_token_binding, which MUST be signed with the Token Binding private key used by the client for connections between itself and the Token Provider (more specifically, the server that the token request is being sent to).",
      "ja": "上記のように、TokenBindingMessageには、提供されたトークンバインディングID、つまり、提供されたTokenBindingType値が提供されたTokenBinding構造がさらに含まれている必要があります。これは、クライアントが自身とトークンプロバイダー間の接続に使用するトークンバインディングの秘密鍵で署名されている必要があります（具体的には、トークンリクエストの送信先のサーバー）。"
    },
    {
      "indent": 3,
      "text": "If, for some deployment-specific reason, the initial Token Provider (\"TP1\") needs to redirect the client to another Token Provider (\"TP2\") rather than directly back to the Token Consumer, it can be accommodated using the header fields defined in this specification in the following fashion (\"the redirect-chain approach\"):",
      "ja": "デプロイメント固有の理由により、最初のトークンプロバイダー（ \"TP1\"）がクライアントを直接トークンコンシューマーに戻すのではなく、別のトークンプロバイダー（ \"TP2\"）にリダイレクトする必要がある場合、定義されたヘッダーフィールドを使用して対応できます。この仕様では、次のようにしています（「リダイレクトチェーンアプローチ」）。"
    },
    {
      "indent": 0,
      "text": " Initially, the client is redirected to TP1 by the Token Consumer (\"TC\"), as described above. Upon receiving a client's request that contains a TokenBindingMessage that in turn contains both provided and referred TokenBindings (for TP1 and TC, respectively), TP1 responds to the client with a redirect response that (1) contains the Include-Referred-Token-Binding-ID header field and (2) directs the client to send a request to TP2. This causes the client to follow the same pattern and send a request containing a TokenBindingMessage that contains both provided and referred TokenBindings (for TP2 and TP1, respectively) to TP2. Note that this pattern can continue to additional Token Providers. In this case, TP2 issues a security token, bound to the client's TokenBinding with TP1, and sends a redirect response to the client pointing to TP1. TP1 in turn constructs a security token for the Token Consumer, bound to the TC's referred TokenBinding that had been conveyed earlier, and sends a redirect response pointing to the TC, containing the bound security token, to the client.",
      "ja": "上記のように、最初に、クライアントはトークンコンシューマ（ \"TC\"）によってTP1にリダイレクトされます。提供されたTokenBindingと参照されたTokenBindings（それぞれTP1とTCの両方）を含むTokenBindingMessageを含むクライアントの要求を受信すると、TP1は（1）Include-Referred-Token-Binding-を含むリダイレクト応答でクライアントに応答します。 IDヘッダーフィールドと（2）は、クライアントにTP2に要求を送信するように指示します。これにより、クライアントは同じパターンに従い、提供および参照されたTokenBinding（それぞれTP2およびTP1の両方）を含むTokenBindingMessageを含む要求をTP2に送信します。このパターンは、追加のトークンプロバイダーに継続できることに注意してください。この場合、TP2はセキュリティトークンを発行し、TP1を使用してクライアントのTokenBindingにバインドし、TP1を指すクライアントにリダイレクト応答を送信します。次に、TP1は、トークンコンシューマのセキュリティトークンを構築し、以前に伝達されたTCの参照TokenBindingにバインドし、バインドされたセキュリティトークンを含むTCを指すリダイレクト応答をクライアントに送信します。"
    },
    {
      "indent": 3,
      "text": "The above is intended as only a non-normative example. Details are specific to deployment contexts. Other approaches are possible but are outside the scope of this specification.",
      "ja": "上記は非規範的な例としてのみ意図されています。詳細はデプロイメントコンテキストに固有です。他のアプローチも可能ですが、この仕様の範囲外です。"
    },
    {
      "indent": 0,
      "text": "5.4. Negotiated Key Parameters",
      "section_title": true,
      "ja": "5.4. 交渉された主要なパラメータ"
    },
    {
      "indent": 3,
      "text": "The TLS extension for Token Binding protocol negotiation [RFC8472] allows the server and client to negotiate the parameters (signature algorithm, length) of the Token Binding key pair. It is possible that the Token Binding ID used between the client and the Token Consumer, and the Token Binding ID used between the client and the Token Provider, use different key parameters. The client MUST use the key parameters negotiated with the Token Consumer in the referred_token_binding TokenBinding of the TokenBindingMessage, even if those key parameters are different from the ones negotiated with the server that the header field is sent to.",
      "ja": "トークンバインディングプロトコルネゴシエーション[RFC8472]のTLS拡張により、サーバーとクライアントはトークンバインディングキーペアのパラメーター（署名アルゴリズム、長さ）をネゴシエートできます。クライアントとトークンコンシューマー間で使用されるトークンバインディングIDと、クライアントとトークンプロバイダー間で使用されるトークンバインディングIDでは、異なるキーパラメーターを使用することができます。クライアントは、TokenBindingMessageのreferd_token_binding TokenBindingでトークンコンシューマーとネゴシエートされたキーパラメーターを使用する必要があります（これらのキーパラメーターが、ヘッダーフィールドの送信先のサーバーとネゴシエートされたパラメーターと異なる場合でも）。"
    },
    {
      "indent": 3,
      "text": "Token Providers SHOULD support all the Token Binding key parameters specified in [RFC8471]. If a Token Provider does not support the key parameters specified in the referred_token_binding TokenBinding in the TokenBindingMessage, it MUST NOT issue a bound token.",
      "ja": "トークンプロバイダーは、[RFC8471]で指定されているすべてのトークンバインディングキーパラメーターをサポートする必要があります（SHOULD）。トークンプロバイダーがTokenBindingMessageのreferred_token_binding TokenBindingで指定されたキーパラメーターをサポートしない場合、バインドされたトークンを発行してはなりません（MUST NOT）。"
    },
    {
      "indent": 0,
      "text": "5.5. Federation Example",
      "section_title": true,
      "ja": "5.5. フェデレーションの例"
    },
    {
      "indent": 3,
      "text": "The diagram below shows a typical HTTP redirect-based web browser single sign-on (SSO) profile (Section 4.1 of [OASIS.saml-prof-2.0-os]) (no artifact, no callbacks), featuring the binding of, for example, a TLS Token Binding ID into an OpenID Connect ID Token.",
      "ja": "以下の図は、典型的なHTTPリダイレクトベースのWebブラウザシングルサインオン（SSO）プロファイル（[OASIS.saml-prof-2.0-os]のセクション4.1）（アーティファクトなし、コールバックなし）を示しています。たとえば、OpenID Connect IDトークンへのTLSトークンバインディングID。"
    },
    {
      "indent": 34,
      "text": "Legend:",
      "ja": "伝説："
    },
    {
      "indent": 3,
      "text": "+------------+------------------------------------------------------+\n| EKM:       | TLS Exported Keying Material [RFC5705]               |\n|            |                                                      |\n| {EKMn}Ksm: | EKM for server \"n\", signed by the private key of     |\n|            | TBID \"m\", where \"n\" must represent the server        |\n|            | receiving the ETBMSG.  If a conveyed TB's type is    |\n|            | provided_token_binding, then m = n, else if TB's     |\n|            | type is referred_token_binding, then m != n.  For    |\n|            | example, see step 1b in the diagram below.           |\n|            |                                                      |\n| ETBMSG:    | \"Sec-Token-Binding\" HTTP header field conveying an   |\n|            | EncodedTokenBindingMessage, in turn conveying        |\n|            | TokenBinding (TB)struct(s), e.g., ETBMSG[[TB]] or    |\n|            | ETBMSG[[TB1],[TB2]]                                  |\n|            |                                                      |\n| ID Token:  | the ID Token in OpenID Connect.  It is the semantic  |\n|            | equivalent of a SAML \"authentication assertion\".     |\n|            | \"ID Token w/TBIDn\" denotes a \"token bound\" ID Token  |\n|            | containing TBIDn.                                    |\n|            |                                                      |\n| Ks and Kp: | private (aka secret) key and public key,             |\n|            | respectively, of the client-side Token Binding key   |\n|            | pair                                                 |\n|            |                                                      |\n| OIDC:      | OpenID Connect                                       |\n|            |                                                      |\n| TB:        | TokenBinding struct containing a signed EKM, TBID,   |\n|            | and TB type, e.g.,                                   |\n|            | [{EKM1}Ks1,TBID1,provided_token_binding]             |\n|            |                                                      |\n| TBIDn:     | Token Binding ID for client and server n's token-    |\n|            | bound TLS association.  TBIDn contains Kpn.          |\n+------------+------------------------------------------------------+",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "Client, aka                Token Consumer, aka    Token Provider, aka\nUser Agent                 OpenID Client,         OpenID Provider,\n                           OIDC Relying Party,    OIDC Provider,\n                           SAML Relying Party     SAML Identity Provider\n                           [ server \"1\" ]         [ server \"2\" ]\n+--------+                       +----+                 +-----+\n| Client |                       | TC |                 | TP  |\n+--------+                       +----+                 +-----+\n    |                               |                      |\n    |                               |                      |\n    |                               |                      |\n    | 0. Client interacts w/TC      |                      |\n    | over HTTPS, establishes Ks1 and Kp1, TBID1           |\n    | ETBMSG[[{EKM1}Ks1,TBID1,provided_token_binding]]     |\n    |------------------------------>|                      |\n    |                               |                      |\n    |                               |                      |\n    |                               |                      |\n    | 1a. OIDC ID Token request, aka|                      |\n    | \"Authentication Request\", conveyed with              |\n    | an HTTP response header field of                     |\n    | Include-Referred-Token-Binding-ID:true.              |\n    | Any security-relevant cookies |                      |\n    | should contain TBID1.         |                      |\n  +<- - - - - - - - - - - - - - - - |                      |\n  . | (redirect to TP via 301, 302, |                      |\n  . |  303, 307, or 308)            |                      |\n  . |                               |                      |\n  +------------------------------------------------------->|\n    | 1b. opens HTTPS w/TP,                                |\n    | establishes Ks2, Kp2, TBID2;                         |\n    | sends a GET or POST with                             |\n    | ETBMSG[[{EKM2}Ks2,TBID2,provided_token_binding],     |\n    |        [{EKM2}Ks1,TBID1,referred_token_binding]]     |\n    | as well as the ID Token request                      |\n    |                               |                      |\n    |                               |                      |\n    |                               |                      |\n    | 2. user authentication (if applicable;               |\n    |    methods vary; particulars are out of scope)       |\n    |<====================================================>|\n    | (TP generates ID Token for TC containing TBID1; may  |\n    |  also set cookie(s) containing TBID2 and/or TBID1;   |\n    |  details vary; particulars are out of scope)         |\n    |                               |                      |\n    |                               |                      |",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 2,
      "text": "  |                               |                      |\n  | 3a. ID Token containing Kp1, issued for TC,          |\n  |    conveyed via OIDC \"Authentication Response\"       |\n+<- - - - - - - - - - - - - - - - - - - - - - - - - - - -|\n. |   (redirect to TC)            |                      |\n. |                               |                      |\n. |                               |                      |\n+-------------------------------->|                      |\n  | 3b. HTTPS GET or POST with                           |\n  | ETBMSG[[{EKM1}Ks1,TBID1,provided_token_binding]]     |\n  | conveying an Authentication Response containing      |\n  | an ID Token w/TBID1, issued for TC                   |\n  |                               |                      |\n  |                               |                      |\n  |                               |                      |\n  | 4. user is signed on; any security-relevant cookie(s)|\n  | that is set SHOULD contain TBID1                     |\n  |<------------------------------|                      |\n  |                               |                      |\n  |                               |                      |",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "6. Implementation Considerations",
      "section_title": true,
      "ja": "6. 実装に関する考慮事項"
    },
    {
      "indent": 3,
      "text": "HTTPS-based applications may have multi-party use cases other than, or in addition to, the HTTP redirect-based signaling and conveyance of referred Token Bindings, as presented above in Section 5.3.",
      "ja": "セクション5.3で説明したように、HTTPSベースのアプリケーションには、HTTPリダイレクトベースのシグナリングと参照トークンバインディングの伝達以外に、またはそれに加えて、マルチパーティのユースケースがあります。"
    },
    {
      "indent": 3,
      "text": "Thus, Token Binding implementations should provide APIs for such applications to generate Token Binding messages containing Token Binding IDs of various application-specified Token Binding types, to be conveyed by the Sec-Token-Binding header field.",
      "ja": "したがって、トークンバインディング実装は、Sec-Token-Bindingヘッダーフィールドによって伝達される、アプリケーション固有のさまざまなトークンバインディングタイプのトークンバインディングIDを含むトークンバインディングメッセージを生成するために、そのようなアプリケーションのAPIを提供する必要があります。"
    },
    {
      "indent": 3,
      "text": "However, Token Binding implementations MUST only convey Token Binding IDs to servers if signaled to do so by an application. Signaling mechanisms other than the Include-Referred-Token-Binding-ID HTTP response header field are possible, but these mechanisms are outside the scope of this specification.",
      "ja": "ただし、トークンバインディングの実装は、アプリケーションからの通知があった場合にのみ、トークンバインディングIDをサーバーに伝達する必要があります。 Include-Referred-Token-Binding-ID HTTP応答ヘッダーフィールド以外のシグナリングメカニズムは可能ですが、これらのメカニズムはこの仕様の範囲外です。"
    },
    {
      "indent": 3,
      "text": "NOTE: See Section 8 (\"Privacy Considerations\") for privacy guidance regarding the use of this functionality.",
      "ja": "注：この機能の使用に関するプライバシーガイダンスについては、セクション8（「プライバシーに関する考慮事項」）を参照してください。"
    },
    {
      "indent": 0,
      "text": "7. Security Considerations",
      "section_title": true,
      "ja": "7. セキュリティに関する考慮事項"
    },
    {
      "indent": 0,
      "text": "7.1. Security Token Replay",
      "section_title": true,
      "ja": "7.1. セキュリティトークンの再生"
    },
    {
      "indent": 3,
      "text": "The goal of the federated Token Binding mechanisms is to prevent attackers from exporting and replaying tokens used in protocols between the client and the Token Consumer, thereby impersonating legitimate users and gaining access to protected resources. Although bound tokens can still be replayed by any malware present in clients (which may be undetectable to a server), in order to export bound tokens to other machines and successfully replay them, attackers also need to export the corresponding Token Binding private keys. Token Binding private keys are therefore high-value assets and SHOULD be strongly protected, ideally by generating them in a hardware security module that prevents key export.",
      "ja": "フェデレーテッドトークンバインディングメカニズムの目的は、クライアントとトークンコンシューマ間のプロトコルで使用されるトークンを攻撃者がエクスポートおよび再生することを防ぎ、正当なユーザーになりすまして保護されたリソースへのアクセスを取得することです。バインドされたトークンは、クライアントに存在するマルウェア（サーバーでは検出されない可能性があります）によって引き続き再生できますが、バインドされたトークンを他のマシンにエクスポートして正常に再生するには、対応するトークンバインディングの秘密鍵もエクスポートする必要があります。したがって、トークンバインディングの秘密鍵は価値の高い資産であり、理想的には鍵のエクスポートを防止するハードウェアセキュリティモジュールで生成することにより、強力に保護する必要があります。"
    },
    {
      "indent": 3,
      "text": "This consideration is a special case of the scenario described in Section 7.1 (\"Security Token Replay\") of [RFC8471].",
      "ja": "この考慮事項は、[RFC8471]のセクション7.1（「セキュリティトークンの再生」）で説明されているシナリオの特殊なケースです。"
    },
    {
      "indent": 0,
      "text": "7.2. Sensitivity of the Sec-Token-Binding Header",
      "section_title": true,
      "ja": "7.2. Sec-Token-Bindingヘッダーの感度"
    },
    {
      "indent": 3,
      "text": "The purpose of the Token Binding protocol is to convince the server that the client that initiated the TLS connection controls a certain key pair. For the server to correctly draw this conclusion after processing the Sec-Token-Binding header field, certain secrecy and integrity requirements must be met.",
      "ja": "トークンバインディングプロトコルの目的は、TLS接続を開始したクライアントが特定のキーペアを制御していることをサーバーに納得させることです。 Sec-Token-Bindingヘッダーフィールドの処理後にサーバーがこの結論を正しく引き出すためには、特定の機密性と整合性の要件を満たす必要があります。"
    },
    {
      "indent": 3,
      "text": "For example, the client must keep its Token Binding private key secret. If the private key is not secret, then another actor in the system could create a valid Token Binding header field and thereby impersonate the client. This can render the main purpose of the protocol -- to bind bearer tokens to certain clients -- moot. Consider, for example, an attacker who obtained (perhaps through a network intrusion) an authentication cookie that a client uses with a certain server. Consider further that the server bound that cookie to the client's Token Binding ID precisely to thwart misuse of the cookie. If the attacker were to come into possession of the client's private key, they could then establish a TLS connection with the server and craft a Sec-Token-Binding header field that matches the binding present in the cookie, thus successfully authenticating as the client and gaining access to the client's data at the server. The Token Binding protocol, in this case, did not successfully bind the cookie to the client.",
      "ja": "たとえば、クライアントはトークンバインディングの秘密鍵を秘密にしておく必要があります。秘密鍵が秘密でない場合、システム内の別のアクターが有効なトークンバインディングヘッダーフィールドを作成し、クライアントを偽装する可能性があります。これにより、プロトコルの主な目的（ベアラートークンを特定のクライアントにバインドすること）を無効にすることができます。たとえば、クライアントが特定のサーバーで使用する認証Cookieを（おそらくネットワーク侵入を介して）取得した攻撃者を考えてみます。さらに、サーバーがそのCookieをクライアントのトークンバインディングIDに正確にバインドして、Cookieの誤用を阻止したことを考慮してください。攻撃者がクライアントの秘密鍵を取得した場合、サーバーとのTLS接続を確立し、Cookieに存在するバインディングと一致するSec-Token-Bindingヘッダーフィールドを作成して、クライアントおよびサーバーでクライアントのデータにアクセスする。この場合、トークンバインディングプロトコルはCookieをクライアントに正常にバインドしませんでした。"
    },
    {
      "indent": 3,
      "text": "Likewise, we need integrity protection of the Sec-Token-Binding header field. A client should not be tricked into sending to a server a Sec-Token-Binding header field that contains Token Bindings signed with any Token Binding keys that the client does not control.",
      "ja": "同様に、Sec-Token-Bindingヘッダーフィールドの整合性保護が必要です。クライアントをだまして、クライアントが制御しないトークンバインディングキーで署名されたトークンバインディングを含むSec-Token-Bindingヘッダーフィールドをサーバーに送信しないでください。"
    },
    {
      "indent": 3,
      "text": "Consider an attacker A that somehow has knowledge of the Exported Keying Material (EKM) for a TLS connection between a client C and a server S. (While that is somewhat unlikely, it is also not entirely out of the question, since the client might not treat the EKM as a secret -- after all, a pre-image-resistant hash function has been applied to the TLS master secret, making it impossible for someone knowing the EKM to recover the TLS master secret. Such considerations might lead some clients to not treat the EKM as a secret.) Such an attacker A could craft a Sec-Token-Binding header field with A's key pair over C's EKM. If the attacker could now trick C into sending such a header field to S, it would appear to S as if C controls a certain key pair, when in fact it does not (the attacker A controls the key pair).",
      "ja": "攻撃者AがクライアントCとサーバーSの間のTLS接続用のエクスポートされた鍵素材（EKM）を何らかの方法で知っていると考えてください（それは少しありそうもありませんが、クライアントがEKMをシークレットとして扱わない-結局のところ、イメージ耐性のあるハッシュ関数がTLSマスターシークレットに適用されているため、EKMを知っている人がTLSマスターシークレットを回復することは不可能です。 EKMを秘密として扱わないようにします。）このような攻撃者Aは、CのEKMを介してAのキーペアを持つSec-Token-Bindingヘッダーフィールドを作成できます。攻撃者がCをだましてそのようなヘッダーフィールドをSに送信できるようにした場合、Cは実際には制御しないのに、Cが特定のキーペアを制御しているように見えます（攻撃者Aがキーペアを制御します）。"
    },
    {
      "indent": 3,
      "text": "If A has a pre-existing relationship with S (e.g., perhaps has an account on S), it now appears to the server S as if A is connecting to it, even though it is really C. (If the server S does not simply use Token Binding IDs to identify clients but also uses bound authentication cookies, then A would also have to trick C into sending one of A's cookies to S, which it can do through a variety of means -- inserting cookies through JavaScript APIs, setting cookies through related-domain attacks, etc.) In other words, in this scenario, A can trick C into logging into A's account on S. This could lead to a loss of privacy for C, since A presumably has some other way to also access the account and can thus indirectly observe C's behavior (for example, if S has a feature that lets account holders see their activity history on S).",
      "ja": "AがSと既存の関係を持っている場合（たとえば、Sにアカウントを持っている可能性があります）、実際にはCであるにもかかわらず、AがSに接続しているように見えます（サーバーSがトークンバインドIDを使用してクライアントを識別するだけでなく、バ​​インドされた認証Cookieも使用する場合、AはCをだましてAのCookieの1つをSに送信する必要があります。これは、さまざまな方法で実行できます。JavaScriptAPIを介してCookieを挿入し、設定言い換えれば、このシナリオでは、AはCをだましてSのAのアカウントにログインさせることができます。これは、Cのプライバシーが失われる可能性があるためです。アカウントにアクセスし、Cの動作を間接的に監視できます（たとえば、Sにアカウント所有者がSでのアクティビティ履歴を表示できる機能がある場合）。"
    },
    {
      "indent": 3,
      "text": "Therefore, we need to protect the integrity of the Sec-Token-Binding header field. One eTLD+1 should not be able to set the Sec-Token-Binding header field (through a Document Object Model (DOM) API [W3C.REC-DOM-Level-3-Core-20040407] or otherwise) that the User Agent uses with another eTLD+1. Employing the \"Sec-\" header field prefix helps to meet this requirement by denoting the header field name as a \"forbidden header name\"; see [fetch-spec].",
      "ja": "したがって、Sec-Token-Bindingヘッダーフィールドの整合性を保護する必要があります。 1つのeTLD + 1は、ユーザーエージェントが（ドキュメントオブジェクトモデル（DOM）API [W3C.REC-DOM-Level-3-Core-20040407]またはその他の方法で）Sec-Token-Bindingヘッダーフィールドを設定できないようにする必要があります。別のeTLD + 1で使用します。 「Sec-」ヘッダーフィールドプレフィックスを使用すると、ヘッダーフィールド名を「禁止されたヘッダー名」として表すことで、この要件を満たすことができます。 [fetch-spec]を参照してください。"
    },
    {
      "indent": 0,
      "text": "7.3. Securing Federated Sign-On Protocols",
      "section_title": true,
      "ja": "7.3. フェデレーションサインオンプロトコルの保護"
    },
    {
      "indent": 3,
      "text": "As explained above, in a federated sign-on scenario, a client will prove possession of two different Token Binding private keys to a Token Provider: one private key corresponds to the \"provided\" Token Binding ID (which the client normally uses with the Token Provider), and the other is the Token Binding private key corresponding to the \"referred\" Token Binding ID (which the client normally uses with the Token Consumer). The Token Provider is expected to issue a token that is bound to the Referred Token Binding ID.",
      "ja": "上記で説明したように、フェデレーションサインオンシナリオでは、クライアントは2つの異なるトークンバインディング秘密鍵を所有していることをトークンプロバイダーに証明します。1つの秘密鍵は、「提供された」トークンバインディングID（クライアントが通常トークンで使用する）に対応します。プロバイダー）、そしてもう1つは「参照された」トークンバインディングID（クライアントが通常トークンコンシューマーで使用する）に対応するトークンバインディングの秘密キーです。トークンプロバイダーは、Referred Token Binding IDにバインドされたトークンを発行することが期待されています。"
    },
    {
      "indent": 3,
      "text": "Both proofs (that of the provided Token Binding private key and that of the referred Token Binding private key) are necessary. To show this, consider the following scenario:",
      "ja": "両方の証明（提供されたトークンバインドの秘密キーの証明と、参照されたトークンバインドの秘密キーの証明）が必要です。これを示すために、次のシナリオを検討してください。"
    },
    {
      "indent": 3,
      "text": "o The client has an authentication token with the Token Provider that is bound to the client's Token Binding ID used with that Token Provider.",
      "ja": "o クライアントには、そのトークンプロバイダーで使用されるクライアントのトークンバインディングIDにバインドされたトークンプロバイダーを持つ認証トークンがあります。"
    },
    {
      "indent": 3,
      "text": "o The client wants to establish a secure (i.e., free of men-in-the-middle) authenticated session with the Token Consumer but has not yet done so (in other words, we are about to run the federated sign-on protocol).",
      "ja": "o クライアントは、トークンコンシューマとの安全な（つまり、介在者のいない）認証済みセッションを確立することを望んでいますが、まだ確立していません（つまり、フェデレーションサインオンプロトコルを実行しようとしています）。"
    },
    {
      "indent": 3,
      "text": "o A man-in-the-middle is allowed to intercept the connection between the client and the Token Consumer or between the client and the Token Provider (or both).",
      "ja": "o 中間者は、クライアントとトークンコンシューマの間、またはクライアントとトークンプロバイダの間（またはその両方）の接続を傍受することができます。"
    },
    {
      "indent": 3,
      "text": "The goal is to detect the presence of the man-in-the-middle in these scenarios.",
      "ja": "目標は、これらのシナリオで中間者の存在を検出することです。"
    },
    {
      "indent": 3,
      "text": "First, consider a man-in-the-middle between the client and the Token Provider. Recall that we assume that the client possesses a bound authentication token (e.g., cookie) for the Token Provider. The man-in-the-middle can intercept and modify any message sent by the client to the Token Provider and any message sent by the Token Provider to the client. (This means, among other things, that the man-in-the-middle controls the JavaScript running at the client in the origin of the Token Provider.) It is not, however, in possession of the client's Token Binding private key. Therefore, it can choose to either (1) replace the Token Binding ID in requests from the client to the Token Provider and create a Sec-Token-Binding header field that matches the TLS connection between the man-in-the-middle and the Token Provider or (2) leave the Sec-Token-Binding header field unchanged. If it chooses the latter, the signature in the Token Binding message (created by the original client on the EKM for the connection between the client and the man-in-the-middle) will not match a signature on the EKM between the man-in-the-middle and the Token Provider. If it chooses the former (and creates its own signature, using its own Token Binding private key, over the EKM for the connection between itself, the man-in-the-middle, and the Token Provider), then the Token Binding message will match the connection between the man-in-the-middle and the Token Provider, but the Token Binding ID in the message will not match the Token Binding ID that the client's authentication token is bound to. Either way, the man-in-the-middle is detected by the Token Provider, but only if the proof of possession of the provided Token Binding private key is required in the protocol (as is done above).",
      "ja": "まず、クライアントとトークンプロバイダーの間の中間者について考えます。クライアントがトークンプロバイダー用のバインドされた認証トークン（Cookieなど）を所有していると想定していることを思い出してください。中間者は、クライアントからトークンプロバイダーに送信されたすべてのメッセージと、トークンプロバイダーからクライアントに送信されたすべてのメッセージを傍受して変更できます。 （これは、とりわけ、中間者がトークンプロバイダーのオリジンでクライアントで実行されているJavaScriptを制御することを意味します。）ただし、クライアントのトークンバインディング秘密鍵を所有していません。したがって、（1）クライアントからトークンプロバイダーへのリクエストのトークンバインディングIDを置き換えるか、中間者とTLS接続の間のTLS接続に一致するSec-Token-Bindingヘッダーフィールドを作成するかを選択できます。トークンプロバイダー、または（2）Sec-Token-Bindingヘッダーフィールドを変更せずにそのままにします。後者を選択した場合、トークンバインディングメッセージの署名（EKMの元のクライアントがクライアントと中間者の間の接続のために作成した）は、管理者間のEKMの署名と一致しません。中間およびトークンプロバイダー。前者を選択した場合（および独自のトークンバインディング秘密鍵を使用して、自身、中間者、およびトークンプロバイダー間の接続のEKMを介して独自の署名を作成する場合）、トークンバインディングメッセージは中間者とトークンプロバイダーの間の接続を一致させますが、メッセージ内のトークンバインディングIDは、クライアントの認証トークンがバインドされているトークンバインディングIDと一致しません。どちらの方法でも、中間者はトークンプロバイダーによって検出されますが、提供されたトークンバインディングの秘密鍵を所有していることの証明がプロトコルで要求されている場合に限ります（上記のとおり）。"
    },
    {
      "indent": 3,
      "text": "Next, consider the presence of a man-in-the-middle between the client and the Token Consumer. That man-in-the-middle can intercept and modify any message sent by the client to the Token Consumer and any message sent by the Token Consumer to the client. The Token Consumer is the party that redirects the client to the Token Provider. In this case, the man-in-the-middle controls the redirect URL and can tamper with any redirect URL issued by the Token Consumer (as well as with any JavaScript running in the origin of the Token Consumer). The goal of the man-in-the-middle is to trick the Token Provider into issuing a token bound to its Token Binding ID and not to the Token Binding ID of the legitimate client. To thwart this goal of the man-in-the-middle, the client's Referred Token Binding ID must be communicated to the Token Provider in a manner that cannot be affected by the man-in-the-middle (who, as mentioned above, can modify redirect URLs and JavaScript at the client). Including the referred TokenBinding structure in the Sec-Token-Binding header field (as opposed to, say, including the Referred Token Binding ID in an application-level message as part of the redirect URL) is one way to assure that the man-in-the-middle between the client and the Token Consumer cannot affect the communication of the Referred Token Binding ID to the Token Provider.",
      "ja": "次に、クライアントとトークンコンシューマの間の中間者の存在を検討します。その中間者は、クライアントからトークンコンシューマに送信されたメッセージ、およびトークンコンシューマからクライアントに送信されたメッセージを傍受および変更できます。トークンコンシューマは、クライアントをトークンプロバイダにリダイレクトするパーティです。この場合、中間者がリダイレクトURLを制御し、トークンコンシューマ（およびトークンコンシューマのオリジンで実行されているJavaScript）によって発行されたリダイレクトURLを改ざんできます。中間者の目標は、トークンプロバイダーをだまして、正当なクライアントのトークンバインディングIDではなく、トークンバインディングIDにバインドされたトークンを発行させることです。中間者のこの目標を阻止するには、クライアントの参照トークンバインディングIDを、中間者（上記のように、クライアントでリダイレクトURLとJavaScriptを変更できます）。 Sec-Token-Bindingヘッダーフィールドに参照されたTokenBinding構造を含める（たとえば、リダイレクトされたURLの一部としてアプリケーションレベルのメッセージに参照されたトークンバインディングIDを含めるのではなく）ことは、man-inを保証する1つの方法です。 -クライアントとトークンコンシューマーの間の中間は、参照プロバイダーバインディングIDのトークンプロバイダーへの通信に影響を与えることはできません。"
    },
    {
      "indent": 3,
      "text": "Therefore, the Sec-Token-Binding header field in the federated sign-on use case contains both a proof of possession of the provided Token Binding key and a proof of possession of the referred Token Binding key.",
      "ja": "したがって、フェデレーテッドサインオンユースケースのSec-Token-Bindingヘッダーフィールドには、提供されたトークンバインディングキーの所有証明と、参照されたトークンバインディングキーの所有証明の両方が含まれています。"
    },
    {
      "indent": 3,
      "text": "Note that the presence of Token Binding does not relieve the Token Provider and Token Consumer from performing various checks to ensure the security of clients during the use of federated sign-on protocols. These include the following:",
      "ja": "トークンバインディングが存在しても、トークンプロバイダーとトークンコンシューマーがさまざまなチェックを実行して、フェデレーションサインオンプロトコルの使用中にクライアントのセキュリティを確保することは軽減されないことに注意してください。これらには以下が含まれます。"
    },
    {
      "indent": 3,
      "text": "o The Token Provider should not issue tokens to Token Consumers that have been shown to act maliciously. To aid in this, the federation protocol should identify the Token Consumer to the Token Provider (e.g., through OAuth client IDs or similar mechanisms), and the Token Provider should ensure that tokens are indeed issued to the Token Consumer identified in the token request (e.g., by verifying that the redirect URI is associated with the OAuth client ID).",
      "ja": "o トークンプロバイダーは、悪意を持って動作することが示されているトークンコンシューマーにトークンを発行しないでください。これを支援するために、フェデレーションプロトコルは（たとえば、OAuthクライアントIDまたは同様のメカニズムを通じて）トークンプロバイダーに対してトークンコンシューマーを識別し、トークンプロバイダーは、トークンがトークンリクエストで識別されたトークンコンシューマーに実際に発行されるようにする必要があります（たとえば、リダイレクトURIがOAuthクライアントIDに関連付けられていることを確認するなど）。"
    },
    {
      "indent": 3,
      "text": "o The Token Consumer should verify that the tokens were issued for it and not for some other Token Consumer. To aid in this, the federation protocol should include an audience parameter in the token response or apply equivalent mechanisms (the implicit OAuth flow requires Token Consumers to identify themselves when they exchange OAuth authorization codes for OAuth refresh tokens, leaving it up to the Token Provider to verify that the OAuth authorization was delivered to the correct Token Consumer).",
      "ja": "o トークンコンシューマは、トークンがそのトークンに対して発行されたものであり、他のトークンコンシューマに対して発行されたものではないことを確認する必要があります。これを支援するために、フェデレーションプロトコルは、トークンレスポンスにオーディエンスパラメーターを含めるか、同等のメカニズムを適用する必要があります（暗黙的なOAuthフローでは、トークンコンシューマーがOAuth更新トークンのOAuth認証コードを交換し、トークンプロバイダーに任せるときに、トークンコンシューマーが自身を識別する必要がありますOAuth認証が正しいトークンコンシューマに配信されたことを確認します）。"
    },
    {
      "indent": 0,
      "text": "8. Privacy Considerations",
      "section_title": true,
      "ja": "8. プライバシーに関する考慮事項"
    },
    {
      "indent": 0,
      "text": "8.1. Scoping of Token Binding Key Pairs",
      "section_title": true,
      "ja": "8.1. トークンバインディングキーペアのスコープ"
    },
    {
      "indent": 3,
      "text": "Clients use different Token Binding key pairs for different servers, so as to not allow Token Binding to become a tracking tool across different servers. However, the scoping of the Token Binding key pairs to servers varies according to the scoping rules of the application protocol (Section 4.1 of [RFC8471]).",
      "ja": "クライアントは、サーバーごとに異なるトークンバインディングキーペアを使用して、異なるサーバー間でトークンバインディングが追跡ツールにならないようにします。ただし、トークンバインディングキーペアのサーバーへのスコープは、アプリケーションプロトコルのスコープルール（[RFC8471]のセクション4.1）によって異なります。"
    },
    {
      "indent": 3,
      "text": "In the case of HTTP cookies, servers may use Token Binding to secure their cookies. These cookies can be attached to any subdomain of effective top-level domains (eTLDs), and clients therefore should use the same Token Binding key pair across such subdomains. This will ensure that any server capable of receiving the cookie will see the same Token Binding ID from the client and thus be able to verify the Token Binding of the cookie. See Section 2.1 above.",
      "ja": "HTTP Cookieの場合、サーバーはToken Bindingを使用してCookieを保護できます。これらのCookieは、効果的なトップレベルドメイン（eTLD）の任意のサブドメインに添付できるため、クライアントはそのようなサブドメイン間で同じトークンバインディングキーペアを使用する必要があります。これにより、Cookieを受信できるすべてのサーバーがクライアントから同じトークンバインディングIDを確認できるため、Cookieのトークンバインディングを検証できます。上記のセクション2.1を参照してください。"
    },
    {
      "indent": 3,
      "text": "If the client application is not a web browser, it may have additional knowledge about the relationship between different servers. For example, the client application might be aware of the fact that two servers play the roles of Relying Party and Identity Provider, respectively, in a federated sign-on protocol and that they therefore share the identity of the user. In such cases, it is permissible to use different Token Binding key-pair scoping rules, such as using the same Token Binding key pair for both the Relying Party and the Identity Provider. Absent such special knowledge, conservative key-pair scoping rules should be used, assuring that clients use different Token Binding key pairs with different servers.",
      "ja": "クライアントアプリケーションがWebブラウザでない場合は、異なるサーバー間の関係について追加の知識がある場合があります。たとえば、クライアントアプリケーションは、2つのサーバーがフェデレーションサインオンプロトコルで証明書利用者とIDプロバイダーの役割をそれぞれ果たし、したがってユーザーのIDを共有するという事実を認識している場合があります。そのような場合、依存パーティとIDプロバイダーの両方に同じトークンバインディングキーペアを使用するなど、異なるトークンバインディングキーペアスコーピングルールを使用することが許可されます。このような特別な知識がない場合は、保守的なキーペアスコープルールを使用して、クライアントが異なるサーバーで異なるトークンバインディングキーペアを使用するようにします。"
    },
    {
      "indent": 0,
      "text": "8.2. Lifetime of Token Binding Key Pairs",
      "section_title": true,
      "ja": "8.2. トークンバインディングキーペアの有効期間"
    },
    {
      "indent": 3,
      "text": "Token Binding key pairs do not have an expiration time. This means that they can potentially be used by a server to track a user for an extended period of time (similar to a long-lived cookie). HTTPS clients such as web User Agents SHOULD therefore provide a user interface for discarding Token Binding key pairs (similar to the controls provided for deleting cookies).",
      "ja": "トークンバインディングキーペアには有効期限がありません。これは、サーバーがユーザーを長期間追跡するために使用できる可能性があることを意味します（存続期間の長いCookieと同様）。したがって、WebユーザーエージェントなどのHTTPSクライアントは、トークンバインディングキーのペアを破棄するためのユーザーインターフェースを提供する必要があります（Cookieを削除するために提供されるコントロールと同様）。"
    },
    {
      "indent": 3,
      "text": "If a User Agent provides modes such as private browsing mode in which the user is promised that browsing state such as cookies are discarded after the session is over, the User Agent MUST also discard Token Binding key pairs from such modes after the session is over. Generally speaking, users should be given the same level of control over the lifetime of Token Binding key pairs as they have over cookies or other potential tracking mechanisms.",
      "ja": "ユーザーエージェントがプライベートブラウジングモードなど、セッションの終了後にCookieなどのブラウジング状態が破棄されることが約束されているモードを提供する場合、ユーザーエージェントは、セッションの終了後にそのようなモードからトークンバインディングキーペアも破棄する必要があります。一般的に言えば、ユーザーは、Cookieバインディングやその他の潜在的な追跡メカニズムに対して持つのと同じレベルのトークンバインディングキーペアの有効期間を制御する必要があります。"
    },
    {
      "indent": 0,
      "text": "8.3. Correlation",
      "section_title": true,
      "ja": "8.3. 相関"
    },
    {
      "indent": 3,
      "text": "An application's various communicating endpoints that receive Token Binding IDs for TLS connections other than their own obtain information about the application's other TLS connections. (In this context, \"an application\" is a combination of client-side and server-side components, communicating over HTTPS, where the client side may be web-browser-based, native-application-based, or both.) These other Token Binding IDs can serve as correlation handles for the endpoints of the other connections. If the receiving endpoints are otherwise aware of these other connections, then no additional information is being exposed. For instance, if in a redirect-based federation protocol the Identity Provider and Relying Party already possess URLs for one another, then also having Token Binding IDs for these connections does not provide additional correlation information. If not, by providing the other Token Binding IDs, additional information is then exposed that can be used to correlate the other endpoints. In such cases, a privacy analysis of enabled correlations and their potential privacy impacts should be performed as part of the application design decisions of how, and whether, to utilize Token Binding.",
      "ja": "アプリケーション以外のTLS接続のトークンバインディングIDを受信するアプリケーションのさまざまな通信エンドポイントは、アプリケーションの他のTLS接続に関する情報を取得します。 （このコンテキストでは、「アプリケーション」は、クライアント側コンポーネントとサーバー側コンポーネントの組み合わせであり、HTTPSを介して通信します。クライアント側は、Webブラウザーベース、ネイティブアプリケーションベース、またはその両方です。）トークンバインディングIDは、他の接続のエンドポイントの相関ハンドルとして機能できます。受信エンドポイントがこれらの他の接続を別の方法で認識している場合、追加情報は公開されません。たとえば、リダイレクトベースのフェデレーションプロトコルで、アイデンティティプロバイダーと依拠当事者がすでに互いのURLを所有している場合、これらの接続のトークンバインディングIDも追加の相関情報を提供しません。そうでない場合は、他のトークンバインディングIDを提供することにより、他のエンドポイントを関連付けるために使用できる追加情報が公開されます。このような場合、有効化された相関とそれらの潜在的なプライバシーへの影響のプライバシー分析は、トークンバインディングを利用する方法とかどうかのアプリケーション設計決定の一部として実行する必要があります。"
    },
    {
      "indent": 3,
      "text": "Also, Token Binding implementations must take care to only reveal Token Binding IDs to other endpoints if signaled to do so by the application associated with a Token Binding ID; see Section 6 (\"Implementation Considerations\").",
      "ja": "また、トークンバインディングの実装は、トークンバインディングIDに関連付けられたアプリケーションから通知された場合にのみ、トークンバインディングIDを他のエンドポイントに公開するように注意する必要があります。セクション6（「実装に関する考慮事項」）を参照してください。"
    },
    {
      "indent": 3,
      "text": "Finally, care should be taken to ensure that unrelated applications do not obtain information about each other's Token Bindings. For instance, a Token Binding implementation shared between multiple applications on a given system should prevent unrelated applications from obtaining each other's Token Binding information. This may be accomplished by using techniques such as application isolation and key segregation, depending upon system capabilities.",
      "ja": "最後に、無関係なアプリケーションが互いのトークンバインディングに関する情報を取得しないように注意する必要があります。たとえば、特定のシステム上の複数のアプリケーション間で共有されるトークンバインディング実装は、無関係なアプリケーションが互いのトークンバインディング情報を取得することを防ぐ必要があります。これは、システムの機能に応じて、アプリケーションの分離やキーの分離などの手法を使用して実現できます。"
    },
    {
      "indent": 0,
      "text": "9. IANA Considerations",
      "section_title": true,
      "ja": "9. IANAに関する考慮事項"
    },
    {
      "indent": 3,
      "text": "Below is the Internet Assigned Numbers Authority (IANA) \"Permanent Message Header Field Names\" registration information per [RFC3864].",
      "ja": "以下は、[RFC3864]によるInternet Assigned Numbers Authority（IANA）の「Permanent Message Header Field Names」の登録情報です。"
    },
    {
      "indent": 6,
      "text": "Header Field name: Sec-Token-Binding Protocol: HTTP Status: standard Reference: This document",
      "ja": "ヘッダーフィールド名：Sec-Token-Bindingプロトコル：HTTPステータス：標準参照：このドキュメント"
    },
    {
      "indent": 6,
      "text": "Header Field name: Include-Referred-Token-Binding-ID Protocol: HTTP Status: standard Reference: This document",
      "ja": "ヘッダーフィールド名：Include-Referred-Token-Binding-IDプロトコル：HTTPステータス：標準参照：このドキュメント"
    },
    {
      "indent": 0,
      "text": "10. References",
      "section_title": true,
      "ja": "10. 参考文献"
    },
    {
      "indent": 0,
      "text": "10.1. Normative References",
      "section_title": true,
      "ja": "10.1. 引用文献"
    },
    {
      "indent": 3,
      "text": "[PSL] Mozilla, \"Public Suffix List\", <https://publicsuffix.org/>.",
      "ja": "[PSL] Mozilla、「パブリックサフィックスリスト」、<https://publicsuffix.org/>。"
    },
    {
      "indent": 3,
      "text": "[RFC2119] Bradner, S., \"Key words for use in RFCs to Indicate Requirement Levels\", BCP 14, RFC 2119, DOI 10.17487/RFC2119, March 1997, <https://www.rfc-editor.org/info/rfc2119>.",
      "ja": "[RFC2119] Bradner、S。、「要件レベルを示すためにRFCで使用するキーワード」、BCP 14、RFC 2119、DOI 10.17487 / RFC2119、1997年3月、<https://www.rfc-editor.org/info/ rfc2119>。"
    },
    {
      "indent": 3,
      "text": "[RFC2818] Rescorla, E., \"HTTP Over TLS\", RFC 2818, DOI 10.17487/RFC2818, May 2000, <https://www.rfc-editor.org/info/rfc2818>.",
      "ja": "[RFC2818] Rescorla、E。、「HTTP Over TLS」、RFC 2818、DOI 10.17487 / RFC2818、2000年5月、<https://www.rfc-editor.org/info/rfc2818>。"
    },
    {
      "indent": 3,
      "text": "[RFC3864] Klyne, G., Nottingham, M., and J. Mogul, \"Registration Procedures for Message Header Fields\", BCP 90, RFC 3864, DOI 10.17487/RFC3864, September 2004, <https://www.rfc-editor.org/info/rfc3864>.",
      "ja": "[RFC3864] Klyne、G.、Nottingham、M。、およびJ. Mogul、「メッセージヘッダーフィールドの登録手順」、BCP 90、RFC 3864、DOI 10.17487 / RFC3864、2004年9月、<https：//www.rfc- editor.org/info/rfc3864>。"
    },
    {
      "indent": 3,
      "text": "[RFC4648] Josefsson, S., \"The Base16, Base32, and Base64 Data Encodings\", RFC 4648, DOI 10.17487/RFC4648, October 2006, <https://www.rfc-editor.org/info/rfc4648>.",
      "ja": "[RFC4648] Josefsson、S。、「The Base16、Base32、およびBase64データエンコーディング」、RFC 4648、DOI 10.17487 / RFC4648、2006年10月、<https://www.rfc-editor.org/info/rfc4648>。"
    },
    {
      "indent": 3,
      "text": "[RFC5246] Dierks, T. and E. Rescorla, \"The Transport Layer Security (TLS) Protocol Version 1.2\", RFC 5246, DOI 10.17487/RFC5246, August 2008, <https://www.rfc-editor.org/info/rfc5246>.",
      "ja": "[RFC5246] Dierks、T。およびE. Rescorla、「The Transport Layer Security（TLS）Protocol Version 1.2」、RFC 5246、DOI 10.17487 / RFC5246、2008年8月、<https://www.rfc-editor.org/info / rfc5246>。"
    },
    {
      "indent": 3,
      "text": "[RFC5705] Rescorla, E., \"Keying Material Exporters for Transport Layer Security (TLS)\", RFC 5705, DOI 10.17487/RFC5705, March 2010, <https://www.rfc-editor.org/info/rfc5705>.",
      "ja": "[RFC5705] Rescorla、E。、「Keying Material Exporters for Transport Layer Security（TLS）」、RFC 5705、DOI 10.17487 / RFC5705、2010年3月、<https://www.rfc-editor.org/info/rfc5705>。"
    },
    {
      "indent": 3,
      "text": "[RFC6265] Barth, A., \"HTTP State Management Mechanism\", RFC 6265, DOI 10.17487/RFC6265, April 2011, <https://www.rfc-editor.org/info/rfc6265>.",
      "ja": "[RFC6265] Barth、A。、「HTTP State Management Mechanism」、RFC 6265、DOI 10.17487 / RFC6265、2011年4月、<https://www.rfc-editor.org/info/rfc6265>。"
    },
    {
      "indent": 3,
      "text": "[RFC7230] Fielding, R., Ed. and J. Reschke, Ed., \"Hypertext Transfer Protocol (HTTP/1.1): Message Syntax and Routing\", RFC 7230, DOI 10.17487/RFC7230, June 2014, <https://www.rfc-editor.org/info/rfc7230>.",
      "ja": "[RFC7230]フィールディング、R。、エド。およびJ. Reschke編、「Hypertext Transfer Protocol（HTTP / 1.1）：Message Syntax and Routing」、RFC 7230、DOI 10.17487 / RFC7230、2014年6月、<https://www.rfc-editor.org/info/ rfc7230>。"
    },
    {
      "indent": 3,
      "text": "[RFC7231] Fielding, R., Ed. and J. Reschke, Ed., \"Hypertext Transfer Protocol (HTTP/1.1): Semantics and Content\", RFC 7231, DOI 10.17487/RFC7231, June 2014, <https://www.rfc-editor.org/info/rfc7231>.",
      "ja": "[RFC7231]フィールディング、R。、エド。およびJ. Reschke編、「Hypertext Transfer Protocol（HTTP / 1.1）：Semantics and Content」、RFC 7231、DOI 10.17487 / RFC7231、2014年6月、<https://www.rfc-editor.org/info/rfc7231 >。"
    },
    {
      "indent": 3,
      "text": "[RFC7541] Peon, R. and H. Ruellan, \"HPACK: Header Compression for HTTP/2\", RFC 7541, DOI 10.17487/RFC7541, May 2015, <https://www.rfc-editor.org/info/rfc7541>.",
      "ja": "[RFC7541] Peon、R。およびH. Ruellan、「HPACK：HTTP / 2のヘッダー圧縮」、RFC 7541、DOI 10.17487 / RFC7541、2015年5月、<https://www.rfc-editor.org/info/rfc7541 >。"
    },
    {
      "indent": 3,
      "text": "[RFC8174] Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174, May 2017, <https://www.rfc-editor.org/info/rfc8174>.",
      "ja": "[RFC8174] Leiba、B。、「RFC 2119キーワードの大文字と小文字のあいまいさ」、BCP 14、RFC 8174、DOI 10.17487 / RFC8174、2017年5月、<https://www.rfc-editor.org/info/ rfc8174>。"
    },
    {
      "indent": 3,
      "text": "[RFC8471] Popov, A., Ed., Nystroem, M., Balfanz, D., and J. Hodges, \"The Token Binding Protocol Version 1.0\", RFC 8471, DOI 10.17487/RFC8471, October 2018, <https://www.rfc-editor.org/info/rfc8471>.",
      "ja": "[RFC8471] Popov、A.、Ed。、Nystroem、M.、Balfanz、D。、およびJ. Hodges、「The Token Binding Protocol Version 1.0」、RFC 8471、DOI 10.17487 / RFC8471、2018年10月、<https：/ /www.rfc-editor.org/info/rfc8471>。"
    },
    {
      "indent": 3,
      "text": "[RFC8472] Popov, A., Ed., Nystroem, M., and D. Balfanz, \"Transport Layer Security (TLS) Extension for Token Binding Protocol Negotiation\", RFC 8472, DOI 10.17487/RFC8472, October 2018, <https://www.rfc-editor.org/info/rfc8472>.",
      "ja": "[RFC8472] Popov、A.、Ed。、Nystroem、M。、およびD. Balfanz、「Transport Layer Security（TLS）Extension for Token Binding Protocol Negotiation」、RFC 8472、DOI 10.17487 / RFC8472、2018年10月、<https： //www.rfc-editor.org/info/rfc8472>。"
    },
    {
      "indent": 0,
      "text": "10.2. Informative References",
      "section_title": true,
      "ja": "10.2. 参考引用"
    },
    {
      "indent": 3,
      "text": "[fetch-spec] WhatWG, \"Fetch\", Living Standard, <https://fetch.spec.whatwg.org/>.",
      "ja": "[fetch-spec] WhatWG、「Fetch」、Living Standard、<https://fetch.spec.whatwg.org/>。"
    },
    {
      "indent": 3,
      "text": "[OASIS.saml-core-2.0-os] Cantor, S., Kemp, J., Philpott, R., and E. Maler, \"Assertions and Protocols for the OASIS Security Assertion Markup Language (SAML) V2.0\", OASIS Standard saml-core-2.0-os, March 2005, <http://docs.oasis-open.org/ security/saml/v2.0/saml-core-2.0-os.pdf>.",
      "ja": "[OASIS.saml-core-2.0-os] Cantor、S.、Kemp、J.、Philpott、R.、and E. Maler、 \"Assertions and Protocols for the OASIS Security Assertion Markup Language（SAML）V2.0\"、 OASIS標準saml-core-2.0-os、2005年3月、<http://docs.oasis-open.org/security/saml/v2.0/saml-core-2.0-os.pdf>。"
    },
    {
      "indent": 3,
      "text": "[OASIS.saml-prof-2.0-os] Hughes, J., Ed., Cantor, S., Ed., Hodges, J., Ed., Hirsch, F., Ed., Mishra, P., Ed., Philpott, R., Ed., and E. Maler, Ed., \"Profiles for the OASIS Security Assertion Markup Language (SAML) V2.0\", OASIS Standard OASIS.saml-profiles-2.0-os, March 2005, <http://docs.oasis-open.org/security/ saml/v2.0/saml-profiles-2.0-os.pdf>.",
      "ja": "[OASIS.saml-prof-2.0-os] Hughes、J.、Ed。、Cantor、S.、Ed。、Hodges、J.、Ed。、Hirsch、F.、Ed。、Mishra、P.、Ed。 、Philpott、R。、編、およびE. Maler、編、「OASISセキュリティアサーションマークアップ言語（SAML）V2.0のプロファイル」、OASIS標準OASIS.saml-profiles-2.0-os、2005年3月、< http://docs.oasis-open.org/security/ saml / v2.0 / saml-profiles-2.0-os.pdf>。"
    },
    {
      "indent": 3,
      "text": "[OpenID.Core] Sakimura, N., Bradley, J., Jones, M., de Medeiros, B., and C. Mortimore, \"OpenID Connect Core 1.0 incorporating errata set 1\", November 2014, <http://openid.net/specs/openid-connect-core-1_0.html>.",
      "ja": "[OpenID.Core] Sakimura N.、Bradley、J.、Jones、M.、de Medeiros、B。、およびC. Mortimore、「OpenID Connect Core 1.0組み込んだエラッタセット1」、2014年11月、<http：// openid.net/specs/openid-connect-core-1_0.html>。"
    },
    {
      "indent": 3,
      "text": "[RFC6749] Hardt, D., Ed., \"The OAuth 2.0 Authorization Framework\", RFC 6749, DOI 10.17487/RFC6749, October 2012, <https://www.rfc-editor.org/info/rfc6749>.",
      "ja": "[RFC6749] Hardt、D。、編、「The OAuth 2.0 Authorization Framework」、RFC 6749、DOI 10.17487 / RFC6749、2012年10月、<https://www.rfc-editor.org/info/rfc6749>。"
    },
    {
      "indent": 3,
      "text": "[RFC7540] Belshe, M., Peon, R., and M. Thomson, Ed., \"Hypertext Transfer Protocol Version 2 (HTTP/2)\", RFC 7540, DOI 10.17487/RFC7540, May 2015, <https://www.rfc-editor.org/info/rfc7540>.",
      "ja": "[RFC7540] Belshe、M.、Peon、R。、およびM. Thomson、編、「Hypertext Transfer Protocol Version 2（HTTP / 2）」、RFC 7540、DOI 10.17487 / RFC7540、2015年5月、<https：// www.rfc-editor.org/info/rfc7540>。"
    },
    {
      "indent": 3,
      "text": "[TOKENBIND-TLS13] Harper, N., \"Token Binding for Transport Layer Security (TLS) Version 1.3 Connections\", Work in Progress, draft-ietf-tokbind-tls13-01, May 2018.",
      "ja": "[TOKENBIND-TLS13] Harper、N。、「トランスポート層セキュリティ（TLS）バージョン1.3接続のトークンバインディング」、作業中、draft-ietf-tokbind-tls13-01、2018年5月。"
    },
    {
      "indent": 3,
      "text": "[W3C.REC-DOM-Level-3-Core-20040407] Le Hors, A., Ed., Le Hegaret, P., Ed., Wood, L., Ed., Nicol, G., Ed., Robie, J., Ed., Champion, M., Ed., and S. Byrne, Ed., \"Document Object Model (DOM) Level 3 Core Specification\", World Wide Web Consortium Recommendation REC-DOM-Level-3-Core-20040407, April 2004, <https://www.w3.org/TR/2004/ REC-DOM-Level-3-Core-20040407>.",
      "ja": "[W3C.REC-DOM-Level-3-Core-20040407] Le Hors、A.、Ed。、Le Hegaret、P.、Ed。、Wood、L.、Ed。、Nicol、G.、Ed。、Robie 、J。、編、Champion、M。、編、S。Byrne、編、「Document Object Model（DOM）Level 3 Core Specification」、World Wide Web Consortium Recommendation REC-DOM-Level-3-Core -20040407、2004年4月、<https://www.w3.org/TR/2004/ REC-DOM-Level-3-Core-20040407>。"
    },
    {
      "indent": 0,
      "text": "Acknowledgements",
      "ja": "謝辞"
    },
    {
      "indent": 3,
      "text": "This document incorporates comments and suggestions offered by Eric Rescorla, Gabriel Montenegro, Martin Thomson, Vinod Anupam, Anthony Nadalin, Michael B. Jones, Bill Cox, Brian Campbell, and others.",
      "ja": "このドキュメントには、Eric Rescorla、Gabriel Montenegro、Martin Thomson、Vinod Anupam、Anthony Nadalin、Michael B. Jones、Bill Cox、Brian Campbellなどが提供するコメントと提案が組み込まれています。"
    },
    {
      "indent": 3,
      "text": "This document was produced under the chairmanship of John Bradley and Leif Johansson. The area directors included Eric Rescorla, Kathleen Moriarty, and Stephen Farrell.",
      "ja": "このドキュメントは、John BradleyとLeif Johanssonの議長の下で作成されました。エリアディレクターには、Eric Rescorla、Kathleen Moriarty、Stephen Farrellが含まれていました。"
    },
    {
      "indent": 0,
      "text": "Authors' Addresses",
      "ja": "著者のアドレス"
    },
    {
      "indent": 3,
      "text": "Andrei Popov Microsoft Corp. United States of America",
      "ja": "Andrei Popov Microsoft Corp.アメリカ合衆国"
    },
    {
      "indent": 3,
      "text": "Email: andreipo@microsoft.com",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "Magnus Nystroem Microsoft Corp. United States of America",
      "ja": "Magnus Nystroem Microsoft Corp.アメリカ合衆国"
    },
    {
      "indent": 3,
      "text": "Email: mnystrom@microsoft.com",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "Dirk Balfanz (editor) Google Inc. United States of America",
      "ja": "Dirk Ba​​lfanz（編集者）Google Inc.アメリカ合衆国"
    },
    {
      "indent": 3,
      "text": "Email: balfanz@google.com",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "Nick Harper Google Inc. United States of America",
      "ja": "Nick Harper Google Inc.アメリカ合衆国"
    },
    {
      "indent": 3,
      "text": "Email: nharper@google.com",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "Jeff Hodges Kings Mountain Systems United States of America",
      "ja": "ジェフホッジスキングスマウンテンシステムズアメリカ合衆国"
    },
    {
      "indent": 3,
      "text": "Email: Jeff.Hodges@KingsMountain.com",
      "raw": true,
      "ja": ""
    }
  ]
}