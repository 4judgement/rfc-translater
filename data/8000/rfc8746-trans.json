{
  "title": {
    "text": "RFC 8746 - Concise Binary Object Representation (CBOR) Tags for Typed Arrays",
    "ja": "RFC 8746 - 型付き配列の簡潔なバイナリオブジェクト表現（CBOR）タグ"
  },
  "number": 8746,
  "created_at": "2020-07-07 21:13:24.041187+09:00",
  "updated_by": "",
  "contents": [
    {
      "indent": 0,
      "text": "Internet Engineering Task Force (IETF)                   C. Bormann, Ed.\nRequest for Comments: 8746                        Universität Bremen TZI\nCategory: Standards Track                                  February 2020\nISSN: 2070-1721",
      "raw": true
    },
    {
      "indent": 3,
      "text": "Concise Binary Object Representation (CBOR) Tags for Typed Arrays",
      "ja": "型付き配列の簡潔なバイナリオブジェクト表現（CBOR）タグ"
    },
    {
      "indent": 0,
      "text": "Abstract",
      "ja": "概要"
    },
    {
      "indent": 3,
      "text": "The Concise Binary Object Representation (CBOR), as defined in RFC 7049, is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation.",
      "ja": "RFC 7049で定義されているコンサイスバイナリオブジェクト表現（CBOR）は、非常に小さいコードサイズ、かなり小さいメッセージサイズ、およびバージョンネゴシエーションを必要としない拡張性の可能性を設計目標に含むデータ形式です。"
    },
    {
      "indent": 3,
      "text": "This document makes use of this extensibility to define a number of CBOR tags for typed arrays of numeric data, as well as additional tags for multi-dimensional and homogeneous arrays. It is intended as the reference document for the IANA registration of the CBOR tags defined.",
      "ja": "このドキュメントでは、この拡張性を利用して、数値データの型付き配列の多数のCBORタグ、および多次元の同種配列の追加タグを定義します。 これは、定義されたCBORタグのIANA登録の参照ドキュメントとして意図されています。"
    },
    {
      "indent": 0,
      "text": "Status of This Memo",
      "ja": "このメモのステータス"
    },
    {
      "indent": 3,
      "text": "This is an Internet Standards Track document.",
      "ja": "これはInternet Standards Trackドキュメントです。"
    },
    {
      "indent": 3,
      "text": "This document is a product of the Internet Engineering Task Force (IETF). It represents the consensus of the IETF community. It has received public review and has been approved for publication by the Internet Engineering Steering Group (IESG). Further information on Internet Standards is available in Section 2 of RFC 7841.",
      "ja": "このドキュメントは、IETF（Internet Engineering Task Force）の製品です。 これは、IETFコミュニティのコンセンサスを表しています。 これは公開レビューを受けており、Internet Engineering Steering Group（IESG）による公開が承認されています。 インターネット標準の詳細については、RFC 7841のセクション2をご覧ください。"
    },
    {
      "indent": 3,
      "text": "Information about the current status of this document, any errata, and how to provide feedback on it may be obtained at https://www.rfc-editor.org/info/rfc8746.",
      "ja": "このドキュメントの現在のステータス、エラータ、およびフィードバックの提供方法に関する情報は、https：//www.rfc-editor.org/info/rfc8746で入手できます。"
    },
    {
      "indent": 0,
      "text": "Copyright Notice",
      "ja": "著作権表示"
    },
    {
      "indent": 3,
      "text": "Copyright (c) 2020 IETF Trust and the persons identified as the document authors. All rights reserved.",
      "ja": "著作権（c）2020 IETFトラストおよび文書の作成者として識別された人物。 全著作権所有。"
    },
    {
      "indent": 3,
      "text": "This document is subject to BCP 78 and the IETF Trust's Legal Provisions Relating to IETF Documents (https://trustee.ietf.org/license-info) in effect on the date of publication of this document. Please review these documents carefully, as they describe your rights and restrictions with respect to this document. Code Components extracted from this document must include Simplified BSD License text as described in Section 4.e of the Trust Legal Provisions and are provided without warranty as described in the Simplified BSD License.",
      "ja": "この文書は、BCP 78およびIETF文書に関するIETFトラストの法的規定（https://trustee.ietf.org/license-info）の対象であり、この文書の発行日に有効です。 これらのドキュメントは、このドキュメントに関するあなたの権利と制限を説明しているため、注意深く確認してください。 このドキュメントから抽出されたコードコンポーネントには、Trust Legal Provisionsのセクション4.eに記載されているSimplified BSD Licenseのテキストが含まれている必要があり、Simplified BSD Licenseに記載されているように保証なしで提供されます。"
    },
    {
      "indent": 0,
      "text": "Table of Contents",
      "ja": "目次"
    },
    {
      "indent": 3,
      "text": "1. Introduction 1.1. Terminology 2. Typed Arrays 2.1. Types of Numbers 3. Additional Array Tags 3.1. Multi-dimensional Array 3.1.1. Row-Major Order 3.1.2. Column-Major Order 3.2. Homogeneous Array 4. Discussion 5. CDDL Typenames 6. IANA Considerations 7. Security Considerations 8. References 8.1. Normative References 8.2. Informative References Acknowledgements Contributors Author's Address",
      "ja": "1. はじめに1.1。 用語2.型付き配列2.1。 数値のタイプ3.追加の配列タグ3.1。 多次元配列3.1.1。 行優先注文3.1.2。 列優先順3.2。 同種アレイ4.ディスカッション5. CDDLタイプ名6. IANAに関する考慮事項7.セキュリティに関する考慮事項8.参考資料8.1。 規範的な参考文献8.2。 有益な参照謝辞貢献者著者のアドレス"
    },
    {
      "indent": 0,
      "text": "1. Introduction",
      "section_title": true,
      "ja": "1. はじめに"
    },
    {
      "indent": 3,
      "text": "The Concise Binary Object Representation (CBOR) [RFC7049] provides for the interchange of structured data without a requirement for a pre-agreed schema. [RFC7049] defines a basic set of data types as well as a tagging mechanism that enables extending the set of data types supported via an IANA registry.",
      "ja": "簡潔なバイナリオブジェクト表現（CBOR）[RFC7049]は、事前に合意されたスキーマを必要とせずに、構造化データの交換を提供します。 [RFC7049]は、データ型の基本セットと、IANAレジストリを介してサポートされるデータ型のセットを拡張できるタグ付けメカニズムを定義しています。"
    },
    {
      "indent": 3,
      "text": "Recently, a simple form of typed arrays of numeric data has received interest both in the Web graphics community [TypedArray] and in the JavaScript specification (see Section 22.2 (https://www.ecma-international.org/ecma-262/10.0/index.html#sec-typedarray-objects) of [ECMA-ES10]) as well as in corresponding implementations [ArrayBuffer].",
      "ja": "最近、数値データの型付き配列の単純な形式が、Webグラフィックコミュニティ[TypedArray]とJavaScript仕様の両方で関心を集めています（セクション22.2（https://www.ecma-international.org/ecma-262/10.0を参照）。 /index.html#sec-typedarray-objects）[ECMA-ES10]）と対応する実装[ArrayBuffer]。"
    },
    {
      "indent": 3,
      "text": "Since these typed arrays may carry significant amounts of data, there is interest in interchanging them in CBOR without the need of lengthy conversion of each number in the array. This can also save space overhead with encoding a type for each element of an array.",
      "ja": "これらの型付き配列は大量のデータを運ぶ可能性があるため、配列内の各数値を長時間変換する必要なく、CBORでそれらを交換することに関心があります。 これにより、配列の各要素の型をエンコードすることで、スペースのオーバーヘッドを節約することもできます。"
    },
    {
      "indent": 3,
      "text": "This document defines a number of interrelated CBOR tags that cover these typed arrays, as well as additional tags for multi-dimensional and homogeneous arrays. It is intended as the reference document for the IANA registration of the tags defined.",
      "ja": "このドキュメントでは、これらの型付き配列をカバーする相互に関連する多数のCBORタグと、多次元および同種配列用の追加タグを定義します。 これは、定義されたタグのIANA登録の参照ドキュメントとして意図されています。"
    },
    {
      "indent": 3,
      "text": "Note that an application that generates CBOR with these tags has considerable freedom in choosing variants (e.g., with respect to endianness, embedded type (signed vs. unsigned), and number of bits per element) or whether a tag defined in this specification is used at all instead of more basic CBOR. In contrast to representation variants of single CBOR numbers, there is no representation that could be identified as \"preferred\". If deterministic encoding is desired in a CBOR-based protocol making use of these tags, the protocol has to define which of the encoding variants are used for each individual case.",
      "ja": "これらのタグでCBORを生成するアプリケーションは、バリアント（たとえば、エンディアン、埋め込み型（符号付きと符号なし）、および要素ごとのビット数）を選択する際にかなりの自由度があるか、この仕様で定義されているタグを使用するかどうかに注意してください より基本的なCBORの代わりに。 単一のCBOR番号の表記バリアントとは対照的に、「推奨」として識別できる表記はありません。 これらのタグを使用するCBORベースのプロトコルで確定的なエンコーディングが必要な場合、プロトコルは、個々のケースごとに使用されるエンコーディングバリアントを定義する必要があります。"
    },
    {
      "indent": 0,
      "text": "1.1. Terminology",
      "section_title": true,
      "ja": "1.1. 用語"
    },
    {
      "indent": 3,
      "text": "The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as described in BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all capitals, as shown here.",
      "ja": "この文書のキーワード \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", および \"OPTIONAL\" はBCP 14 [RFC2119] [RFC8174]で説明されているように、すべて大文字の場合にのみ解釈されます。"
    },
    {
      "indent": 3,
      "text": "The term \"byte\" is used in its now-customary sense as a synonym for \"octet\". Where bit arithmetic is explained, this document uses familiar notation from the programming language C [C] (including C++14's 0bnnn binary literals [CPlusPlus]) with the exception of the operator \"**\", which stands for exponentiation.",
      "ja": "「バイト」という用語は、今では慣習的な意味で「オクテット」の同義語として使用されています。 ビット演算について説明する場合、このドキュメントでは、累乗を表す演算子「**」を除いて、プログラミング言語C [C]（C ++ 14の0bnnnバイナリリテラル[CPlusPlus]を含む）の一般的な表記法を使用します。"
    },
    {
      "indent": 3,
      "text": "The term \"array\" is used in a general sense in this document unless further specified. The term \"classical CBOR array\" describes an array represented with CBOR major type 4. A \"homogeneous array\" is an array of elements that are all the same type (the term is neutral as to whether that is a representation type or an application data model type).",
      "ja": "「アレイ」という用語は、特に明記されていない限り、このドキュメントでは一般的な意味で使用されます。 「クラシックCBOR配列」という用語は、CBORメジャータイプ4で表される配列を表します。「同種配列」とは、すべて同じ型の要素の配列です（この用語は、それが表現型であるかアプリケーションデータであるかに関して中立です） モデルタイプ）。"
    },
    {
      "indent": 3,
      "text": "The terms \"big endian\" and \"little endian\" are used to indicate a most significant byte first (MSB first) representation of integers and a least significant byte first (LSB first) representation, respectively.",
      "ja": "「ビッグエンディアン」および「リトルエンディアン」という用語は、それぞれ整数の最上位バイトファースト（MSBファースト）表現と最下位バイトファースト（LSBファースト）表現を示すために使用されます。"
    },
    {
      "indent": 0,
      "text": "2. Typed Arrays",
      "section_title": true,
      "ja": "2. 型付き配列"
    },
    {
      "indent": 3,
      "text": "Typed arrays are homogeneous arrays of numbers, all of which are encoded in a single form of binary representation. The concatenation of these representations is encoded as a single CBOR byte string (major type 2), enclosed by a single tag indicating the type and encoding of all the numbers represented in the byte string.",
      "ja": "型付き配列は、数値の同種配列であり、すべてが単一形式のバイナリ表現でエンコードされます。 これらの表現の連結は、バイト文字列で表されるすべての数値のタイプとエンコーディングを示す単一のタグで囲まれた単一のCBORバイト文字列（メジャータイプ2）としてエンコードされます。"
    },
    {
      "indent": 0,
      "text": "2.1. Types of Numbers",
      "section_title": true,
      "ja": "2.1. 数字の種類"
    },
    {
      "indent": 3,
      "text": "Three classes of numbers are of interest: unsigned integers (uint), signed integers (two's complement, sint), and IEEE 754 binary floating point numbers (which are always signed). For each of these classes, there are multiple representation lengths in active use:",
      "ja": "符号付き整数（uint）、符号付き整数（2の補数、sint）、およびIEEE 754 2進浮動小数点数（常に符号付き）の3つの数値クラスが対象です。 これらのクラスごとに、アクティブに使用される複数の表現長があります。"
    },
    {
      "indent": 16,
      "text": "+-----------+--------+--------+-----------+\n| Length ll | uint   | sint   | float     |\n+===========+========+========+===========+\n| 0         | uint8  | sint8  | binary16  |\n+-----------+--------+--------+-----------+\n| 1         | uint16 | sint16 | binary32  |\n+-----------+--------+--------+-----------+\n| 2         | uint32 | sint32 | binary64  |\n+-----------+--------+--------+-----------+\n| 3         | uint64 | sint64 | binary128 |\n+-----------+--------+--------+-----------+",
      "raw": true
    },
    {
      "indent": 27,
      "text": "Table 1: Length Values",
      "ja": "表1：長さの値"
    },
    {
      "indent": 3,
      "text": "Here, sintN stands for a signed integer of exactly N bits (for instance, sint16), and uintN stands for an unsigned integer of exactly N bits (for instance, uint32). The name binaryN stands for the number form of the same name defined in IEEE 754 [IEEE754].",
      "ja": "ここで、sintNは正確にNビットの符号付き整数（たとえば、sint16）を表し、uintNは正確にNビットの符号なし整数（たとえば、uint32）を表します。 名前binaryNは、IEEE 754 [IEEE754]で定義されている同じ名前の数値形式を表します。"
    },
    {
      "indent": 3,
      "text": "Since one objective of these tags is to be able to directly ship the ArrayBuffers underlying the Typed Arrays without re-encoding them, and these may be either in big-endian (network byte order) or in little-endian form, we need to define tags for both variants.",
      "ja": "これらのタグの1つの目的は、型付き配列の基になるArrayBufferを再エンコードせずに直接出荷できることであり、これらはビッグエンディアン（ネットワークバイト順）またはリトルエンディアン形式のいずれかであるため、次のように定義する必要があります。 両方のバリアントのタグ。"
    },
    {
      "indent": 3,
      "text": "In total, this leads to 24 variants. In the tag, we need to express the choice between integer and floating point, the signedness (for integers), the endianness, and one of the four length values.",
      "ja": "合計すると、これは24のバリアントにつながります。 タグでは、整数と浮動小数点の間の選択、符号付き（整数の場合）、エンディアン、および4つの長さの値の1つを表す必要があります。"
    },
    {
      "indent": 3,
      "text": "In order to simplify implementation, a range of tags is being allocated that allows retrieving all this information from the bits of the tag: tag values from 64 to 87.",
      "ja": "実装を簡素化するために、タグのビットからすべてのこの情報を取得できるタグの範囲が割り当てられています。64〜87のタグ値。"
    },
    {
      "indent": 3,
      "text": "The value is split up into 5 bit fields: 0b010, f, s, e, and ll as detailed in Table 2.",
      "ja": "値は、表2に示すように、5ビットのフィールド0b010、f、s、e、およびllに分割されます。"
    },
    {
      "indent": 5,
      "text": "+-------+-------------------------------------------------------+\n| Field | Use                                                   |\n+=======+=======================================================+\n| 0b010 | the constant bits 0, 1, 0                             |\n+-------+-------------------------------------------------------+\n| f     | 0 for integer, 1 for float                            |\n+-------+-------------------------------------------------------+\n| s     | 0 for float or unsigned integer, 1 for signed integer |\n+-------+-------------------------------------------------------+\n| e     | 0 for big endian, 1 for little endian                 |\n+-------+-------------------------------------------------------+\n| ll    | A number for the length (Table 1).                    |\n+-------+-------------------------------------------------------+",
      "raw": true
    },
    {
      "indent": 14,
      "text": "Table 2: Bit Fields in the Low 8 Bits of the Tag",
      "ja": "表2：タグの下位8ビットのビットフィールド"
    },
    {
      "indent": 3,
      "text": "The number of bytes in each array element can then be calculated by \"2**(f + ll)\" (or \"1 << (f + ll)\" in a typical programming language). (Notice that 0f and ll are the two least significant bits, respectively, of each 4-bit nibble in the byte.)",
      "ja": "各配列要素のバイト数は、 \"2 **（f + ll）\"（または一般的なプログラミング言語では \"1 <<（f + ll）\"）で計算できます。 （0fとllはそれぞれ、バイト内の各4ビットニブルの最下位2ビットです。）"
    },
    {
      "indent": 3,
      "text": "In the CBOR representation, the total number of elements in the array is not expressed explicitly but is implied from the length of the byte string and the length of each representation. It can be computed from the length, in bytes, of the byte string comprising the representation of the array by inverting the previous formula: \"bytelength >> (f + ll)\".",
      "ja": "CBOR表現では、配列内の要素の総数は明示的に表現されていませんが、バイト文字列の長さと各表現の長さから暗示されます。 これは、前の式「bytelength >>（f + ll）」を逆にすることにより、配列の表現を構成するバイト文字列の長さ（バイト単位）から計算できます。"
    },
    {
      "indent": 3,
      "text": "For the uint8/sint8 values, the endianness is redundant. Only the tag for the big-endian variant is used and assigned as such. The tag that would signify the little-endian variant of sint8 MUST NOT be used; its tag number is marked as reserved. As a special case, the tag that would signify the little-endian variant of uint8 is instead assigned to signify that the numbers in the array are using clamped conversion from integers, as described in more detail in Section 7.1.11 (http://www.ecma-international.org/ecma-262/6.0/#sec-touint8clamp) of the ES10 JavaScript specification (\"ToUint8Clamp\") [ECMA-ES10]; the assumption here is that a program-internal representation of this array after decoding would be marked this way for further processing providing \"roundtripping\" of JavaScript-typed arrays through CBOR.",
      "ja": "uint8 / sint8値の場合、エンディアンは冗長です。 ビッグエンディアンバリアントのタグのみが使用され、そのように割り当てられます。 sint8のリトルエンディアンバリアントを示すタグは使用してはなりません（MUST NOT）。 そのタグ番号は予約済みとしてマークされています。 特別なケースとして、uint8のリトルエンディアンバリアントを示すタグが代わりに割り当てられ、7.1.11節（http：//）で詳細に説明されているように、配列内の数値が整数からのクランプ変換を使用していることを示します。 www.ecma-international.org/ecma-262/6.0/#sec-touint8clamp）ES10 JavaScript仕様（ \"ToUint8Clamp\"）[ECMA-ES10]; ここでの前提は、デコード後のこの配列のプログラム内部表現が、CBORを介してJavaScriptタイプの配列の「ラウンドトリッピング」を提供するさらなる処理のためにこのようにマークされることです。"
    },
    {
      "indent": 3,
      "text": "IEEE 754 binary floating numbers are always signed. Therefore, for the float variants (\"f\" == 1), there is no need to distinguish between signed and unsigned variants; the \"s\" bit is always zero. The tag numbers where \"s\" would be one (which would have tag values 88 to 95) remain free to use by other specifications.",
      "ja": "IEEE 754 2進数浮動小数点数は常に符号付きです。 したがって、floatバリアント（ \"f\" == 1）の場合、符号付きと符号なしのバリアントを区別する必要はありません。 「s」ビットは常にゼロです。 「s」が1になるタグ番号（タグ値は88〜95）は、他の仕様で自由に使用できます。"
    },
    {
      "indent": 0,
      "text": "3. Additional Array Tags",
      "section_title": true,
      "ja": "3. 追加の配列タグ"
    },
    {
      "indent": 3,
      "text": "This specification defines three additional array tags. The Multi-dimensional Array tags can be combined with classical CBOR arrays as well as with Typed Arrays in order to build multi-dimensional arrays with constant numbers of elements in the sub-arrays. The Homogeneous Array tag can be used as a signal by an application to identify a classical CBOR array as a homogeneous array, even when a Typed Array does not apply.",
      "ja": "この仕様では、3つの追加の配列タグが定義されています。 多次元配列タグは、従来のCBOR配列や型付き配列と組み合わせて、サブ配列内の要素数が一定の多次元配列を構築できます。 型付き配列が適用されない場合でも、アプリケーションは同種配列タグを信号として使用して、従来のCBOR配列を同種配列として識別できます。"
    },
    {
      "indent": 0,
      "text": "3.1. Multi-dimensional Array",
      "section_title": true,
      "ja": "3.1. 多次元配列"
    },
    {
      "indent": 3,
      "text": "A multi-dimensional array is represented as a tagged array that contains two (one-dimensional) arrays. The first array defines the dimensions of the multi-dimensional array (in the sequence of outer dimensions towards inner dimensions) while the second array represents the contents of the multi-dimensional array. If the second array is itself tagged as a Typed Array, then the element type of the multi-dimensional array is known to be the same type as that of the Typed Array.",
      "ja": "多次元配列は、2つの（1次元）配列を含むタグ付き配列として表されます。 最初の配列は、多次元配列の次元を（外部次元から内部次元に向かって）定義し、2番目の配列は多次元配列の内容を表します。 2番目の配列自体が型付き配列としてタグ付けされている場合、多次元配列の要素型は型付き配列と同じ型であることがわかります。"
    },
    {
      "indent": 3,
      "text": "Two tags are defined by this document: one for elements arranged in row-major order and another for column-major order [RowColMajor].",
      "ja": "このドキュメントでは2つのタグが定義されています。1つは行優先順で配置された要素用で、もう1つは列優先順[RowColMajor]です。"
    },
    {
      "indent": 0,
      "text": "3.1.1. Row-Major Order",
      "section_title": true,
      "ja": "3.1.1. 行優先順"
    },
    {
      "indent": 3,
      "text": "Tag: 40",
      "ja": "タグ：40"
    },
    {
      "indent": 3,
      "text": "Data Item: Array (major type 4) of two arrays: one array (major type 4) of dimensions, which are unsigned integers distinct from zero; and one array (any one of a CBOR array of major type 4, a Typed Array, or a Homogeneous Array) of elements.",
      "ja": "データ項目：2つの配列の配列（メジャータイプ4）：次元の1つの配列（メジャータイプ4）。これは、ゼロとは異なる符号なし整数です。 要素の1つの配列（メジャータイプ4のCBOR配列、型付き配列、またはホモジニアス配列のいずれか）。"
    },
    {
      "indent": 3,
      "text": "Data in the second array consists of consecutive values where the last dimension is considered contiguous (row-major order).",
      "ja": "2番目の配列のデータは、最後の次元が連続していると見なされる連続した値で構成されます（行優先順）。"
    },
    {
      "indent": 3,
      "text": "Figure 1 shows a declaration of a two-dimensional array in the C language, a representation of that in CBOR using both a multi-dimensional array tag and a typed array tag.",
      "ja": "図1は、C言語での2次元配列の宣言を示しています。CBORでは、多次元配列タグと型付き配列タグの両方を使用してそれを表現しています。"
    },
    {
      "indent": 3,
      "text": "uint16_t a[2][3] = {\n  {2, 4, 8},   /* row 0 */\n  {4, 16, 256},\n};",
      "raw": true
    },
    {
      "indent": 3,
      "text": "<Tag 40> # multi-dimensional array tag\n   82       # array(2)\n     82      # array(2)\n       02     # unsigned(2) 1st Dimension\n       03     # unsigned(3) 2nd Dimension\n     <Tag 65> # uint16 array\n       4c     # byte string(12)\n         0002 # unsigned(2)\n         0004 # unsigned(4)\n         0008 # unsigned(8)\n         0004 # unsigned(4)\n         0010 # unsigned(16)\n         0100 # unsigned(256)",
      "raw": true
    },
    {
      "indent": 14,
      "text": "Figure 1: Multi-dimensional Array in C and CBOR",
      "ja": "図1：CおよびCBORの多次元配列"
    },
    {
      "indent": 3,
      "text": "Figure 2 shows the same two-dimensional array using the multi-dimensional array tag in conjunction with a basic CBOR array (which, with the small numbers chosen for the example, happens to be shorter).",
      "ja": "図2は、基本的なCBOR配列と組み合わせて多次元配列タグを使用した同じ2次元配列を示しています（この例では小さい数値を選択したため、たまたま短くなっています）。"
    },
    {
      "indent": 3,
      "text": "<Tag 40> # multi-dimensional array tag\n   82       # array(2)\n     82      # array(2)\n       02     # unsigned(2) 1st Dimension\n       03     # unsigned(3) 2nd Dimension\n     86     # array(6)\n       02      # unsigned(2)\n       04      # unsigned(4)\n       08      # unsigned(8)\n       04      # unsigned(4)\n       10      # unsigned(16)\n       19 0100 # unsigned(256)",
      "raw": true
    },
    {
      "indent": 10,
      "text": "Figure 2: Multi-dimensional Array Using Basic CBOR Array",
      "ja": "図2：基本的なCBOR配列を使用した多次元配列"
    },
    {
      "indent": 0,
      "text": "3.1.2. Column-Major Order",
      "section_title": true,
      "ja": "3.1.2. 列優先順"
    },
    {
      "indent": 3,
      "text": "The multi-dimensional arrays specified in the previous sub-subsection are in \"row major\" order, which is the preferred order for the purposes of this specification. An analogous representation that uses \"column major\" order arrays is provided in this subsection under the tag 1040, as illustrated in Figure 3.",
      "ja": "前のサブサブセクションで指定された多次元配列は、「行優先」の順序になっています。これは、この仕様の目的で優先される順序です。 図3に示すように、「列優先」の順序配列を使用する類似の表現が、タグ1040の下のこのサブセクションに提供されています。"
    },
    {
      "indent": 3,
      "text": "Tag: 1040",
      "ja": "タグ：1040"
    },
    {
      "indent": 3,
      "text": "Data Item: The same as tag 40, except the data in the second array consists of consecutive values where the first dimension is considered contiguous (column-major order).",
      "ja": "データ項目：タグ40と同じですが、2番目の配列のデータは、最初の次元が連続していると見なされる連続した値で構成されます（列優先順）。"
    },
    {
      "indent": 3,
      "text": "<Tag 1040> # multi-dimensional array tag, column-major order\n   82       # array(2)\n     82      # array(2)\n       02     # unsigned(2) 1st Dimension\n       03     # unsigned(3) 2nd Dimension\n     86     # array(6)\n       02      # unsigned(2)\n       04      # unsigned(4)\n       04      # unsigned(4)\n       10      # unsigned(16)\n       08      # unsigned(8)\n       19 0100 # unsigned(256)",
      "raw": true
    },
    {
      "indent": 5,
      "text": "Figure 3: Multi-dimensional Array Using Basic CBOR Array, Column-Major Order",
      "ja": "図3：基本的なCBOR配列を使用した多次元配列、列優先"
    },
    {
      "indent": 0,
      "text": "3.2. Homogeneous Array",
      "section_title": true,
      "ja": "3.2. 同種アレイ"
    },
    {
      "indent": 3,
      "text": "Tag: 41",
      "ja": "タグ：41"
    },
    {
      "indent": 3,
      "text": "Data Item: Array (major type 4)",
      "ja": "データ項目：配列（メジャータイプ4）"
    },
    {
      "indent": 3,
      "text": "This tag identifies the classical CBOR array (a one-dimensional array) tagged by it as a homogeneous array, that is, it has elements that are all of the same application model data type. The element type of the array is therefore determined by the application model data type of the first array element.",
      "ja": "このタグは、タグが付けられた従来のCBOR配列（1次元配列）を同種配列として識別します。つまり、すべて同じアプリケーションモデルデータ型の要素を持っています。 したがって、配列の要素タイプは、最初の配列要素のアプリケーションモデルデータタイプによって決まります。"
    },
    {
      "indent": 3,
      "text": "This can be used in application data models that apply specific semantics to homogeneous arrays. Also, in certain cases, implementations in strongly typed languages may be able to create native homogeneous arrays of specific types instead of ordered lists while decoding. Which CBOR data items constitute elements of the same application type is specific to the application.",
      "ja": "これは、同種配列に特定のセマンティクスを適用するアプリケーションデータモデルで使用できます。 また、特定のケースでは、強く型付けされた言語の実装は、デコード時に順序付きリストではなく、特定の型のネイティブ同種配列を作成できる場合があります。 同じアプリケーションタイプの要素を構成するCBORデータ項目は、アプリケーションに固有です。"
    },
    {
      "indent": 3,
      "text": "Figure 4 shows an example for a homogeneous array of booleans in C++ [CPlusPlus] and CBOR.",
      "ja": "図4は、C ++ [CPlusPlus]およびCBORでのブール値の同種配列の例を示しています。"
    },
    {
      "indent": 3,
      "text": "bool boolArray[2] = { true, false };",
      "raw": true
    },
    {
      "indent": 3,
      "text": "<Tag 41>  # Homogeneous Array Tag\n   82           #array(2)\n      F5        # true\n      F4        # false",
      "raw": true
    },
    {
      "indent": 16,
      "text": "Figure 4: Homogeneous Array in C++ and CBOR",
      "raw": true
    },
    {
      "indent": 3,
      "text": "Figure 5 extends the example with a more complex structure.",
      "ja": "図5は、より複雑な構造で例を拡張しています。"
    },
    {
      "indent": 3,
      "text": "typedef struct {\n  bool active;\n  int value;\n} foo;\nfoo myArray[2] = { {true, 3}, {true, -4} };",
      "raw": true
    },
    {
      "indent": 3,
      "text": "<Tag 41>\n    82  # array(2)\n       82  #  array(2)\n             F5  # true\n             03  # 3\n       82 # array(2)\n             F5  # true\n             23  # -4",
      "raw": true
    },
    {
      "indent": 16,
      "text": "Figure 5: Homogeneous Array in C++ and CBOR",
      "raw": true
    },
    {
      "indent": 0,
      "text": "4. Discussion",
      "section_title": true,
      "ja": "4. 討論"
    },
    {
      "indent": 3,
      "text": "Support for both little- and big-endian representation may seem out of character with CBOR, which is otherwise fully big endian. This support is in line with the intended use of the typed arrays and the objective not to require conversion of each array element.",
      "ja": "リトルエンディアン表現とビッグエンディアン表現の両方のサポートは、CBORの性質から外れているように見えるかもしれません。 このサポートは、型付き配列の使用目的と、各配列要素の変換を必要としないという目的に沿っています。"
    },
    {
      "indent": 3,
      "text": "This specification allocates a sizable chunk out of the single-byte tag space. This use of code point space is justified by the wide use of typed arrays in data interchange.",
      "ja": "この仕様では、1バイトのタグスペースからかなりの量のチャンクが割り当てられます。 このコードポイントスペースの使用は、データ交換で型付き配列を幅広く使用することで正当化されます。"
    },
    {
      "indent": 3,
      "text": "Providing a column-major order variant of the multi-dimensional array may seem superfluous to some and useful to others. It is cheap to define the additional tag so that it is available when actually needed. Allocating it out of a different number space makes the preference for row-major evident.",
      "ja": "多次元配列の列優先順序のバリアントを提供することは、一部にとっては不必要であり、他にとっては便利に思えるかもしれません。 追加のタグを定義して、実際に必要なときに利用できるようにするのは安価です。 別の数値スペースから割り当てると、行優先が優先されます。"
    },
    {
      "indent": 3,
      "text": "Applying a Homogeneous Array tag to a Typed Array would usually be redundant and is therefore not provided by the present specification.",
      "ja": "同種配列タグを型付き配列に適用することは通常冗長であり、したがって、本仕様では提供されません。"
    },
    {
      "indent": 0,
      "text": "5. CDDL Typenames",
      "section_title": true,
      "ja": "5. CDDLタイプ名"
    },
    {
      "indent": 3,
      "text": "For use with CDDL [RFC8610], the typenames defined in Figure 6 are recommended:",
      "ja": "CDDL [RFC8610]で使用するには、図6で定義されているタイプ名が推奨されます。"
    },
    {
      "indent": 3,
      "text": "ta-uint8 = #6.64(bstr)\nta-uint16be = #6.65(bstr)\nta-uint32be = #6.66(bstr)\nta-uint64be = #6.67(bstr)\nta-uint8-clamped = #6.68(bstr)\nta-uint16le = #6.69(bstr)\nta-uint32le = #6.70(bstr)\nta-uint64le = #6.71(bstr)\nta-sint8 = #6.72(bstr)\nta-sint16be = #6.73(bstr)\nta-sint32be = #6.74(bstr)\nta-sint64be = #6.75(bstr)\n; reserved: #6.76(bstr)\nta-sint16le = #6.77(bstr)\nta-sint32le = #6.78(bstr)\nta-sint64le = #6.79(bstr)\nta-float16be = #6.80(bstr)\nta-float32be = #6.81(bstr)\nta-float64be = #6.82(bstr)\nta-float128be = #6.83(bstr)\nta-float16le = #6.84(bstr)\nta-float32le = #6.85(bstr)\nta-float64le = #6.86(bstr)\nta-float128le = #6.87(bstr)\nhomogeneous<array> = #6.41(array)\nmulti-dim<dim, array> = #6.40([dim, array])\nmulti-dim-column-major<dim, array> = #6.1040([dim, array])",
      "raw": true
    },
    {
      "indent": 18,
      "text": "Figure 6: Recommended Typenames for CDDL",
      "ja": "図6：CDDLの推奨されるタイプ名"
    },
    {
      "indent": 0,
      "text": "6. IANA Considerations",
      "section_title": true,
      "ja": "6. IANAに関する考慮事項"
    },
    {
      "indent": 3,
      "text": "IANA has allocated the tags in Table 3 using this document as the specification reference. (The reserved value is for a future revision of typed array tags.)",
      "ja": "IANAは、このドキュメントを仕様参照として使用して、表3のタグを割り当てました。 （予約済みの値は、型付き配列タグの将来のリビジョン用です。）"
    },
    {
      "indent": 3,
      "text": "The allocations were assigned from the \"specification required\" space (24..255) with the exception of 1040, which was assigned from the \"first come first served\" space (256..).",
      "ja": "割り当ては、「先着順」スペース（256 ..）から割り当てられた1040を除いて、「仕様が必要」スペース（24..255）から割り当てられました。"
    },
    {
      "indent": 7,
      "text": "+------+----------------------+----------------------------+\n|  Tag | Data Item            | Semantics                  |\n+======+======================+============================+\n|   40 | array of two arrays* | Multi-dimensional Array,   |\n|      |                      | row-major order            |\n+------+----------------------+----------------------------+\n|   41 | array                | Homogeneous Array          |\n+------+----------------------+----------------------------+\n|   64 | byte string          | uint8 Typed Array          |\n+------+----------------------+----------------------------+\n|   65 | byte string          | uint16, big endian, Typed  |\n|      |                      | Array                      |\n+------+----------------------+----------------------------+\n|   66 | byte string          | uint32, big endian, Typed  |\n|      |                      | Array                      |\n+------+----------------------+----------------------------+\n|   67 | byte string          | uint64, big endian, Typed  |\n|      |                      | Array                      |\n+------+----------------------+----------------------------+\n|   68 | byte string          | uint8 Typed Array, clamped |\n|      |                      | arithmetic                 |\n+------+----------------------+----------------------------+\n|   69 | byte string          | uint16, little endian,     |\n|      |                      | Typed Array                |\n+------+----------------------+----------------------------+\n|   70 | byte string          | uint32, little endian,     |\n|      |                      | Typed Array                |\n+------+----------------------+----------------------------+\n|   71 | byte string          | uint64, little endian,     |\n|      |                      | Typed Array                |\n+------+----------------------+----------------------------+\n|   72 | byte string          | sint8 Typed Array          |\n+------+----------------------+----------------------------+\n|   73 | byte string          | sint16, big endian, Typed  |\n|      |                      | Array                      |\n+------+----------------------+----------------------------+\n|   74 | byte string          | sint32, big endian, Typed  |\n|      |                      | Array                      |\n+------+----------------------+----------------------------+\n|   75 | byte string          | sint64, big endian, Typed  |\n|      |                      | Array                      |\n+------+----------------------+----------------------------+\n|   76 | byte string          | (reserved)                 |\n+------+----------------------+----------------------------+\n|   77 | byte string          | sint16, little endian,     |\n|      |                      | Typed Array                |\n+------+----------------------+----------------------------+\n|   78 | byte string          | sint32, little endian,     |\n|      |                      | Typed Array                |\n+------+----------------------+----------------------------+\n|   79 | byte string          | sint64, little endian,     |\n|      |                      | Typed Array                |\n+------+----------------------+----------------------------+\n|   80 | byte string          | IEEE 754 binary16, big     |\n|      |                      | endian, Typed Array        |\n+------+----------------------+----------------------------+\n|   81 | byte string          | IEEE 754 binary32, big     |\n|      |                      | endian, Typed Array        |\n+------+----------------------+----------------------------+\n|   82 | byte string          | IEEE 754 binary64, big     |\n|      |                      | endian, Typed Array        |\n+------+----------------------+----------------------------+\n|   83 | byte string          | IEEE 754 binary128, big    |\n|      |                      | endian, Typed Array        |\n+------+----------------------+----------------------------+\n|   84 | byte string          | IEEE 754 binary16, little  |\n|      |                      | endian, Typed Array        |\n+------+----------------------+----------------------------+\n|   85 | byte string          | IEEE 754 binary32, little  |\n|      |                      | endian, Typed Array        |\n+------+----------------------+----------------------------+\n|   86 | byte string          | IEEE 754 binary64, little  |\n|      |                      | endian, Typed Array        |\n+------+----------------------+----------------------------+\n|   87 | byte string          | IEEE 754 binary128, little |\n|      |                      | endian, Typed Array        |\n+------+----------------------+----------------------------+\n| 1040 | array of two arrays* | Multi-dimensional Array,   |\n|      |                      | column-major order         |\n+------+----------------------+----------------------------+",
      "raw": true
    },
    {
      "indent": 25,
      "text": "Table 3: Values for Tags",
      "ja": "表3：タグの値"
    },
    {
      "indent": 3,
      "text": "*40 or 1040 data item: The second element of the outer array in the data item is a native CBOR array (major type 4) or Typed Array (one of tag 64..87)",
      "ja": "* 40または1040データ項目：データ項目の外部配列の2番目の要素は、ネイティブCBOR配列（メジャータイプ4）または型付き配列（タグ64..87の1つ）です。"
    },
    {
      "indent": 0,
      "text": "7. Security Considerations",
      "section_title": true,
      "ja": "7. セキュリティに関する考慮事項"
    },
    {
      "indent": 3,
      "text": "The security considerations of [RFC7049] apply; special attention is drawn to the second paragraph of Section 8 of [RFC7049].",
      "ja": "[RFC7049]のセキュリティに関する考慮事項が適用されます。 [RFC7049]のセクション8の2番目の段落に特別な注意が向けられています。"
    },
    {
      "indent": 3,
      "text": "The tag for homogeneous arrays makes a promise about its tagged data item, which a maliciously constructed CBOR input can then choose to ignore. As always, the decoder therefore has to ensure that it is not driven into an undefined state by array elements that do not fulfill the promise, and that it does continue to fulfill its API contract in this case as well.",
      "ja": "同種配列のタグは、そのタグ付きデータ項目について約束します。悪意を持って構築されたCBOR入力は、無視することを選択できます。 したがって、いつものように、デコーダーは、promiseを満たさない配列要素によって未定義の状態に駆動されないようにし、この場合もAPIコントラクトを引き続き満たしていることを確認する必要があります。"
    },
    {
      "indent": 3,
      "text": "As with all formats that are used for data interchange, an attacker may have control over the shape of the data delivered as input to the application, which therefore needs to validate that shape before it makes it the basis of its further processing. One unique aspect that typed arrays add to this is that an attacker might substitute a Uint8ClampedArray for where the application expects a Uint8Array, or vice versa, potentially leading to very different (and unexpected) processing semantics of the in-memory data structures constructed. Applications that could be affected by this will therefore need to be careful about making this distinction in their input validation.",
      "ja": "データ交換に使用されるすべての形式と同様に、攻撃者はアプリケーションへの入力として配信されるデータの形状を制御できるため、その後の処理の基礎となる前にその形状を検証する必要があります。 型付き配列がこれに追加する1つのユニークな側面は、攻撃者が、アプリケーションがUint8Arrayを期待する場所をUint8ClampedArrayに置き換える可能性があること、またはその逆で、構築されたメモリ内データ構造の非常に異なる（そして予期しない）処理セマンティクスにつながる可能性があることです。 したがって、これによって影響を受ける可能性のあるアプリケーションは、入力検証でこの区別を行うことに注意する必要があります。"
    },
    {
      "indent": 0,
      "text": "8. References",
      "section_title": true,
      "ja": "8. 参考文献"
    },
    {
      "indent": 0,
      "text": "8.1. Normative References",
      "section_title": true,
      "ja": "8.1. 引用文献"
    },
    {
      "indent": 3,
      "text": "[C] International Organization for Standardization, \"Information technology - Programming languages - C\", ISO/ IEC 9899:2018, Fourth Edition, June 2018.",
      "ja": "[C]国際標準化機構、「情報技術-プログラミング言語-C」、ISO / IEC 9899：2018、第4版、2018年6月。"
    },
    {
      "indent": 3,
      "text": "[CPlusPlus] International Organization for Standardization, \"Programming languages - C++\", ISO/IEC 14882:2017, Fifth Edition, December 2017.",
      "ja": "[CPlusPlus]国際標準化機構、「プログラミング言語-C ++」、ISO / IEC 14882：2017、第5版、2017年12月。"
    },
    {
      "indent": 3,
      "text": "[ECMA-ES10] ECMA International, \"ECMAScript 2019 Language Specification\", Standard ECMA-262 10th Edition, June 2019, <https://www.ecma-international.org/ecma-262/10.0/ index.html>.",
      "ja": "[ECMA-ES10] ECMA International、「ECMAScript 2019 Language Specification」、Standard ECMA-262 10th Edition、2019年6月、<https://www.ecma-international.org/ecma-262/10.0/ index.html>。"
    },
    {
      "indent": 3,
      "text": "[IEEE754] IEEE, \"IEEE Standard for Floating-Point Arithmetic\", IEEE 754-2019, DOI 10.1109/IEEESTD.2019.8766229, <https://ieeexplore.ieee.org/document/8766229>.",
      "ja": "[IEEE754] IEEE、「IEEE Standard for Floating-Point Arithmetic」、IEEE 754-2019、DOI 10.1109 / IEEESTD.2019.8766229、<https://ieeexplore.ieee.org/document/8766229>。"
    },
    {
      "indent": 3,
      "text": "[RFC2119] Bradner, S., \"Key words for use in RFCs to Indicate Requirement Levels\", BCP 14, RFC 2119, DOI 10.17487/RFC2119, March 1997, <https://www.rfc-editor.org/info/rfc2119>.",
      "ja": "[RFC2119] Bradner、S。、「要件レベルを示すためにRFCで使用するキーワード」、BCP 14、RFC 2119、DOI 10.17487 / RFC2119、1997年3月、<https://www.rfc-editor.org/info/ rfc2119>。"
    },
    {
      "indent": 3,
      "text": "[RFC7049] Bormann, C. and P. Hoffman, \"Concise Binary Object Representation (CBOR)\", RFC 7049, DOI 10.17487/RFC7049, October 2013, <https://www.rfc-editor.org/info/rfc7049>.",
      "ja": "[RFC7049] Bormann、C。およびP. Hoffman、「簡潔なバイナリオブジェクト表現（CBOR）」、RFC 7049、DOI 10.17487 / RFC7049、2013年10月、<https://www.rfc-editor.org/info/rfc7049> 。"
    },
    {
      "indent": 3,
      "text": "[RFC8174] Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174, May 2017, <https://www.rfc-editor.org/info/rfc8174>.",
      "ja": "[RFC8174] Leiba、B。、「RFC 2119キーワードの大文字と小文字のあいまいさ」、BCP 14、RFC 8174、DOI 10.17487 / RFC8174、2017年5月、<https://www.rfc-editor.org/info/ rfc8174>。"
    },
    {
      "indent": 3,
      "text": "[RFC8610] Birkholz, H., Vigano, C., and C. Bormann, \"Concise Data Definition Language (CDDL): A Notational Convention to Express Concise Binary Object Representation (CBOR) and JSON Data Structures\", RFC 8610, DOI 10.17487/RFC8610, June 2019, <https://www.rfc-editor.org/info/rfc8610>.",
      "ja": "[RFC8610] Birkholz、H.、Vigano、C。、およびC. Bormann、「簡潔なデータ定義言語（CDDL）：簡潔なバイナリオブジェクト表現（CBOR）およびJSONデータ構造を表現するための表記法」、RFC 8610、DOI 10.17487 / RFC8610、2019年6月、<https://www.rfc-editor.org/info/rfc8610>。"
    },
    {
      "indent": 0,
      "text": "8.2. Informative References",
      "section_title": true,
      "ja": "8.2. 参考引用"
    },
    {
      "indent": 3,
      "text": "[ArrayBuffer] Mozilla Developer Network, \"JavaScript typed arrays\", June 2010, <https://developer.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays>.",
      "ja": "[ArrayBuffer] Mozilla Developer Network、「JavaScript typed array」、2010年6月、<https://developer.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays>。"
    },
    {
      "indent": 3,
      "text": "[RowColMajor] Wikipedia, \"Row- and column-major order\", September 2019, <https://en.wikipedia.org/w/index.php?title=Row-_and_column-major_order&oldid=917905325>.",
      "ja": "[RowColMajor] Wikipedia、「Row-and column-major order」、2019年9月、<https://en.wikipedia.org/w/index.php?title=Row-_and_column-major_order&oldid=917905325>。"
    },
    {
      "indent": 3,
      "text": "[TypedArray] Vukicevic, V. and K. Russell, \"Typed Array Specification\", February 2011, <https://web.archive.org/web/20110207024413/ http://www.khronos.org/registry/typedarray/specs/latest/>.",
      "ja": "[TypedArray] Vukicevic、V。およびK. Russell、「Typed Array Specification」、2011年2月、<https://web.archive.org/web/20110207024413/ http://www.khronos.org/registry/typedarray/ specs / latest />。"
    },
    {
      "indent": 0,
      "text": "Acknowledgements",
      "ja": "謝辞"
    },
    {
      "indent": 3,
      "text": "Jim Schaad provided helpful comments and reminded us that column-major order still is in use. Jeffrey Yaskin helped improve the definition of homogeneous arrays. IANA helped correct an error in a previous draft version. Francesca Palombini acted as Shepherd, and Alexey Melnikov as responsible Area Director. Elwyn Davies as Gen-ART reviewer and IESG members Martin Vigoureux, Adam Roach, Roman Danyliw, and Benjamin Kaduk helped in finding further improvements to the text; thanks also to the other reviewers.",
      "ja": "ジム・シャードは有益なコメントを提供し、列優先の順序がまだ使用されていることを思い出させました。 Jeffrey Yaskinは、同種配列の定義の改善に貢献しました。 IANAは、以前のドラフトバージョンのエラーを修正するのに役立ちました。 フランチェスカパロンビーニが羊飼い、アレクセイメルニコフが担当エリアディレクターを務めました。 ElWyn DaviesがGen-ARTレビューアとして、またIESGメンバーとして、Martin Vigoureux、Adam Roach、Roman Danyliw、Benjamin Kadukが、テキストのさらなる改善を見つけるのを助けました。 他のレビュアーにも感謝します。"
    },
    {
      "indent": 0,
      "text": "Contributors",
      "ja": "貢献者"
    },
    {
      "indent": 3,
      "text": "The initial draft version of this specification was written by Johnathan Roatch <roatch@gmail.com>. Many thanks for getting this ball rolling.",
      "ja": "この仕様の最初のドラフトバージョンは、Jonathan Roatch <roatch@gmail.com>によって作成されました。 このボールを転がしてくれてありがとう。"
    },
    {
      "indent": 3,
      "text": "Glenn Engel suggested the tags for multi-dimensional arrays and homogeneous arrays.",
      "ja": "Glenn Engelは、多次元配列と同種配列のタグを提案しました。"
    },
    {
      "indent": 0,
      "text": "Author's Address",
      "ja": "著者のアドレス"
    },
    {
      "indent": 3,
      "text": "Carsten Bormann (editor) Universität Bremen TZI Postfach 330440 D-28359 Bremen Germany",
      "ja": "Carsten Bormann（編集者）ブレーメン大学TZI Postfach 330440 D-28359ブレーメンドイツ"
    },
    {
      "indent": 3,
      "text": "Phone: +49-421-218-63921\nEmail: cabo@tzi.org",
      "raw": true
    }
  ]
}