{
  "title": {
    "text": "RFC 8702 - Use of the SHAKE One-way Hash Functions in the Cryptographic Message Syntax (CMS)",
    "ja": "RFC 8702 - 暗号化メッセージ構文（CMS）でのSHAKE一方向ハッシュ関数の使用"
  },
  "number": 8702,
  "created_at": "2020-08-17 18:27:18.112312+09:00",
  "updated_by": "",
  "contents": [
    {
      "indent": 0,
      "text": "Internet Engineering Task Force (IETF)                     P. Kampanakis\nRequest for Comments: 8702                                 Cisco Systems\nUpdates: 3370                                                    Q. Dang\nCategory: Standards Track                                           NIST\nISSN: 2070-1721                                             January 2020",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 2,
      "text": "Use of the SHAKE One-Way Hash Functions in the Cryptographic Message Syntax (CMS)",
      "ja": "暗号化メッセージ構文（CMS）でのSHAKE一方向ハッシュ関数の使用"
    },
    {
      "indent": 0,
      "text": "Abstract",
      "ja": "概要"
    },
    {
      "indent": 3,
      "text": "This document updates the \"Cryptographic Message Syntax (CMS) Algorithms\" (RFC 3370) and describes the conventions for using the SHAKE family of hash functions in the Cryptographic Message Syntax as one-way hash functions with the RSA Probabilistic Signature Scheme (RSASSA-PSS) and Elliptic Curve Digital Signature Algorithm (ECDSA). The conventions for the associated signer public keys in CMS are also described.",
      "ja": "このドキュメントでは、「暗号化メッセージ構文（CMS）アルゴリズム」（RFC 3370）を更新し、RSA確率的署名方式（RSASSA-PSS）で一方向ハッシュ関数として暗号化メッセージ構文でハッシュ関数のSHAKEファミリを使用するための規則について説明します。 ）および楕円曲線デジタル署名アルゴリズム（ECDSA）。 CMSでの関連する署名者公開鍵の規則についても説明します。"
    },
    {
      "indent": 0,
      "text": "Status of This Memo",
      "ja": "本文書の状態"
    },
    {
      "indent": 3,
      "text": "This is an Internet Standards Track document.",
      "ja": "これはInternet Standards Trackドキュメントです。"
    },
    {
      "indent": 3,
      "text": "This document is a product of the Internet Engineering Task Force (IETF). It represents the consensus of the IETF community. It has received public review and has been approved for publication by the Internet Engineering Steering Group (IESG). Further information on Internet Standards is available in Section 2 of RFC 7841.",
      "ja": "このドキュメントは、IETF（Internet Engineering Task Force）の製品です。これは、IETFコミュニティのコンセンサスを表しています。公開レビューを受け、インターネットエンジニアリングステアリンググループ（IESG）による公開が承認されました。インターネット標準の詳細については、RFC 7841のセクション2をご覧ください。"
    },
    {
      "indent": 3,
      "text": "Information about the current status of this document, any errata, and how to provide feedback on it may be obtained at https://www.rfc-editor.org/info/rfc8702.",
      "ja": "このドキュメントの現在のステータス、エラータ、およびフィードバックの提供方法に関する情報は、https：//www.rfc-editor.org/info/rfc8702で入手できます。"
    },
    {
      "indent": 0,
      "text": "Copyright Notice",
      "ja": "著作権表示"
    },
    {
      "indent": 3,
      "text": "Copyright (c) 2020 IETF Trust and the persons identified as the document authors. All rights reserved.",
      "ja": "著作権（c）2020 IETFトラストおよびドキュメントの作成者として識別された人物。全著作権所有。"
    },
    {
      "indent": 3,
      "text": "This document is subject to BCP 78 and the IETF Trust's Legal Provisions Relating to IETF Documents (https://trustee.ietf.org/license-info) in effect on the date of publication of this document. Please review these documents carefully, as they describe your rights and restrictions with respect to this document. Code Components extracted from this document must include Simplified BSD License text as described in Section 4.e of the Trust Legal Provisions and are provided without warranty as described in the Simplified BSD License.",
      "ja": "この文書は、BCP 78およびIETF文書に関するIETFトラストの法的規定（https://trustee.ietf.org/license-info）の対象であり、この文書の発行日に有効です。これらのドキュメントは、このドキュメントに関するあなたの権利と制限を説明しているため、注意深く確認してください。このドキュメントから抽出されたコードコンポーネントには、Trust Legal Provisionsのセクション4.eに記載されているSimplified BSD Licenseテキストが含まれている必要があり、Simplified BSD Licenseに記載されているように保証なしで提供されます。"
    },
    {
      "indent": 0,
      "text": "Table of Contents",
      "ja": "目次"
    },
    {
      "indent": 3,
      "text": "1.  Introduction\n  1.1.  Terminology\n2.  Identifiers\n3.  Use in CMS\n  3.1.  Message Digests\n  3.2.  Signatures\n    3.2.1.  RSASSA-PSS Signatures\n    3.2.2.  ECDSA Signatures\n  3.3.  Public Keys\n  3.4.  Message Authentication Codes\n4.  IANA Considerations\n5.  Security Considerations\n6.  References\n  6.1.  Normative References\n  6.2.  Informative References\nAppendix A.  ASN.1 Module\nAcknowledgements\nAuthors' Addresses",
      "raw": true,
      "toc": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "1. Introduction",
      "section_title": true,
      "ja": "1. はじめに"
    },
    {
      "indent": 3,
      "text": "\"Cryptographic Message Syntax (CMS)\" [RFC5652] describes syntax used to digitally sign, digest, authenticate, or encrypt arbitrary message contents. \"Cryptographic Message Syntax (CMS) Algorithms\" [RFC3370] defines the use of common cryptographic algorithms with CMS. This specification updates RFC 3370 and describes the use of the SHAKE128 and SHAKE256 specified in [SHA3] as new hash functions in CMS. In addition, it describes the use of these functions with the RSA Probabilistic Signature Scheme (RSASSA-PSS) signature algorithm [RFC8017] and the Elliptic Curve Digital Signature Algorithm (ECDSA) [X9.62] with the CMS signed-data content type.",
      "ja": "「暗号メッセージ構文（CMS）」[RFC5652]は、任意のメッセージコンテンツのデジタル署名、ダイジェスト、認証、または暗号化に使用される構文について説明しています。 「Cryptographic Message Syntax（CMS）Algorithms」[RFC3370]は、CMSでの一般的な暗号化アルゴリズムの使用を定義しています。この仕様はRFC 3370を更新し、[SHA3]で指定されたSHAKE128およびSHAKE256をCMSの新しいハッシュ関数として使用することについて説明しています。さらに、RSA確率的署名方式（RSASSA-PSS）署名アルゴリズム[RFC8017]と楕円曲線デジタル署名アルゴリズム（ECDSA）[X9.62]でこれらの関数をCMS署名データコンテンツタイプとともに使用する方法についても説明します。"
    },
    {
      "indent": 3,
      "text": "In the SHA-3 family, two extendable-output functions (SHAKEs), SHAKE128 and SHAKE256, are defined. Four other hash function instances (SHA3-224, SHA3-256, SHA3-384, and SHA3-512) are also defined but are out of scope for this document. A SHAKE is a variable-length hash function defined as SHAKE(M, d) where the output is a d-bit-long digest of message M. The corresponding collision and second-preimage-resistance strengths for SHAKE128 are min(d/2,128) and min(d,128) bits, respectively (see Appendix A.1 of [SHA3]). And the corresponding collision and second-preimage-resistance strengths for SHAKE256 are min(d/2,256) and min(d,256) bits, respectively. In this specification, we use d=256 (for SHAKE128) and d=512 (for SHAKE256).",
      "ja": "SHA-3ファミリーでは、SHAKE128とSHAKE256の2つの拡張可能出力関数（SHAKE）が定義されています。他の4つのハッシュ関数インスタンス（SHA3-224、SHA3-256、SHA3-384、およびSHA3-512）も定義されていますが、このドキュメントの範囲外です。 SHAKEは、出力がメッセージMのdビット長のダイジェストであるSHAKE（M、d）として定義された可変長のハッシュ関数です。SHAKE128の対応する衝突と2番目のプリイメージ耐性の強度はmin（d / 2,128です。 ）およびmin（d、128）ビット（それぞれ[SHA3]の付録A.1を参照）。また、SHAKE256の対応する衝突強度と2番目のプリイメージ耐性の強度は、それぞれmin（d / 2,256）ビットとmin（d、256）ビットです。この仕様では、d = 256（SHAKE128の場合）およびd = 512（SHAKE256の場合）を使用します。"
    },
    {
      "indent": 3,
      "text": "A SHAKE can be used in CMS as the message digest function (to hash the message to be signed) in RSASSA-PSS and ECDSA, as the message authentication code, and as the mask generation function (MGF) in RSASSA-PSS. This specification describes the identifiers for SHAKEs to be used in CMS and their meanings.",
      "ja": "CMSでは、RSASSA-PSSおよびECDSAの（署名するメッセージをハッシュする）メッセージダイジェスト機能として、メッセージ認証コードとして、およびRSASSA-PSSのマスク生成機能（MGF）として、SHAKEを使用できます。この仕様では、CMSで使用されるSHAKEの識別子とその意味について説明します。"
    },
    {
      "indent": 0,
      "text": "1.1. Terminology",
      "section_title": true,
      "ja": "1.1. 用語"
    },
    {
      "indent": 3,
      "text": "The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as described in BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all capitals, as shown here.",
      "ja": "キーワード「MUST」、「MUST NOT」、「REQUIRED」、「SHALL」、「SHALL NOT」、「SHOULD」、「SHOULD NOT」、「RECOMMENDED」、「NOT RECOMMENDED」、「MAY」、「OPTIONALこのドキュメントの「」は、BCP 14 [RFC2119] [RFC8174]で説明されているように解釈されます。"
    },
    {
      "indent": 0,
      "text": "2. Identifiers",
      "section_title": true,
      "ja": "2. 識別子"
    },
    {
      "indent": 3,
      "text": "This section identifies eight new object identifiers (OIDs) for using SHAKE128 and SHAKE256 in CMS.",
      "ja": "このセクションでは、CMSでSHAKE128およびSHAKE256を使用するための8つの新しいオブジェクト識別子（OID）を示します。"
    },
    {
      "indent": 3,
      "text": "Two object identifiers for SHAKE128 and SHAKE256 hash functions are defined in [shake-nist-oids], and we include them here for convenience.",
      "ja": "SHAKE128およびSHAKE256ハッシュ関数の2つのオブジェクト識別子は[shake-nist-oids]で定義されており、便宜上ここに含めています。"
    },
    {
      "indent": 5,
      "text": "id-shake128 OBJECT IDENTIFIER ::= { joint-iso-itu-t(2)\n     country(16) us(840) organization(1) gov(101) csor(3)\n     nistAlgorithm(4) 2 11 }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 5,
      "text": "id-shake256 OBJECT IDENTIFIER ::= { joint-iso-itu-t(2)\n     country(16) us(840) organization(1) gov(101) csor(3)\n     nistAlgorithm(4) 2 12 }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "In this specification, when using the id-shake128 or id-shake256 algorithm identifiers, the parameters MUST be absent. That is, the identifier SHALL be a SEQUENCE of one component, the OID.",
      "ja": "この仕様では、id-shake128またはid-shake256アルゴリズム識別子を使用する場合、パラメーターが存在しない必要があります。つまり、識別子は1つのコンポーネント、OIDのシーケンスである必要があります。"
    },
    {
      "indent": 3,
      "text": "[RFC8692] defines two identifiers for RSASSA-PSS signatures using SHAKEs, which we include here for convenience.",
      "ja": "[RFC8692]は、SHAKEを使用してRSASSA-PSS署名の2つの識別子を定義しています。"
    },
    {
      "indent": 5,
      "text": "id-RSASSA-PSS-SHAKE128  OBJECT IDENTIFIER  ::=  { iso(1)\n          identified-organization(3) dod(6) internet(1)\n          security(5) mechanisms(5) pkix(7) algorithms(6) 30 }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 5,
      "text": "id-RSASSA-PSS-SHAKE256  OBJECT IDENTIFIER  ::=  { iso(1)\n          identified-organization(3) dod(6) internet(1)\n          security(5) mechanisms(5) pkix(7) algorithms(6) 31 }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "The same RSASSA-PSS algorithm identifiers can be used for identifying public keys and signatures.",
      "ja": "同じRSASSA-PSSアルゴリズム識別子を使用して、公開鍵と署名を識別できます。"
    },
    {
      "indent": 3,
      "text": "[RFC8692] also defines two algorithm identifiers of ECDSA signatures using SHAKEs, which we include here for convenience.",
      "ja": "[RFC8692]は、SHAKEを使用してECDSA署名の2つのアルゴリズム識別子も定義します。便宜上、ここに含めます。"
    },
    {
      "indent": 5,
      "text": "id-ecdsa-with-shake128 OBJECT IDENTIFIER  ::=  { iso(1)\n          identified-organization(3) dod(6) internet(1)\n          security(5) mechanisms(5) pkix(7) algorithms(6) 32 }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 5,
      "text": "id-ecdsa-with-shake256 OBJECT IDENTIFIER  ::=  { iso(1)\n          identified-organization(3) dod(6) internet(1)\n          security(5) mechanisms(5) pkix(7) algorithms(6) 33 }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "The parameters for the four RSASSA-PSS and ECDSA identifiers MUST be absent. That is, each identifier SHALL be a SEQUENCE of one component, the OID.",
      "ja": "4つのRSASSA-PSSおよびECDSA識別子のパラメーターは、存在しない必要があります。つまり、各識別子は1つのコンポーネント、OIDのシーケンスである必要があります。"
    },
    {
      "indent": 3,
      "text": "In [shake-nist-oids], the National Institute of Standards and Technology (NIST) defines two object identifiers for Keccak message authentication codes (KMACs) using SHAKE128 and SHAKE256, and we include them here for convenience.",
      "ja": "[shake-nist-oids]では、国立標準技術研究所（NIST）が、SHAKE128とSHAKE256を使用してKeccakメッセージ認証コード（KMAC）の2つのオブジェクト識別子を定義しています。ここでは、便宜上それらを含めています。"
    },
    {
      "indent": 6,
      "text": "id-KmacWithSHAKE128 OBJECT IDENTIFIER ::= { joint-iso-itu-t(2)\n    country(16) us(840) organization(1) gov(101) csor(3)\n    nistAlgorithm(4) 2 19 }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 6,
      "text": "id-KmacWithSHAKE256 OBJECT IDENTIFIER ::= { joint-iso-itu-t(2)\n    country(16) us(840) organization(1) gov(101) csor(3)\n    nistAlgorithm(4) 2 20 }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "The parameters for id-KmacWithSHAKE128 and id-KmacWithSHAKE256 are OPTIONAL.",
      "ja": "id-KmacWithSHAKE128およびid-KmacWithSHAKE256のパラメーターはオプションです。"
    },
    {
      "indent": 3,
      "text": "Sections 3.1, 3.2.1, 3.2.2, and 3.4 specify the required output length for each use of SHAKE128 or SHAKE256 in message digests, RSASSA-PSS, ECDSA, and KMAC.",
      "ja": "セクション3.1、3.2.1、3.2.2、および3.4​​では、メッセージダイジェスト、RSASSA-PSS、ECDSA、およびKMACでSHAKE128またはSHAKE256を使用するたびに必要な出力長を指定します。"
    },
    {
      "indent": 0,
      "text": "3. Use in CMS",
      "section_title": true,
      "ja": "3. CMSでの使用"
    },
    {
      "indent": 0,
      "text": "3.1. Message Digests",
      "section_title": true,
      "ja": "3.1. メッセージダイジェスト"
    },
    {
      "indent": 3,
      "text": "The id-shake128 and id-shake256 OIDs (see Section 2) can be used as the digest algorithm identifiers located in the SignedData, SignerInfo, DigestedData, and the AuthenticatedData digestAlgorithm fields in CMS [RFC5652]. The OID encoding MUST omit the parameters field and the output length of SHAKE128 or SHAKE256 as the message digest MUST be 32 or 64 bytes, respectively.",
      "ja": "id-shake128およびid-shake256 OID（セクション2を参照）は、CMS [RFC5652]のSignedData、SignerInfo、DigestedData、およびAuthenticatedData digestAlgorithmフィールドにあるダイジェストアルゴリズム識別子として使用できます。メッセージダイジェストはそれぞれ32バイトまたは64バイトでなければならないので、OIDエンコーディングでは、パラメーターフィールドとSHAKE128またはSHAKE256の出力長を省略しなければなりません。"
    },
    {
      "indent": 3,
      "text": "The digest values are located in the DigestedData field and the Message Digest authenticated attribute included in the signedAttributes of the SignedData signerInfos. In addition, digest values are input to signature algorithms. The digest algorithm MUST be the same as the message hash algorithms used in signatures.",
      "ja": "ダイジェスト値は、DigestedDataフィールドと、SignedData signerInfosのsignedAttributesに含まれるメッセージダイジェスト認証属性にあります。さらに、ダイジェスト値は署名アルゴリズムに入力されます。ダイジェストアルゴリズムは、署名で使用されるメッセージハッシュアルゴリズムと同じである必要があります。"
    },
    {
      "indent": 0,
      "text": "3.2. Signatures",
      "section_title": true,
      "ja": "3.2. 署名"
    },
    {
      "indent": 3,
      "text": "In CMS, signature algorithm identifiers are located in the SignerInfo signatureAlgorithm field of signed-data content type and countersignature attribute. Signature values are located in the SignerInfo signature field of signed-data content type and countersignature attribute.",
      "ja": "CMSでは、署名アルゴリズム識別子は、signed-dataコンテンツタイプと副署名属性のSignerInfo signatureAlgorithmフィールドにあります。署名値は、signed-dataコンテンツタイプと副署名属性のSignerInfo署名フィールドにあります。"
    },
    {
      "indent": 3,
      "text": "Conforming implementations that process RSASSA-PSS and ECDSA with SHAKE signatures when processing CMS data MUST recognize the corresponding OIDs specified in Section 2.",
      "ja": "CMSデータを処理するときにRSASSA-PSSとECDSAをSHAKE署名で処理する準拠実装は、セクション2で指定された対応するOIDを認識しなければなりません（MUST）。"
    },
    {
      "indent": 3,
      "text": "When using RSASSA-PSS or ECDSA with SHAKEs, the RSA modulus or ECDSA curve order SHOULD be chosen in line with the SHAKE output length. Refer to Section 5 for more details.",
      "ja": "RSASSA-PSSまたはECDSAをSHAKEで使用する場合、RSAモジュラスまたはECDSA曲線の次数は、SHAKE出力長に合わせて選択する必要があります。詳細については、セクション5を参照してください。"
    },
    {
      "indent": 0,
      "text": "3.2.1. RSASSA-PSS Signatures",
      "section_title": true,
      "ja": "3.2.1. RSASSA-PSS署名"
    },
    {
      "indent": 3,
      "text": "The RSASSA-PSS algorithm is defined in [RFC8017]. When id-RSASSA-PSS-SHAKE128 or id-RSASSA-PSS-SHAKE256 (specified in Section 2) is used, the encoding MUST omit the parameters field. That is, the AlgorithmIdentifier SHALL be a SEQUENCE of one component: id-RSASSA-PSS-SHAKE128 or id-RSASSA-PSS-SHAKE256. [RFC4055] defines RSASSA-PSS-params that are used to define the algorithms and inputs to the algorithm. This specification does not use parameters because the hash, mask generation algorithm, trailer, and salt are embedded in the OID definition.",
      "ja": "RSASSA-PSSアルゴリズムは[RFC8017]で定義されています。 id-RSASSA-PSS-SHAKE128またはid-RSASSA-PSS-SHAKE256（セクション2で指定）を使用する場合、エンコーディングはパラメーターフィールドを省略しなければなりません（MUST）。つまり、AlgorithmIdentifierは1つのコンポーネントのシーケンスである必要があります（SHALL128、id-RSASSA-PSS-SHAKE128またはid-RSASSA-PSS-SHAKE256）。 [RFC4055]は、アルゴリズムとアルゴリズムへの入力を定義するために使用されるRSASSA-PSS-paramsを定義します。ハッシュ、マスク生成アルゴリズム、トレーラー、ソルトがOID定義に埋め込まれているため、この仕様ではパラメーターを使用しません。"
    },
    {
      "indent": 3,
      "text": "The hash algorithm used to hash a message being signed and the hash algorithm as the mask generation function used in RSASSA-PSS MUST be the same: both SHAKE128 or both SHAKE256. The output length of the hash algorithm that hashes the message SHALL be 32 (for SHAKE128) or 64 bytes (for SHAKE256).",
      "ja": "署名されるメッセージをハッシュするために使用されるハッシュアルゴリズムと、RSASSA-PSSで使用されるマスク生成関数としてのハッシュアルゴリズムは同じである必要があります。両方がSHAKE128または両方がSHAKE256です。メッセージをハッシュするハッシュアルゴリズムの出力長は、32（SHAKE128の場合）または64バイト（SHAKE256の場合）である必要があります。"
    },
    {
      "indent": 3,
      "text": "The mask generation function takes an octet string of variable length and a desired output length as input, and outputs an octet string of the desired length. In RSASSA-PSS with SHAKEs, the SHAKEs MUST be used natively as the MGF, instead of the MGF1 algorithm that uses the hash function in multiple iterations, as specified in Appendix B.2.1 of [RFC8017]. In other words, the MGF is defined as the SHAKE128 or SHAKE256 with input being the mgfSeed for id-RSASSA-PSS-SHAKE128 and id-RSASSA-PSS-SHAKE256, respectively. The mgfSeed is an octet string used as the seed to generate the mask [RFC8017]. As explained in Step 9 of Section 9.1.1 of [RFC8017], the output length of the MGF is emLen - hLen - 1 bytes. emLen is the maximum message length ceil((n-1)/8), where n is the RSA modulus in bits. hLen is 32 and 64 bytes for id-RSASSA-PSS-SHAKE128 and id-RSASSA-PSS-SHAKE256, respectively. Thus, when SHAKE is used as the MGF, the SHAKE output length maskLen is (8*emLen - 264) or (8*emLen - 520) bits, respectively. For example, when RSA modulus n is 2048, the output length of SHAKE128 or SHAKE256 as the MGF will be 1784 or 1528 bits when id-RSASSA-PSS-SHAKE128 or id-RSASSA-PSS-SHAKE256 is used, respectively.",
      "ja": "マスク生成関数は、可変長のオクテット文字列と希望の出力長を入力として受け取り、希望の長さのオクテット文字列を出力します。 [RFC8017]の付録B.2.1で指定されているように、複数の反復でハッシュ関数を使用するMGF1アルゴリズムではなく、SHAKEを使用するRSASSA-PSSでは、SHAKEをMGFとしてネイティブに使用する必要があります。つまり、MGFはSHAKE128またはSHAKE256として定義され、入力はそれぞれid-RSASSA-PSS-SHAKE128およびid-RSASSA-PSS-SHAKE256のmgfSeedです。 mgfSeedは、マスク[RFC8017]を生成するためのシードとして使用されるオクテット文字列です。 [RFC8017]のセクション9.1.1のステップ9で説明したように、MGFの出力長はemLen-hLen-1バイトです。 emLenは最大メッセージ長ceil（（n-1）/ 8）です。ここで、nはビット単位のRSA係数です。 hLenは、id-RSASSA-PSS-SHAKE128およびid-RSASSA-PSS-SHAKE256でそれぞれ32バイトおよび64バイトです。したがって、SHAKEがMGFとして使用される場合、SHAKE出力長maskLenは、それぞれ（8 * emLen-264）または（8 * emLen-520）ビットです。たとえば、RSAモジュラスnが2048の場合、id-RSASSA-PSS-SHAKE128またはid-RSASSA-PSS-SHAKE256を使用すると、MGFとしてのSHAKE128またはSHAKE256の出力長はそれぞれ1784または1528ビットになります。"
    },
    {
      "indent": 3,
      "text": "The RSASSA-PSS saltLength MUST be 32 bytes for id-RSASSA-PSS-SHAKE128 or 64 bytes for id-RSASSA-PSS-SHAKE256. Finally, the trailerField MUST be 1, which represents the trailer field with hexadecimal value 0xBC [RFC8017].",
      "ja": "RSASSA-PSS saltLengthは、id-RSASSA-PSS-SHAKE128の場合は32バイト、id-RSASSA-PSS-SHAKE256の場合は64バイトでなければなりません。最後に、trailerFieldは1である必要があります。これは、16進値0xBC [RFC8017]を持つトレーラーフィールドを表します。"
    },
    {
      "indent": 0,
      "text": "3.2.2. ECDSA Signatures",
      "section_title": true,
      "ja": "3.2.2. ECDSA署名"
    },
    {
      "indent": 3,
      "text": "The Elliptic Curve Digital Signature Algorithm (ECDSA) is defined in [X9.62]. When the id-ecdsa-with-shake128 or id-ecdsa-with-shake256 (specified in Section 2) algorithm identifier appears, the respective SHAKE function is used as the hash. The encoding MUST omit the parameters field. That is, the AlgorithmIdentifier SHALL be a SEQUENCE of one component, the OID id-ecdsa-with-shake128 or id-ecdsa-with-shake256.",
      "ja": "楕円曲線デジタル署名アルゴリズム（ECDSA）は、[X9.62]で定義されています。 id-ecdsa-with-shake128またはid-ecdsa-with-shake256（セクション2で指定）アルゴリズム識別子が表示されると、それぞれのSHAKE関数がハッシュとして使用されます。エンコーディングでは、パラメータフィールドを省略しなければなりません。つまり、AlgorithmIdentifierは、1つのコンポーネント、OID id-ecdsa-with-shake128またはid-ecdsa-with-shake256のシーケンスである必要があります（SHALL）。"
    },
    {
      "indent": 3,
      "text": "For simplicity and compliance with the ECDSA standard specification [X9.62], the output length of the hash function must be explicitly determined. The output length for SHAKE128 or SHAKE256 used in ECDSA MUST be 32 or 64 bytes, respectively.",
      "ja": "単純化し、ECDSA標準仕様[X9.62]に準拠するには、ハッシュ関数の出力長を明示的に決定する必要があります。 ECDSAで使用されるSHAKE128またはSHAKE256の出力長は、それぞれ32バイトまたは64バイトでなければなりません。"
    },
    {
      "indent": 3,
      "text": "Conforming Certification Authority (CA) implementations that generate ECDSA with SHAKE signatures in certificates or Certificate Revocation Lists (CRLs) SHOULD generate such signatures with a deterministically generated, nonrandom k in accordance with all the requirements specified in [RFC6979]. They MAY also generate such signatures in accordance with all other recommendations in [X9.62] or [SEC1] if they have a stated policy that requires conformance to those standards. Those standards have not specified SHAKE128 and SHAKE256 as hash algorithm options. However, SHAKE128 and SHAKE256 with output length being 32 and 64 octets, respectively, can be used instead of 256 and 512-bit output hash algorithms, such as SHA256 and SHA512.",
      "ja": "証明書または証明書失効リスト（CRL）のSHAKE署名でECDSAを生成する適合認証局（CA）実装は、[RFC6979]で指定されたすべての要件に従って、決定論的に生成されたランダムでないkでそのような署名を生成する必要があります。それらがそれらの標準への適合を要求する表明されたポリシーを持っている場合、[X9.62]または[SEC1]の他のすべての推奨事項に従ってそのような署名を生成してもよい（MAY）。これらの標準では、ハッシュアルゴリズムオプションとしてSHAKE128およびSHAKE256を指定していません。ただし、出力長がそれぞれ32オクテットと64オクテットのSHAKE128とSHAKE256は、SHA256やSHA512などの256ビットおよび512ビットの出力ハッシュアルゴリズムの代わりに使用できます。"
    },
    {
      "indent": 0,
      "text": "3.3. Public Keys",
      "section_title": true,
      "ja": "3.3. 公開鍵"
    },
    {
      "indent": 3,
      "text": "In CMS, the signer's public key algorithm identifiers are located in the OriginatorPublicKey's algorithm attribute. The conventions and encoding for RSASSA-PSS and ECDSA public keys algorithm identifiers are as specified in Section 2.3 of [RFC3279], Section 3.1 of [RFC4055], and Section 2.1 of [RFC5480].",
      "ja": "CMSでは、署名者の公開鍵アルゴリズム識別子は、OriginatorPublicKeyのアルゴリズム属性にあります。 RSASSA-PSSおよびECDSA公開鍵アルゴリズム識別子の規則とエンコーディングは、[RFC3279]のセクション2.3、[RFC4055]のセクション3.1、および[RFC5480]のセクション2.1で指定されています。"
    },
    {
      "indent": 3,
      "text": "Traditionally, the rsaEncryption object identifier is used to identify RSA public keys. The rsaEncryption object identifier continues to identify the public key when the RSA private key owner does not wish to limit the use of the public key exclusively to RSASSA-PSS with SHAKEs. When the RSA private key owner wishes to limit the use of the public key exclusively to RSASSA-PSS, the AlgorithmIdentifier for RSASSA-PSS defined in Section 2 SHOULD be used as the algorithm attribute in the OriginatorPublicKey sequence. Conforming client implementations that process RSASSA-PSS with SHAKE public keys in CMS message MUST recognize the corresponding OIDs in Section 2.",
      "ja": "従来、rsaEncryptionオブジェクト識別子は、RSA公開鍵を識別するために使用されていました。 RSA秘密鍵の所有者が公開鍵の使用をSHAKEを使用するRSASSA-PSSに排他的に制限したくない場合、rsaEncryptionオブジェクト識別子は引き続き公開鍵を識別します。 RSA秘密鍵の所有者が公開鍵の使用を排他的にRSASSA-PSSに制限したい場合、セクション2で定義されたRSASSA-PSSのAlgorithmIdentifierをOriginatorPublicKeyシーケンスのアルゴリズム属性として使用する必要があります（SHOULD）。 CMSメッセージのSHAKE公開鍵でRSASSA-PSSを処理する適合クライアントの実装は、セクション2の対応するOIDを認識しなければなりません（MUST）。"
    },
    {
      "indent": 3,
      "text": "Conforming implementations MUST specify and process the algorithms explicitly by using the OIDs specified in Section 2 when encoding ECDSA with SHAKE public keys in CMS messages.",
      "ja": "適合実装は、CMSメッセージのSHAKE公開鍵でECDSAをエンコードするときに、セクション2で指定されたOIDを使用してアルゴリズムを明示的に指定および処理する必要があります。"
    },
    {
      "indent": 3,
      "text": "The identifier parameters, as explained in Section 2, MUST be absent.",
      "ja": "セクション2で説明されているように、識別子パラメータは存在しない必要があります。"
    },
    {
      "indent": 0,
      "text": "3.4. Message Authentication Codes",
      "section_title": true,
      "ja": "3.4. メッセージ認証コード"
    },
    {
      "indent": 3,
      "text": "Keccak message authentication code (KMAC) is specified in [SP800-185]. In CMS, KMAC algorithm identifiers are located in the AuthenticatedData macAlgorithm field. The KMAC values are located in the AuthenticatedData mac field.",
      "ja": "Keccakメッセージ認証コード（KMAC）は、[SP800-185]で指定されています。 CMSでは、KMACアルゴリズム識別子はAuthenticatedData macAlgorithmフィールドにあります。 KMAC値は、AuthenticatedData macフィールドにあります。"
    },
    {
      "indent": 3,
      "text": "When the id-KmacWithSHAKE128 or id-KmacWithSHAKE256 OID is used as the MAC algorithm identifier, the parameters field is optional (absent or present). If absent, the SHAKE256 output length used in KMAC is 32 or 64 bytes, respectively, and the customization string is an empty string by default.",
      "ja": "id-KmacWithSHAKE128またはid-KmacWithSHAKE256 OIDがMACアルゴリズム識別子として使用される場合、パラメーターフィールドはオプションです（存在しないか存在する）。存在しない場合、KMACで使用されるSHAKE256出力長はそれぞれ32バイトまたは64バイトであり、カスタマイズ文字列はデフォルトでは空の文字列です。"
    },
    {
      "indent": 3,
      "text": "Conforming implementations that process KMACs with the SHAKEs when processing CMS data MUST recognize these identifiers.",
      "ja": "CMSデータを処理するときにKMACをSHAKEで処理する適合実装は、これらの識別子を認識しなければなりません（MUST）。"
    },
    {
      "indent": 3,
      "text": "When calculating the KMAC output, the variable N is 0xD2B282C2, S is an empty string, and L (the integer representing the requested output length in bits) is 256 or 512 for KmacWithSHAKE128 or KmacWithSHAKE256, respectively, in this specification.",
      "ja": "KMAC出力を計算する場合、この仕様では、変数Nは0xD2B282C2、Sは空の文字列、L（要求された出力長をビット単位で表す整数）はそれぞれKmacWithSHAKE128またはKmacWithSHAKE256で256または512です。"
    },
    {
      "indent": 0,
      "text": "4. IANA Considerations",
      "section_title": true,
      "ja": "4. IANAに関する考慮事項"
    },
    {
      "indent": 3,
      "text": "One object identifier for the ASN.1 module in Appendix A was updated in the \"Structure of Management Information (SMI) Security for S/MIME Module Identifier (1.2.840.113549.1.9.16.0)\" registry:",
      "ja": "付録AのASN.1モジュールの1つのオブジェクト識別子が、「S / MIMEモジュール識別子の管理情報（SMI）セキュリティの構造（1.2.840.113549.1.9.16.0）」レジストリで更新されました。"
    },
    {
      "indent": 3,
      "text": "+---------+----------------------+------------+\n| Decimal |     Description      | References |\n+=========+======================+============+\n|    70   | CMSAlgsForSHAKE-2019 |  RFC 8702  |\n+---------+----------------------+------------+",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 23,
      "text": "Table 1",
      "ja": "表1"
    },
    {
      "indent": 0,
      "text": "5. Security Considerations",
      "section_title": true,
      "ja": "5. セキュリティに関する考慮事項"
    },
    {
      "indent": 3,
      "text": "This document updates [RFC3370]. The security considerations section of that document applies to this specification as well.",
      "ja": "このドキュメントは[RFC3370]を更新します。そのドキュメントのセキュリティに関する考慮事項のセクションは、この仕様にも適用されます。"
    },
    {
      "indent": 3,
      "text": "NIST has defined appropriate use of the hash functions in terms of the algorithm strengths and expected time frames for secure use in Special Publications (SPs) [SP800-78-4] and [SP800-107]. These documents can be used as guides to choose appropriate key sizes for various security scenarios.",
      "ja": "NISTは、特別な出版物（SP）[SP800-78-4]および[SP800-107]で、アルゴリズムの強度と安全な使用のための予想時間フレームの観点から、ハッシュ関数の適切な使用を定義しています。これらのドキュメントは、さまざまなセキュリティシナリオに適切なキーサイズを選択するためのガイドとして使用できます。"
    },
    {
      "indent": 3,
      "text": "SHAKE128 with an output length of 32 bytes offers 128 bits of collision and preimage resistance. Thus, SHAKE128 OIDs in this specification are RECOMMENDED with a 2048- (112-bit security) or 3072-bit (128-bit security) RSA modulus or curves with a group order of 256 bits (128-bit security). SHAKE256 with a 64-byte output length offers 256 bits of collision and preimage resistance. Thus, the SHAKE256 OIDs in this specification are RECOMMENDED with 4096-bit RSA modulus or higher or curves with group order of at least 512 bits, such as NIST curve P-521 (256-bit security). Note that we recommended a 4096-bit RSA because we would need a 15360-bit modulus for 256 bits of security, which is impractical for today's technology.",
      "ja": "出力長が32バイトのSHAKE128は、128ビットの衝突とプリイメージ耐性を提供します。したがって、この仕様のSHAKE128 OIDは、2048ビット（112ビットのセキュリティ）または3072ビット（128ビットのセキュリティ）のRSA係数または256ビットのグループ順序（128ビットのセキュリティ）を持つ曲線で推奨されます。出力長が64バイトのSHAKE256は、256ビットの衝突とプリイメージ耐性を提供します。したがって、この仕様のSHAKE256 OIDは、4096ビットのRSAモジュラス以上、またはNIST曲線P-521（256ビットセキュリティ）などのグループ次数が少なくとも512ビットの曲線で推奨されます。 256ビットのセキュリティには15360ビットのモジュラスが必要になるため、4096ビットのRSAを推奨していることに注意してください。これは、今日のテクノロジーでは非現実的です。"
    },
    {
      "indent": 3,
      "text": "When more than two parties share the same message-authentication key, data origin authentication is not provided. Any party that knows the message-authentication key can compute a valid MAC; therefore, the content could originate from any one of the parties.",
      "ja": "3つ以上のパーティが同じメッセージ認証キーを共有する場合、データ発信元認証は提供されません。メッセージ認証キーを知っているすべての関係者が有効なMACを計算できます。したがって、コンテンツはいずれかの当事者からのものである可能性があります。"
    },
    {
      "indent": 0,
      "text": "6. References",
      "section_title": true,
      "ja": "6. 参考文献"
    },
    {
      "indent": 0,
      "text": "6.1. Normative References",
      "section_title": true,
      "ja": "6.1. 引用文献"
    },
    {
      "indent": 3,
      "text": "[RFC2119] Bradner, S., \"Key words for use in RFCs to Indicate Requirement Levels\", BCP 14, RFC 2119, DOI 10.17487/RFC2119, March 1997, <https://www.rfc-editor.org/info/rfc2119>.",
      "ja": "[RFC2119] Bradner、S。、「要件レベルを示すためにRFCで使用するキーワード」、BCP 14、RFC 2119、DOI 10.17487 / RFC2119、1997年3月、<https://www.rfc-editor.org/info/ rfc2119>。"
    },
    {
      "indent": 3,
      "text": "[RFC3370] Housley, R., \"Cryptographic Message Syntax (CMS) Algorithms\", RFC 3370, DOI 10.17487/RFC3370, August 2002, <https://www.rfc-editor.org/info/rfc3370>.",
      "ja": "[RFC3370] Housley、R。、「Cryptographic Message Syntax（CMS）Algorithms」、RFC 3370、DOI 10.17487 / RFC3370、2002年8月、<https://www.rfc-editor.org/info/rfc3370>。"
    },
    {
      "indent": 3,
      "text": "[RFC4055] Schaad, J., Kaliski, B., and R. Housley, \"Additional Algorithms and Identifiers for RSA Cryptography for use in the Internet X.509 Public Key Infrastructure Certificate and Certificate Revocation List (CRL) Profile\", RFC 4055, DOI 10.17487/RFC4055, June 2005, <https://www.rfc-editor.org/info/rfc4055>.",
      "ja": "[RFC4055] Schaad、J.、Kaliski、B。、およびR. Housley、「インターネットX.509公開鍵インフラストラクチャ証明書および証明書失効リスト（CRL）プロファイルで使用するためのRSA暗号化の追加のアルゴリズムと識別子」、RFC 4055 、DOI 10.17487 / RFC4055、2005年6月、<https://www.rfc-editor.org/info/rfc4055>。"
    },
    {
      "indent": 3,
      "text": "[RFC5480] Turner, S., Brown, D., Yiu, K., Housley, R., and T. Polk, \"Elliptic Curve Cryptography Subject Public Key Information\", RFC 5480, DOI 10.17487/RFC5480, March 2009, <https://www.rfc-editor.org/info/rfc5480>.",
      "ja": "[RFC5480]ターナー、S。、ブラウン、D。、ユウ、K。、ハウズリー、R。、およびT.ポーク、「楕円曲線暗号化サブジェクト公開鍵情報」、RFC 5480、DOI 10.17487 / RFC5480、2009年3月、< https://www.rfc-editor.org/info/rfc5480>。"
    },
    {
      "indent": 3,
      "text": "[RFC5652] Housley, R., \"Cryptographic Message Syntax (CMS)\", STD 70, RFC 5652, DOI 10.17487/RFC5652, September 2009, <https://www.rfc-editor.org/info/rfc5652>.",
      "ja": "[RFC5652] Housley、R。、「Cryptographic Message Syntax（CMS）」、STD 70、RFC 5652、DOI 10.17487 / RFC5652、2009年9月、<https://www.rfc-editor.org/info/rfc5652>。"
    },
    {
      "indent": 3,
      "text": "[RFC8017] Moriarty, K., Ed., Kaliski, B., Jonsson, J., and A. Rusch, \"PKCS #1: RSA Cryptography Specifications Version 2.2\", RFC 8017, DOI 10.17487/RFC8017, November 2016, <https://www.rfc-editor.org/info/rfc8017>.",
      "ja": "[RFC8017] Moriarty、K。、編、Kaliski、B.、Jonsson、J。、およびA. Rusch、「PKCS＃1：RSA Cryptography Specifications Version 2.2」、RFC 8017、DOI 10.17487 / RFC8017、2016年11月、< https://www.rfc-editor.org/info/rfc8017>。"
    },
    {
      "indent": 3,
      "text": "[RFC8174] Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174, May 2017, <https://www.rfc-editor.org/info/rfc8174>.",
      "ja": "[RFC8174] Leiba、B。、「RFC 2119キーワードの大文字と小文字のあいまいさ」、BCP 14、RFC 8174、DOI 10.17487 / RFC8174、2017年5月、<https://www.rfc-editor.org/info/ rfc8174>。"
    },
    {
      "indent": 3,
      "text": "[SHA3] National Institute of Standards and Technology (NIST), \"SHA-3 Standard: Permutation-Based Hash and Extendable-Output Functions\", FIPS PUB 202, DOI 10.6028/NIST.FIPS.202, August 2015, <https://nvlpubs.nist.gov/nistpubs/FIPS/ NIST.FIPS.202.pdf>.",
      "ja": "[SHA3]米国国立標準技術研究所（NIST）、「SHA-3標準：順列ベースのハッシュおよび拡張可能な出力関数」、FIPS PUB 202、DOI 10.6028 / NIST.FIPS.202、2015年8月、<https：/ /nvlpubs.nist.gov/nistpubs/FIPS/ NIST.FIPS.202.pdf>。"
    },
    {
      "indent": 3,
      "text": "[SP800-185] National Institute of Standards and Technology (NIST), \"SHA-3 Derived Functions: cSHAKE, KMAC, TupleHash and ParallelHash\", NIST Special Publication 800-185, DOI 10.6028/NIST.SP.800-185, December 2016, <http://nvlpubs.nist.gov/nistpubs/SpecialPublications/ NIST.SP.800-185.pdf>.",
      "ja": "[SP800-185]国立標準技術研究所（NIST）、「SHA-3派生関数：cSHAKE、KMAC、TupleHashおよびParallelHash」、NIST特別刊行物800-185、DOI 10.6028 / NIST.SP.800-185、12月2016、<http://nvlpubs.nist.gov/nistpubs/SpecialPublications/ NIST.SP.800-185.pdf>。"
    },
    {
      "indent": 0,
      "text": "6.2. Informative References",
      "section_title": true,
      "ja": "6.2. 参考引用"
    },
    {
      "indent": 3,
      "text": "[CMS-SHA3] Housley, R., \"Use of the SHA3 One-way Hash Functions in the Cryptographic Message Syntax (CMS)\", Work in Progress, Internet-Draft, draft-housley-lamps-cms-sha3-hash-00, 27 March 2017, <https://tools.ietf.org/html/draft-housley-lamps-cms-sha3-hash-00>.",
      "ja": "[CMS-SHA3] Housley、R。、「暗号化メッセージ構文（CMS）でのSHA3一方向ハッシュ関数の使用」、作業中、インターネットドラフト、draft-housley-lamps-cms-sha3-hash- 00、2017年3月27日、<https://tools.ietf.org/html/draft-housley-lamps-cms-sha3-hash-00>。"
    },
    {
      "indent": 3,
      "text": "[RFC3279] Bassham, L., Polk, W., and R. Housley, \"Algorithms and Identifiers for the Internet X.509 Public Key Infrastructure Certificate and Certificate Revocation List (CRL) Profile\", RFC 3279, DOI 10.17487/RFC3279, April 2002, <https://www.rfc-editor.org/info/rfc3279>.",
      "ja": "[RFC3279] Bassham、L.、Polk、W。、およびR. Housley、「インターネットX.509公開鍵インフラストラクチャ証明書および証明書失効リスト（CRL）プロファイルのアルゴリズムと識別子」、RFC 3279、DOI 10.17487 / RFC3279、 2002年4月、<https://www.rfc-editor.org/info/rfc3279>。"
    },
    {
      "indent": 3,
      "text": "[RFC5753] Turner, S. and D. Brown, \"Use of Elliptic Curve Cryptography (ECC) Algorithms in Cryptographic Message Syntax (CMS)\", RFC 5753, DOI 10.17487/RFC5753, January 2010, <https://www.rfc-editor.org/info/rfc5753>.",
      "ja": "[RFC5753]ターナーS.およびD.ブラウン、「Cryptographic Message Syntax（CMS）での楕円曲線暗号（ECC）アルゴリズムの使用」、RFC 5753、DOI 10.17487 / RFC5753、2010年1月、<https：//www.rfc -editor.org/info/rfc5753>。"
    },
    {
      "indent": 3,
      "text": "[RFC5911] Hoffman, P. and J. Schaad, \"New ASN.1 Modules for Cryptographic Message Syntax (CMS) and S/MIME\", RFC 5911, DOI 10.17487/RFC5911, June 2010, <https://www.rfc-editor.org/info/rfc5911>.",
      "ja": "[RFC5911] Hoffman、P。およびJ. Schaad、「暗号化メッセージ構文（CMS）およびS / MIMEの新しいASN.1モジュール」、RFC 5911、DOI 10.17487 / RFC5911、2010年6月、<https：//www.rfc -editor.org/info/rfc5911>。"
    },
    {
      "indent": 3,
      "text": "[RFC6268] Schaad, J. and S. Turner, \"Additional New ASN.1 Modules for the Cryptographic Message Syntax (CMS) and the Public Key Infrastructure Using X.509 (PKIX)\", RFC 6268, DOI 10.17487/RFC6268, July 2011, <https://www.rfc-editor.org/info/rfc6268>.",
      "ja": "[RFC6268] Schaad、J。およびS. Turner、「暗号化メッセージ構文（CMS）およびX.509（PKIX）を使用した公開鍵インフラストラクチャのための追加の新しいASN.1モジュール」、RFC 6268、DOI 10.17487 / RFC6268、7月2011、<https://www.rfc-editor.org/info/rfc6268>。"
    },
    {
      "indent": 3,
      "text": "[RFC6979] Pornin, T., \"Deterministic Usage of the Digital Signature Algorithm (DSA) and Elliptic Curve Digital Signature Algorithm (ECDSA)\", RFC 6979, DOI 10.17487/RFC6979, August 2013, <https://www.rfc-editor.org/info/rfc6979>.",
      "ja": "[RFC6979]ポルノ、T。、「デジタル署名アルゴリズム（DSA）と楕円曲線デジタル署名アルゴリズム（ECDSA）の決定論的使用法」、RFC 6979、DOI 10.17487 / RFC6979、2013年8月、<https：//www.rfc- editor.org/info/rfc6979>。"
    },
    {
      "indent": 3,
      "text": "[RFC8692] Kampanakis, P. and Q. Dang, \"Internet X.509 Public Key Infrastructure: Additional Algorithm Identifiers for RSASSA-PSS and ECDSA Using SHAKEs\", RFC 8692, DOI 10.17487/RFC8692, December 2019, <https://www.rfc-editor.org/info/rfc8692>.",
      "ja": "[RFC8692] Kampanakis、P。およびQ. Dang、「Internet X.509 Public Key Infrastructure：Additional Algorithm Identifiers for RSASSA-PSS and ECDSA Using SHAKEs」、RFC 8692、DOI 10.17487 / RFC8692、2019年12月、<https：// www.rfc-editor.org/info/rfc8692>。"
    },
    {
      "indent": 3,
      "text": "[SEC1] Standards for Efficient Cryptography Group, \"SEC 1: Elliptic Curve Cryptography\", May 2009, <http://www.secg.org/sec1-v2.pdf>.",
      "ja": "[SEC1] Standards for Efficient Cryptography Group、「SEC 1：Elliptic Curve Cryptography」、2009年5月、<http://www.secg.org/sec1-v2.pdf>。"
    },
    {
      "indent": 3,
      "text": "[shake-nist-oids] National Institute of Standards and Technology (NIST), \"Computer Security Objects Register\", October 2019, <https://csrc.nist.gov/Projects/Computer-Security-Objects-Register/Algorithm-Registration>.",
      "ja": "[shake-nist-oids]国立標準技術研究所（NIST）、「コンピュータセキュリティオブジェクトレジスタ」、2019年10月、<https://csrc.nist.gov/Projects/Computer-Security-Objects-Register/Algorithm-登録>。"
    },
    {
      "indent": 3,
      "text": "[SP800-107] National Institute of Standards and Technology (NIST), \"Recommendation for Applications Using Approved Hash Algorithms\", Draft NIST Special Publication 800-107 Revised, August 2012, <https://nvlpubs.nist.gov/nistpubs/Legacy/SP/ nistspecialpublication800-107r1.pdf>.",
      "ja": "[SP800-107]米国国立標準技術研究所（NIST）、「承認されたハッシュアルゴリズムを使用したアプリケーションに関する推奨事項」、ドラフトNIST特別刊行物800-107改訂、2012年8月、<https://nvlpubs.nist.gov/nistpubs/ Legacy / SP / nistspecialpublication800-107r1.pdf>。"
    },
    {
      "indent": 3,
      "text": "[SP800-78-4] National Institute of Standards and Technology (NIST), \"Cryptographic Algorithms and Key Sizes for Personal Identity Verification\", NIST Special Publication 800-78-4, DOI 10.6028/NIST.SP.800-78-4, May 2015, <https://nvlpubs.nist.gov/nistpubs/SpecialPublications/ NIST.SP.800-78-4.pdf>.",
      "ja": "[SP800-78-4]米国国立標準技術研究所（NIST）、「個人識別情報の検証のための暗号化アルゴリズムとキーサイズ」、NIST Special Publication 800-78-4、DOI 10.6028 / NIST.SP.800-78-4 、2015年5月、<https://nvlpubs.nist.gov/nistpubs/SpecialPublications/ NIST.SP.800-78-4.pdf>。"
    },
    {
      "indent": 3,
      "text": "[X9.62] American National Standard for Financial Services (ANSI), \"Public Key Cryptography for the Financial Services Industry: the Elliptic Curve Digital Signature Algorithm (ECDSA)\", ANSI X9.62, November 2005.",
      "ja": "[X9.62]金融サービスの米国規格（ANSI）、「金融サービス業界の公開鍵暗号化：楕円曲線デジタル署名アルゴリズム（ECDSA）」、ANSI X9.62、2005年11月。"
    },
    {
      "indent": 0,
      "text": "Appendix A. ASN.1 Module",
      "section_title": true,
      "ja": "付録A. ASN.1モジュール"
    },
    {
      "indent": 3,
      "text": "This appendix includes the ASN.1 modules for SHAKEs in CMS. This module includes some ASN.1 from other standards for reference.",
      "ja": "この付録には、CMSのシェイク用のASN.1モジュールが含まれています。このモジュールには、参照用に他の標準のASN.1が含まれています。"
    },
    {
      "indent": 3,
      "text": "CMSAlgsForSHAKE-2019 { iso(1) member-body(2) us(840)\n     rsadsi(113549) pkcs(1) pkcs-9(9) smime(16) modules(0)\n     id-mod-cms-shakes-2019(70) }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "DEFINITIONS EXPLICIT TAGS ::=",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "BEGIN",
      "ja": "ベギン"
    },
    {
      "indent": 3,
      "text": "-- EXPORTS ALL;",
      "ja": "-すべてエクスポート;"
    },
    {
      "indent": 3,
      "text": "IMPORTS",
      "ja": "輸入"
    },
    {
      "indent": 3,
      "text": "DIGEST-ALGORITHM, MAC-ALGORITHM, SMIME-CAPS\nFROM AlgorithmInformation-2009\n  { iso(1) identified-organization(3) dod(6) internet(1) security(5)\n    mechanisms(5) pkix(7) id-mod(0)\n    id-mod-algorithmInformation-02(58) }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "RSAPublicKey, rsaEncryption, id-ecPublicKey\nFROM PKIXAlgs-2009 { iso(1) identified-organization(3) dod(6)\n     internet(1) security(5) mechanisms(5) pkix(7) id-mod(0)\n     id-mod-pkix1-algorithms2008-02(56) }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "sa-rsassapssWithSHAKE128, sa-rsassapssWithSHAKE256,\nsa-ecdsaWithSHAKE128, sa-ecdsaWithSHAKE256\nFROM PKIXAlgsForSHAKE-2019 {\n   iso(1) identified-organization(3) dod(6)\n   internet(1) security(5) mechanisms(5) pkix(7) id-mod(0)\n   id-mod-pkix1-shakes-2019(94) } ;",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "-- Message digest Algorithms (mda-)\n-- used in SignedData, SignerInfo, DigestedData,\n-- and the AuthenticatedData digestAlgorithm\n-- fields in CMS\n--\n--  This expands MessageAuthAlgs from [RFC5652] and\n--  MessageDigestAlgs in [RFC5753]\n--\n-- MessageDigestAlgs DIGEST-ALGORITHM ::= {\n--  mda-shake128   |\n--  mda-shake256,\n--  ...\n-- }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "--\n-- One-Way Hash Functions\n-- SHAKE128\nmda-shake128 DIGEST-ALGORITHM ::= {\n  IDENTIFIER id-shake128  -- with output length 32 bytes.\n}\nid-shake128 OBJECT IDENTIFIER ::= { joint-iso-itu-t(2) country(16)\n                                    us(840) organization(1) gov(101)\n                                    csor(3) nistAlgorithm(4)\n                                    hashAlgs(2) 11 }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "-- SHAKE256\nmda-shake256 DIGEST-ALGORITHM ::= {\n  IDENTIFIER id-shake256  -- with output length 64 bytes.\n}\nid-shake256 OBJECT IDENTIFIER ::= { joint-iso-itu-t(2) country(16)\n                                    us(840) organization(1) gov(101)\n                                    csor(3) nistAlgorithm(4)\n                                    hashAlgs(2) 12 }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "--\n-- Public key algorithm identifiers located in the\n-- OriginatorPublicKey's algorithm attribute in CMS.\n-- And Signature identifiers used in SignerInfo\n-- signatureAlgorithm field of signed-data content\n-- type and countersignature attribute in CMS.\n--\n-- From RFC 5280, for reference:\n-- rsaEncryption OBJECT IDENTIFIER ::=  { pkcs-1 1 }\n   -- When the rsaEncryption algorithm identifier is used\n   -- for a public key, the AlgorithmIdentifier parameters\n   -- field MUST contain NULL.\n--\nid-RSASSA-PSS-SHAKE128  OBJECT IDENTIFIER  ::=  { iso(1)\n         identified-organization(3) dod(6) internet(1)\n         security(5) mechanisms(5) pkix(7) algorithms(6) 30 }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "id-RSASSA-PSS-SHAKE256  OBJECT IDENTIFIER  ::=  { iso(1)\n         identified-organization(3) dod(6) internet(1)\n         security(5) mechanisms(5) pkix(7) algorithms(6) 31 }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 6,
      "text": "-- When the id-RSASSA-PSS-* algorithm identifiers are used\n-- for a public key or signature in CMS, the AlgorithmIdentifier\n-- parameters field MUST be absent.  The message digest algorithm\n-- used in RSASSA-PSS MUST be SHAKE128 or SHAKE256 with a 32- or\n-- 64-byte output length, respectively.  The mask generation\n-- function MUST be SHAKE128 or SHAKE256 with an output length\n-- of (8*ceil((n-1)/8) - 264) or (8*ceil((n-1)/8) - 520) bits,\n-- respectively, where n is the RSA modulus in bits.\n-- The RSASSA-PSS saltLength MUST be 32 or 64 bytes, respectively.\n-- The trailerField MUST be 1, which represents the trailer\n-- field with hexadecimal value 0xBC.  Regardless of\n-- id-RSASSA-PSS-* or rsaEncryption being used as the\n-- AlgorithmIdentifier of the OriginatorPublicKey, the RSA\n-- public key MUST be encoded using the RSAPublicKey type.",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "-- From RFC 4055, for reference:\n-- RSAPublicKey ::= SEQUENCE {\n--   modulus INTEGER, -- -- n\n--   publicExponent INTEGER } -- -- e",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "id-ecdsa-with-shake128 OBJECT IDENTIFIER  ::=  { iso(1)\n         identified-organization(3) dod(6) internet(1)\n         security(5) mechanisms(5) pkix(7) algorithms(6) 32 }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "id-ecdsa-with-shake256 OBJECT IDENTIFIER  ::=  { iso(1)\n         identified-organization(3) dod(6) internet(1)\n         security(5) mechanisms(5) pkix(7) algorithms(6) 33 }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 6,
      "text": "-- When the id-ecdsa-with-shake* algorithm identifiers are\n-- used in CMS, the AlgorithmIdentifier parameters field\n-- MUST be absent and the signature algorithm should be\n-- deterministic ECDSA [RFC6979].  The message digest MUST\n-- be SHAKE128 or SHAKE256 with a 32- or 64-byte output\n-- length, respectively.  In both cases, the ECDSA public key,\n-- MUST be encoded using the id-ecPublicKey type.",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "-- From RFC 5480, for reference:\n-- id-ecPublicKey OBJECT IDENTIFIER ::= {\n--    iso(1) member-body(2) us(840) ansi-X9-62(10045) keyType(2) 1 }\n     -- The id-ecPublicKey parameters must be absent or present\n     -- and are defined as:\n-- ECParameters ::= CHOICE {\n--     namedCurve         OBJECT IDENTIFIER\n--     -- -- implicitCurve   NULL\n--     -- -- specifiedCurve  SpecifiedECDomain\n--  }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "-- This expands SignatureAlgs from [RFC5912]\n--\n-- SignatureAlgs SIGNATURE-ALGORITHM ::= {\n--   sa-rsassapssWithSHAKE128 |\n--   sa-rsassapssWithSHAKE256 |\n--   sa-ecdsaWithSHAKE128 |\n--   sa-ecdsaWithSHAKE256,\n--   ...\n-- }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "-- This expands MessageAuthAlgs from [RFC5652] and [RFC6268]\n--\n-- Message Authentication (maca-) Algorithms\n-- used in AuthenticatedData macAlgorithm in CMS\n--\nMessageAuthAlgs MAC-ALGORITHM ::= {\n    maca-KMACwithSHAKE128   |\n    maca-KMACwithSHAKE256,\n    ...\n}",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "-- This expands SMimeCaps from [RFC5911]\n--\nSMimeCaps SMIME-CAPS ::= {\n   -- sa-rsassapssWithSHAKE128.&smimeCaps |\n   -- sa-rsassapssWithSHAKE256.&smimeCaps |\n   -- sa-ecdsaWithSHAKE128.&smimeCaps |\n   -- sa-ecdsaWithSHAKE256.&smimeCaps,\n   maca-KMACwithSHAKE128.&smimeCaps   |\n   maca-KMACwithSHAKE256.&smimeCaps,\n   ...\n }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "--\n-- KMAC with SHAKE128\nmaca-KMACwithSHAKE128 MAC-ALGORITHM ::= {\n      IDENTIFIER id-KMACWithSHAKE128\n      PARAMS TYPE KMACwithSHAKE128-params ARE optional\n        -- If KMACwithSHAKE128-params parameters are absent,\n        -- the SHAKE128 output length used in KMAC is 256 bits\n        -- and the customization string is an empty string.\n      IS-KEYED-MAC TRUE\n      SMIME-CAPS {IDENTIFIED BY id-KMACWithSHAKE128}\n}\nid-KMACWithSHAKE128 OBJECT IDENTIFIER ::=  { joint-iso-itu-t(2)\n                             country(16) us(840) organization(1)\n                             gov(101) csor(3) nistAlgorithm(4)\n                             hashAlgs(2) 19 }\nKMACwithSHAKE128-params ::= SEQUENCE {\n  kMACOutputLength     INTEGER DEFAULT 256, -- Output length in bits\n  customizationString  OCTET STRING DEFAULT ''H\n}",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "-- KMAC with SHAKE256\nmaca-KMACwithSHAKE256 MAC-ALGORITHM ::= {\n      IDENTIFIER id-KMACWithSHAKE256\n      PARAMS TYPE KMACwithSHAKE256-params ARE optional\n         -- If KMACwithSHAKE256-params parameters are absent,\n         -- the SHAKE256 output length used in KMAC is 512 bits\n         -- and the customization string is an empty string.\n      IS-KEYED-MAC TRUE\n      SMIME-CAPS {IDENTIFIED BY id-KMACWithSHAKE256}\n}\nid-KMACWithSHAKE256 OBJECT IDENTIFIER ::=  { joint-iso-itu-t(2)\n                            country(16) us(840) organization(1)\n                            gov(101) csor(3) nistAlgorithm(4)\n                            hashAlgs(2) 20 }\nKMACwithSHAKE256-params ::= SEQUENCE {\n   kMACOutputLength     INTEGER DEFAULT 512, -- Output length in bits\n   customizationString  OCTET STRING DEFAULT ''H\n}",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "END",
      "ja": "終わり"
    },
    {
      "indent": 0,
      "text": "Acknowledgements",
      "ja": "謝辞"
    },
    {
      "indent": 3,
      "text": "This document is based on Russ Housley's document [CMS-SHA3]. It replaces SHA3 hash functions by SHAKE128 and SHAKE256, as the LAMPS WG agreed.",
      "ja": "このドキュメントは、Russ Housleyのドキュメント[CMS-SHA3]に基づいています。 LAMPS WGが合意したように、SHA3ハッシュ関数をSHAKE128およびSHAKE256に置き換えます。"
    },
    {
      "indent": 3,
      "text": "The authors would like to thank Russ Housley for his guidance and very valuable contributions with the ASN.1 module. Valuable feedback was also provided by Eric Rescorla.",
      "ja": "著者は、ASN.1モジュールのガイダンスと非常に貴重な貢献をしてくれたRuss Housleyに感謝します。貴重なフィードバックはEric Rescorlaからも提供されました。"
    },
    {
      "indent": 0,
      "text": "Authors' Addresses",
      "ja": "著者のアドレス"
    },
    {
      "indent": 3,
      "text": "Panos Kampanakis Cisco Systems",
      "ja": "Panos Kampanakis Kissos Systems"
    },
    {
      "indent": 3,
      "text": "Email: pkampana@cisco.com",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "Quynh Dang NIST 100 Bureau Drive Gaithersburg, MD 20899 United States of America",
      "ja": "Quynh Dang NIST 100 Bureau Drive Gaithersburg、MD 20899アメリカ合衆国"
    },
    {
      "indent": 3,
      "text": "Email: quynh.Dang@nist.gov",
      "raw": true,
      "ja": ""
    }
  ]
}