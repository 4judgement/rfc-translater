{
  "title": {
    "text": "RFC 3412 - Message Processing and Dispatching for the Simple Network Management Protocol (SNMP)",
    "ja": "RFC 3412 - Simple Network Management Protocol（SNMP）のメッセージ処理とディスパッチ"
  },
  "number": 3412,
  "created_at": "2020-08-15 12:04:53.853462+09:00",
  "updated_by": "",
  "contents": [
    {
      "indent": 0,
      "text": "Network Working Group                                            J. Case\nRequest for Comments: 3412                           SNMP Research, Inc.\nSTD: 62                                                    D. Harrington\nObsoletes: 2572                                       Enterasys Networks\nCategory: Standards Track                                     R. Presuhn\n                                                      BMC Software, Inc.\n                                                               B. Wijnen\n                                                     Lucent Technologies\n                                                           December 2002",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 15,
      "text": "Message Processing and Dispatching for the Simple Network Management Protocol (SNMP)",
      "ja": "Simple Network Management Protocol（SNMP）のメッセージ処理とディスパッチ"
    },
    {
      "indent": 0,
      "text": "Status of this Memo",
      "ja": "本文書の状態"
    },
    {
      "indent": 3,
      "text": "This document specifies an Internet standards track protocol for the Internet community, and requests discussion and suggestions for improvements. Please refer to the current edition of the \"Internet Official Protocol Standards\" (STD 1) for the standardization state and status of this protocol. Distribution of this memo is unlimited.",
      "ja": "このドキュメントは、インターネットコミュニティのインターネット標準トラックプロトコルを指定し、改善のための議論と提案を要求します。このプロトコルの標準化状態とステータスについては、「インターネット公式プロトコル標準」（STD 1）の最新版を参照してください。このメモの配布は無制限です。"
    },
    {
      "indent": 0,
      "text": "Copyright Notice",
      "ja": "著作権表示"
    },
    {
      "indent": 3,
      "text": "Copyright (C) The Internet Society (2002). All Rights Reserved.",
      "ja": "Copyright（C）The Internet Society（2002）。全著作権所有。"
    },
    {
      "indent": 0,
      "text": "Abstract",
      "ja": "概要"
    },
    {
      "indent": 3,
      "text": "This document describes the Message Processing and Dispatching for Simple Network Management Protocol (SNMP) messages within the SNMP architecture. It defines the procedures for dispatching potentially multiple versions of SNMP messages to the proper SNMP Message Processing Models, and for dispatching PDUs to SNMP applications. This document also describes one Message Processing Model - the SNMPv3 Message Processing Model. This document obsoletes RFC 2572.",
      "ja": "このドキュメントでは、SNMPアーキテクチャ内の簡易ネットワーク管理プロトコル（SNMP）メッセージのメッセージ処理とディスパッチについて説明します。複数のバージョンのSNMPメッセージを適切なSNMPメッセージ処理モデルにディスパッチする手順と、PDUをSNMPアプリケーションにディスパッチする手順を定義します。このドキュメントでは、SNMPv3メッセージ処理モデルという1つのメッセージ処理モデルについても説明しています。このドキュメントはRFC 2572を廃止します。"
    },
    {
      "indent": 0,
      "text": "Table of Contents",
      "ja": "目次"
    },
    {
      "indent": 3,
      "text": "1. Introduction ................................................    3\n2. Overview ....................................................    4\n2.1. The Dispatcher ............................................    5\n2.2. Message Processing Subsystem ..............................    5\n3. Elements of Message Processing and Dispatching ..............    6\n3.1. messageProcessingModel ....................................    6\n3.2. pduVersion ................................................    6\n3.3. pduType ...................................................    7\n3.4. sendPduHandle .............................................    7\n4. Dispatcher Elements of Procedure ............................    7\n4.1. Sending an SNMP Message to the Network ....................    7\n4.1.1. Sending a Request or Notification .......................    8\n4.1.2. Sending a Response to the Network .......................    9\n4.2. Receiving an SNMP Message from the Network ................   11\n4.2.1. Message Dispatching of received SNMP Messages ...........   11\n4.2.2. PDU Dispatching for Incoming Messages ...................   12\n4.2.2.1. Incoming Requests and Notifications ...................   13\n4.2.2.2. Incoming Responses ....................................   14\n4.3. Application Registration for Handling PDU types ...........   15\n4.4. Application Unregistration for Handling PDU Types .........   16\n5. Definitions .................................................   16\n5.1. Definitions for SNMP Message Processing and Dispatching ...   16\n6. The SNMPv3 Message Format ...................................   19\n6.1. msgVersion ................................................   20\n6.2. msgID .....................................................   20\n6.3. msgMaxSize ................................................   21\n6.4. msgFlags ..................................................   21\n6.5. msgSecurityModel ..........................................   24\n6.6. msgSecurityParameters .....................................   24\n6.7. scopedPduData .............................................   24\n6.8. scopedPDU .................................................   24\n6.8.1. contextEngineID .........................................   24\n6.8.2. contextName .............................................   25\n6.8.3. data ....................................................   25\n7. Elements of Procedure for v3MP ..............................   25\n7.1. Prepare an Outgoing SNMP Message ..........................   26\n7.2. Prepare Data Elements from an Incoming SNMP Message .......   32\n8. Intellectual Property .......................................   37\n9. Acknowledgements ............................................   38\n10. Security Considerations ....................................   39\n11. References .................................................   40\n11.1. Normative References .....................................   40\n11.2. Informative References ...................................   41\n12. Editors' Addresses .........................................   42\n13. Full Copyright Statement ...................................   43",
      "raw": true,
      "toc": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "1. Introduction",
      "section_title": true,
      "ja": "1. はじめに"
    },
    {
      "indent": 3,
      "text": "The Architecture for describing Internet Management Frameworks [RFC3411] describes that an SNMP engine is composed of:",
      "ja": "インターネット管理フレームワークを記述するためのアーキテクチャ[RFC3411]は、SNMPエンジンは以下で構成されていると記述しています。"
    },
    {
      "indent": 6,
      "text": "1) a Dispatcher 2) a Message Processing Subsystem, 3) a Security Subsystem, and 4) an Access Control Subsystem.",
      "ja": "1）ディスパッチャ2）メッセージ処理サブシステム、3）セキュリティサブシステム、4）アクセス制御サブシステム。"
    },
    {
      "indent": 3,
      "text": "Applications make use of the services of these subsystems.",
      "ja": "アプリケーションは、これらのサブシステムのサービスを利用します。"
    },
    {
      "indent": 3,
      "text": "It is important to understand the SNMP architecture and its terminology to understand where the Message Processing Subsystem and Dispatcher described in this document fit into the architecture and interact with other subsystems within the architecture. The reader is expected to have read and understood the description of the SNMP architecture, defined in [RFC3411].",
      "ja": "このドキュメントで説明されているメッセージ処理サブシステムとディスパッチャがアーキテクチャに適合し、アーキテクチャ内の他のサブシステムと対話する場所を理解するには、SNMPアーキテクチャとその用語を理解することが重要です。読者は、[RFC3411]で定義されているSNMPアーキテクチャの説明を読んで理解していることが期待されます。"
    },
    {
      "indent": 3,
      "text": "The Dispatcher in the SNMP engine sends and receives SNMP messages. It also dispatches SNMP PDUs to SNMP applications. When an SNMP message needs to be prepared or when data needs to be extracted from an SNMP message, the Dispatcher delegates these tasks to a message version-specific Message Processing Model within the Message Processing Subsystem.",
      "ja": "SNMPエンジンのディスパッチャーは、SNMPメッセージを送受信します。また、SNMP PDUをSNMPアプリケーションにディスパッチします。 SNMPメッセージを準備する必要がある場合、またはSNMPメッセージからデータを抽出する必要がある場合、Dispatcherはこれらのタスクをメッセージ処理サブシステム内のメッセージバージョン固有のメッセージ処理モデルに委任します。"
    },
    {
      "indent": 3,
      "text": "A Message Processing Model is responsible for processing an SNMP version-specific message and for coordinating the interaction with the Security Subsystem to ensure proper security is applied to the SNMP message being handled.",
      "ja": "メッセージ処理モデルは、SNMPバージョン固有のメッセージを処理し、処理されるSNMPメッセージに適切なセキュリティが確実に適用されるように、セキュリティサブシステムとの相互作用を調整します。"
    },
    {
      "indent": 3,
      "text": "Interactions between the Dispatcher, the Message Processing Subsystem, and applications are modeled using abstract data elements and abstract service interface primitives defined by the SNMP architecture.",
      "ja": "Dispatcher、メッセージ処理サブシステム、およびアプリケーション間の相互作用は、SNMPアーキテクチャーで定義された抽象データ要素と抽象サービスインターフェイスプリミティブを使用してモデル化されます。"
    },
    {
      "indent": 3,
      "text": "Similarly, interactions between the Message Processing Subsystem and the Security Subsystem are modeled using abstract data elements and abstract service interface primitives as defined by the SNMP architecture.",
      "ja": "同様に、メッセージ処理サブシステムとセキュリティサブシステム間の相互作用は、SNMPアーキテクチャで定義されている抽象データ要素と抽象サービスインターフェイスプリミティブを使用してモデル化されます。"
    },
    {
      "indent": 3,
      "text": "The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as described in BCP 14, RFC 2119.",
      "ja": "このドキュメントのキーワード「MUST」、「MUST NOT」、「REQUIRED」、「SHALL」、「SHALL NOT」、「SHOULD」、「SHOULD NOT」、「RECOMMENDED」、「MAY」、および「OPTIONAL」は、 BCP 14、RFC 2119で説明されているように解釈されます。"
    },
    {
      "indent": 0,
      "text": "2. Overview",
      "section_title": true,
      "ja": "2. 概観"
    },
    {
      "indent": 3,
      "text": "The following illustration depicts the Message Processing in relation to SNMP applications, the Security Subsystem and Transport Mappings.",
      "ja": "次の図は、SNMPアプリケーション、セキュリティサブシステム、およびトランスポートマッピングに関連するメッセージ処理を示しています。"
    },
    {
      "indent": 3,
      "text": "+-------------------------------------------------------------------+\n| SNMP Entity                                                       |\n|                                                                   |\n| +---------------------------------------------------------------+ |\n| | Applications                                                  | |\n| | +-----------+  +--------------+                               | |\n| | | Command   |  | Notification |                               | |\n| | | Generator |  | Originator   | +-----------+ +--------------+| |\n| | +-----------+  +--------------+ | Proxy     | | Other        || |\n| | +-----------+  +--------------+ | Forwarder | |Application(s)|| |\n| | | Command   |  | Notification | +-----------+ +--------------+| |\n| | | Responder |  | Receiver     |                               | |\n| | +-----------+  +--------------+                               | |\n| +---------------------------------------------------------------+ |\n|        ^                ^               ^           ^             |\n|        |                |               |           |             |\n|        v                v               v           v             |\n|        +--------+-------+---------------+-----------+             |\n|                 ^                                                 |\n|                 |    +---------------------+  +-----------------+ |\n|                 |    | Message Processing  |  | Security        | |\n| Dispatcher      v    | Subsystem           |  | Subsystem       | |\n| +------------------+ |     +------------+  |  |                 | |\n| | PDU Dispatcher   | |  +->| v1MP     * |<--->| +-------------+ | |\n| |                  | |  |  +------------+  |  | | Other       | | |\n| |                  | |  |  +------------+  |  | | Security    | | |\n| |                  | |  +->| v2cMP    * |<--->| | Model       | | |\n| | Message          | |  |  +------------+  |  | +-------------+ | |\n| | Dispatcher  <-------->+                  |  |                 | |\n| |                  | |  |  +------------+  |  | +-------------+ | |\n| |                  | |  +->| v3MP     * |<--->| | User-based  | | |\n| | Transport        | |  |  +------------+  |  | | Security    | | |\n| | Mapping          | |  |  +------------+  |  | | Model       | | |\n| | (e.g., RFC 3417) | |  +->| otherMP  * |<--->| +-------------+ | |\n| +------------------+ |     +------------+  |  |                 | |\n|          ^           +---------------------+  +-----------------+ |\n|          |                                                        |\n+----------|--------------------------------------------------------+\n           v\n  +------------------+\n  |   Network        |           * One or more models may be present.\n  +------------------+",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "2.1. The Dispatcher",
      "section_title": true,
      "ja": "2.1. ディスパッチャー"
    },
    {
      "indent": 3,
      "text": "The Dispatcher is a key piece of an SNMP engine. There is only one in an SNMP engine, and its job is to dispatch tasks to the multiple version-specific Message Processing Models, and to dispatch PDUs to various applications.",
      "ja": "ディスパッチャーは、SNMPエンジンの重要な部分です。 SNMPエンジンには1つしかありません。その仕事は、複数のバージョン固有のメッセージ処理モデルにタスクをディスパッチし、PDUをさまざまなアプリケーションにディスパッチすることです。"
    },
    {
      "indent": 3,
      "text": "For outgoing messages, an application provides a PDU to be sent, plus the data needed to prepare and send the message, and the application specifies which version-specific Message Processing Model will be used to prepare the message with the desired security processing. Once the message is prepared, the Dispatcher sends the message.",
      "ja": "送信メッセージの場合、アプリケーションは送信するPDUに加えて、メッセージの準備と送信に必要なデータを提供し、アプリケーションは、目的のセキュリティ処理でメッセージを準備するために使用されるバージョン固有のメッセージ処理モデルを指定します。メッセージが準備されると、Dispatcherがメッセージを送信します。"
    },
    {
      "indent": 3,
      "text": "For incoming messages, the Dispatcher determines the SNMP version of the incoming message and passes the message to the version-specific Message Processing Model to extract the components of the message and to coordinate the processing of security services for the message. After version-specific processing, the PDU Dispatcher determines which application, if any, should receive the PDU for processing and forwards it accordingly.",
      "ja": "着信メッセージの場合、Dispatcherは着信メッセージのSNMPバージョンを決定し、メッセージをバージョン固有のメッセージ処理モデルに渡して、メッセージのコンポーネントを抽出し、メッセージのセキュリティサービスの処理を調整します。バージョン固有の処理の後、PDUディスパッチャーは、処理のためにPDUを受信する必要があるアプリケーションがある場合、それを決定し、それに応じて転送します。"
    },
    {
      "indent": 3,
      "text": "The Dispatcher, while sending and receiving SNMP messages, collects statistics about SNMP messages and the behavior of the SNMP engine in managed objects to make them accessible to remote SNMP entities. This document defines these managed objects, the MIB module which contains them, and how these managed objects might be used to provide useful management.",
      "ja": "Dispatcherは、SNMPメッセージの送受信中に、管理対象オブジェクトのSNMPメッセージとSNMPエンジンの動作に関する統計を収集して、リモートSNMPエンティティにアクセスできるようにします。このドキュメントでは、これらの管理対象オブジェクト、それらを含むMIBモジュール、およびこれらの管理対象オブジェクトを使用して有用な管理を提供する方法を定義します。"
    },
    {
      "indent": 0,
      "text": "2.2. Message Processing Subsystem",
      "section_title": true,
      "ja": "2.2. メッセージ処理サブシステム"
    },
    {
      "indent": 3,
      "text": "The SNMP Message Processing Subsystem is the part of an SNMP engine which interacts with the Dispatcher to handle the version-specific SNMP messages. It contains one or more Message Processing Models.",
      "ja": "SNMPメッセージ処理サブシステムは、バージョン固有のSNMPメッセージを処理するためにDispatcherと対話するSNMPエンジンの一部です。 1つ以上のメッセージ処理モデルが含まれています。"
    },
    {
      "indent": 3,
      "text": "This document describes one Message Processing Model, the SNMPv3 Message Processing Model, in Section 6. The SNMPv3 Message Processing Model is defined in a separate section to show that multiple (independent) Message Processing Models can exist at the same time and that such Models can be described in different documents. The SNMPv3 Message Processing Model can be replaced or supplemented with other Message Processing Models in the future. Two Message Processing Models which are expected to be developed in the future are the SNMPv1 message format [RFC1157] and the SNMPv2c message format [RFC1901]. Others may be developed as needed.",
      "ja": "このドキュメントでは、セクション6で1つのメッセージ処理モデルであるSNMPv3メッセージ処理モデルについて説明します。SNMPv3メッセージ処理モデルは別のセクションで定義され、複数の（独立した）メッセージ処理モデルが同時に存在でき、そのようなモデルが別のドキュメントに記載されている。 SNMPv3メッセージ処理モデルは、将来、他のメッセージ処理モデルで置き換えるか、補足することができます。将来開発されることが予想される2つのメッセージ処理モデルは、SNMPv1メッセージフォーマット[RFC1157]とSNMPv2cメッセージフォーマット[RFC1901]です。その他は必要に応じて開発できます。"
    },
    {
      "indent": 0,
      "text": "3. Elements of Message Processing and Dispatching",
      "section_title": true,
      "ja": "3. メッセージの処理とディスパッチの要素"
    },
    {
      "indent": 3,
      "text": "See [RFC3411] for the definitions of:",
      "ja": "以下の定義については、[RFC3411]を参照してください。"
    },
    {
      "indent": 6,
      "text": "contextEngineID contextName scopedPDU maxSizeResponseScopedPDU securityModel securityName securityLevel messageProcessingModel",
      "ja": "contextEngineID contextName scopedPDU maxSizeResponseScopedPDU securityModel securityName securityLevel messageProcessingModel"
    },
    {
      "indent": 3,
      "text": "For incoming messages, a version-specific message processing module provides these values to the Dispatcher. For outgoing messages, an application provides these values to the Dispatcher.",
      "ja": "着信メッセージの場合、バージョン固有のメッセージ処理モジュールがこれらの値をDispatcherに提供します。発信メッセージの場合、アプリケーションはこれらの値をDispatcherに提供します。"
    },
    {
      "indent": 3,
      "text": "For some version-specific processing, the values may be extracted from received messages; for other versions, the values may be determined by algorithm, or by an implementation-defined mechanism. The mechanism by which the value is determined is irrelevant to the Dispatcher.",
      "ja": "一部のバージョン固有の処理では、値は受信したメッセージから抽出される場合があります。他のバージョンの場合、値はアルゴリズムまたは実装定義のメカニズムによって決定されます。値が決定されるメカニズムは、ディスパッチャーには関係ありません。"
    },
    {
      "indent": 3,
      "text": "The following additional or expanded definitions are for use within the Dispatcher.",
      "ja": "以下の追加または拡張された定義は、Dispatcher内で使用するためのものです。"
    },
    {
      "indent": 0,
      "text": "3.1. messageProcessingModel",
      "section_title": true,
      "ja": "3.1. messageProcessingModel"
    },
    {
      "indent": 3,
      "text": "The value of messageProcessingModel identifies a Message Processing Model. A Message Processing Model describes the version-specific procedures for extracting data from messages, generating messages, calling upon a securityModel to apply its security services to messages, for converting data from a version-specific message format into a generic format usable by the Dispatcher, and for converting data from Dispatcher format into a version-specific message format.",
      "ja": "messageProcessingModelの値は、メッセージ処理モデルを識別します。メッセージ処理モデルは、メッセージからデータを抽出し、メッセージを生成し、セキュリティモデルを呼び出してメッセージにセキュリティサービスを適用し、バージョン固有のメッセージ形式からDispatcherが使用できる汎用形式にデータを変換するためのバージョン固有の手順を記述します。データをDispatcher形式からバージョン固有のメッセージ形式に変換します。"
    },
    {
      "indent": 0,
      "text": "3.2. pduVersion",
      "section_title": true,
      "ja": "3.2. pduVersion"
    },
    {
      "indent": 3,
      "text": "The value of pduVersion represents a specific version of protocol operation and its associated PDU formats, such as SNMPv1 or SNMPv2 [RFC3416]. The values of pduVersion are specific to the version of the PDU contained in a message, and the PDUs processed by applications. The Dispatcher does not use the value of pduVersion directly.",
      "ja": "pduVersionの値は、プロトコル操作の特定のバージョンと、SNMPv1またはSNMPv2 [RFC3416]などの関連するPDU形式を表します。 pduVersionの値は、メッセージに含まれるPDUのバージョン、およびアプリケーションによって処理されるPDUに固有です。 Dispatcherは、pduVersionの値を直接使用しません。"
    },
    {
      "indent": 3,
      "text": "An application specifies the pduVersion when it requests the PDU Dispatcher to send a PDU to another SNMP engine. The Dispatcher passes the pduVersion to a Message Processing Model, so it knows how to handle the PDU properly.",
      "ja": "アプリケーションは、PDUディスパッチャにPDUを別のSNMPエンジンに送信するように要求するときに、pduVersionを指定します。ディスパッチャーはpduVersionをメッセージ処理モデルに渡すので、PDUを適切に処理する方法がわかります。"
    },
    {
      "indent": 3,
      "text": "For incoming messages, the pduVersion is provided to the Dispatcher by a version-specific Message Processing module. The PDU Dispatcher passes the pduVersion to the application so it knows how to handle the PDU properly. For example, a command responder application needs to know whether to use [RFC3416] elements of procedure and syntax instead of those specified for SNMPv1.",
      "ja": "着信メッセージの場合、pduVersionは、バージョン固有のメッセージ処理モジュールによってDispatcherに提供されます。 PDUディスパッチャーはpduVersionをアプリケーションに渡すので、PDUを適切に処理する方法がわかります。たとえば、コマンドレスポンダーアプリケーションは、SNMPv1に指定されたものではなく、手順と構文の[RFC3416]要素を使用するかどうかを知る必要があります。"
    },
    {
      "indent": 0,
      "text": "3.3. pduType",
      "section_title": true,
      "ja": "3.3. pduType"
    },
    {
      "indent": 3,
      "text": "A value of the pduType represents a specific type of protocol operation. The values of the pduType are specific to the version of the PDU contained in a message.",
      "ja": "pduTypeの値は、特定のタイプのプロトコル操作を表します。 pduTypeの値は、メッセージに含まれるPDUのバージョンに固有です。"
    },
    {
      "indent": 3,
      "text": "Applications register to support particular pduTypes for particular contextEngineIDs.",
      "ja": "アプリケーションは、特定のcontextEngineIDの特定のpduTypeをサポートするように登録します。"
    },
    {
      "indent": 3,
      "text": "For incoming messages, pduType is provided to the Dispatcher by a version-specific Message Processing module. It is subsequently used to dispatch the PDU to the application which registered for the pduType for the contextEngineID of the associated scopedPDU.",
      "ja": "着信メッセージの場合、pduTypeは、バージョン固有のメッセージ処理モジュールによってDispatcherに提供されます。その後、関連付けられたscopedPDUのcontextEngineIDのpduTypeに登録されたアプリケーションにPDUをディスパッチするために使用されます。"
    },
    {
      "indent": 0,
      "text": "3.4. sendPduHandle",
      "section_title": true,
      "ja": "3.4. sendPduHandle"
    },
    {
      "indent": 3,
      "text": "This handle is generated for coordinating the processing of requests and responses between the SNMP engine and an application. The handle must be unique across all version-specific Message Processing Models, and is of local significance only.",
      "ja": "このハンドルは、SNMPエンジンとアプリケーション間の要求と応答の処理を調整するために生成されます。このハンドルは、バージョン固有のすべてのメッセージ処理モデル全体で一意である必要があり、ローカルでのみ意味があります。"
    },
    {
      "indent": 0,
      "text": "4. Dispatcher Elements of Procedure",
      "section_title": true,
      "ja": "4. プロシージャのディスパッチャ要素"
    },
    {
      "indent": 3,
      "text": "This section describes the procedures followed by the Dispatcher when generating and processing SNMP messages.",
      "ja": "このセクションでは、SNMPメッセージの生成および処理時にディスパッチャーが従う手順について説明します。"
    },
    {
      "indent": 0,
      "text": "4.1. Sending an SNMP Message to the Network",
      "section_title": true,
      "ja": "4.1. ネットワークへのSNMPメッセージの送信"
    },
    {
      "indent": 3,
      "text": "This section describes the procedure followed by an SNMP engine whenever it sends an SNMP message.",
      "ja": "このセクションでは、SNMPエンジンがSNMPメッセージを送信するたびにSNMPエンジンが実行する手順について説明します。"
    },
    {
      "indent": 0,
      "text": "4.1.1. Sending a Request or Notification",
      "section_title": true,
      "ja": "4.1.1. リクエストまたは通知の送信"
    },
    {
      "indent": 3,
      "text": "The following procedures are followed by the Dispatcher when an application wants to send an SNMP PDU to another (remote) application, i.e., to initiate a communication by originating a message, such as one containing a request or a notification.",
      "ja": "アプリケーションがSNMP PDUを別の（リモート）アプリケーションに送信する場合、つまり、要求や通知を含むメッセージなどのメッセージを送信して通信を開始する場合、次の手順の後にDispatcherが続きます。"
    },
    {
      "indent": 3,
      "text": "1) The application requests this using the abstract service primitive:",
      "ja": "1）アプリケーションは、抽象サービスプリミティブを使用してこれを要求します。"
    },
    {
      "indent": 6,
      "text": "statusInformation =              -- sendPduHandle if success\n                                 -- errorIndication if failure\n  sendPdu(\n  IN   transportDomain           -- transport domain to be used\n  IN   transportAddress          -- destination network address\n  IN   messageProcessingModel    -- typically, SNMP version\n  IN   securityModel             -- Security Model to use\n  IN   securityName              -- on behalf of this principal\n  IN   securityLevel             -- Level of Security requested\n  IN   contextEngineID           -- data from/at this entity\n  IN   contextName               -- data from/in this context\n  IN   pduVersion                -- the version of the PDU\n  IN   PDU                       -- SNMP Protocol Data Unit\n  IN   expectResponse            -- TRUE or FALSE\n       )",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "2) If the messageProcessingModel value does not represent a Message Processing Model known to the Dispatcher, then an errorIndication (implementation-dependent) is returned to the calling application. No further processing is performed.",
      "ja": "2）messageProcessingModel値がDispatcherにとって既知のメッセージ処理モデルを表していない場合、errorIndication（実装依存）が呼び出し側アプリケーションに返されます。これ以上の処理は行われません。"
    },
    {
      "indent": 3,
      "text": "3) The Dispatcher generates a sendPduHandle to coordinate subsequent processing.",
      "ja": "3）Dispatcherは、後続の処理を調整するためにsendPduHandleを生成します。"
    },
    {
      "indent": 3,
      "text": "4) The Message Dispatcher sends the request to the version-specific Message Processing module identified by messageProcessingModel using the abstract service primitive:",
      "ja": "4）メッセージディスパッチャーは、抽象サービスプリミティブを使用して、messageProcessingModelで識別されるバージョン固有のメッセージ処理モジュールに要求を送信します。"
    },
    {
      "indent": 6,
      "text": "statusInformation = -- success or error indication prepareOutgoingMessage( IN transportDomain -- as specified by application IN transportAddress -- as specified by application IN messageProcessingModel -- as specified by application IN securityModel -- as specified by application IN securityName -- as specified by application IN securityLevel -- as specified by application IN contextEngineID -- as specified by application IN contextName -- as specified by application IN pduVersion -- as specified by application IN PDU -- as specified by application IN expectResponse -- as specified by application IN sendPduHandle -- as determined in step 3. OUT destTransportDomain -- destination transport domain OUT destTransportAddress -- destination transport address OUT outgoingMessage -- the message to send OUT outgoingMessageLength -- the message length )",
      "ja": "statusInformation =-成功またはエラーの表示prepareOutgoingMessage（IN transportDomain-アプリケーションで指定されたとおりIN transportAddress-アプリケーションで指定されたとおりIN messageProcessingModel-アプリケーションで指定されたとおりIN securityModel-アプリケーションで指定されたIN IN securityName-アプリケーションで指定されたとおりIN securityLevel-アプリケーションで指定IN contextEngineID-アプリケーションで指定IN contextName-アプリケーションで指定IN pduVersion-アプリケーションで指定IN PDU-アプリケーションで指定IN INQUIPTResponse-アプリケーションIN sendPduHandleで指定-ステップ3で決定されたとおり。OUT destTransportDomain-宛先トランスポートドメインOUT destTransportAddress-宛先トランスポートアドレスOUT outgoingMessage-送信するメッセージOUT outgoingMessageLength-メッセージの長さ）"
    },
    {
      "indent": 3,
      "text": "5) If the statusInformation indicates an error, the errorIndication is returned to the calling application. No further processing is performed.",
      "ja": "5）statusInformationがエラーを示す場合、errorIndicationが呼び出し側アプリケーションに返されます。これ以上の処理は行われません。"
    },
    {
      "indent": 3,
      "text": "6) If the statusInformation indicates success, the sendPduHandle is returned to the application, and the outgoingMessage is sent. The transport used to send the outgoingMessage is returned via destTransportDomain, and the address to which it was sent is returned via destTransportAddress.",
      "ja": "6）statusInformationが成功を示す場合、sendPduHandleがアプリケーションに返され、outgoingMessageが送信されます。 outgoingMessageの送信に使用されるトランスポートはdestTransportDomainを介して返され、送信先のアドレスはdestTransportAddressを介して返されます。"
    },
    {
      "indent": 3,
      "text": "Outgoing Message Processing is complete.",
      "ja": "送信メッセージ処理が完了しました。"
    },
    {
      "indent": 0,
      "text": "4.1.2. Sending a Response to the Network",
      "section_title": true,
      "ja": "4.1.2. ネットワークへの応答の送信"
    },
    {
      "indent": 3,
      "text": "The following procedure is followed when an application wants to return a response back to the originator of an SNMP Request.",
      "ja": "アプリケーションがSNMP要求の発信者に応答を返したい場合は、次の手順に従います。"
    },
    {
      "indent": 3,
      "text": "1) An application can request this using the abstract service primitive:",
      "ja": "1）アプリケーションは、抽象サービスプリミティブを使用してこれを要求できます。"
    },
    {
      "indent": 6,
      "text": "result =\nreturnResponsePdu(\n IN   messageProcessingModel   -- typically, SNMP version\n IN   securityModel            -- Security Model in use\n IN   securityName             -- on behalf of this principal\n IN   securityLevel            -- same as on incoming request\n IN   contextEngineID          -- data from/at this SNMP entity\n IN   contextName              -- data from/in this context\n IN   pduVersion               -- the version of the PDU\n IN   PDU                      -- SNMP Protocol Data Unit\n IN   maxSizeResponseScopedPDU -- maximum size of Response PDU\n IN   stateReference           -- reference to state information\n                               -- as presented with the request\n IN   statusInformation        -- success or errorIndication\n )                             -- (error counter OID and value\n                               -- when errorIndication)",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "2) The Message Dispatcher sends the request to the appropriate Message Processing Model indicated by the received value of messageProcessingModel using the abstract service primitive:",
      "ja": "2）メッセージディスパッチャーは、抽象サービスプリミティブを使用して、受信したmessageProcessingModelの値によって示される適切なメッセージ処理モデルに要求を送信します。"
    },
    {
      "indent": 6,
      "text": "result = -- SUCCESS or errorIndication prepareResponseMessage( IN messageProcessingModel -- specified by application IN securityModel -- specified by application IN securityName -- specified by application IN securityLevel -- specified by application IN contextEngineID -- specified by application IN contextName -- specified by application IN pduVersion -- specified by application IN PDU -- specified by application IN maxSizeResponseScopedPDU -- specified by application IN stateReference -- specified by application IN statusInformation -- specified by application OUT destTransportDomain -- destination transport domain OUT destTransportAddress -- destination transport address OUT outgoingMessage -- the message to send OUT outgoingMessageLength -- the message length )",
      "ja": "result =-SUCCESSまたはerrorIndication prepareResponseMessage（IN messageProcessingModel-アプリケーションで指定IN securityModel-アプリケーションで指定IN securityName-アプリケーションで指定IN securityLevel-アプリケーションで指定IN contextEngineID-アプリケーションで指定IN contextName-指定アプリケーションIN pduVersion-アプリケーションIN PDUで指定-アプリケーションIN maxSizeResponseScopedPDUで指定-アプリケーションINで指定stateReference-アプリケーションINで指定statusInformation-アプリケーションで指定OUT destTransportDomain-宛先トランスポートドメインOUT destTransportAddress-宛先トランスポートアドレスOUT outgoingMessage-送信するメッセージOUT outgoingMessageLength-メッセージの長さ）"
    },
    {
      "indent": 3,
      "text": "3) If the result is an errorIndication, the errorIndication is returned to the calling application. No further processing is performed.",
      "ja": "3）結果がerrorIndicationの場合、errorIndicationが呼び出し側アプリケーションに返されます。これ以上の処理は行われません。"
    },
    {
      "indent": 3,
      "text": "4) If the result is success, the outgoingMessage is sent. The transport used to send the outgoingMessage is returned via destTransportDomain, and the address to which it was sent is returned via destTransportAddress.",
      "ja": "4）結果が成功の場合、outgoingMessageが送信されます。 outgoingMessageの送信に使用されるトランスポートはdestTransportDomainを介して返され、送信先のアドレスはdestTransportAddressを介して返されます。"
    },
    {
      "indent": 3,
      "text": "Message Processing is complete.",
      "ja": "メッセージ処理が完了しました。"
    },
    {
      "indent": 0,
      "text": "4.2. Receiving an SNMP Message from the Network",
      "section_title": true,
      "ja": "4.2. ネットワークからのSNMPメッセージの受信"
    },
    {
      "indent": 3,
      "text": "This section describes the procedure followed by an SNMP engine whenever it receives an SNMP message.",
      "ja": "このセクションでは、SNMPエンジンがSNMPメッセージを受信したときにSNMPエンジンが実行する手順について説明します。"
    },
    {
      "indent": 3,
      "text": "Please note, that for the sake of clarity and to prevent the text from being even longer and more complicated, some details were omitted from the steps below. In particular, the elements of procedure do not always explicitly indicate when state information needs to be released. The general rule is that if state information is available when a message is to be \"discarded without further processing\", then the state information must also be released at that same time.",
      "ja": "わかりやすくするため、およびテキストがさらに長く複雑になるのを防ぐために、以下の手順では一部の詳細が省略されていることに注意してください。特に、手続きの要素は、いつ状態情報を解放する必要があるかを常に明示的に示すとは限りません。一般的なルールは、メッセージが「それ以上処理されずに破棄される」ときに状態情報が使用可能な場合、状態情報も同時に解放する必要があるということです。"
    },
    {
      "indent": 0,
      "text": "4.2.1. Message Dispatching of received SNMP Messages",
      "section_title": true,
      "ja": "4.2.1. 受信したSNMPメッセージのメッセージディスパッチ"
    },
    {
      "indent": 3,
      "text": "1) The snmpInPkts counter [RFC3418] is incremented.",
      "ja": "1）snmpInPktsカウンター[RFC3418]が増加します。"
    },
    {
      "indent": 3,
      "text": "2) The version of the SNMP message is determined in an implementation-dependent manner. If the packet cannot be sufficiently parsed to determine the version of the SNMP message, then the snmpInASNParseErrs [RFC3418] counter is incremented, and the message is discarded without further processing. If the version is not supported, then the snmpInBadVersions [RFC3418] counter is incremented, and the message is discarded without further processing.",
      "ja": "2）SNMPメッセージのバージョンは、実装に依存する方法で決定されます。パケットを十分に解析してSNMPメッセージのバージョンを判別できない場合、snmpInASNParseErrs [RFC3418]カウンターが増分され、メッセージはそれ以上処理されずに破棄されます。バージョンがサポートされていない場合、snmpInBadVersions [RFC3418]カウンターがインクリメントされ、メッセージはそれ以上処理されずに破棄されます。"
    },
    {
      "indent": 3,
      "text": "3) The origin transportDomain and origin transportAddress are determined.",
      "ja": "3）オリジントランスポートドメインとオリジントランスポートアドレスが決定されます。"
    },
    {
      "indent": 3,
      "text": "4) The message is passed to the version-specific Message Processing Model which returns the abstract data elements required by the Dispatcher. This is performed using the abstract service primitive:",
      "ja": "4）メッセージは、バージョン固有のメッセージ処理モデルに渡され、Dispatcherに必要な抽象データ要素が返されます。これは、抽象サービスプリミティブを使用して実行されます。"
    },
    {
      "indent": 6,
      "text": "result =                        -- SUCCESS or errorIndication\n  prepareDataElements(\n  IN   transportDomain          -- origin as determined in step 3.\n  IN   transportAddress         -- origin as determined in step 3.\n  IN   wholeMsg                 -- as received from the network\n  IN   wholeMsgLength           -- as received from the network\n  OUT  messageProcessingModel   -- typically, SNMP version\n  OUT  securityModel            -- Security Model specified\n  OUT  securityName             -- on behalf of this principal\n  OUT  securityLevel            -- Level of Security specified\n  OUT  contextEngineID          -- data from/at this entity\n  OUT  contextName              -- data from/in this context\n  OUT  pduVersion               -- the version of the PDU\n  OUT  PDU                      -- SNMP Protocol Data Unit\n  OUT  pduType                  -- SNMP PDU type\n  OUT  sendPduHandle            -- handle for a matched request\n  OUT  maxSizeResponseScopedPDU -- maximum size of Response PDU\n  OUT  statusInformation        -- success or errorIndication\n                                -- (error counter OID and value\n                                -- when errorIndication)\n  OUT  stateReference           -- reference to state information\n                                -- to be used for a possible\n       )                        -- Response",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "5) If the result is a FAILURE errorIndication, the message is discarded without further processing.",
      "ja": "5）結果がFAILURE errorIndicationの場合、メッセージはそれ以上処理されずに破棄されます。"
    },
    {
      "indent": 3,
      "text": "6) At this point, the abstract data elements have been prepared and processing continues as described in Section 4.2.2, PDU Dispatching for Incoming Messages.",
      "ja": "6）この時点で、抽象データ要素が準備され、セクション4.2.2、着信メッセージのPDUディスパッチで説明されているように処理が続行されます。"
    },
    {
      "indent": 0,
      "text": "4.2.2. PDU Dispatching for Incoming Messages",
      "section_title": true,
      "ja": "4.2.2. 着信メッセージのPDUディスパッチ"
    },
    {
      "indent": 3,
      "text": "The elements of procedure for the dispatching of PDUs depends on the value of sendPduHandle. If the value of sendPduHandle is <none>, then this is a request or notification and the procedures specified in Section 4.2.2.1 apply. If the value of snmpPduHandle is not <none>, then this is a response and the procedures specified in Section 4.2.2.2 apply.",
      "ja": "PDUのディスパッチ手順の要素は、sendPduHandleの値によって異なります。 sendPduHandleの値が<none>の場合、これは要求または通知であり、セクション4.2.2.1で指定された手順が適用されます。 snmpPduHandleの値が<none>でない場合、これは応答であり、セクション4.2.2.2で指定された手順が適用されます。"
    },
    {
      "indent": 0,
      "text": "4.2.2.1. Incoming Requests and Notifications",
      "section_title": true,
      "ja": "4.2.2.1. 受信リクエストと通知"
    },
    {
      "indent": 3,
      "text": "The following procedures are followed for the dispatching of PDUs when the value of sendPduHandle is <none>, indicating this is a request or notification.",
      "ja": "sendPduHandleの値が<none>の場合、PDUのディスパッチについては、次の手順に従います。これは、これが要求または通知であることを示します。"
    },
    {
      "indent": 3,
      "text": "1) The combination of contextEngineID and pduType is used to determine which application has registered for this request or notification.",
      "ja": "1）contextEngineIDとpduTypeの組み合わせを使用して、この要求または通知に登録されているアプリケーションを判別します。"
    },
    {
      "indent": 3,
      "text": "2) If no application has registered for the combination, then:",
      "ja": "2）組み合わせにアプリケーションが登録されていない場合："
    },
    {
      "indent": 6,
      "text": "a) The snmpUnknownPDUHandlers counter is incremented.",
      "ja": "a) snmpUnknownPDUHandlersカウンタが増加します。"
    },
    {
      "indent": 6,
      "text": "b) A Response message is generated using the abstract service primitive:",
      "ja": "b) 応答メッセージは、抽象サービスプリミティブを使用して生成されます。"
    },
    {
      "indent": 9,
      "text": "result = -- SUCCESS or FAILURE prepareResponseMessage( IN messageProcessingModel -- as provided by MP module IN securityModel -- as provided by MP module IN securityName -- as provided by MP module IN securityLevel -- as provided by MP module IN contextEngineID -- as provided by MP module IN contextName -- as provided by MP module IN pduVersion -- as provided by MP module IN PDU -- as provided by MP module IN maxSizeResponseScopedPDU -- as provided by MP module IN stateReference -- as provided by MP module IN statusInformation -- errorIndication plus -- snmpUnknownPDUHandlers OID -- value pair. OUT destTransportDomain -- destination transportDomain OUT destTransportAddress -- destination transportAddress OUT outgoingMessage -- the message to send OUT outgoingMessageLength -- its length )",
      "ja": "result =-SUCCESSまたはFAILURE prepareResponseMessage（IN messageProcessingModel-MPモジュールIN securityModelによって提供される-MPモジュールIN securityNameによって提供される-MPモジュールIN securityLevelによって提供される-MPモジュールIN contextEngineIDによって提供される-as MPモジュールINによって提供されるcontextName-MPモジュールINによって提供されるpduVersion-MPモジュールIN PDUによって提供される-MPモジュールINによって提供されるmaxSizeResponseScopedPDU-MPモジュールINによって提供されるstateReference-MPモジュールINによって提供されるstatusInformation-errorIndication plus-snmpUnknownPDUHandlers OID-値のペアOUT destTransportDomain-宛先transportDomain OUT destTransportAddress-宛先transportAddress OUT outgoingMessage-送信するメッセージOUT outgoingMessageLength-その長さ）"
    },
    {
      "indent": 6,
      "text": "c) If the result is SUCCESS, then the prepared message is sent to the originator of the request as identified by the transportDomain and transportAddress. The transport used to send the outgoingMessage is returned via destTransportDomain, and the address to which it was sent is returned via destTransportAddress.",
      "ja": "c) 結果がSUCCESSの場合、transportDomainおよびtransportAddressで識別されるように、準備されたメッセージが要求の発信者に送信されます。 outgoingMessageの送信に使用されるトランスポートはdestTransportDomainを介して返され、送信先のアドレスはdestTransportAddressを介して返されます。"
    },
    {
      "indent": 6,
      "text": "d) The incoming message is discarded without further processing. Message Processing for this message is complete.",
      "ja": "d) 着信メッセージはそれ以上処理されずに破棄されます。このメッセージのメッセージ処理が完了しました。"
    },
    {
      "indent": 3,
      "text": "3) The PDU is dispatched to the application, using the abstract service primitive:",
      "ja": "3）抽象サービスプリミティブを使用して、PDUがアプリケーションにディスパッチされます。"
    },
    {
      "indent": 6,
      "text": "processPdu( -- process Request/Notification IN messageProcessingModel -- as provided by MP module IN securityModel -- as provided by MP module IN securityName -- as provided by MP module IN securityLevel -- as provided by MP module IN contextEngineID -- as provided by MP module IN contextName -- as provided by MP module IN pduVersion -- as provided by MP module IN PDU -- as provided by MP module IN maxSizeResponseScopedPDU -- as provided by MP module IN stateReference -- as provided by MP module -- needed when sending response )",
      "ja": "processPdu（-リクエスト/通知INメッセージを処理しますProcessingModel-MPモジュールINによって提供されるsecurityModel-MPモジュールINによって提供されるsecurityName-MPモジュールIN securityLevelによって提供される-MPモジュールIN contextEngineIDによって提供される-提供されるMPモジュールIN contextNameによって-MPモジュールIN pduVersionによって提供-MPモジュールIN PDUによって提供-MPモジュールIN maxSizeResponseScopedPDUによって提供-MPモジュールIN stateReferenceによって提供-MPモジュールによって提供-応答を送信するときに必要）"
    },
    {
      "indent": 6,
      "text": "Message processing for this message is complete.",
      "ja": "このメッセージのメッセージ処理が完了しました。"
    },
    {
      "indent": 0,
      "text": "4.2.2.2. Incoming Responses",
      "section_title": true,
      "ja": "4.2.2.2. 着信応答"
    },
    {
      "indent": 3,
      "text": "The following procedures are followed for the dispatching of PDUs when the value of sendPduHandle is not <none>, indicating this is a response.",
      "ja": "sendPduHandleの値が<none>でない場合のPDUのディスパッチについては、これが応答であることを示す次の手順に従います。"
    },
    {
      "indent": 3,
      "text": "1) The value of sendPduHandle is used to determine, in an implementation-defined manner, which application is waiting for a response associated with this sendPduHandle.",
      "ja": "1）sendPduHandleの値は、実装定義の方法で、どのアプリケーションがこのsendPduHandleに関連付けられた応答を待っているかを判別するために使用されます。"
    },
    {
      "indent": 3,
      "text": "2) If no waiting application is found, the message is discarded without further processing, and the stateReference is released. The snmpUnknownPDUHandlers counter is incremented. Message Processing is complete for this message.",
      "ja": "2）待機中のアプリケーションが見つからない場合、メッセージは破棄され、それ以上の処理は行われず、stateReferenceが解放されます。 snmpUnknownPDUHandlersカウンタが増加します。このメッセージのメッセージ処理が完了しました。"
    },
    {
      "indent": 3,
      "text": "3) Any cached information, including stateReference, about the message is discarded.",
      "ja": "3）メッセージに関するすべてのキャッシュされた情報（stateReferenceを含む）は破棄されます。"
    },
    {
      "indent": 3,
      "text": "4) The response is dispatched to the application using the abstract service primitive:",
      "ja": "4）応答は、抽象サービスプリミティブを使用してアプリケーションにディスパッチされます。"
    },
    {
      "indent": 6,
      "text": "processResponsePdu( -- process Response PDU IN messageProcessingModel -- provided by the MP module IN securityModel -- provided by the MP module IN securityName -- provided by the MP module IN securityLevel -- provided by the MP module IN contextEngineID -- provided by the MP module IN contextName -- provided by the MP module IN pduVersion -- provided by the MP module IN PDU -- provided by the MP module IN statusInformation -- provided by the MP module IN sendPduHandle -- provided by the MP module )",
      "ja": "processResponsePdu（-プロセス応答PDU IN messageProcessingModel-MPモジュールIN securityModelにより提供-MPモジュールIN securityNameにより提供-MPモジュールIN securityLevelにより提供-MPモジュールIN contextEngineIDにより提供-により提供MPモジュールIN contextName-MPモジュールIN pduVersionにより提供-MPモジュールIN PDUにより提供-MPモジュールIN statusInformationにより提供-MPモジュールIN sendPduHandleにより提供-MPモジュールにより提供）"
    },
    {
      "indent": 6,
      "text": "Message Processing is complete for this message.",
      "ja": "このメッセージのメッセージ処理が完了しました。"
    },
    {
      "indent": 0,
      "text": "4.3. Application Registration for Handling PDU types",
      "section_title": true,
      "ja": "4.3. PDUタイプを処理するためのアプリケーション登録"
    },
    {
      "indent": 3,
      "text": "Applications that want to process certain PDUs must register with the PDU Dispatcher. Applications specify the combination of contextEngineID and pduType(s) for which they want to take responsibility.",
      "ja": "特定のPDUを処理するアプリケーションは、PDUディスパッチャーに登録する必要があります。アプリケーションは、責任を引き受けたいcontextEngineIDとpduTypeの組み合わせを指定します。"
    },
    {
      "indent": 3,
      "text": "1) An application registers according to the abstract interface primitive:",
      "ja": "1）アプリケーションは、抽象インターフェースプリミティブに従って登録します。"
    },
    {
      "indent": 6,
      "text": "statusInformation = -- success or errorIndication registerContextEngineID( IN contextEngineID -- take responsibility for this one IN pduType -- the pduType(s) to be registered )",
      "ja": "statusInformation =-成功またはerrorIndication registerContextEngineID（IN contextEngineID-これに対して責任を負いますIN pduType-登録されるpduType()"
    },
    {
      "indent": 6,
      "text": "Note: Implementations may provide a means of requesting registration for simultaneous multiple contextEngineID values, e.g., all contextEngineID values, and may also provide a means for requesting simultaneous registration for multiple values of the pduType.",
      "ja": "注：実装は、すべてのcontextEngineID値など、同時に複数のcontextEngineID値の登録を要求する手段を提供し、pduTypeの複数の値の同時登録を要求する手段も提供します。"
    },
    {
      "indent": 3,
      "text": "2) The parameters may be checked for validity; if they are not, then an errorIndication (invalidParameter) is returned to the application.",
      "ja": "2）パラメータの有効性をチェックできます。そうでない場合は、errorIndication（invalidParameter）がアプリケーションに返されます。"
    },
    {
      "indent": 3,
      "text": "3) Each combination of contextEngineID and pduType can be registered only once. If another application has already registered for the specified combination, then an errorIndication (alreadyRegistered) is returned to the application.",
      "ja": "3）contextEngineIDとpduTypeの各組み合わせは、一度だけ登録できます。指定した組み合わせに対して別のアプリケーションがすでに登録されている場合は、errorIndication（alreadyRegistered）がアプリケーションに返されます。"
    },
    {
      "indent": 3,
      "text": "4) Otherwise, the registration is saved so that SNMP PDUs can be dispatched to this application.",
      "ja": "4）それ以外の場合、SNMP PDUをこのアプリケーションにディスパッチできるように、登録が保存されます。"
    },
    {
      "indent": 0,
      "text": "4.4. Application Unregistration for Handling PDU Types",
      "section_title": true,
      "ja": "4.4. PDUタイプを処理するためのアプリケーション登録解除"
    },
    {
      "indent": 3,
      "text": "Applications that no longer want to process certain PDUs must unregister with the PDU Dispatcher.",
      "ja": "特定のPDUを処理する必要がなくなったアプリケーションは、PDUディスパッチャから登録解除する必要があります。"
    },
    {
      "indent": 3,
      "text": "1) An application unregisters using the abstract service primitive:",
      "ja": "1）アプリケーションは、抽象サービスプリミティブを使用して登録を解除します。"
    },
    {
      "indent": 6,
      "text": "unregisterContextEngineID( IN contextEngineID -- give up responsibility for this IN pduType -- the pduType(s) to be unregistered )",
      "ja": "unregisterContextEngineID（IN contextEngineID-このINの責任を放棄しますpduType-登録を解除するpduType（s））"
    },
    {
      "indent": 6,
      "text": "Note: Implementations may provide a means for requesting the unregistration for simultaneous multiple contextEngineID values, e.g., all contextEngineID values, and may also provide a means for requesting simultaneous unregistration for multiple values of pduType.",
      "ja": "注：実装は、すべてのcontextEngineID値など、複数のcontextEngineID値の同時登録解除を要求する手段を提供し、pduTypeの複数の値の同時登録解除を要求する手段も提供します。"
    },
    {
      "indent": 3,
      "text": "2) If the contextEngineID and pduType combination has been registered, then the registration is deleted.",
      "ja": "2）contextEngineIDとpduTypeの組み合わせが登録されている場合、その登録は削除されます。"
    },
    {
      "indent": 6,
      "text": "If no such registration exists, then the request is ignored.",
      "ja": "そのような登録が存在しない場合、要求は無視されます。"
    },
    {
      "indent": 0,
      "text": "5. Definitions",
      "section_title": true,
      "ja": "5. 定義"
    },
    {
      "indent": 0,
      "text": "5.1. Definitions for SNMP Message Processing and Dispatching",
      "section_title": true,
      "ja": "5.1. SNMPメッセージの処理とディスパッチの定義"
    },
    {
      "indent": 3,
      "text": "SNMP-MPD-MIB DEFINITIONS ::= BEGIN",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "IMPORTS MODULE-COMPLIANCE, OBJECT-GROUP FROM SNMPv2-CONF MODULE-IDENTITY, OBJECT-TYPE, snmpModules, Counter32 FROM SNMPv2-SMI;",
      "ja": "SNMPv2-CONF MODULE-IDENTITYからのOBJECT-GROUP、SNMPv2-SMIからのOBJECT-TYPE、snmpModules、Counter32からのMODULE-COMPLIANCEのインポート;"
    },
    {
      "indent": 3,
      "text": "snmpMPDMIB MODULE-IDENTITY LAST-UPDATED \"200210140000Z\" ORGANIZATION \"SNMPv3 Working Group\" CONTACT-INFO \"WG-EMail: snmpv3@lists.tislabs.com Subscribe: snmpv3-request@lists.tislabs.com",
      "ja": "snmpMPDMIB MODULE-IDENTITY LAST-UPDATED \"200210140000Z\" ORGANIZATION \"SNMPv3 Working Group\" CONTACT-INFO \"WG-EMail：snmpv3@lists.tislabs.com Subscribe：snmpv3-request@lists.tislabs.com"
    },
    {
      "indent": 21,
      "text": "Co-Chair: Russ Mundy Network Associates Laboratories postal: 15204 Omega Drive, Suite 300 Rockville, MD 20850-4601 USA",
      "ja": "共同議長：Russ Mundy Network Associates Laboratories郵便：15204 Omega Drive、Suite 300 Rockville、MD 20850-4601 USA"
    },
    {
      "indent": 21,
      "text": "EMail:      mundy@tislabs.com\nphone:      +1 301-947-7107",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 21,
      "text": "Co-Chair & Co-editor: David Harrington Enterasys Networks postal: 35 Industrial Way P. O. Box 5005 Rochester NH 03866-5005 USA EMail: dbh@enterasys.com phone: +1 603-337-2614",
      "ja": "共同議長と共同編集者：David Harrington Enterasys Networks郵便：35 Industrial Way P.O. Box 5005 Rochester NH 03866-5005 USA Eメール：dbh@enterasys.com電話：+1 603-337-2614"
    },
    {
      "indent": 21,
      "text": "Co-editor: Jeffrey Case SNMP Research, Inc. postal: 3001 Kimberlin Heights Road Knoxville, TN 37920-9716 USA EMail: case@snmp.com phone: +1 423-573-1434",
      "ja": "共同編集者：Jeffrey Case SNMP Research、Inc.郵便：3001 Kimberlin Heights Road Knoxville、TN 37920-9716 USAメール：case@snmp.com電話：+1 423-573-1434"
    },
    {
      "indent": 21,
      "text": "Co-editor: Randy Presuhn BMC Software, Inc. postal: 2141 North First Street San Jose, CA 95131 USA EMail: randy_presuhn@bmc.com phone: +1 408-546-1006",
      "ja": "共同編集者：Randy Presuhn BMC Software、Inc.郵便：2141 North First Street San Jose、CA 95131 USAメール：randy_presuhn@bmc.com電話：+1 408-546-1006"
    },
    {
      "indent": 7,
      "text": " Co-editor: Bert Wijnen Lucent Technologies postal: Schagen 33 3461 GL Linschoten Netherlands EMail: bwijnen@lucent.com phone: +31 348-680-485 \" DESCRIPTION \"The MIB for Message Processing and Dispatching",
      "ja": "共同編集者：Bert Wijnen Lucent Technologies郵便：Schagen 33 3461 GL Linschotenオランダメール：bwijnen@lucent.com電話：+31 348-680-485「説明」メッセージ処理とディスパッチ用のMIB"
    },
    {
      "indent": 7,
      "text": " Copyright (C) The Internet Society (2002). This version of this MIB module is part of RFC 3412; see the RFC itself for full legal notices. \" REVISION \"200210140000Z\" -- 14 October 2002 DESCRIPTION \"Updated addresses, published as RFC 3412.\" REVISION \"199905041636Z\" -- 4 May 1999 DESCRIPTION \"Updated addresses, published as RFC 2572.\"",
      "ja": "Copyright（C）The Internet Society（2002）。このMIBモジュールのこのバージョンはRFC 3412の一部です。完全な法的通知については、RFC自体を参照してください。 \"改訂\" 200210140000Z \"-2002年10月14日説明\"更新されたアドレス、RFC 3412として公開されました。 \"改訂\" 199905041636Z \"-1999年5月4日説明\"更新されたアドレス、RFC 2572として公開されました。 \""
    },
    {
      "indent": 7,
      "text": "REVISION     \"199709300000Z\"            -- 30 September 1997\nDESCRIPTION  \"Original version, published as RFC 2272.\"\n::= { snmpModules 11 }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "-- Administrative assignments ***************************************",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "snmpMPDAdmin           OBJECT IDENTIFIER ::= { snmpMPDMIB 1 }\nsnmpMPDMIBObjects      OBJECT IDENTIFIER ::= { snmpMPDMIB 2 }\nsnmpMPDMIBConformance  OBJECT IDENTIFIER ::= { snmpMPDMIB 3 }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "-- Statistics for SNMP Messages *************************************",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "snmpMPDStats           OBJECT IDENTIFIER ::= { snmpMPDMIBObjects 1 }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "snmpUnknownSecurityModels OBJECT-TYPE\n    SYNTAX       Counter32\n    MAX-ACCESS   read-only\n    STATUS       current\n    DESCRIPTION \"The total number of packets received by the SNMP\n                 engine which were dropped because they referenced a\n                 securityModel that was not known to or supported by\n                 the SNMP engine.\n                \"\n    ::= { snmpMPDStats 1 }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "snmpInvalidMsgs OBJECT-TYPE\n    SYNTAX       Counter32\n    MAX-ACCESS   read-only\n    STATUS       current\n    DESCRIPTION \"The total number of packets received by the SNMP\n                 engine which were dropped because there were invalid\n                 or inconsistent components in the SNMP message.\n                \"\n    ::= { snmpMPDStats 2 }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "snmpUnknownPDUHandlers OBJECT-TYPE\n    SYNTAX       Counter32\n    MAX-ACCESS   read-only\n    STATUS       current\n    DESCRIPTION \"The total number of packets received by the SNMP\n                 engine which were dropped because the PDU contained\n                 in the packet could not be passed to an application\n                 responsible for handling the pduType, e.g. no SNMP\n                 application had registered for the proper\n                 combination of the contextEngineID and the pduType.\n                \"\n    ::= { snmpMPDStats 3 }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "-- Conformance information ******************************************",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "snmpMPDMIBCompliances OBJECT IDENTIFIER ::= {snmpMPDMIBConformance 1}\nsnmpMPDMIBGroups      OBJECT IDENTIFIER ::= {snmpMPDMIBConformance 2}",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "-- Compliance statements",
      "ja": "-コンプライアンスステートメント"
    },
    {
      "indent": 3,
      "text": "snmpMPDCompliance MODULE-COMPLIANCE\n    STATUS       current\n    DESCRIPTION \"The compliance statement for SNMP entities which\n                 implement the SNMP-MPD-MIB.\n                \"\n    MODULE    -- this module\n        MANDATORY-GROUPS { snmpMPDGroup }\n    ::= { snmpMPDMIBCompliances 1 }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "snmpMPDGroup OBJECT-GROUP\n    OBJECTS {\n              snmpUnknownSecurityModels,\n              snmpInvalidMsgs,\n              snmpUnknownPDUHandlers\n            }\n    STATUS       current\n    DESCRIPTION \"A collection of objects providing for remote\n                 monitoring of the SNMP Message Processing and\n                 Dispatching process.\n                \"\n    ::= { snmpMPDMIBGroups 1 }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "END",
      "ja": "終わり"
    },
    {
      "indent": 0,
      "text": "6. The SNMPv3 Message Format",
      "section_title": true,
      "ja": "6. SNMPv3メッセージ形式"
    },
    {
      "indent": 3,
      "text": "This section defines the SNMPv3 message format and the corresponding SNMP version 3 Message Processing Model (v3MP).",
      "ja": "このセクションでは、SNMPv3メッセージ形式と、対応するSNMPバージョン3メッセージ処理モデル（v3MP）を定義します。"
    },
    {
      "indent": 3,
      "text": "SNMPv3MessageSyntax DEFINITIONS IMPLICIT TAGS ::= BEGIN",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 7,
      "text": "SNMPv3Message ::= SEQUENCE {\n    -- identify the layout of the SNMPv3Message\n    -- this element is in same position as in SNMPv1\n    -- and SNMPv2c, allowing recognition\n    -- the value 3 is used for snmpv3\n    msgVersion INTEGER ( 0 .. 2147483647 ),\n    -- administrative parameters\n    msgGlobalData HeaderData,\n    -- security model-specific parameters\n    -- format defined by Security Model msgSecurityParameters OCTET STRING,\n    msgData  ScopedPduData\n}",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 7,
      "text": "HeaderData ::= SEQUENCE {\n    msgID      INTEGER (0..2147483647),\n    msgMaxSize INTEGER (484..2147483647),",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 11,
      "text": "msgFlags   OCTET STRING (SIZE(1)),\n           --  .... ...1   authFlag\n           --  .... ..1.   privFlag\n           --  .... .1..   reportableFlag\n           --              Please observe:\n           --  .... ..00   is OK, means noAuthNoPriv\n           --  .... ..01   is OK, means authNoPriv\n           --  .... ..10   reserved, MUST NOT be used.\n           --  .... ..11   is OK, means authPriv",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 7,
      "text": " msgSecurityModel INTEGER (1..2147483647) }",
      "ja": "msgSecurityModel INTEGER（1..2147483647）}"
    },
    {
      "indent": 7,
      "text": "ScopedPduData ::= CHOICE {\n    plaintext    ScopedPDU,\n    encryptedPDU OCTET STRING  -- encrypted scopedPDU value\n}",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "    ScopedPDU ::= SEQUENCE {\n        contextEngineID  OCTET STRING,\n        contextName      OCTET STRING,\n        data             ANY -- e.g., PDUs as defined in [RFC3416]\n    }\nEND",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "6.1. msgVersion",
      "section_title": true,
      "ja": "6.1. msgVersion"
    },
    {
      "indent": 3,
      "text": "The msgVersion field is set to snmpv3(3) and identifies the message as an SNMP version 3 Message.",
      "ja": "msgVersionフィールドはsnmpv3（3）に設定され、メッセージをSNMPバージョン3メッセージとして識別します。"
    },
    {
      "indent": 0,
      "text": "6.2. msgID",
      "section_title": true,
      "ja": "6.2. msgID"
    },
    {
      "indent": 3,
      "text": "The msgID is used between two SNMP entities to coordinate request messages and responses, and by the v3MP to coordinate the processing of the message by different subsystem models within the architecture.",
      "ja": "msgIDは、2つのSNMPエンティティ間で要求メッセージと応答を調整するために使用され、v3MPによって、アーキテクチャ内の異なるサブシステムモデルによるメッセージの処理を調整するために使用されます。"
    },
    {
      "indent": 3,
      "text": "Values for msgID SHOULD be generated in a manner that avoids re-use of any outstanding values. Doing so provides protection against some replay attacks. One possible implementation strategy would be to use the low-order bits of snmpEngineBoots [RFC3411] as the high-order",
      "ja": "msgIDの値は、未処理の値の再利用を回避する方法で生成する必要があります（SHOULD）。そうすることで、一部のリプレイ攻撃に対する保護を提供します。 1つの可能な実装戦略は、snmpEngineBoots [RFC3411]の下位ビットを上位として使用することです。"
    },
    {
      "indent": 3,
      "text": "portion of the msgID value and a monotonically increasing integer for the low-order portion of msgID.",
      "ja": "msgID値の部分と、msgIDの下位部分の単調に増加する整数。"
    },
    {
      "indent": 3,
      "text": "Note that the request-id in a PDU may be used by SNMP applications to identify the PDU; the msgID is used by the engine to identify the message which carries a PDU. The engine needs to identify the message even if decryption of the PDU (and request-id) fails. No assumption should be made that the value of the msgID and the value of the request-id are equivalent.",
      "ja": "PDU内のrequest-idは、SNMPアプリケーションがPDUを識別するために使用できます。エンジンはmsgIDを使用して、PDUを伝送するメッセージを識別します。エンジンは、PDU（およびリクエストID）の復号化が失敗した場合でもメッセージを識別する必要があります。 msgIDの値とrequest-idの値が同等であるとは想定しないでください。"
    },
    {
      "indent": 3,
      "text": "The value of the msgID field for a response takes the value of the msgID field from the message to which it is a response. By use of the msgID value, an engine can distinguish the (potentially multiple) outstanding requests, and thereby correlate incoming responses with outstanding requests. In cases where an unreliable datagram service is used, the msgID also provides a simple means of identifying messages duplicated by the network. If a request is retransmitted, a new msgID value SHOULD be used for each retransmission.",
      "ja": "応答のmsgIDフィールドの値は、応答先のメッセージからmsgIDフィールドの値を取ります。 msgID値を使用することにより、エンジンは（潜在的に複数の）未解決の要求を区別し、それによって着信応答を未解決の要求と関連付けることができます。信頼性の低いデータグラムサービスが使用されている場合、msgIDは、ネットワークによって複製されたメッセージを識別する簡単な手段も提供します。リクエストが再送信される場合、再送信ごとに新しいmsgID値を使用する必要があります（SHOULD）。"
    },
    {
      "indent": 0,
      "text": "6.3. msgMaxSize",
      "section_title": true,
      "ja": "6.3. msgMaxSize"
    },
    {
      "indent": 3,
      "text": "The msgMaxSize field of the message conveys the maximum message size supported by the sender of the message, i.e., the maximum message size that the sender can accept when another SNMP engine sends an SNMP message (be it a response or any other message) to the sender of this message on the transport in use for this message.",
      "ja": "メッセージのmsgMaxSizeフィールドは、メッセージの送信者がサポートする最大メッセージサイズ、つまり、別のSNMPエンジンがSNMPメッセージ（応答またはその他のメッセージ）を送信したときに送信者が受け入れることができる最大メッセージサイズを伝えます。このメッセージに使用されているトランスポート上のこのメッセージの送信者。"
    },
    {
      "indent": 3,
      "text": "When an SNMP message is being generated, the msgMaxSize is provided by the SNMP engine which generates the message. At the receiving SNMP engine, the msgMaxSize is used to determine the maximum message size the sender can accommodate.",
      "ja": "SNMPメッセージが生成されている場合、msgMaxSizeは、メッセージを生成するSNMPエンジンによって提供されます。受信SNMPエンジンでは、msgMaxSizeを使用して、送信者が対応できる最大メッセージサイズを決定します。"
    },
    {
      "indent": 0,
      "text": "6.4. msgFlags",
      "section_title": true,
      "ja": "6.4. msgFlags"
    },
    {
      "indent": 3,
      "text": "The msgFlags field of the message contains several bit fields which control processing of the message.",
      "ja": "メッセージのmsgFlagsフィールドには、メッセージの処理を制御するいくつかのビットフィールドが含まれています。"
    },
    {
      "indent": 3,
      "text": "The reportableFlag is a secondary aid in determining whether a Report PDU MUST be sent. It is only used in cases where the PDU portion of a message cannot be decoded, due to, for example, an incorrect encryption key. If the PDU can be decoded, the PDU type forms the basis for decisions on sending Report PDUs.",
      "ja": "reportableFlagは、レポートPDUを送信する必要があるかどうかを判断するための補助的な手段です。たとえば、不正な暗号化キーが原因で、メッセージのPDU部分をデコードできない場合にのみ使用されます。 PDUをデコードできる場合、PDUタイプはレポートPDUの送信に関する決定の基礎を形成します。"
    },
    {
      "indent": 3,
      "text": "When the reportableFlag is used, if its value is one, a Report PDU MUST be returned to the sender under those conditions which can cause the generation of Report PDUs. Similarly, when the reportableFlag is used and its value is zero, then a Report PDU MUST NOT be sent. The reportableFlag MUST always be zero when the message contains a PDU from the Unconfirmed Class, such as a Report PDU, a response-type PDU (such as a Response PDU), or an unacknowledged notification-type PDU (such as an SNMPv2-trap PDU). The reportableFlag MUST always be one for a PDU from the Confirmed Class, including request-type PDUs (such as a Get PDU) and acknowledged notification-type PDUs (such as an Inform PDU).",
      "ja": "reportableFlagが使用されている場合、その値が1の場合、レポートPDUの生成を引き起こす可能性のある条件下で、レポートPDUを送信者に返す必要があります。同様に、reportableFlagが使用され、その値がゼロの場合、レポートPDUを送信してはなりません（MUST NOT）。メッセージに未確認クラスからのPDU（レポートPDU、応答タイプPDU（応答PDUなど）、または未確認の通知タイプPDU（SNMPv2-trapなど）が含まれている場合、reportableFlagは常にゼロでなければなりません。 PDU）。 reportableFlagは、要求タイプのPDU（Get PDUなど）および確認済みの通知タイプのPDU（Inform PDUなど）を含む、確認済みクラスからのPDUに対して常に1つである必要があります。"
    },
    {
      "indent": 3,
      "text": "If the reportableFlag is set to one for a message containing a PDU from the Unconfirmed Class, such as a Report PDU, a response-type PDU (such as a Response PDU), or an unacknowledged notification-type PDU (such as an SNMPv2-trap PDU), then the receiver of that message MUST process it as though the reportableFlag had been set to zero.",
      "ja": "レポートPDU、応答タイプPDU（応答PDUなど）、または未確認通知タイプPDU（SNMPv2-など）などの未確認クラスからのPDUを含むメッセージに対してreportableFlagが1に設定されている場合トラップPDU）、次に、そのメッセージの受信者は、reportableFlagがゼロに設定されているかのようにそれを処理する必要があります。"
    },
    {
      "indent": 3,
      "text": "If the reportableFlag is set to zero for a message containing a request-type PDU (such as a Get PDU) or an acknowledged notification-type PDU (such as an Inform PDU), then the receiver of that message MUST process it as though the reportableFlag had been set to one.",
      "ja": "要求タイプのPDU（Get PDUなど）または確認済みの通知タイプのPDU（Inform PDUなど）を含むメッセージのreportableFlagがゼロに設定されている場合、そのメッセージの受信者はそれをreportableFlagが1に設定されていました。"
    },
    {
      "indent": 3,
      "text": "Report PDUs are generated directly by the SNMPv3 Message Processing Model, and support engine-to-engine communications, but may be passed to applications for processing.",
      "ja": "レポートPDUは、SNMPv3メッセージ処理モデルによって直接生成され、エンジン間の通信をサポートしますが、処理のためにアプリケーションに渡すことができます。"
    },
    {
      "indent": 3,
      "text": "An SNMP engine that receives a reportPDU may use it to determine what kind of problem was detected by the remote SNMP engine. It can do so based on the error counter included as the first (and only) varBind of the reportPDU. Based on the detected error, the SNMP engine may try to send a corrected SNMP message. If that is not possible, it may pass an indication of the error to the application on whose behalf the failed SNMP request was issued.",
      "ja": "reportPDUを受信するSNMPエンジンは、それを使用して、リモートSNMPエンジンによって検出された問題の種類を判別できます。これは、reportPDUの最初の（そして唯一の）varBindとして含まれているエラーカウンターに基づいて行うことができます。検出されたエラーに基づいて、SNMPエンジンは修正されたSNMPメッセージを送信しようとする場合があります。それが不可能な場合は、失敗したSNMP要求が発行されたアプリケーションにエラーの表示を渡すことがあります。"
    },
    {
      "indent": 3,
      "text": "The authFlag and privFlag portions of the msgFlags field are set by the sender to indicate the securityLevel that was applied to the message before it was sent on the wire. The receiver of the message MUST apply the same securityLevel when the message is received and the contents are being processed.",
      "ja": "msgFlagsフィールドのauthFlagとprivFlagの部分は、送信者が設定して、メッセージがネットワークに送信される前にメッセージに適用されたsecurityLevelを示します。メッセージの受信者は、メッセージが受信されて内容が処理されているときに同じsecurityLevelを適用する必要があります。"
    },
    {
      "indent": 3,
      "text": "There are three securityLevels, namely noAuthNoPriv, which is less than authNoPriv, which is in turn less than authPriv. See the SNMP architecture document [RFC3411] for details about the securityLevel.",
      "ja": "3つのsecurityLevel、つまりnoAuthNoPrivがあり、これはauthNoPrivより小さく、次にauthPrivより小さくなっています。 securityLevelの詳細については、SNMPアーキテクチャドキュメント[RFC3411]を参照してください。"
    },
    {
      "indent": 3,
      "text": "a) authFlag",
      "ja": "a) authFlag"
    },
    {
      "indent": 6,
      "text": "If the authFlag is set to one, then the securityModel used by the SNMP engine which sent the message MUST identify the securityName on whose behalf the SNMP message was generated and MUST provide, in a securityModel-specific manner, sufficient data for the receiver of the message to be able to authenticate that identification. In general, this authentication will allow the receiver to determine with reasonable certainty that the message was:",
      "ja": "authFlagが1に設定されている場合、メッセージを送信したSNMPエンジンが使用するsecurityModelは、その代わりにSNMPメッセージが生成されたsecurityNameを識別し、セキュリティモデル固有の方法で、その識別を認証できるようにするメッセージ。一般に、この認証により、受信者はメッセージが次のとおりであったことを妥当な確実性で判断できます。"
    },
    {
      "indent": 6,
      "text": "- sent on behalf of the principal associated with the securityName,",
      "ja": "- securityNameに関連付けられたプリンシパルに代わって送信されます。"
    },
    {
      "indent": 6,
      "text": "- was not redirected,",
      "ja": "- リダイレクトされなかった、"
    },
    {
      "indent": 6,
      "text": "- was not modified in transit, and",
      "ja": "- 輸送中に変更されなかった、および"
    },
    {
      "indent": 6,
      "text": "- was not replayed.",
      "ja": "- 再生されませんでした。"
    },
    {
      "indent": 6,
      "text": "If the authFlag is zero, then the securityModel used by the SNMP engine which sent the message MUST identify the securityName on whose behalf the SNMP message was generated but it does not need to provide sufficient data for the receiver of the message to authenticate the identification, as there is no need to authenticate the message in this case.",
      "ja": "authFlagが0の場合、メッセージを送信したSNMPエンジンが使用するsecurityModelは、SNMPメッセージが生成されたsecurityNameを識別しなければなりませんが、メッセージの受信者が識別を認証するために十分なデータを提供する必要はありません。この場合、メッセージを認証する必要がないためです。"
    },
    {
      "indent": 3,
      "text": "b) privFlag",
      "ja": "b) privFlag"
    },
    {
      "indent": 6,
      "text": "If the privFlag is set, then the securityModel used by the SNMP engine which sent the message MUST also protect the scopedPDU in an SNMP message from disclosure, i.e., it MUST encrypt/decrypt the scopedPDU. If the privFlag is zero, then the securityModel in use does not need to protect the data from disclosure.",
      "ja": "privFlagが設定されている場合、メッセージを送信したSNMPエンジンが使用するsecurityModelは、SNMPメッセージ内のscopedPDUを開示から保護する必要があります。つまり、scopedPDUを暗号化/復号化する必要があります。 privFlagがゼロの場合、使用中のsecurityModelはデータを開示から保護する必要はありません。"
    },
    {
      "indent": 6,
      "text": "It is an explicit requirement of the SNMP architecture that if privacy is selected, then authentication is also required. That means that if the privFlag is set, then the authFlag MUST also be set to one.",
      "ja": "SNMPアーキテクチャの明示的な要件であり、プライバシーが選択されている場合は、認証も必要です。つまり、privFlagが設定されている場合、authFlagも1に設定する必要があります。"
    },
    {
      "indent": 6,
      "text": "The combination of the authFlag and the privFlag comprises a Level of Security as follows:",
      "ja": "authFlagとprivFlagの組み合わせは、次のようなセキュリティレベルを構成します。"
    },
    {
      "indent": 9,
      "text": "authFlag zero, privFlag zero -> securityLevel is noAuthNoPriv\nauthFlag zero, privFlag one  -> invalid combination, see below\nauthFlag one,  privFlag zero -> securityLevel is authNoPriv\nauthFlag one,  privFlag one  -> securityLevel is authPriv",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "The elements of procedure (see below) describe the action to be taken when the invalid combination of authFlag equal to zero and privFlag equal to one is encountered.",
      "ja": "手順の要素（以下を参照）は、authFlagが0に等しく、privFlagが1に無効な組み合わせに遭遇したときに実行されるアクションを記述しています。"
    },
    {
      "indent": 3,
      "text": "The remaining bits in msgFlags are reserved, and MUST be set to zero when sending a message and SHOULD be ignored when receiving a message.",
      "ja": "msgFlagsの残りのビットは予約されており、メッセージの送信時にはゼロに設定する必要があり、メッセージの受信時には無視する必要があります（SHOULD）。"
    },
    {
      "indent": 0,
      "text": "6.5. msgSecurityModel",
      "section_title": true,
      "ja": "6.5. msgSecurityModel"
    },
    {
      "indent": 3,
      "text": "The v3MP supports the concurrent existence of multiple Security Models to provide security services for SNMPv3 messages. The msgSecurityModel field in an SNMPv3 Message identifies which Security Model was used by the sender to generate the message and therefore which securityModel MUST be used by the receiver to perform security processing for the message. The mapping to the appropriate securityModel implementation within an SNMP engine is accomplished in an implementation-dependent manner.",
      "ja": "v3MPは複数のセキュリティモデルの同時存在をサポートし、SNMPv3メッセージにセキュリティサービスを提供します。 SNMPv3メッセージのmsgSecurityModelフィールドは、メッセージを生成するために送信者が使用したセキュリティモデルを識別します。したがって、メッセージのセキュリティ処理を実行するために受信者が使用するセキュリティモデルを識別しなければなりません。 SNMPエンジン内の適切なsecurityModel実装へのマッピングは、実装依存の方法で行われます。"
    },
    {
      "indent": 0,
      "text": "6.6. msgSecurityParameters",
      "section_title": true,
      "ja": "6.6. msgセキュリティパラメータ"
    },
    {
      "indent": 3,
      "text": "The msgSecurityParameters field of the SNMPv3 Message is used for communication between the Security Model modules in the sending and receiving SNMP engines. The data in the msgSecurityParameters field is used exclusively by the Security Model, and the contents and format of the data is defined by the Security Model. This OCTET STRING is not interpreted by the v3MP, but is passed to the local implementation of the Security Model indicated by the msgSecurityModel field in the message.",
      "ja": "SNMPv3メッセージのmsgSecurityParametersフィールドは、送信および受信SNMPエンジンのセキュリティモデルモジュール間の通信に使用されます。 msgSecurityParametersフィールドのデータはセキュリティモデルによって排他的に使用され、データの内容と形式はセキュリティモデルによって定義されます。このOCTET STRINGはv3MPによって解釈されませんが、メッセージのmsgSecurityModelフィールドによって示されるセキュリティモデルのローカル実装に渡されます。"
    },
    {
      "indent": 0,
      "text": "6.7. scopedPduData",
      "section_title": true,
      "ja": "6.7. scopedPduData"
    },
    {
      "indent": 3,
      "text": "The scopedPduData field represents either the plain text scopedPDU if the privFlag in the msgFlags is zero, or it represents an encryptedPDU (encoded as an OCTET STRING) which MUST be decrypted by the securityModel in use to produce a plaintext scopedPDU.",
      "ja": "scopedPduDataフィールドは、msgFlagsのprivFlagがゼロの場合はプレーンテキストのscopedPDUを表すか、または使用中のsecurityModelによって復号化してプレーンテキストのscopedPDUを生成する必要があるencryptedPDU（OCTET STRINGとしてエンコード）を表します。"
    },
    {
      "indent": 0,
      "text": "6.8. scopedPDU",
      "section_title": true,
      "ja": "6.8. scopedPDU"
    },
    {
      "indent": 3,
      "text": "The scopedPDU contains information to identify an administratively unique context and a PDU. The object identifiers in the PDU refer to managed objects which are (expected to be) accessible within the specified context.",
      "ja": "scopedPDUには、管理上一意のコンテキストとPDUを識別するための情報が含まれています。 PDU内のオブジェクト識別子は、指定されたコンテキスト内でアクセス可能な（予期される）管理対象オブジェクトを参照します。"
    },
    {
      "indent": 0,
      "text": "6.8.1. contextEngineID",
      "section_title": true,
      "ja": "6.8.1. contextEngineID"
    },
    {
      "indent": 3,
      "text": "The contextEngineID in the SNMPv3 message uniquely identifies, within an administrative domain, an SNMP entity that may realize an instance of a context with a particular contextName.",
      "ja": "SNMPv3メッセージのcontextEngineIDは、管理ドメイン内で、特定のcontextNameを持つコンテキストのインスタンスを実現できるSNMPエンティティを一意に識別します。"
    },
    {
      "indent": 3,
      "text": "For incoming messages, the contextEngineID is used in conjunction with the pduType to determine to which application the scopedPDU will be sent for processing.",
      "ja": "着信メッセージの場合、contextEngineIDはpduTypeと組み合わせて使用​​され、scopedPDUが処理のために送信されるアプリケーションを決定します。"
    },
    {
      "indent": 3,
      "text": "For outgoing messages, the v3MP sets the contextEngineID to the value provided by the application in the request for a message to be sent.",
      "ja": "送信メッセージの場合、v3MPはcontextEngineIDを、送信するメッセージのリクエストでアプリケーションによって提供された値に設定します。"
    },
    {
      "indent": 0,
      "text": "6.8.2. contextName",
      "section_title": true,
      "ja": "6.8.2. contextName"
    },
    {
      "indent": 3,
      "text": "The contextName field in an SNMPv3 message, in conjunction with the contextEngineID field, identifies the particular context associated with the management information contained in the PDU portion of the message. The contextName is unique within the SNMP entity specified by the contextEngineID, which may realize the managed objects referenced within the PDU. An application which originates a message provides the value for the contextName field and this value may be used during processing by an application at the receiving SNMP Engine.",
      "ja": "SNMPv3メッセージのcontextNameフィールドは、contextEngineIDフィールドとともに、メッセージのPDU部分に含まれる管理情報に関連付けられた特定のコンテキストを識別します。 contextNameは、contextEngineIDで指定されたSNMPエンティティ内で一意であり、PDU内で参照される管理対象オブジェクトを実現できます。メッセージを発信するアプリケーションは、contextNameフィールドの値を提供します。この値は、受信側のSNMPエンジンでのアプリケーションによる処理中に使用できます。"
    },
    {
      "indent": 0,
      "text": "6.8.3. data",
      "section_title": true,
      "ja": "6.8.3. データ"
    },
    {
      "indent": 3,
      "text": "The data field of the SNMPv3 Message contains the PDU. Among other things, the PDU contains the PDU type that is used by the v3MP to determine the type of the incoming SNMP message. The v3MP specifies that the PDU MUST be one of those specified in [RFC3416].",
      "ja": "SNMPv3メッセージのデータフィールドにはPDUが含まれています。特に、PDUには、v3MPが着信SNMPメッセージのタイプを判別するために使用するPDUタイプが含まれています。 v3MPは、PDUが[RFC3416]で指定されているものの1つでなければならないことを指定しています。"
    },
    {
      "indent": 0,
      "text": "7. Elements of Procedure for v3MP",
      "section_title": true,
      "ja": "7. v3MPの手順の要素"
    },
    {
      "indent": 3,
      "text": "This section describes the procedures followed by an SNMP engine when generating and processing SNMP messages according to the SNMPv3 Message Processing Model.",
      "ja": "このセクションでは、SNMPv3メッセージ処理モデルに従ってSNMPメッセージを生成および処理するときに、SNMPエンジンが従う手順について説明します。"
    },
    {
      "indent": 3,
      "text": "Please note, that for the sake of clarity and to prevent the text from being even longer and more complicated, some details were omitted from the steps below.",
      "ja": "わかりやすくするため、およびテキストがさらに長く複雑になるのを防ぐために、以下の手順では一部の詳細が省略されていることに注意してください。"
    },
    {
      "indent": 6,
      "text": "a) Some steps specify that when some error conditions are encountered when processing a received message, a message containing a Report PDU is generated and the received message is discarded without further processing. However, a Report-PDU MUST NOT be generated unless the PDU causing generation of the Report PDU can be determined to be a member of the Confirmed Class, or the reportableFlag is set to one and the PDU class cannot be determined.",
      "ja": "a) 一部の手順では、受信メッセージの処理中にエラー条件が発生した場合、レポートPDUを含むメッセージが生成され、受信メッセージはそれ以上処理されずに破棄されるように指定されています。ただし、レポートPDUの生成を引き起こしているPDUが確認済みクラスのメンバーであると判断できない場合、またはreportableFlagが1に設定されていてPDUクラスを判断できない場合を除き、レポートPDUを生成してはならない（MUST NOT）。"
    },
    {
      "indent": 6,
      "text": "b) The elements of procedure do not always explicitly indicate when state information needs to be released. The general rule is that if state information is available when a message is to be \"discarded without further processing\", then the state information should also be released at that same time.",
      "ja": "b) 手順の要素は、いつ状態情報を解放する必要があるかを常に明示的に示すとは限りません。一般的なルールは、メッセージが「それ以上処理されずに破棄される」ときに状態情報が使用可能な場合、状態情報も同時に解放する必要があるということです。"
    },
    {
      "indent": 0,
      "text": "7.1. Prepare an Outgoing SNMP Message",
      "section_title": true,
      "ja": "7.1. 発信SNMPメッセージを準備する"
    },
    {
      "indent": 3,
      "text": "This section describes the procedure followed to prepare an SNMPv3 message from the data elements passed by the Message Dispatcher.",
      "ja": "このセクションでは、メッセージディスパッチャから渡されたデータ要素からSNMPv3メッセージを準備するための手順について説明します。"
    },
    {
      "indent": 3,
      "text": "1) The Message Dispatcher may request that an SNMPv3 message containing a Read Class, Write Class, or Notification Class PDU be prepared for sending.",
      "ja": "1）メッセージディスパッチャーは、読み取りクラス、書き込みクラス、または通知クラスPDUを含むSNMPv3メッセージの送信準備を要求する場合があります。"
    },
    {
      "indent": 6,
      "text": "a) It makes such a request according to the abstract service primitive:",
      "ja": "a) 抽象サービスプリミティブに従って、このようなリクエストを行います。"
    },
    {
      "indent": 9,
      "text": "statusInformation =           -- success or errorIndication\n  prepareOutgoingMessage(\n  IN   transportDomain        -- requested transport domain\n  IN   transportAddress       -- requested destination address\n  IN   messageProcessingModel -- typically, SNMP version\n  IN   securityModel          -- Security Model to use\n  IN   securityName           -- on behalf of this principal\n  IN   securityLevel          -- Level of Security requested\n  IN   contextEngineID        -- data from/at this entity\n  IN   contextName            -- data from/in this context\n  IN   pduVersion             -- version of the PDU *\n  IN   PDU                    -- SNMP Protocol Data Unit\n  IN   expectResponse         -- TRUE or FALSE *\n  IN   sendPduHandle          -- the handle for matching\n                              -- incoming responses\n  OUT  destTransportDomain    -- destination transport domain\n  OUT  destTransportAddress   -- destination transport address\n  OUT  outgoingMessage        -- the message to send\n  OUT  outgoingMessageLength  -- the length of the message\n  )",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 6,
      "text": "* The SNMPv3 Message Processing Model does not use the values of expectResponse or pduVersion.",
      "ja": "* SNMPv3メッセージ処理モデルは、expectResponseまたはpduVersionの値を使用しません。"
    },
    {
      "indent": 6,
      "text": "b) A unique msgID is generated. The number used for msgID should not have been used recently, and MUST NOT be the same as was used for any outstanding request.",
      "ja": "b) 一意のmsgIDが生成されます。 msgIDに使用される番号は最近使用されてはならず、未処理の要求に使用されたものと同じであってはなりません。"
    },
    {
      "indent": 3,
      "text": "2) The Message Dispatcher may request that an SNMPv3 message containing a Response Class or Internal Class PDU be prepared for sending.",
      "ja": "2）メッセージディスパッチャーは、応答クラスまたは内部クラスPDUを含むSNMPv3メッセージの送信準備を要求する場合があります。"
    },
    {
      "indent": 6,
      "text": "a) It makes such a request according to the abstract service primitive:",
      "ja": "a) 抽象サービスプリミティブに従って、このようなリクエストを行います。"
    },
    {
      "indent": 9,
      "text": "result =                       -- SUCCESS or FAILURE\nprepareResponseMessage(\n IN   messageProcessingModel   -- typically, SNMP version\n IN   securityModel            -- same as on incoming request\n IN   securityName             -- same as on incoming request\n IN   securityLevel            -- same as on incoming request\n IN   contextEngineID          -- data from/at this SNMP entity\n IN   contextName              -- data from/in this context\n IN   pduVersion               -- version of the PDU\n IN   PDU                      -- SNMP Protocol Data Unit\n IN   maxSizeResponseScopedPDU -- maximum size sender can\n                               -- accept\n IN   stateReference           -- reference to state\n                               -- information presented with\n                               -- the request\n IN   statusInformation        -- success or errorIndication\n                               -- error counter OID and value\n                               -- when errorIndication\n OUT  destTransportDomain      -- destination transport domain\n OUT  destTransportAddress     -- destination transport address\n OUT  outgoingMessage          -- the message to send\n OUT  outgoingMessageLength    -- the length of the message\n )",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 6,
      "text": "b) The cached information for the original request is retrieved via the stateReference, including:",
      "ja": "b) 元のリクエストのキャッシュされた情報は、stateReferenceを介して取得されます。"
    },
    {
      "indent": 15,
      "text": "- msgID, - contextEngineID, - contextName, - securityModel, - securityName, - securityLevel, - securityStateReference, - reportableFlag, - transportDomain, and - transportAddress.",
      "ja": "- msgID、-contextEngineID、-contextName、-securityModel、-securityName、-securityLevel、-securityStateReference、-reportableFlag、-transportDomain、および-transportAddress。"
    },
    {
      "indent": 9,
      "text": "The SNMPv3 Message Processing Model does not allow cached data to be overridden, except by error indications as detailed in (3) below.",
      "ja": "SNMPv3メッセージ処理モデルでは、以下の（3）で説明されているエラー表示を除いて、キャッシュされたデータを上書きできません。"
    },
    {
      "indent": 3,
      "text": "3) If statusInformation contains values for an OID/value combination (potentially also containing a securityLevel value, contextEngineID value, or contextName value), then:",
      "ja": "3）statusInformationにOID /値の組み合わせの値が含まれている場合（場合によっては、securityLevel値、contextEngineID値、またはcontextName値も含まれている可能性があります）、次のようになります。"
    },
    {
      "indent": 6,
      "text": "a) If a PDU is provided, it is the PDU from the original request. If possible, extract the request-id and pduType.",
      "ja": "a) PDUが提供される場合、それは元の要求からのPDUです。可能であれば、request-idとpduTypeを抽出します。"
    },
    {
      "indent": 6,
      "text": "b) If the pduType is determined to not be a member of the Confirmed Class, or if the reportableFlag is zero and the pduType cannot be determined, then the original message is discarded, and no further processing is done. A result of FAILURE is returned. SNMPv3 Message Processing is complete.",
      "ja": "b) pduTypeが確認済みクラスのメンバーではないと判断された場合、またはreportableFlagがゼロでpduTypeを判断できない場合、元のメッセージは破棄され、それ以上の処理は行われません。 FAILUREの結果が返されます。 SNMPv3メッセージ処理が完了しました。"
    },
    {
      "indent": 6,
      "text": "c) A Report PDU is prepared:",
      "ja": "c) レポートPDUが準備されます。"
    },
    {
      "indent": 9,
      "text": "1) the varBindList is set to contain the OID and value from the statusInformation.",
      "ja": "1）varBindListは、OIDとstatusInformationからの値を含むように設定されます。"
    },
    {
      "indent": 9,
      "text": "2) error-status is set to 0.",
      "ja": "2）エラーステータスが0に設定されます。"
    },
    {
      "indent": 9,
      "text": "3) error-index is set to 0.",
      "ja": "3）error-indexが0に設定されている。"
    },
    {
      "indent": 9,
      "text": "4) request-id is set to the value extracted in step b). Otherwise, request-id is set to 0.",
      "ja": "4）request-idは、ステップb）で抽出された値に設定されます。それ以外の場合、request-idは0に設定されます。"
    },
    {
      "indent": 6,
      "text": "d) The errorIndication in statusInformation may be accompanied by a securityLevel value, a contextEngineID value, or a contextName value.",
      "ja": "d) statusInformationのerrorIndicationには、securityLevel値、contextEngineID値、またはcontextName値が伴う場合があります。"
    },
    {
      "indent": 9,
      "text": "1) If statusInformation contains a value for securityLevel, then securityLevel is set to that value, otherwise it is set to noAuthNoPriv.",
      "ja": "1）statusInformationにsecurityLevelの値が含まれている場合、securityLevelはその値に設定されます。それ以外の場合は、noAuthNoPrivに設定されます。"
    },
    {
      "indent": 9,
      "text": "2) If statusInformation contains a value for contextEngineID, then contextEngineID is set to that value, otherwise it is set to the value of this entity's snmpEngineID.",
      "ja": "2）statusInformationにcontextEngineIDの値が含まれている場合、contextEngineIDはその値に設定されます。それ以外の場合は、このエンティティのsnmpEngineIDの値に設定されます。"
    },
    {
      "indent": 9,
      "text": "3) If statusInformation contains a value for contextName, then contextName is set to that value, otherwise it is set to the default context of \"\" (zero-length string).",
      "ja": "3）statusInformationにcontextNameの値が含まれている場合、contextNameはその値に設定されます。それ以外の場合は、デフォルトのコンテキストである \"\"（長さゼロの文字列）に設定されます。"
    },
    {
      "indent": 6,
      "text": "e) PDU is set to refer to the new Report-PDU. The old PDU is discarded.",
      "ja": "e) PDUは、新しいReport-PDUを参照するように設定されています。古いPDUは破棄されます。"
    },
    {
      "indent": 6,
      "text": "f) Processing continues with step 6) below.",
      "ja": "f) 処理は、以下のステップ6）に進みます。"
    },
    {
      "indent": 3,
      "text": "4) If the contextEngineID is not yet determined, then the contextEngineID is determined, in an implementation-dependent manner, possibly using the transportDomain and transportAddress.",
      "ja": "4）contextEngineIDがまだ決定されていない場合、contextEngineIDは実装に依存する方法で決定されます。"
    },
    {
      "indent": 3,
      "text": "5) If the contextName is not yet determined, the contextName is set to the default context.",
      "ja": "5）contextNameがまだ決定されていない場合、contextNameはデフォルトのコンテキストに設定されます。"
    },
    {
      "indent": 3,
      "text": "6) A scopedPDU is prepared from the contextEngineID, contextName, and PDU.",
      "ja": "6）contextEngineID、contextName、およびPDUからscopedPDUが作成されます。"
    },
    {
      "indent": 3,
      "text": "7) msgGlobalData is constructed as follows:",
      "ja": "7）msgGlobalDataは次のように作成されます。"
    },
    {
      "indent": 6,
      "text": "a) The msgVersion field is set to snmpv3(3).",
      "ja": "a) msgVersionフィールドはsnmpv3（3）に設定されます。"
    },
    {
      "indent": 6,
      "text": "b) msgID is set as determined in step 1 or 2 above.",
      "ja": "b) msgIDは、上記のステップ1または2で決定されたとおりに設定されます。"
    },
    {
      "indent": 6,
      "text": "c) msgMaxSize is set to an implementation-dependent value.",
      "ja": "c) msgMaxSizeは、実装に依存する値に設定されます。"
    },
    {
      "indent": 6,
      "text": "d) msgFlags are set as follows:",
      "ja": "d) msgFlagsは次のように設定されます。"
    },
    {
      "indent": 9,
      "text": "- If securityLevel specifies noAuthNoPriv, then authFlag and privFlag are both set to zero.",
      "ja": "- securityLevelがnoAuthNoPrivを指定する場合、authFlagとprivFlagはどちらもゼロに設定されます。"
    },
    {
      "indent": 9,
      "text": "- If securityLevel specifies authNoPriv, then authFlag is set to one and privFlag is set to zero.",
      "ja": "- securityLevelがauthNoPrivを指定する場合、authFlagは1に設定され、privFlagはゼロに設定されます。"
    },
    {
      "indent": 9,
      "text": "- If securityLevel specifies authPriv, then authFlag is set to one and privFlag is set to one.",
      "ja": "- securityLevelがauthPrivを指定する場合、authFlagは1に設定され、privFlagは1に設定されます。"
    },
    {
      "indent": 9,
      "text": "- If the PDU is from the Unconfirmed Class, then the reportableFlag is set to zero.",
      "ja": "- PDUが未確認のクラスからのものである場合、reportableFlagはゼロに設定されます。"
    },
    {
      "indent": 9,
      "text": "- If the PDU is from the Confirmed Class then the reportableFlag is set to one.",
      "ja": "- PDUが確認済みクラスからのものである場合、reportableFlagは1に設定されます。"
    },
    {
      "indent": 9,
      "text": "- All other msgFlags bits are set to zero.",
      "ja": "- 他のすべてのmsgFlagsビットはゼロに設定されます。"
    },
    {
      "indent": 6,
      "text": "e) msgSecurityModel is set to the value of securityModel.",
      "ja": "e) msgSecurityModelは、securityModelの値に設定されます。"
    },
    {
      "indent": 3,
      "text": "8) If the PDU is from the Response Class or the Internal Class, then:",
      "ja": "8）PDUが応答クラスまたは内部クラスからのものである場合："
    },
    {
      "indent": 6,
      "text": "a) The specified Security Model is called to generate the message according to the primitive:",
      "ja": "a) 指定されたセキュリティモデルが呼び出され、プリミティブに従ってメッセージが生成されます。"
    },
    {
      "indent": 9,
      "text": "statusInformation = generateResponseMsg( IN messageProcessingModel -- SNMPv3 Message Processing -- Model IN globalData -- msgGlobalData from step 7 IN maxMessageSize -- from msgMaxSize (step 7c) IN securityModel -- as determined in step 7e IN securityEngineID -- the value of snmpEngineID IN securityName -- on behalf of this principal IN securityLevel -- for the outgoing message IN scopedPDU -- as prepared in step 6) IN securityStateReference -- as determined in step 2 OUT securityParameters -- filled in by Security Module OUT wholeMsg -- complete generated message OUT wholeMsgLength -- length of generated message )",
      "ja": "statusInformation = generateResponseMsg（IN messageProcessingModel-SNMPv3メッセージ処理-モデルIN globalData-ステップ7からのmsgGlobalData securityName-このプリンシパルの代わりにIN securityLevel-送信メッセージIN scopedPDUの場合-ステップ6で準備されたとおり）IN securityStateReference-ステップ2で決定されたとおりOUT securityParameters-セキュリティモジュールによって書き込まれたOUT wholeMsg-完全に生成message OUT wholeMsgLength-生成されるメッセージの長さ）"
    },
    {
      "indent": 9,
      "text": "If, upon return from the Security Model, the statusInformation includes an errorIndication, then any cached information about the outstanding request message is discarded, and an errorIndication is returned, so it can be returned to the calling application. SNMPv3 Message Processing is complete.",
      "ja": "セキュリティモデルから戻ったときに、statusInformationにerrorIndicationが含まれている場合、未処理の要求メッセージに関するキャッシュされた情報はすべて破棄され、errorIndicationが返されるので、呼び出し元のアプリケーションに返すことができます。 SNMPv3メッセージ処理が完了しました。"
    },
    {
      "indent": 6,
      "text": "b) A SUCCESS result is returned. SNMPv3 Message Processing is complete.",
      "ja": "b) 成功の結果が返されます。 SNMPv3メッセージ処理が完了しました。"
    },
    {
      "indent": 3,
      "text": "9) If the PDU is from the Confirmed Class or the Notification Class, then:",
      "ja": "9）PDUが確認済みクラスまたは通知クラスのものである場合："
    },
    {
      "indent": 6,
      "text": "a) If the PDU is from the Unconfirmed Class, then securityEngineID is set to the value of this entity's snmpEngineID.",
      "ja": "a) PDUが未確認のクラスのものである場合、securityEngineIDはこのエンティティのsnmpEngineIDの値に設定されます。"
    },
    {
      "indent": 9,
      "text": "Otherwise, the snmpEngineID of the target entity is determined, in an implementation-dependent manner, possibly using transportDomain and transportAddress. The value of the securityEngineID is set to the value of the target entity's snmpEngineID.",
      "ja": "それ以外の場合、ターゲットエンティティのsnmpEngineIDは、実装依存の方法で決定されます。おそらく、transportDomainおよびtransportAddressを使用します。 securityEngineIDの値は、ターゲットエンティティのsnmpEngineIDの値に設定されます。"
    },
    {
      "indent": 6,
      "text": "b) The specified Security Model is called to generate the message according to the primitive:",
      "ja": "b) 指定されたセキュリティモデルが呼び出され、プリミティブに従ってメッセージが生成されます。"
    },
    {
      "indent": 9,
      "text": "statusInformation = generateRequestMsg( IN messageProcessingModel -- SNMPv3 Message Processing Model IN globalData -- msgGlobalData, from step 7 IN maxMessageSize -- from msgMaxSize in step 7 c) IN securityModel -- as provided by caller IN securityEngineID -- authoritative SNMP entity -- from step 9 a) IN securityName -- as provided by caller IN securityLevel -- as provided by caller IN scopedPDU -- as prepared in step 6 OUT securityParameters -- filled in by Security Module OUT wholeMsg -- complete generated message OUT wholeMsgLength -- length of the generated message )",
      "ja": "statusInformation = generateRequestMsg（IN messageProcessingModel-SNMPv3メッセージ処理モデルIN globalData-msgGlobalData、ステップ7からIN maxMessageSize-ステップ7のmsgMaxSizeからc）IN securityModel-呼び出し元によって提供されるIN securityEngineID-信頼できるSNMPエンティティ-からステップ9 a）IN securityName-発信者によって提供されるIN securityLevel-発信者INによって提供されるscopedPDU-ステップ6で準備されたようにOUT securityParameters-セキュリティモジュールによって書き込まれるOUT wholeMsg-生成されたメッセージを完全にするOUT wholeMsgLength-長さ生成されたメッセージの）"
    },
    {
      "indent": 9,
      "text": "If, upon return from the Security Model, the statusInformation includes an errorIndication, then the message is discarded, and the errorIndication is returned, so it can be returned to the calling application, and no further processing is done. SNMPv3 Message Processing is complete.",
      "ja": "セキュリティモデルから戻ったときに、statusInformationにerrorIndicationが含まれている場合、メッセージは破棄され、errorIndicationが返されるため、呼び出し元のアプリケーションに返すことができ、それ以上の処理は行われません。 SNMPv3メッセージ処理が完了しました。"
    },
    {
      "indent": 6,
      "text": "c) If the PDU is from the Confirmed Class, information about the outgoing message is cached, and an implementation-specific stateReference is created. Information to be cached includes the values of:",
      "ja": "c) PDUが確認済みクラスからのものである場合、発信メッセージに関する情報がキャッシュされ、実装固有のstateReferenceが作成されます。キャッシュされる情報には、次の値が含まれます。"
    },
    {
      "indent": 15,
      "text": "- sendPduHandle - msgID - snmpEngineID - securityModel - securityName - securityLevel - contextEngineID - contextName",
      "ja": "- sendPduHandle-msgID-snmpEngineID-securityModel-securityName-securityLevel-contextEngineID-contextName"
    },
    {
      "indent": 6,
      "text": "d) A SUCCESS result is returned. SNMPv3 Message Processing is complete.",
      "ja": "d) 成功の結果が返されます。 SNMPv3メッセージ処理が完了しました。"
    },
    {
      "indent": 0,
      "text": "7.2. Prepare Data Elements from an Incoming SNMP Message",
      "section_title": true,
      "ja": "7.2. 着信SNMPメッセージからのデータ要素の準備"
    },
    {
      "indent": 3,
      "text": "This section describes the procedure followed to extract data from an SNMPv3 message, and to prepare the data elements required for further processing of the message by the Message Dispatcher.",
      "ja": "このセクションでは、SNMPv3メッセージからデータを抽出し、メッセージディスパッチャでメッセージをさらに処理するために必要なデータ要素を準備するための手順について説明します。"
    },
    {
      "indent": 3,
      "text": "1) The message is passed in from the Message Dispatcher according to the abstract service primitive:",
      "ja": "1）メッセージは、抽象サービスプリミティブに従ってメッセージディスパッチャから渡されます。"
    },
    {
      "indent": 7,
      "text": "result =                       -- SUCCESS or errorIndication\n  prepareDataElements(\n  IN  transportDomain          -- origin transport domain\n  IN  transportAddress         -- origin transport address\n  IN  wholeMsg                 -- as received from the network\n  IN  wholeMsgLength           -- as received from the network\n  OUT messageProcessingModel   -- typically, SNMP version\n  OUT securityModel            -- Security Model to use\n  OUT securityName             -- on behalf of this principal\n  OUT securityLevel            -- Level of Security requested\n  OUT contextEngineID          -- data from/at this entity\n  OUT contextName              -- data from/in this context\n  OUT pduVersion               -- version of the PDU\n  OUT PDU                      -- SNMP Protocol Data Unit\n  OUT pduType                  -- SNMP PDU type\n  OUT sendPduHandle            -- handle for matched request\n  OUT maxSizeResponseScopedPDU -- maximum size sender can accept\n  OUT statusInformation        -- success or errorIndication\n                               -- error counter OID and value\n                               -- when errorIndication\n  OUT stateReference           -- reference to state information\n                               -- to be used for a possible\n  )                            -- Response",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "2) If the received message is not the serialization (according to the conventions of [RFC3417]) of an SNMPv3Message value, then the snmpInASNParseErrs counter [RFC3418] is incremented, the message is discarded without further processing, and a FAILURE result is returned. SNMPv3 Message Processing is complete.",
      "ja": "2）受信したメッセージがSNMPv3Message値の（[RFC3417]の規則に従って）シリアライゼーションではない場合、snmpInASNParseErrsカウンター[RFC3418]がインクリメントされ、メッセージは廃棄され、失敗の結果が返されます。 SNMPv3メッセージ処理が完了しました。"
    },
    {
      "indent": 3,
      "text": "3) The values for msgVersion, msgID, msgMaxSize, msgFlags, msgSecurityModel, msgSecurityParameters, and msgData are extracted from the message.",
      "ja": "3）msgVersion、msgID、msgMaxSize、msgFlags、msgSecurityModel、msgSecurityParameters、およびmsgDataの値がメッセージから抽出されます。"
    },
    {
      "indent": 3,
      "text": "4) If the value of the msgSecurityModel component does not match a supported securityModel, then the snmpUnknownSecurityModels counter is incremented, the message is discarded without further processing, and a FAILURE result is returned. SNMPv3 Message Processing is complete.",
      "ja": "4）msgSecurityModelコンポーネントの値がサポートされているsecurityModelと一致しない場合は、snmpUnknownSecurityModelsカウンターがインクリメントされ、それ以上の処理は行われずにメッセージが破棄され、FAILURE結果が返されます。 SNMPv3メッセージ処理が完了しました。"
    },
    {
      "indent": 3,
      "text": "5) The securityLevel is determined from the authFlag and the privFlag bits of the msgFlags component as follows:",
      "ja": "5）securityLevelは、次のようにmsgFlagsコンポーネントのauthFlagおよびprivFlagビットから決定されます。"
    },
    {
      "indent": 7,
      "text": "a) If the authFlag is not set and the privFlag is not set, then securityLevel is set to noAuthNoPriv.",
      "ja": "a) authFlagが設定されておらず、privFlagが設定されていない場合、securityLevelはnoAuthNoPrivに設定されます。"
    },
    {
      "indent": 7,
      "text": "b) If the authFlag is set and the privFlag is not set, then securityLevel is set to authNoPriv.",
      "ja": "b) authFlagが設定されていて、privFlagが設定されていない場合、securityLevelはauthNoPrivに設定されます。"
    },
    {
      "indent": 7,
      "text": "c) If the authFlag is set and the privFlag is set, then securityLevel is set to authPriv.",
      "ja": "c) authFlagが設定され、privFlagが設定されている場合、securityLevelはauthPrivに設定されます。"
    },
    {
      "indent": 7,
      "text": "d) If the authFlag is not set and privFlag is set, then the snmpInvalidMsgs counter is incremented, the message is discarded without further processing, and a FAILURE result is returned. SNMPv3 Message Processing is complete.",
      "ja": "d) authFlagが設定されておらず、privFlagが設定されている場合、snmpInvalidMsgsカウンターが増分され、メッセージはそれ以上処理されずに破棄され、FAILURE結果が返されます。 SNMPv3メッセージ処理が完了しました。"
    },
    {
      "indent": 7,
      "text": "e) Any other bits in the msgFlags are ignored.",
      "ja": "e) msgFlagsの他のビットは無視されます。"
    },
    {
      "indent": 3,
      "text": "6) The security module implementing the Security Model as specified by the securityModel component is called for authentication and privacy services. This is done according to the abstract service primitive:",
      "ja": "6）securityModelコンポーネントで指定されたセキュリティモデルを実装するセキュリティモジュールは、認証およびプライバシーサービスのために呼び出されます。これは、抽象サービスプリミティブに従って行われます。"
    },
    {
      "indent": 7,
      "text": "statusInformation = -- errorIndication or success -- error counter OID and -- value if error processIncomingMsg( IN messageProcessingModel -- SNMPv3 Message Processing Model IN maxMessageSize -- of the sending SNMP entity IN securityParameters -- for the received message IN securityModel -- for the received message IN securityLevel -- Level of Security IN wholeMsg -- as received on the wire IN wholeMsgLength -- length as received on the wire OUT securityEngineID -- authoritative SNMP entity OUT securityName -- identification of the principal OUT scopedPDU, -- message (plaintext) payload OUT maxSizeResponseScopedPDU -- maximum size sender can accept OUT securityStateReference -- reference to security state ) -- information, needed for -- response",
      "ja": "statusInformation =-errorIndicationまたはsuccess-エラーカウンターOIDおよび-エラーの場合の値processIncomingMsg（IN messageProcessingModel-SNMPv3メッセージ処理モデルIN maxMessageSize-送信SNMPエンティティのIN securityParameters-受信メッセージのIN securityModel-for受信したメッセージIN securityLevel-セキュリティのレベルIN wholeMsg-回線上で受信したときIN wholeMsgLength-回線上で受信したときの長さOUT securityEngineID-信頼できるSNMPエンティティOUT securityName-主要なOUTスコープPDUの識別-メッセージ（プレーンテキスト）ペイロードOUT maxSizeResponseScopedPDU-送信者がOUTを受け入れることができる最大サイズsecurityStateReference-セキュリティ状態への参照）-必要な情報-応答"
    },
    {
      "indent": 7,
      "text": "If an errorIndication is returned by the security module, then:",
      "ja": "セキュリティモジュールによってerrorIndicationが返された場合は、次のようになります。"
    },
    {
      "indent": 7,
      "text": "a) If statusInformation contains values for an OID/value pair, then generation of a Report PDU is attempted (see step 3 in section 7.1).",
      "ja": "a) statusInformationにOID /値のペアの値が含まれている場合、レポートPDUの生成が試行されます（セクション7.1のステップ3を参照）。"
    },
    {
      "indent": 10,
      "text": "1) If the scopedPDU has been returned from processIncomingMsg, then determine contextEngineID, contextName, and PDU.",
      "ja": "1）scopedPDUがprocessIncomingMsgから返された場合は、contextEngineID、contextName、およびPDUを決定します。"
    },
    {
      "indent": 10,
      "text": "2) Information about the message is cached and a stateReference is created (implementation-specific). Information to be cached includes the values of:",
      "ja": "2）メッセージに関する情報がキャッシュされ、stateReferenceが作成されます（実装固有）。キャッシュされる情報には、次の値が含まれます。"
    },
    {
      "indent": 26,
      "text": "msgVersion, msgID, securityLevel, msgFlags, msgMaxSize, securityModel, maxSizeResponseScopedPDU, securityStateReference",
      "ja": "msgVersion、msgID、securityLevel、msgFlags、msgMaxSize、securityModel、maxSizeResponseScopedPDU、securityStateReference"
    },
    {
      "indent": 10,
      "text": "3) Request that a Report-PDU be prepared and sent, according to the abstract service primitive:",
      "ja": "3）抽象サービスプリミティブに従って、Report-PDUの準備と送信を要求します。"
    },
    {
      "indent": 13,
      "text": "result = -- SUCCESS or FAILURE returnResponsePdu( IN messageProcessingModel -- SNMPv3(3) IN securityModel -- same as on incoming request IN securityName -- from processIncomingMsg IN securityLevel -- same as on incoming request IN contextEngineID -- from step 6 a) 1) IN contextName -- from step 6 a) 1) IN pduVersion -- SNMPv2-PDU IN PDU -- from step 6 a) 1) IN maxSizeResponseScopedPDU -- from processIncomingMsg IN stateReference -- from step 6 a) 2) IN statusInformation -- from processIncomingMsg )",
      "ja": "result =-SUCCESSまたはFAILURE returnResponsePdu（IN messageProcessingModel-SNMPv3（3）IN securityModel-着信リクエストと同じIN securityName-from processIncomingMsg IN securityLevel-着信リクエストと同じIN contextEngineID-ステップ6 a） 1）IN contextName-ステップ6からa）1）IN pduVersion-SNMPv2-PDU IN PDU-ステップ6 a）から1）IN maxSizeResponseScopedPDU-processIncomingMsg IN stateReferenceから-ステップ6 a）2）IN statusInformation -processIncomingMsgから）"
    },
    {
      "indent": 7,
      "text": "b) The incoming message is discarded without further processing, and a FAILURE result is returned. SNMPv3 Message Processing is complete.",
      "ja": "b) 着信メッセージはそれ以上処理されずに破棄され、FAILUREの結果が返されます。 SNMPv3メッセージ処理が完了しました。"
    },
    {
      "indent": 3,
      "text": "7) The scopedPDU is parsed to extract the contextEngineID, the contextName and the PDU. If any parse error occurs, then the snmpInASNParseErrs counter [RFC3418] is incremented, the security state information is discarded, the message is discarded without further processing, and a FAILURE result is returned. SNMPv3 Message Processing is complete. Treating an unknown PDU type is treated as a parse error is an implementation option.",
      "ja": "7）scopedPDUが解析され、contextEngineID、contextName、およびPDUが抽出されます。解析エラーが発生した場合、snmpInASNParseErrsカウンター[RFC3418]がインクリメントされ、セキュリティ状態情報が破棄され、メッセージはそれ以上処理されずに破棄され、FAILURE結果が返されます。 SNMPv3メッセージ処理が完了しました。不明なPDUタイプを処理することは、解析エラーとして扱われ、実装オプションです。"
    },
    {
      "indent": 3,
      "text": "8) The pduVersion is determined in an implementation-dependent manner. For SNMPv3, the pduVersion would be an SNMPv2-PDU.",
      "ja": "8）pduVersionは実装依存の方法で決定されます。 SNMPv3の場合、pduVersionはSNMPv2-PDUになります。"
    },
    {
      "indent": 3,
      "text": "9) The pduType is determined, in an implementation-dependent manner. For [RFC3416], the pduTypes include:",
      "ja": "9）pduTypeは、実装依存の方法で決定されます。 [RFC3416]の場合、pduTypeには次のものが含まれます。"
    },
    {
      "indent": 15,
      "text": "- GetRequest-PDU, - GetNextRequest-PDU, - GetBulkRequest-PDU, - SetRequest-PDU, - InformRequest-PDU, - SNMPv2-Trap-PDU, - Response-PDU, - Report-PDU.",
      "ja": "- GetRequest-PDU、-GetNextRequest-PDU、-GetBulkRequest-PDU、-SetRequest-PDU、-InformRequest-PDU、-SNMPv2-Trap-PDU、-Response-PDU、-Report-PDU。"
    },
    {
      "indent": 3,
      "text": "10) If the pduType is from the Response Class or the Internal Class, then:",
      "ja": "10）pduTypeが応答クラスまたは内部クラスの場合、次のようになります。"
    },
    {
      "indent": 7,
      "text": "a) The value of the msgID component is used to find the cached information for a corresponding outstanding Request message. If no such outstanding Request message is found, then the security state information is discarded, the message is discarded without further processing, and a FAILURE result is returned. SNMPv3 Message Processing is complete.",
      "ja": "a) msgIDコンポーネントの値は、対応する未処理の要求メッセージのキャッシュされた情報を見つけるために使用されます。そのような未処理の要求メッセージが見つからない場合、セキュリティ状態情報は破棄され、メッセージはそれ以上処理されずに破棄され、FAILUREの結果が返されます。 SNMPv3メッセージ処理が完了しました。"
    },
    {
      "indent": 7,
      "text": "b) sendPduHandle is retrieved from the cached information.",
      "ja": "b) sendPduHandleは、キャッシュされた情報から取得されます。"
    },
    {
      "indent": 7,
      "text": "Otherwise, sendPduHandle is set to <none>, an implementation defined value.",
      "ja": "それ以外の場合、sendPduHandleは、実装で定義された値である<none>に設定されます。"
    },
    {
      "indent": 3,
      "text": "11) If the pduType is from the Internal Class, then:",
      "ja": "11）pduTypeが内部クラスのものである場合："
    },
    {
      "indent": 7,
      "text": "a) statusInformation is created using the contents of the Report-PDU, in an implementation-dependent manner. This statusInformation will be forwarded to the application associated with the sendPduHandle.",
      "ja": "a) statusInformationは、実装依存の方法で、Report-PDUのコンテンツを使用して作成されます。このstatusInformationは、sendPduHandleに関連付けられたアプリケーションに転送されます。"
    },
    {
      "indent": 7,
      "text": "b) The cached data for the outstanding message, referred to by stateReference, is retrieved. If the securityModel or securityLevel values differ from the cached ones, it is important to recognize that Internal Class PDUs delivered at the security level of noAuthNoPriv open a window of opportunity for spoofing or replay attacks. If the receiver of such messages is aware of these risks, the use of such unauthenticated messages is acceptable and may provide a useful function for discovering engine IDs or for detecting misconfiguration at remote nodes.",
      "ja": "b) stateReferenceによって参照される未処理のメッセージのキャッシュされたデータが取得されます。 securityModelまたはsecurityLevelの値がキャッシュされた値と異なる場合は、noAuthNoPrivのセキュリティレベルで配信された内部クラスPDUがスプーフィングまたはリプレイ攻撃の機会を開くことを認識することが重要です。そのようなメッセージの受信者がこれらのリスクを認識している場合、そのような認証されていないメッセージの使用は許容可能であり、エンジンIDを検出したり、リモートノードでの設定ミスを検出したりするのに役立つ機能を提供します。"
    },
    {
      "indent": 10,
      "text": "When the securityModel or securityLevel values differ from the cached ones, an implementation may retain the cached information about the outstanding Request message, in anticipation of the possibility that the Internal Class PDU received might be illegitimate. Otherwise, any cached information about the outstanding Request message is discarded.",
      "ja": "securityModelまたはsecurityLevelの値がキャッシュされた値と異なる場合、受信した内部クラスPDUが不正である可能性を見込んで、実装は未処理の要求メッセージに関するキャッシュされた情報を保持する場合があります。それ以外の場合、未処理の要求メッセージに関するキャッシュされた情報は破棄されます。"
    },
    {
      "indent": 7,
      "text": "c) The security state information for this incoming message is discarded.",
      "ja": "c) この着信メッセージのセキュリティ状態情報は破棄されます。"
    },
    {
      "indent": 7,
      "text": "d) stateReference is set to <none>.",
      "ja": "d) stateReferenceは<none>に設定されています。"
    },
    {
      "indent": 7,
      "text": "e) A SUCCESS result is returned. SNMPv3 Message Processing is complete.",
      "ja": "e) 成功の結果が返されます。 SNMPv3メッセージ処理が完了しました。"
    },
    {
      "indent": 3,
      "text": "12) If the pduType is from the Response Class, then:",
      "ja": "12）pduTypeが応答クラスの場合、次のようになります。"
    },
    {
      "indent": 7,
      "text": "a) The cached data for the outstanding request, referred to by stateReference, is retrieved, including:",
      "ja": "a) stateReferenceによって参照される、未処理の要求のキャッシュされたデータが取得されます。"
    },
    {
      "indent": 15,
      "text": "- snmpEngineID - securityModel - securityName - securityLevel - contextEngineID - contextName",
      "ja": "- snmpEngineID-securityModel-securityName-securityLevel-contextEngineID-contextName"
    },
    {
      "indent": 7,
      "text": "b) If the values extracted from the incoming message differ from the cached data, then any cached information about the outstanding Request message is discarded, the incoming message is discarded without further processing, and a FAILURE result is returned. SNMPv3 Message Processing is complete.",
      "ja": "b) 着信メッセージから抽出された値がキャッシュデータと異なる場合、未処理のリクエストメッセージに関するキャッシュ情報は破棄され、着信メッセージはそれ以上処理されずに破棄され、FAILUREの結果が返されます。 SNMPv3メッセージ処理が完了しました。"
    },
    {
      "indent": 10,
      "text": "When the securityModel or securityLevel values differ from the cached ones, an implementation may retain the cached information about the outstanding Request message, in anticipation of the possibility that the Response Class PDU received might be illegitimate.",
      "ja": "securityModelまたはsecurityLevelの値がキャッシュされた値と異なる場合、受信した応答クラスPDUが不正である可能性を見込んで、実装は未処理の要求メッセージに関するキャッシュされた情報を保持する場合があります。"
    },
    {
      "indent": 7,
      "text": "c) Otherwise, any cached information about the outstanding Request message is discarded, and the stateReference is set to <none>.",
      "ja": "c) それ以外の場合、未処理の要求メッセージに関するキャッシュされた情報は破棄され、stateReferenceは<none>に設定されます。"
    },
    {
      "indent": 7,
      "text": "d) A SUCCESS result is returned. SNMPv3 Message Processing is complete.",
      "ja": "d) 成功の結果が返されます。 SNMPv3メッセージ処理が完了しました。"
    },
    {
      "indent": 3,
      "text": "13) If the pduType is from the Confirmed Class, then:",
      "ja": "13）pduTypeが確認済みクラスのものである場合："
    },
    {
      "indent": 7,
      "text": "a) If the value of securityEngineID is not equal to the value of snmpEngineID, then the security state information is discarded, any cached information about this message is discarded, the incoming message is discarded without further processing, and a FAILURE result is returned. SNMPv3 Message Processing is complete.",
      "ja": "a) securityEngineIDの値がsnmpEngineIDの値と等しくない場合、セキュリティ状態情報は破棄され、このメッセージに関するキャッシュ情報は破棄され、着信メッセージはそれ以上処理されずに破棄され、FAILUREの結果が返されます。 SNMPv3メッセージ処理が完了しました。"
    },
    {
      "indent": 7,
      "text": "b) Information about the message is cached and a stateReference is created (implementation-specific). Information to be cached includes the values of:",
      "ja": "b) メッセージに関する情報がキャッシュされ、stateReferenceが作成されます（実装固有）。キャッシュされる情報には、次の値が含まれます。"
    },
    {
      "indent": 16,
      "text": "msgVersion, msgID, securityLevel, msgFlags, msgMaxSize, securityModel, maxSizeResponseScopedPDU, securityStateReference",
      "ja": "msgVersion、msgID、securityLevel、msgFlags、msgMaxSize、securityModel、maxSizeResponseScopedPDU、securityStateReference"
    },
    {
      "indent": 7,
      "text": "c) A SUCCESS result is returned. SNMPv3 Message Processing is complete.",
      "ja": "c) 成功の結果が返されます。 SNMPv3メッセージ処理が完了しました。"
    },
    {
      "indent": 3,
      "text": "14) If the pduType is from the Unconfirmed Class, then a SUCCESS result is returned. SNMPv3 Message Processing is complete.",
      "ja": "14）pduTypeが未確認のクラスからのものである場合、SUCCESS結果が返されます。 SNMPv3メッセージ処理が完了しました。"
    },
    {
      "indent": 0,
      "text": "8. Intellectual Property",
      "section_title": true,
      "ja": "8. 知的財産"
    },
    {
      "indent": 3,
      "text": "The IETF takes no position regarding the validity or scope of any intellectual property or other rights that might be claimed to pertain to the implementation or use of the technology described in this document or the extent to which any license under such rights might or might not be available; neither does it represent that it has made any effort to identify any such rights. Information on the IETF's procedures with respect to rights in standards-track and standards-related documentation can be found in BCP-11. Copies of claims of rights made available for publication and any assurances of licenses to be made available, or the result of an attempt made to obtain a general license or permission for the use of such proprietary rights by implementors or users of this specification can be obtained from the IETF Secretariat.",
      "ja": "IETFは、このドキュメントに記載されているテクノロジーの実装または使用に関連すると主張される可能性がある知的財産またはその他の権利の有効性または範囲、またはそのような権利に基づくライセンスが適用されるまたは適用されない範囲に関して、いかなる立場も取らない。利用可能。また、そのような権利を特定するために何らかの努力をしたことも表していません。標準化過程および標準化関連文書の権利に関するIETFの手順に関する情報は、BCP-11にあります。公開のために利用可能にされた権利の主張および利用可能にされるライセンスの保証のコピー、またはこの仕様の実装者またはユーザーによる一般的なライセンスまたはそのような所有権の使用の許可を得ようとした試みの結果を入手できます。 IETF事務局から。"
    },
    {
      "indent": 3,
      "text": "The IETF invites any interested party to bring to its attention any copyrights, patents or patent applications, or other proprietary rights which may cover technology that may be required to practice this standard. Please address the information to the IETF Executive Director.",
      "ja": "IETFは、この規格を実践するために必要となる可能性のある技術をカバーする可能性のある著作権、特許、特許出願、またはその他の所有権に注意を向けるよう、関係者に呼びかけます。 IETF Executive Directorに情報を送信してください。"
    },
    {
      "indent": 0,
      "text": "9. Acknowledgements",
      "section_title": true,
      "ja": "9. 謝辞"
    },
    {
      "indent": 3,
      "text": "This document is the result of the efforts of the SNMPv3 Working Group. Some special thanks are in order to the following SNMPv3 WG members:",
      "ja": "このドキュメントは、SNMPv3ワーキンググループの努力の成果です。以下のSNMPv3 WGメンバーに感謝します。"
    },
    {
      "indent": 6,
      "text": "Harald Tveit Alvestrand (Maxware) Dave Battle (SNMP Research, Inc.) Alan Beard (Disney Worldwide Services) Paul Berrevoets (SWI Systemware/Halcyon Inc.) Martin Bjorklund (Ericsson) Uri Blumenthal (IBM T. J. Watson Research Center) Jeff Case (SNMP Research, Inc.) John Curran (BBN) Mike Daniele (Compaq Computer Corporation) T. Max Devlin (Eltrax Systems) John Flick (Hewlett Packard) Rob Frye (MCI) Wes Hardaker (U.C.Davis, Information Technology - D.C.A.S.) David Harrington (Cabletron Systems Inc.) Lauren Heintz (BMC Software, Inc.) N.C. Hien (IBM T. J. Watson Research Center) Michael Kirkham (InterWorking Labs, Inc.) Dave Levi (SNMP Research, Inc.) Louis A Mamakos (UUNET Technologies Inc.) Joe Marzot (Nortel Networks) Paul Meyer (Secure Computing Corporation) Keith McCloghrie (Cisco Systems) Bob Moore (IBM) Russ Mundy (TIS Labs at Network Associates) Bob Natale (ACE*COMM Corporation) Mike O'Dell (UUNET Technologies Inc.) Dave Perkins (DeskTalk) Peter Polkinghorne (Brunel University) Randy Presuhn (BMC Software, Inc.) David Reeder (TIS Labs at Network Associates) David Reid (SNMP Research, Inc.) Aleksey Romanov (Quality Quorum) Shawn Routhier (Epilogue) Juergen Schoenwaelder (TU Braunschweig) Bob Stewart (Cisco Systems) Mike Thatcher (Independent Consultant) Bert Wijnen (IBM T. J. Watson Research Center)",
      "ja": "Harald Tveit Alvestrand（Maxware）Dave Battle（SNMP Research、Inc.）Alan Beard（Disney Worldwide Services）Paul Berrevoets（SWI Systemware / Halcyon Inc.）Martin Bjorklund（Ericsson）Uri Blumenthal（IBM TJ Watson Research Center）Jeff Case（SNMP Research、Inc.）John Curran（BBN）Mike Daniele（Compaq Computer Corporation）T. Max Devlin（Eltrax Systems）John Flick（Hewlett Packard）Rob Frye（MCI）Wes Hardaker（UCDavis、Information Technology-DCAS）David Harrington（ Cabletron Systems Inc.）Lauren Heintz（BMC Software、Inc.）NC Hien（IBM TJ Watson Research Center）Michael Kirkham（InterWorking Labs、Inc.）Dave Levi（SNMP Research、Inc.）Louis A Mamakos（UUNET Technologies Inc.） Joe Marzot（Nortel Networks）Paul Meyer（Secure Computing Corporation）Keith McCloghrie（Cisco Systems）Bob Moore（IBM）Russ Mundy（TIS Labs at Network Associates）Bob Natale（ACE * COMM Corporation）Mike O'Dell（UUNET Technologies Inc. ）Dave Perkins（DeskTalk）Peter Polkinghorne（Brunel University）Rand y Presuhn（BMC Software、Inc.）David Reeder（TIS Labs at Network Associates）David Reid（SNMP Research、Inc.）Aleksey Romanov（Quality Quorum）Shawn Routhier（Epilogue）Juergen Schoenwaelder（TU Braunschweig）Bob Stewart（Cisco Systems） Mike Thatcher（独立コンサルタント）Bert Wijnen（IBM TJ Watson Research Center）"
    },
    {
      "indent": 3,
      "text": "The document is based on recommendations of the IETF Security and Administrative Framework Evolution for SNMP Advisory Team. Members of that Advisory Team were:",
      "ja": "このドキュメントは、SNMP諮問チームのためのIETFセキュリティおよび管理フレームワークの進化の推奨に基づいています。その諮問チームのメンバーは次のとおりです。"
    },
    {
      "indent": 6,
      "text": "David Harrington (Cabletron Systems Inc.) Jeff Johnson (Cisco Systems) David Levi (SNMP Research Inc.) John Linn (Openvision) Russ Mundy (Trusted Information Systems) chair Shawn Routhier (Epilogue) Glenn Waters (Nortel) Bert Wijnen (IBM T. J. Watson Research Center)",
      "ja": "デビッドハリントン（ケーブルトロンシステムズ社）ジェフジョンソン（シスコシステムズ）デビッドレヴィ（SNMPリサーチ社）ジョンリン（オープンビジョン）ラスマンディ（トラステッドインフォメーションシステムズ）チェアショーンルーティエ（エピローグ）グレンウォーターズ（ノーテル）バートウィネン（IBM TJワトソン研究センター）"
    },
    {
      "indent": 3,
      "text": "As recommended by the Advisory Team and the SNMPv3 Working Group Charter, the design incorporates as much as practical from previous RFCs and drafts. As a result, special thanks are due to the authors of previous designs known as SNMPv2u and SNMPv2*:",
      "ja": "アドバイザリーチームとSNMPv3ワーキンググループチャーターによって推奨されているように、この設計には、以前のRFCとドラフトからの実用的な限りのものが組み込まれています。その結果、SNMPv2uおよびSNMPv2 *として知られている以前の設計の作成者に特に感謝します。"
    },
    {
      "indent": 6,
      "text": "Jeff Case (SNMP Research, Inc.) David Harrington (Cabletron Systems Inc.) David Levi (SNMP Research, Inc.) Keith McCloghrie (Cisco Systems) Brian O'Keefe (Hewlett Packard) Marshall T. Rose (Dover Beach Consulting) Jon Saperia (BGS Systems Inc.) Steve Waldbusser (International Network Services) Glenn W. Waters (Bell-Northern Research Ltd.)",
      "ja": "Jeff Case（SNMP Research、Inc.）David Harrington（Cabletron Systems Inc.）David Levi（SNMP Research、Inc.）Keith McCloghrie（Cisco Systems）Brian O'Keefe（Hewlett Packard）Marshall T. Rose（Dover Beach Consulting）Jon Saperia（BGS Systems Inc.）Steve Waldbusser（国際ネットワークサービス）Glenn W. Waters（Bell-Northern Research Ltd.）"
    },
    {
      "indent": 0,
      "text": "10. Security Considerations",
      "section_title": true,
      "ja": "10. セキュリティに関する考慮事項"
    },
    {
      "indent": 3,
      "text": "The Dispatcher coordinates the processing of messages to provide a level of security for management messages and to direct the SNMP PDUs to the proper SNMP application(s).",
      "ja": "ディスパッチャーはメッセージの処理を調整して、管理メッセージにセキュリティレベルを提供し、SNMP PDUを適切なSNMPアプリケーションに送信します。"
    },
    {
      "indent": 3,
      "text": "A Message Processing Model, and in particular the v3MP defined in this document, interacts as part of the Message Processing with Security Models in the Security Subsystem via the abstract service interface primitives defined in [RFC3411] and elaborated above.",
      "ja": "メッセージ処理モデル、特にこのドキュメントで定義されているv3MPは、メッセージ処理の一部として、[RFC3411]で定義され、上記で作成された抽象サービスインターフェイスプリミティブを介して、セキュリティサブシステムのセキュリティモデルと対話します。"
    },
    {
      "indent": 3,
      "text": "The level of security actually provided is primarily determined by the specific Security Model implementation(s) and the specific SNMP application implementation(s) incorporated into this framework. Applications have access to data which is not secured. Applications should take reasonable steps to protect the data from disclosure, and when they send data across the network, they should obey the securityLevel and call upon the services of an Access Control Model as they apply access control.",
      "ja": "実際に提供されるセキュリティのレベルは、主に、このフレームワークに組み込まれている特定のセキュリティモデルの実装と特定のSNMPアプリケーションの実装によって決まります。アプリケーションは保護されていないデータにアクセスできます。アプリケーションは、データを開示から保護するために妥当な措置を講じる必要があり、ネットワークを介してデータを送信するときは、securityLevelに従い、アクセス制御を適用するときにアクセス制御モデルのサービスを呼び出す必要があります。"
    },
    {
      "indent": 3,
      "text": "The values for the msgID element used in communication between SNMP entities MUST be chosen to avoid replay attacks. The values do not need to be unpredictable; it is sufficient that they not repeat.",
      "ja": "SNMPエンティティ間の通信で使用されるmsgID要素の値は、リプレイアタックを回避するために選択する必要があります。値は予測不能である必要はありません。彼らが繰り返さないことで十分です。"
    },
    {
      "indent": 3,
      "text": "When exchanges are carried out over an insecure network, there is an open opportunity for a third party to spoof or replay messages when any message of an exchange is given at the security level of noAuthNoPriv. For most exchanges, all messages exist at the same security level. In the case where the final message is an Internal Class PDU, this message may be delivered at a level of noAuthNoPriv or authNoPriv, independent of the security level of the preceding messages. Internal Class PDUs delivered at the level of authNoPriv are not considered to pose a security hazard. Internal Class PDUs delivered at the security level of noAuthNoPriv open a window of opportunity for spoofing or replay attacks. If the receiver of such messages is aware of these risks, the use of such unauthenticated messages is acceptable and may provide a useful function for discovering engine IDs or for detecting misconfiguration at remote nodes.",
      "ja": "安全でないネットワークを介して交換が行われる場合、交換のメッセージがnoAuthNoPrivのセキュリティレベルで与えられると、第三者がメッセージを偽装または再生する機会が開かれます。ほとんどの交換では、すべてのメッセージが同じセキュリティレベルで存在します。最終メッセージが内部クラスPDUの場合、このメッセージは、先行するメッセージのセキュリティレベルとは関係なく、noAuthNoPrivまたはauthNoPrivのレベルで配信される場合があります。 authNoPrivのレベルで配信される内部クラスPDUは、セキュリティ上の危険をもたらすとは見なされません。 noAuthNoPrivのセキュリティレベルで配信される内部クラスPDUは、なりすましまたはリプレイ攻撃の機会を開きます。そのようなメッセージの受信者がこれらのリスクを認識している場合、そのような認証されていないメッセージの使用は許容可能であり、エンジンIDを検出したり、リモートノードでの設定ミスを検出したりするのに役立つ機能を提供します。"
    },
    {
      "indent": 3,
      "text": "This document also contains a MIB definition module. None of the objects defined is writable, and the information they represent is not deemed to be particularly sensitive. However, if they are deemed sensitive in a particular environment, access to them should be restricted through the use of appropriately configured Security and Access Control models.",
      "ja": "このドキュメントには、MIB定義モジュールも含まれています。定義されたオブジェクトはいずれも書き込み可能ではなく、それらが表す情報は特に機密であるとは見なされません。ただし、特定の環境で機密と見なされる場合は、適切に構成されたセキュリティモデルとアクセス制御モデルを使用して、それらへのアクセスを制限する必要があります。"
    },
    {
      "indent": 0,
      "text": "11. References",
      "section_title": true,
      "ja": "11. 参考文献"
    },
    {
      "indent": 0,
      "text": "11.1. Normative References",
      "section_title": true,
      "ja": "11.1. 引用文献"
    },
    {
      "indent": 3,
      "text": "[RFC2119] Bradner, S., \"Key words for use in RFCs to Indicate Requirement Levels\", BCP 14, RFC 2119, March 1997.",
      "ja": "[RFC2119] Bradner、S。、「要件レベルを示すためにRFCで使用するキーワード」、BCP 14、RFC 2119、1997年3月。"
    },
    {
      "indent": 3,
      "text": "[RFC2578] McCloghrie, K., Perkins, D., Schoenwaelder, J., Case, J., Rose, M. and S. Waldbusser, \"Structure of Management Information Version 2 (SMIv2)\", STD 58, RFC 2578, April 1999.",
      "ja": "[RFC2578] McCloghrie、K.、Perkins、D.、Schoenwaelder、J.、Case、J.、Rose、M. and S. Waldbusser、 \"Structure of Management Information Version 2（SMIv2）\"、STD 58、RFC 2578、 1999年4月。"
    },
    {
      "indent": 3,
      "text": "[RFC2580] McCloghrie, K., Perkins, D., Schoenwaelder, J., Case, J., Rose, M. and S. Waldbusser, \"Conformance Statements for SMIv2\", STD 58, RFC 2580, April 1999.",
      "ja": "[RFC2580] McCloghrie、K.、Perkins、D.、Schoenwaelder、J.、Case、J.、Rose、M. and S. Waldbusser、 \"Conformance Statements for SMIv2\"、STD 58、RFC 2580、April 1999。"
    },
    {
      "indent": 3,
      "text": "[RFC3411] Harrington, D., Presuhn, R. and B. Wijnen, \"An Architecture for Describing Simple Network Management Protocol (SNMP) Management Frameworks\", STD 62, RFC 3411, December 2002.",
      "ja": "[RFC3411] Harrington、D.、Presuhn、R。、およびB. Wijnen、「An Simple Architecture for Describing Simple Network Management Protocol（SNMP）Management Frameworks」、STD 62、RFC 3411、2002年12月。"
    },
    {
      "indent": 3,
      "text": "[RFC3413] Levi, D., Meyer, P. and B. Stewart, \"Simple Network Management Protocol (SNMP) Applications\", STD 62, RFC 3413, December 2002.",
      "ja": "[RFC3413] Levi、D.、Meyer、P。およびB. Stewart、「Simple Network Management Protocol（SNMP）Applications」、STD 62、RFC 3413、2002年12月。"
    },
    {
      "indent": 3,
      "text": "[RFC3414] Blumenthal, U. and B. Wijnen, \"The User-Based Security Model (USM) for Version 3 of the Simple Network Management Protocol (SNMPv3)\", STD 62, RFC 3414, December 2002.",
      "ja": "[RFC3414] Blumenthal、U。およびB. Wijnen、「簡易ネットワーク管理プロトコル（SNMPv3）バージョン3のユーザーベースのセキュリティモデル（USM）」、STD 62、RFC 3414、2002年12月。"
    },
    {
      "indent": 3,
      "text": "[RFC3415] Wijnen, B., Presuhn, R. and K. McCloghrie, \"View-based Access Control Model (VACM) for the Simple Network Management Protocol (SNMP)\", STD 62, RFC 3415, December 2002.",
      "ja": "[RFC3415] Wijnen、B.、Presuhn、R。、およびK. McCloghrie、「簡易ネットワーク管理プロトコル（SNMP）のビューベースアクセスコントロールモデル（VACM）」、STD 62、RFC 3415、2002年12月。"
    },
    {
      "indent": 3,
      "text": "[RFC3416] Presuhn, R., Case, J., McCloghrie, K., Rose, M. and S. Waldbusser, \"Version 2 of the Protocol Operations for the Simple Network Management Protocol (SNMP)\", STD 62, RFC 3416, December 2002.",
      "ja": "[RFC3416] Presuhn、R.、Case、J.、McCloghrie、K.、Rose、M。、およびS. Waldbusser、「Version 2 of the Protocol Operations for the Simple Network Management Protocol（SNMP）」、STD 62、RFC 3416 、2002年12月。"
    },
    {
      "indent": 3,
      "text": "[RFC3417] Presuhn, R., Case, J., McCloghrie, K., Rose, M. and S. Waldbusser, \"Transport Mappings for the Simple Network Management Protocol (SNMP)\", STD 62, RFC 3417, December 2002.",
      "ja": "[RFC3417] Presuhn、R.、Case、J.、McCloghrie、K.、Rose、M。、およびS. Waldbusser、「Transport Mappings for the Simple Network Management Protocol（SNMP）」、STD 62、RFC 3417、2002年12月。"
    },
    {
      "indent": 3,
      "text": "[RFC3418] Presuhn, R., Case, J., McCloghrie, K., Rose, M. and S. Waldbusser, \"Management Information Base (MIB) for the Simple Network Management Protocol (SNMP)\", STD 62, RFC 3418, December 2002.",
      "ja": "[RFC3418] Presuhn、R.、Case、J.、McCloghrie、K.、Rose、M. and S. Waldbusser、 \"Management Information Base（MIB）for the Simple Network Management Protocol（SNMP）\"、STD 62、RFC 3418 、2002年12月。"
    },
    {
      "indent": 0,
      "text": "11.2. Informative References",
      "section_title": true,
      "ja": "11.2. 参考引用"
    },
    {
      "indent": 3,
      "text": "[RFC1901] Case, J., McCloghrie, K., Rose, M. and S. Waldbusser, \"Introduction to Community-based SNMPv2\", RFC 1901, January 1996.",
      "ja": "[RFC1901] Case、J.、McCloghrie、K.、Rose、M。、およびS. Waldbusser、「Introduction to Community-based SNMPv2」、RFC 1901、1996年1月。"
    },
    {
      "indent": 3,
      "text": "[RFC2028] Hovey, R. and S. Bradner, \"The Organizations Involved in the IETF Standards Process\", BCP 11, RFC 2028, October 1996.",
      "ja": "[RFC2028] Hovey、R。およびS. Bradner、「IETF標準プロセスに関与する組織」、BCP 11、RFC 2028、1996年10月。"
    },
    {
      "indent": 3,
      "text": "[RFC2576] Frye, R., Levi, D., Routhier, S. and B. Wijnen, \"Coexistence between Version 1, Version 2, and Version 3 of the Internet-Standard Network Management Framework\", RFC 2576, March 2000.",
      "ja": "[RFC2576] Frye、R.、Levi、D.、Routhier、S。、およびB. Wijnen、「インターネット標準ネットワーク管理フレームワークのバージョン1、バージョン2、およびバージョン3の共存」、RFC 2576、2000年3月。"
    },
    {
      "indent": 3,
      "text": "[RFC3410] Case, J., Mundy, R., Partain, D. and B. Stewart, \"Introduction and Applicability Statements for Internet-Standard Management Framework\", RFC 3410, December 2002.",
      "ja": "[RFC3410] Case、J.、Mundy、R.、Partain、D. and B. Stewart、 \"Introduction and Applicability Statements for Internet-Standard Management Framework\"、RFC 3410、December 2002。"
    },
    {
      "indent": 0,
      "text": "12. Editors' Addresses",
      "section_title": true,
      "ja": "12. 編集者のアドレス"
    },
    {
      "indent": 3,
      "text": "Jeffrey Case SNMP Research, Inc. 3001 Kimberlin Heights Road Knoxville, TN 37920-9716 USA",
      "ja": "Jeffrey Case SNMP Research、Inc. 3001 Kimberlin Heights Road Knoxville、TN 37920-9716 USA"
    },
    {
      "indent": 3,
      "text": "Phone: +1 423-573-1434\nEMail: case@snmp.com",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "David Harrington Enterasys Networks 35 Industrial Way Post Office Box 5005 Rochester, NH 03866-5005 USA",
      "ja": "David Harrington Enterasys Networks 35 Industrial Way Post Office Box 5005 Rochester、NH 03866-5005 USA"
    },
    {
      "indent": 3,
      "text": "Phone: +1 603-337-2614\nEMail: dbh@enterasys.com",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "Randy Presuhn BMC Software, Inc. 2141 North First Street San Jose, CA 95131 USA",
      "ja": "Randy Presuhn BMC Software、Inc. 2141 North First Street San Jose、CA 95131 USA"
    },
    {
      "indent": 3,
      "text": "Phone: +1 408-546-1006\nEMail: randy_presuhn@bmc.com",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "Bert Wijnen Lucent Technologies Schagen 33 3461 GL Linschoten Netherlands",
      "ja": "Bert Wijnen Lucent Technologies Schagen 33 3461 GL Linschotenオランダ"
    },
    {
      "indent": 3,
      "text": "Phone: +31 348-680-485\nEMail: bwijnen@lucent.com",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "13. Full Copyright Statement",
      "section_title": true,
      "ja": "13. 完全な著作権表示"
    },
    {
      "indent": 3,
      "text": "Copyright (C) The Internet Society (2002). All Rights Reserved.",
      "ja": "Copyright（C）The Internet Society（2002）。全著作権所有。"
    },
    {
      "indent": 3,
      "text": "This document and translations of it may be copied and furnished to others, and derivative works that comment on or otherwise explain it or assist in its implementation may be prepared, copied, published and distributed, in whole or in part, without restriction of any kind, provided that the above copyright notice and this paragraph are included on all such copies and derivative works. However, this document itself may not be modified in any way, such as by removing the copyright notice or references to the Internet Society or other Internet organizations, except as needed for the purpose of developing Internet standards in which case the procedures for copyrights defined in the Internet Standards process must be followed, or as required to translate it into languages other than English.",
      "ja": "このドキュメントとその翻訳はコピーして他のユーザーに提供することができ、コメントまたはその他の方法で説明したり、その実装を支援する二次的著作物は、いかなる種類の制限なしに、全体または一部を準備、コピー、公開、および配布することができます。ただし、上記の著作権表示とこの段落は、そのようなすべてのコピーと派生物に含まれています。ただし、この文書自体は、著作権に関する通知を削除したり、インターネットソサエティや他のインターネット組織への参照を削除したりするなど、いかなる方法でも変更できません。ただし、インターネット標準を開発する目的で必要な場合は除きます。インターネット標準のプロセスに従うか、または必要に応じて、それを英語以外の言語に翻訳する必要があります。"
    },
    {
      "indent": 3,
      "text": "The limited permissions granted above are perpetual and will not be revoked by the Internet Society or its successors or assigns.",
      "ja": "上記で付与された制限付きのアクセス許可は永続的であり、インターネットソサエティまたはその後継者または譲受人によって取り消されることはありません。"
    },
    {
      "indent": 3,
      "text": "This document and the information contained herein is provided on an \"AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING TASK FORCE DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE INFORMATION HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.",
      "ja": "このドキュメントとここに含まれる情報は「現状有姿」で提供され、インターネット社会およびインターネット技術タスクフォースは、明示または黙示を問わず、ここに記載されている情報の使用が保証するものに限定されないいかなる保証も含め、一切の保証を否認します。商品性または特定の目的への適合性に関する権利または黙示の保証を侵害すること。"
    },
    {
      "indent": 0,
      "text": "Acknowledgement",
      "ja": "謝辞"
    },
    {
      "indent": 3,
      "text": "Funding for the RFC Editor function is currently provided by the Internet Society.",
      "ja": "Funding for the RFC Editor function is currently provided by the Internet Society."
    }
  ]
}