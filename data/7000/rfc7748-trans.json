{
  "title": {
    "text": "RFC 7748 - Elliptic Curves for Security",
    "ja": "RFC 7748 - セキュリティのための楕円曲線"
  },
  "number": 7748,
  "created_at": "2020-08-30 09:11:36.740084+09:00",
  "updated_by": "",
  "contents": [
    {
      "indent": 0,
      "text": "Internet Research Task Force (IRTF)                           A. Langley\nRequest for Comments: 7748                                        Google\nCategory: Informational                                       M. Hamburg\nISSN: 2070-1721                             Rambus Cryptography Research\n                                                               S. Turner\n                                                                   sn3rd\n                                                            January 2016",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 22,
      "text": "Elliptic Curves for Security",
      "ja": "セキュリティのための楕円曲線"
    },
    {
      "indent": 0,
      "text": "Abstract",
      "ja": "概要"
    },
    {
      "indent": 3,
      "text": "This memo specifies two elliptic curves over prime fields that offer a high level of practical security in cryptographic applications, including Transport Layer Security (TLS). These curves are intended to operate at the ~128-bit and ~224-bit security level, respectively, and are generated deterministically based on a list of required properties.",
      "ja": "このメモは、トランスポート層セキュリティ（TLS）を含む暗号アプリケーションで高レベルの実用的なセキュリティを提供する素数フィールド上の2つの楕円曲線を指定します。これらの曲線は、それぞれ〜128ビットおよび〜224ビットのセキュリティレベルで動作することを目的としており、必要なプロパティのリストに基づいて決定論的に生成されます。"
    },
    {
      "indent": 0,
      "text": "Status of This Memo",
      "ja": "本文書の状態"
    },
    {
      "indent": 3,
      "text": "This document is not an Internet Standards Track specification; it is published for informational purposes.",
      "ja": "このドキュメントはInternet Standards Trackの仕様ではありません。情報提供を目的として公開されています。"
    },
    {
      "indent": 3,
      "text": "This document is a product of the Internet Research Task Force (IRTF). The IRTF publishes the results of Internet-related research and development activities. These results might not be suitable for deployment. This RFC represents the consensus of the Crypto Forum Research Group of the Internet Research Task Force (IRTF). Documents approved for publication by the IRSG are not a candidate for any level of Internet Standard; see Section 2 of RFC 5741.",
      "ja": "この文書は、Internet Research Task Force（IRTF）の製品です。 IRTFは、インターネット関連の研究開発活動の結果を公開しています。これらの結果は、展開に適さない可能性があります。このRFCは、インターネット研究タスクフォース（IRTF）の暗号フォーラム研究グループの合意を表します。 IRSGによる公開が承認されたドキュメントは、どのレベルのインターネット標準の候補にもなりません。 RFC 5741のセクション2をご覧ください。"
    },
    {
      "indent": 3,
      "text": "Information about the current status of this document, any errata, and how to provide feedback on it may be obtained at http://www.rfc-editor.org/info/rfc7748.",
      "ja": "このドキュメントの現在のステータス、エラッタ、およびフィードバックの提供方法に関する情報は、http：//www.rfc-editor.org/info/rfc7748で入手できます。"
    },
    {
      "indent": 0,
      "text": "Copyright Notice",
      "ja": "著作権表示"
    },
    {
      "indent": 3,
      "text": "Copyright (c) 2016 IETF Trust and the persons identified as the document authors. All rights reserved.",
      "ja": "Copyright（c）2016 IETF Trustおよびドキュメントの作成者として識別された人物。全著作権所有。"
    },
    {
      "indent": 3,
      "text": "This document is subject to BCP 78 and the IETF Trust's Legal Provisions Relating to IETF Documents (http://trustee.ietf.org/license-info) in effect on the date of publication of this document. Please review these documents carefully, as they describe your rights and restrictions with respect to this document.",
      "ja": "この文書は、BCP 78およびIETF文書に関するIETFトラストの法的規定（http://trustee.ietf.org/license-info）の対象であり、この文書の発行日に有効です。これらのドキュメントは、このドキュメントに関するあなたの権利と制限を説明しているため、注意深く確認してください。"
    },
    {
      "indent": 0,
      "text": "Table of Contents",
      "ja": "目次"
    },
    {
      "indent": 3,
      "text": "1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   2\n2.  Requirements Language . . . . . . . . . . . . . . . . . . . .   3\n3.  Notation  . . . . . . . . . . . . . . . . . . . . . . . . . .   3\n4.  Recommended Curves  . . . . . . . . . . . . . . . . . . . . .   4\n  4.1.  Curve25519  . . . . . . . . . . . . . . . . . . . . . . .   4\n  4.2.  Curve448  . . . . . . . . . . . . . . . . . . . . . . . .   5\n5.  The X25519 and X448 Functions . . . . . . . . . . . . . . . .   7\n  5.1.  Side-Channel Considerations . . . . . . . . . . . . . . .  10\n  5.2.  Test Vectors  . . . . . . . . . . . . . . . . . . . . . .  11\n6.  Diffie-Hellman  . . . . . . . . . . . . . . . . . . . . . . .  14\n  6.1.  Curve25519  . . . . . . . . . . . . . . . . . . . . . . .  14\n  6.2.  Curve448  . . . . . . . . . . . . . . . . . . . . . . . .  15\n7.  Security Considerations . . . . . . . . . . . . . . . . . . .  15\n8.  References  . . . . . . . . . . . . . . . . . . . . . . . . .  16\n  8.1.  Normative References  . . . . . . . . . . . . . . . . . .  16\n  8.2.  Informative References  . . . . . . . . . . . . . . . . .  17\nAppendix A.  Deterministic Generation . . . . . . . . . . . . . .  19\n  A.1.  p = 1 mod 4 . . . . . . . . . . . . . . . . . . . . . . .  20\n  A.2.  p = 3 mod 4 . . . . . . . . . . . . . . . . . . . . . . .  21\n  A.3.  Base Points . . . . . . . . . . . . . . . . . . . . . . .  21\nAcknowledgements  . . . . . . . . . . . . . . . . . . . . . . . .  22\nAuthors' Addresses  . . . . . . . . . . . . . . . . . . . . . . .  22",
      "raw": true,
      "toc": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "1. Introduction",
      "section_title": true,
      "ja": "1. はじめに"
    },
    {
      "indent": 3,
      "text": "Since the initial standardization of Elliptic Curve Cryptography (ECC [RFC6090]) in [SEC1], there has been significant progress related to both efficiency and security of curves and implementations. Notable examples are algorithms protected against certain side-channel attacks, various \"special\" prime shapes that allow faster modular arithmetic, and a larger set of curve models from which to choose. There is also concern in the community regarding the generation and potential weaknesses of the curves defined by NIST [NIST].",
      "ja": "[SEC1]での楕円曲線暗号（ECC [RFC6090]）の最初の標準化以降、曲線と実装の効率とセキュリティの両方に関連する重要な進歩がありました。注目すべき例は、特定のサイドチャネル攻撃から保護されたアルゴリズム、より高速なモジュラー演算を可能にするさまざまな「特別な」素数の形状、およびそこから選択できるより大きな曲線モデルのセットです。 NIST [NIST]によって定義された曲線の生成と潜在的な弱点に関するコミュニティにも懸念があります。"
    },
    {
      "indent": 3,
      "text": "This memo specifies two elliptic curves (\"curve25519\" and \"curve448\") that lend themselves to constant-time implementation and an exception-free scalar multiplication that is resistant to a wide range of side-channel attacks, including timing and cache attacks. They are Montgomery curves (where v^2 = u^3 + A*u^2 + u) and thus have birationally equivalent Edwards versions. Edwards curves support the fastest (currently known) complete formulas for the elliptic-curve group operations, specifically the Edwards curve x^2 + y^2 = 1 + d*x^2*y^2 for primes p when p = 3 mod 4, and the twisted Edwards curve -x^2 + y^2 = 1 + d*x^2*y^2 when p = 1 mod 4. The maps to/from the Montgomery curves to their (twisted) Edwards equivalents are also given.",
      "ja": "このメモは、一定時間の実装に適した2つの楕円曲線（「curve25519」と「curve448」）と、タイミングやキャッシュ攻撃を含む幅広いサイドチャネル攻撃に耐性のある例外のないスカラー倍算を指定しています。これらはモンゴメリー曲線（ここでv ^ 2 = u ^ 3 + A * u ^ 2 + u）であり、バイエドリー的に同等のEdwardsバージョンを持っています。エドワーズ曲線は、楕円曲線群演算の最も高速な（現在知られている）完全な公式をサポートしています。特に、p = 3 modのときの素数pのエドワーズ曲線x ^ 2 + y ^ 2 = 1 + d * x ^ 2 * y ^ 2 4、およびツイストエドワーズ曲線-x ^ 2 + y ^ 2 = 1 + d * x ^ 2 * y ^ 2（p = 1 mod 4の場合）。モンゴメリ曲線への、またはモンゴメリー曲線から（ツイスト）エドワーズ曲線へのマップは、また与えられました。"
    },
    {
      "indent": 3,
      "text": "This memo also specifies how these curves can be used with the Diffie-Hellman protocol for key agreement.",
      "ja": "このメモは、これらの曲線がキー合意のためにDiffie-Hellmanプロトコルでどのように使用されるかについても指定します。"
    },
    {
      "indent": 0,
      "text": "2. Requirements Language",
      "section_title": true,
      "ja": "2. 要件言語"
    },
    {
      "indent": 3,
      "text": "The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as described in RFC 2119 [RFC2119].",
      "ja": "このドキュメントのキーワード「MUST」、「MUST NOT」、「REQUIRED」、「SHALL」、「SHALL NOT」、「SHOULD」、「SHOULD NOT」、「RECOMMENDED」、「MAY」、および「OPTIONAL」は、 RFC 2119 [RFC2119]で説明されているように解釈されます。"
    },
    {
      "indent": 0,
      "text": "3. Notation",
      "section_title": true,
      "ja": "3. 表記"
    },
    {
      "indent": 3,
      "text": "Throughout this document, the following notation is used:",
      "ja": "このドキュメントでは、次の表記が使用されています。"
    },
    {
      "indent": 3,
      "text": "p Denotes the prime number defining the underlying field.",
      "ja": "p基礎となるフィールドを定義する素数を示します。"
    },
    {
      "indent": 3,
      "text": "GF(p) The finite field with p elements.",
      "ja": "GF（p）p要素の有限体。"
    },
    {
      "indent": 3,
      "text": "A An element in the finite field GF(p), not equal to -2 or 2.",
      "ja": "A有限体GF（p）の要素。-2または2とは異なります。"
    },
    {
      "indent": 3,
      "text": "d A non-zero element in the finite field GF(p), not equal to 1, in the case of an Edwards curve, or not equal to -1, in the case of a twisted Edwards curve.",
      "ja": "d有限体GF（p）の非ゼロ要素。エドワーズ曲線の場合は1に等しくなく、ツイストエドワーズ曲線の場合は-1に等しくありません。"
    },
    {
      "indent": 3,
      "text": "order The order of the prime-order subgroup.",
      "ja": "orderプライムオーダーサブグループの順序。"
    },
    {
      "indent": 3,
      "text": "P A generator point defined over GF(p) of prime order.",
      "ja": "P素数次数のGF（p）上で定義された生成点。"
    },
    {
      "indent": 3,
      "text": "U(P) The u-coordinate of the elliptic curve point P on a Montgomery curve.",
      "ja": "U（P）モンゴメリー曲線上の楕円曲線点Pのu座標。"
    },
    {
      "indent": 3,
      "text": "V(P) The v-coordinate of the elliptic curve point P on a Montgomery curve.",
      "ja": "V（P）モンゴメリー曲線上の楕円曲線点Pのv座標。"
    },
    {
      "indent": 3,
      "text": "X(P) The x-coordinate of the elliptic curve point P on a (twisted) Edwards curve.",
      "ja": "X（P）（ツイストした）エドワーズ曲線上の楕円曲線点Pのx座標。"
    },
    {
      "indent": 3,
      "text": "Y(P) The y-coordinate of the elliptic curve point P on a (twisted) Edwards curve.",
      "ja": "Y（P）（ツイスト）エドワーズ曲線上の楕円曲線点Pのy座標。"
    },
    {
      "indent": 3,
      "text": "u, v Coordinates on a Montgomery curve.",
      "ja": "u、vモンゴメリー曲線上の座標。"
    },
    {
      "indent": 3,
      "text": "x, y Coordinates on a (twisted) Edwards curve.",
      "ja": "（ツイスト）エドワーズ曲線上のx、y座標。"
    },
    {
      "indent": 0,
      "text": "4. Recommended Curves",
      "section_title": true,
      "ja": "4. 推奨曲線"
    },
    {
      "indent": 0,
      "text": "4.1. Curve25519",
      "section_title": true,
      "ja": "4.1. 曲線25519"
    },
    {
      "indent": 3,
      "text": "For the ~128-bit security level, the prime 2^255 - 19 is recommended for performance on a wide range of architectures. Few primes of the form 2^c-s with s small exist between 2^250 and 2^521, and other choices of coefficient are not as competitive in performance. This prime is congruent to 1 mod 4, and the derivation procedure in Appendix A results in the following Montgomery curve v^2 = u^3 + A*u^2 + u, called \"curve25519\":",
      "ja": "〜128ビットのセキュリティレベルでは、幅広いアーキテクチャでのパフォーマンスのために、素数の2 ^ 255-19が推奨されます。 2 ^ 250と2 ^ 521の間に存在する2 ^ c-s形式の素数が小さく、s ^が小さいため、他の係数の選択ではパフォーマンスの面で競争力がありません。この素数は1 mod 4に合同であり、付録Aの導出手順の結果は、「curve25519」と呼ばれる次のモンゴメリー曲線v ^ 2 = u ^ 3 + A * u ^ 2 + uになります。"
    },
    {
      "indent": 3,
      "text": "p 2^255 - 19",
      "ja": "p 2 ^ 255-19"
    },
    {
      "indent": 3,
      "text": "A 486662",
      "ja": "A 486662"
    },
    {
      "indent": 3,
      "text": "order  2^252 + 0x14def9dea2f79cd65812631a5cf5d3ed",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "cofactor 8",
      "ja": "補因子8"
    },
    {
      "indent": 3,
      "text": "U(P) 9",
      "ja": "U（P）9"
    },
    {
      "indent": 3,
      "text": "V(P) 147816194475895447910205935684099868872646061346164752889648818 37755586237401",
      "ja": "V（P）147816194475895447910205935684099868872646061346164752889648818 37755586237401"
    },
    {
      "indent": 3,
      "text": "The base point is u = 9, v = 1478161944758954479102059356840998688726 4606134616475288964881837755586237401.",
      "ja": "基点はu = 9、v = 1478161944758954479102059356840998688726 4606134616475288964881837755586237401です。"
    },
    {
      "indent": 3,
      "text": "This curve is birationally equivalent to a twisted Edwards curve -x^2 + y^2 = 1 + d*x^2*y^2, called \"edwards25519\", where:",
      "ja": "この曲線は、ツイストエドワーズ曲線-x ^ 2 + y ^ 2 = 1 + d * x ^ 2 * y ^ 2と双有理的に等価であり、「edwards25519」と呼ばれます。ここで、"
    },
    {
      "indent": 3,
      "text": "p 2^255 - 19",
      "ja": "p 2 ^ 255-19"
    },
    {
      "indent": 3,
      "text": "d 370957059346694393431380835087545651895421138798432190163887855330 85940283555",
      "ja": "d 370957059346694393431380835087545651895421138798432190163887855330 85940283555"
    },
    {
      "indent": 3,
      "text": "order  2^252 + 0x14def9dea2f79cd65812631a5cf5d3ed",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "cofactor 8",
      "ja": "補因子8"
    },
    {
      "indent": 3,
      "text": "X(P) 151122213495354007725011514095885315114540126930418572060461132 83949847762202",
      "ja": "X（P）151122213495354007725011514095885315114540126930418572060461132 83949847762202"
    },
    {
      "indent": 3,
      "text": "Y(P) 463168356949264781694283940034751631413079938662562256157830336 03165251855960",
      "ja": "Y（P）463168356949264781694283940034751631413079938662562256157830336 03165251855960"
    },
    {
      "indent": 3,
      "text": "The birational maps are:",
      "ja": "双有理マップは次のとおりです。"
    },
    {
      "indent": 5,
      "text": "(u, v) = ((1+y)/(1-y), sqrt(-486664)*u/x)\n(x, y) = (sqrt(-486664)*u/v, (u-1)/(u+1))",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "The Montgomery curve defined here is equal to the one defined in [curve25519], and the equivalent twisted Edwards curve is equal to the one defined in [ed25519].",
      "ja": "ここで定義されたモンゴメリー曲線は[curve25519]で定義されたものと等しく、等価のねじれたエドワーズ曲線は[ed25519]で定義されたものと等しくなります。"
    },
    {
      "indent": 0,
      "text": "4.2. Curve448",
      "section_title": true,
      "ja": "4.2. 曲線448"
    },
    {
      "indent": 3,
      "text": "For the ~224-bit security level, the prime 2^448 - 2^224 - 1 is recommended for performance on a wide range of architectures. This prime is congruent to 3 mod 4, and the derivation procedure in Appendix A results in the following Montgomery curve, called \"curve448\":",
      "ja": "224ビットまでのセキュリティレベルでは、幅広いアーキテクチャでのパフォーマンスのために、素数の2 ^ 448-2 ^ 224-1が推奨されます。この素数は3 mod 4に合同であり、付録Aの導出手順は、「curve448」と呼ばれる次のモンゴメリー曲線になります。"
    },
    {
      "indent": 3,
      "text": "p  2^448 - 2^224 - 1",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "A 156326",
      "ja": "A 156326"
    },
    {
      "indent": 3,
      "text": "order  2^446 -\n   0x8335dc163bb124b65129c96fde933d8d723a70aadc873d6d54a7bb0d",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "cofactor 4",
      "ja": "補因子4"
    },
    {
      "indent": 3,
      "text": "U(P) 5",
      "ja": "U（P）5"
    },
    {
      "indent": 3,
      "text": "V(P) 355293926785568175264127502063783334808976399387714271831880898 435169088786967410002932673765864550910142774147268105838985595290 606362",
      "ja": "V（P）355293926785568175264127502063783334808976399387714271831880898 435169088786967410002932673765864550910142774147268105838985595290 606362"
    },
    {
      "indent": 3,
      "text": "This curve is birationally equivalent to the Edwards curve x^2 + y^2 = 1 + d*x^2*y^2 where:",
      "ja": "この曲線は、エドワーズ曲線x ^ 2 + y ^ 2 = 1 + d * x ^ 2 * y ^ 2と双有理的に等価です。ここで、"
    },
    {
      "indent": 3,
      "text": "p  2^448 - 2^224 - 1",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "d 611975850744529176160423220965553317543219696871016626328968936415 087860042636474891785599283666020414768678979989378147065462815545 017",
      "ja": "d 611975850744529176160423220965553317543219696871016626328968936415 087860042636474891785599283666020414768678979989378147065462815545 017"
    },
    {
      "indent": 3,
      "text": "order  2^446 -\n   0x8335dc163bb124b65129c96fde933d8d723a70aadc873d6d54a7bb0d",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": " cofactor 4 X(P) 345397493039729516374008604150537410266655260075183290216406970 281645695073672344430481787759340633221708391583424041788924124567 700732",
      "ja": "補因子4 X（P）345397493039729516374008604150537410266655260075183290216406970 281645695073672344430481787759340633221708391583424041788924124567 700732"
    },
    {
      "indent": 3,
      "text": "Y(P) 363419362147803445274661903944002267176820680343659030140745099 590306164083365386343198191849338272965044442230921818680526749009 182718",
      "ja": "Y（P）363419362147803445274661903944002267176820680343659030140745099 5903061640833653863431981918493382729650444422309218680526749009 182718"
    },
    {
      "indent": 3,
      "text": "The birational maps are:",
      "ja": "双有理マップは次のとおりです。"
    },
    {
      "indent": 5,
      "text": "(u, v) = ((y-1)/(y+1), sqrt(156324)*u/x)\n(x, y) = (sqrt(156324)*u/v, (1+u)/(1-u))",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "Both of those curves are also 4-isogenous to the following Edwards curve x^2 + y^2 = 1 + d*x^2*y^2, called \"edwards448\", where:",
      "ja": "これらの曲線はどちらも、「edwards448」と呼ばれる次のエドワーズ曲線x ^ 2 + y ^ 2 = 1 + d * x ^ 2 * y ^ 2に4等質です。ここで、"
    },
    {
      "indent": 3,
      "text": "p  2^448 - 2^224 - 1",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "d -39081",
      "ja": "d -39081"
    },
    {
      "indent": 3,
      "text": "order  2^446 -\n   0x8335dc163bb124b65129c96fde933d8d723a70aadc873d6d54a7bb0d",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "cofactor 4",
      "ja": "補因子4"
    },
    {
      "indent": 3,
      "text": "X(P) 224580040295924300187604334099896036246789641632564134246125461 686950415467406032909029192869357953282578032075146446173674602635 247710",
      "ja": "X（P）224580040295924300187604334099896036246789641632564134246125461 686950415467406032909029192869357953282578032075146446173674602635 247710"
    },
    {
      "indent": 3,
      "text": "Y(P) 298819210078481492676017930443930673437544040154080242095928241 372331506189835876003536878655418784733982303233503462500531545062 832660",
      "ja": "Y（P）298819210078481492676017930443930673437544040154080242095928241 372331506189835876003536878655418784733982303233503462500531545062 832660"
    },
    {
      "indent": 3,
      "text": "The 4-isogeny maps between the Montgomery curve and this Edwards curve are:",
      "ja": "モンゴメリー曲線とこのエドワーズ曲線の間の4つの同種写像は次のとおりです。"
    },
    {
      "indent": 5,
      "text": "(u, v) = (y^2/x^2, (2 - x^2 - y^2)*y/x^3)\n(x, y) = (4*v*(u^2 - 1)/(u^4 - 2*u^2 + 4*v^2 + 1),\n          -(u^5 - 2*u^3 - 4*u*v^2 + u)/\n          (u^5 - 2*u^2*v^2 - 2*u^3 - 2*v^2 + u))",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "The curve edwards448 defined here is also called \"Goldilocks\" and is equal to the one defined in [goldilocks].",
      "ja": "ここで定義されているedwards448曲線は「ゴルディロックス」とも呼ばれ、[ゴルディロックス]で定義されているものと同じです。"
    },
    {
      "indent": 0,
      "text": "5. The X25519 and X448 Functions",
      "section_title": true,
      "ja": "5. X25519およびX448関数"
    },
    {
      "indent": 3,
      "text": "The \"X25519\" and \"X448\" functions perform scalar multiplication on the Montgomery form of the above curves. (This is used when implementing Diffie-Hellman.) The functions take a scalar and a u-coordinate as inputs and produce a u-coordinate as output. Although the functions work internally with integers, the inputs and outputs are 32-byte strings (for X25519) or 56-byte strings (for X448) and this specification defines their encoding.",
      "ja": "「X25519」および「X448」関数は、上記の曲線のモンゴメリー形式でスカラー乗算を実行します。 （これはDiffie-Hellmanを実装するときに使用されます。）関数は、スカラーとu座標を入力として取り、u座標を出力として生成します。関数は内部で整数を処理しますが、入力と出力は32バイト文字列（X25519の場合）または56バイト文字列（X448の場合）であり、この仕様はそれらのエンコーディングを定義します。"
    },
    {
      "indent": 3,
      "text": "The u-coordinates are elements of the underlying field GF(2^255 - 19) or GF(2^448 - 2^224 - 1) and are encoded as an array of bytes, u, in little-endian order such that u[0] + 256*u[1] + 256^2*u[2] + ... + 256^(n-1)*u[n-1] is congruent to the value modulo p and u[n-1] is minimal. When receiving such an array, implementations of X25519 (but not X448) MUST mask the most significant bit in the final byte. This is done to preserve compatibility with point formats that reserve the sign bit for use in other protocols and to increase resistance to implementation fingerprinting.",
      "ja": "u座標は、基になるフィールドGF（2 ^ 255-19）またはGF（2 ^ 448-2 ^ 224-1）の要素であり、バイトの配列uとしてエンコードされます。 [0] + 256 * u [1] + 256 ^ 2 * u [2] + ... + 256 ^（n-1）* u [n-1]は、pおよびu [n-を法とする値に合同です1]は最小限です。そのような配列を受け取るとき、X25519（X448ではない）の実装は、最終バイトの最上位ビットをマスクする必要があります。これは、他のプロトコルで使用するために符号ビットを予約するポイント形式との互換性を維持し、実装のフィンガープリントへの耐性を高めるために行われます。"
    },
    {
      "indent": 3,
      "text": "Implementations MUST accept non-canonical values and process them as if they had been reduced modulo the field prime. The non-canonical values are 2^255 - 19 through 2^255 - 1 for X25519 and 2^448 - 2^224 - 1 through 2^448 - 1 for X448.",
      "ja": "実装は、非正規値を受け入れて、フィールド素数を法として減らされたかのように処理する必要があります。非正規値は、X25519の場合は2 ^ 255-19から2 ^ 255-1、X448の場合は2 ^ 448-2 ^ 224-1から2 ^ 448-1です。"
    },
    {
      "indent": 3,
      "text": "The following functions implement this in Python, although the Python code is not intended to be performant nor side-channel free. Here, the \"bits\" parameter should be set to 255 for X25519 and 448 for X448:",
      "ja": "次の関数はこれをPythonで実装しますが、Pythonコードはパフォーマンスやサイドチャネルフリーを意図していません。ここで、「ビット」パラメーターは、X25519の場合は255、X448の場合は448に設定する必要があります。"
    },
    {
      "indent": 3,
      "text": "<CODE BEGINS>\ndef decodeLittleEndian(b, bits):\n    return sum([b[i] << 8*i for i in range((bits+7)/8)])",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "def decodeUCoordinate(u, bits):\n    u_list = [ord(b) for b in u]\n    # Ignore any unused bits.\n    if bits % 8:\n        u_list[-1] &= (1<<(bits%8))-1\n    return decodeLittleEndian(u_list, bits)",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": " def encodeUCoordinate(u, bits): u = u % p return ''.join([chr((u >> 8*i) & 0xff) for i in range((bits+7)/8)]) <CODE ENDS> Scalars are assumed to be randomly generated bytes. For X25519, in order to decode 32 random bytes as an integer scalar, set the three least significant bits of the first byte and the most significant bit of the last to zero, set the second most significant bit of the last byte to 1 and, finally, decode as little-endian. This means that the resulting integer is of the form 2^254 plus eight times a value between 0 and 2^251 - 1 (inclusive). Likewise, for X448, set the two least significant bits of the first byte to 0, and the most significant bit of the last byte to 1. This means that the resulting integer is of the form 2^447 plus four times a value between 0 and 2^445 - 1 (inclusive).",
      "ja": "def encodeUCoordinate（u、bits）：u = u％p return '' .join（[chr（（u >> 8 * i）＆0xff）for i in range（（bits + 7）/ 8）]）<CODE ENDS>スカラーはランダムに生成されたバイトと見なされます。 X25519の場合、32のランダムバイトを整数スカラーとしてデコードするには、最初のバイトの最下位3ビットと最後の最上位ビットをゼロに設定し、最後のバイトの2番目の最上位ビットを1に設定し、最後に、リトルエンディアンとしてデコードします。つまり、結果の整数は、2 ^ 254の形式に0と2 ^ 251-1の間の値の8倍を加えたものになります。同様に、X448の場合、最初のバイトの最下位2ビットを0に設定し、最後のバイトの最上位ビットを1に設定します。これは、結果の整数が2 ^ 447の形式に0の間の値の4倍を加えたものであることを意味しますおよび2 ^ 445-1（両端を含む）。"
    },
    {
      "indent": 3,
      "text": "<CODE BEGINS>\ndef decodeScalar25519(k):\n    k_list = [ord(b) for b in k]\n    k_list[0] &= 248\n    k_list[31] &= 127\n    k_list[31] |= 64\n    return decodeLittleEndian(k_list, 255)",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "def decodeScalar448(k):\n    k_list = [ord(b) for b in k]\n    k_list[0] &= 252\n    k_list[55] |= 128\n    return decodeLittleEndian(k_list, 448)\n<CODE ENDS>",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "To implement the X25519(k, u) and X448(k, u) functions (where k is the scalar and u is the u-coordinate), first decode k and u and then perform the following procedure, which is taken from [curve25519] and based on formulas from [montgomery]. All calculations are performed in GF(p), i.e., they are performed modulo p. The constant a24 is (486662 - 2) / 4 = 121665 for curve25519/X25519 and (156326 - 2) / 4 = 39081 for curve448/X448.",
      "ja": "X25519（k、u）関数とX448（k、u）関数（kはスカラー、uはu座標）を実装するには、まずkとuをデコードしてから、[curve25519 ]および[montgomery]の式に基づいています。すべての計算はGF（p）で実行されます。つまり、pを法として実行されます。定数a24は、curve25519 / X25519の場合は（486662-2）/ 4 = 121665、curve448 / X448の場合は（156326-2）/ 4 = 39081です。"
    },
    {
      "indent": 3,
      "text": "x_1 = u x_2 = 1 z_2 = 0 x_3 = u z_3 = 1 swap = 0",
      "ja": "x_1 = u x_2 = 1 z_2 = 0 x_3 = u z_3 = 1スワップ= 0"
    },
    {
      "indent": 3,
      "text": "For t = bits-1 down to 0:\n    k_t = (k >> t) & 1\n    swap ^= k_t\n    // Conditional swap; see text below.\n    (x_2, x_3) = cswap(swap, x_2, x_3)\n    (z_2, z_3) = cswap(swap, z_2, z_3)\n    swap = k_t",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 7,
      "text": "A = x_2 + z_2\nAA = A^2\nB = x_2 - z_2\nBB = B^2\nE = AA - BB\nC = x_3 + z_3\nD = x_3 - z_3\nDA = D * A\nCB = C * B\nx_3 = (DA + CB)^2\nz_3 = x_1 * (DA - CB)^2\nx_2 = AA * BB\nz_2 = E * (AA + a24 * E)",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "// Conditional swap; see text below.\n(x_2, x_3) = cswap(swap, x_2, x_3)\n(z_2, z_3) = cswap(swap, z_2, z_3)\nReturn x_2 * (z_2^(p - 2))",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "(Note that these formulas are slightly different from Montgomery's original paper. Implementations are free to use any correct formulas.)",
      "ja": "（これらの式は、モンゴメリーの元の論文とは少し異なります。実装では、正しい式を自由に使用できます。）"
    },
    {
      "indent": 3,
      "text": "Finally, encode the resulting value as 32 or 56 bytes in little-endian order. For X25519, the unused, most significant bit MUST be zero.",
      "ja": "最後に、結果の値を32バイトまたは56バイトとしてリトルエンディアン順にエンコードします。 X25519の場合、未使用の最上位ビットはゼロでなければなりません。"
    },
    {
      "indent": 3,
      "text": "The cswap function SHOULD be implemented in constant time (i.e., independent of the swap argument). For example, this can be done as follows:",
      "ja": "cswap関数は一定の時間で実装する必要があります（つまり、swap引数とは無関係です）。たとえば、これは次のように実行できます。"
    },
    {
      "indent": 3,
      "text": "cswap(swap, x_2, x_3): dummy = mask(swap) AND (x_2 XOR x_3) x_2 = x_2 XOR dummy x_3 = x_3 XOR dummy Return (x_2, x_3)",
      "ja": "cswap（swap、x_2、x_3）：ダミー=マスク（スワップ）AND（x_2 XOR x_3）x_2 = x_2 XORダミーx_3 = x_3 XORダミーリターン（x_2、x_3）"
    },
    {
      "indent": 3,
      "text": "Where mask(swap) is the all-1 or all-0 word of the same length as x_2 and x_3, computed, e.g., as mask(swap) = 0 - swap.",
      "ja": "ここで、mask（swap）は、x_2およびx_3と同じ長さのall-1またはall-0ワードであり、たとえば、mask（swap）= 0-swapとして計算されます。"
    },
    {
      "indent": 0,
      "text": "5.1. Side-Channel Considerations",
      "section_title": true,
      "ja": "5.1. サイドチャネルの考慮事項"
    },
    {
      "indent": 3,
      "text": "X25519 and X448 are designed so that fast, constant-time implementations are easier to produce. The procedure above ensures that the same sequence of field operations is performed for all values of the secret key, thus eliminating a common source of side-channel leakage. However, this alone does not prevent all side-channels by itself. It is important that the pattern of memory accesses and jumps not depend on the values of any of the bits of k. It is also important that the arithmetic used not leak information about the integers modulo p, for example by having b*c be distinguishable from c*c. On some architectures, even primitive machine instructions, such as single-word division, can have variable timing based on their inputs.",
      "ja": "X25519とX448は、高速で一定時間の実装を簡単に作成できるように設計されています。上記の手順により、秘密鍵のすべての値に対して同じフィールド操作シーケンスが確実に実行され、サイドチャネル漏洩の共通の原因が排除されます。ただし、これだけではすべてのサイドチャネルが単独で防止されるわけではありません。メモリアクセスとジャンプのパターンがkのどのビットの値にも依存しないことが重要です。また、たとえば、b * cをc * cと区別できるようにすることにより、pを法とする整数に関する情報をリークしないように計算を使用することも重要です。一部のアーキテクチャでは、1ワード除算などのプリミティブマシン命令でも、その入力に基づいて可変タイミングを持つことができます。"
    },
    {
      "indent": 3,
      "text": "Side-channel attacks are an active research area that still sees significant, new results. Implementors are advised to follow this research closely.",
      "ja": "サイドチャネル攻撃は活発な研究分野であり、依然として重要な新しい結果が出ています。実装者は、この調査を注意深くフォローすることをお勧めします。"
    },
    {
      "indent": 0,
      "text": "5.2. Test Vectors",
      "section_title": true,
      "ja": "5.2. テストベクトル"
    },
    {
      "indent": 3,
      "text": "Two types of tests are provided. The first is a pair of test vectors for each function that consist of expected outputs for the given inputs. The inputs are generally given as 64 or 112 hexadecimal digits that need to be decoded as 32 or 56 binary bytes before processing.",
      "ja": "2種類のテストが用意されています。 1つ目は、特定の入力に対して期待される出力で構成される、各関数のテストベクトルのペアです。入力は通常、64または112の16進数として与えられ、処理前に32または56のバイナリバイトとしてデコードする必要があります。"
    },
    {
      "indent": 3,
      "text": "X25519:",
      "ja": "＃19："
    },
    {
      "indent": 3,
      "text": "Input scalar:\n  a546e36bf0527c9d3b16154b82465edd62144c0ac1fc5a18506a2244ba449ac4\nInput scalar as a number (base 10):\n  31029842492115040904895560451863089656\n  472772604678260265531221036453811406496\nInput u-coordinate:\n  e6db6867583030db3594c1a424b15f7c726624ec26b3353b10a903a6d0ab1c4c\nInput u-coordinate as a number (base 10):\n  34426434033919594451155107781188821651\n  316167215306631574996226621102155684838\nOutput u-coordinate:\n  c3da55379de9c6908e94ea4df28d084f32eccf03491c71f754b4075577a28552",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "Input scalar:\n  4b66e9d4d1b4673c5ad22691957d6af5c11b6421e0ea01d42ca4169e7918ba0d\nInput scalar as a number (base 10):\n  35156891815674817266734212754503633747\n  128614016119564763269015315466259359304\nInput u-coordinate:\n  e5210f12786811d3f4b7959d0538ae2c31dbe7106fc03c3efc4cd549c715a493\nInput u-coordinate as a number (base 10):\n  88838573511839298940907593866106493194\n  17338800022198945255395922347792736741\nOutput u-coordinate:\n  95cbde9476e8907d7aade45cb4b873f88b595a68799fa152e6f8f7647aac7957",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "X448:",
      "ja": "X448："
    },
    {
      "indent": 3,
      "text": "Input scalar:\n  3d262fddf9ec8e88495266fea19a34d28882acef045104d0d1aae121\n  700a779c984c24f8cdd78fbff44943eba368f54b29259a4f1c600ad3\nInput scalar as a number (base 10):\n  599189175373896402783756016145213256157230856\n  085026129926891459468622403380588640249457727\n  683869421921443004045221642549886377526240828\nInput u-coordinate:\n  06fce640fa3487bfda5f6cf2d5263f8aad88334cbd07437f020f08f9\n  814dc031ddbdc38c19c6da2583fa5429db94ada18aa7a7fb4ef8a086\nInput u-coordinate as a number (base 10):\n  382239910814107330116229961234899377031416365\n  240571325148346555922438025162094455820962429\n  142971339584360034337310079791515452463053830\nOutput u-coordinate:\n  ce3e4ff95a60dc6697da1db1d85e6afbdf79b50a2412d7546d5f239f\n  e14fbaadeb445fc66a01b0779d98223961111e21766282f73dd96b6f",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "Input scalar:\n  203d494428b8399352665ddca42f9de8fef600908e0d461cb021f8c5\n  38345dd77c3e4806e25f46d3315c44e0a5b4371282dd2c8d5be3095f\nInput scalar as a number (base 10):\n  633254335906970592779259481534862372382525155\n  252028961056404001332122152890562527156973881\n  968934311400345568203929409663925541994577184\nInput u-coordinate:\n  0fbcc2f993cd56d3305b0b7d9e55d4c1a8fb5dbb52f8e9a1e9b6201b\n  165d015894e56c4d3570bee52fe205e28a78b91cdfbde71ce8d157db\nInput u-coordinate as a number (base 10):\n  622761797758325444462922068431234180649590390\n  024811299761625153767228042600197997696167956\n  134770744996690267634159427999832340166786063\nOutput u-coordinate:\n  884a02576239ff7a2f2f63b2db6a9ff37047ac13568e1e30fe63c4a7\n  ad1b3ee3a5700df34321d62077e63633c575c1c954514e99da7c179d",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "The second type of test vector consists of the result of calling the function in question a specified number of times. Initially, set k and u to be the following values:",
      "ja": "2番目のタイプのテストベクトルは、問題の関数を指定された回数呼び出した結果で構成されます。最初に、kとuを次の値に設定します。"
    },
    {
      "indent": 3,
      "text": "For X25519:\n  0900000000000000000000000000000000000000000000000000000000000000\nFor X448:\n  05000000000000000000000000000000000000000000000000000000\n  00000000000000000000000000000000000000000000000000000000",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "For each iteration, set k to be the result of calling the function and u to be the old value of k. The final result is the value left in k.",
      "ja": "反復ごとに、kを関数の呼び出しの結果に設定し、uをkの古い値に設定します。最終結果は、kに残った値です。"
    },
    {
      "indent": 3,
      "text": "X25519:",
      "ja": "＃19："
    },
    {
      "indent": 3,
      "text": "After one iteration:\n    422c8e7a6227d7bca1350b3e2bb7279f7897b87bb6854b783c60e80311ae3079\nAfter 1,000 iterations:\n    684cf59ba83309552800ef566f2f4d3c1c3887c49360e3875f2eb94d99532c51\nAfter 1,000,000 iterations:\n    7c3911e0ab2586fd864497297e575e6f3bc601c0883c30df5f4dd2d24f665424",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "X448:",
      "ja": "X448："
    },
    {
      "indent": 3,
      "text": "After one iteration:\n    3f482c8a9f19b01e6c46ee9711d9dc14fd4bf67af30765c2ae2b846a\n    4d23a8cd0db897086239492caf350b51f833868b9bc2b3bca9cf4113\nAfter 1,000 iterations:\n    aa3b4749d55b9daf1e5b00288826c467274ce3ebbdd5c17b975e09d4\n    af6c67cf10d087202db88286e2b79fceea3ec353ef54faa26e219f38\nAfter 1,000,000 iterations:\n    077f453681caca3693198420bbe515cae0002472519b3e67661a7e89\n    cab94695c8f4bcd66e61b9b9c946da8d524de3d69bd9d9d66b997e37",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "6. Diffie-Hellman",
      "section_title": true,
      "ja": "6. ディフィーヘルマン"
    },
    {
      "indent": 0,
      "text": "6.1. Curve25519",
      "section_title": true,
      "ja": "6.1. 曲線25519"
    },
    {
      "indent": 3,
      "text": "The X25519 function can be used in an Elliptic Curve Diffie-Hellman (ECDH) protocol as follows:",
      "ja": "X25519関数は、Elliptic Curve Diffie-Hellman（ECDH）プロトコルで次のように使用できます。"
    },
    {
      "indent": 3,
      "text": "Alice generates 32 random bytes in a[0] to a[31] and transmits K_A = X25519(a, 9) to Bob, where 9 is the u-coordinate of the base point and is encoded as a byte with value 9, followed by 31 zero bytes.",
      "ja": "アリスは、a [0]〜a [31]で32のランダムバイトを生成し、K_A = X25519（a、9）をボブに送信します。9は基点のu座標であり、値9のバイトとしてエンコードされます。 31ゼロバイト。"
    },
    {
      "indent": 3,
      "text": "Bob similarly generates 32 random bytes in b[0] to b[31], computes K_B = X25519(b, 9), and transmits it to Alice.",
      "ja": "ボブは同様にb [0]からb [31]で32のランダムバイトを生成し、K_B = X25519（b、9）を計算して、それをアリスに送信します。"
    },
    {
      "indent": 3,
      "text": "Using their generated values and the received input, Alice computes X25519(a, K_B) and Bob computes X25519(b, K_A).",
      "ja": "生成された値と受信した入力を使用して、AliceはX25519（a、K_B）を計算し、BobはX25519（b、K_A）を計算します。"
    },
    {
      "indent": 3,
      "text": "Both now share K = X25519(a, X25519(b, 9)) = X25519(b, X25519(a, 9)) as a shared secret. Both MAY check, without leaking extra information about the value of K, whether K is the all-zero value and abort if so (see below). Alice and Bob can then use a key-derivation function that includes K, K_A, and K_B to derive a symmetric key.",
      "ja": "両方が共有秘密としてK = X25519（a、X25519（b、9））= X25519（b、X25519（a、9））を共有するようになりました。どちらも、Kの値に関する追加情報をリークせずに、Kがすべてゼロの値であるかどうかをチェックし、そうである場合は中止します（以下を参照）。次に、アリスとボブは、K、K_A、およびK_Bを含む鍵導出関数を使用して、対称鍵を導出できます。"
    },
    {
      "indent": 3,
      "text": "The check for the all-zero value results from the fact that the X25519 function produces that value if it operates on an input corresponding to a point with small order, where the order divides the cofactor of the curve (see Section 7). The check may be performed by ORing all the bytes together and checking whether the result is zero, as this eliminates standard side-channels in software implementations.",
      "ja": "すべてがゼロの値のチェックは、X25519関数が小さい次数の点に対応する入力に作用すると、その値が生成され、次数が曲線の補因子を分割するという事実から生じます（セクション7を参照）。このチェックは、すべてのバイトをOR演算し、結果がゼロかどうかをチェックすることで実行できます。これにより、ソフトウェア実装での標準のサイドチャネルが排除されます。"
    },
    {
      "indent": 3,
      "text": "Test vector:",
      "ja": "テストベクトル："
    },
    {
      "indent": 3,
      "text": "Alice's private key, a:\n  77076d0a7318a57d3c16c17251b26645df4c2f87ebc0992ab177fba51db92c2a\nAlice's public key, X25519(a, 9):\n  8520f0098930a754748b7ddcb43ef75a0dbf3a0d26381af4eba4a98eaa9b4e6a\nBob's private key, b:\n  5dab087e624a8a4b79e17f8b83800ee66f3bb1292618b6fd1c2f8b27ff88e0eb\nBob's public key, X25519(b, 9):\n  de9edb7d7b7dc1b4d35b61c2ece435373f8343c85b78674dadfc7e146f882b4f\nTheir shared secret, K:\n  4a5d9d5ba4ce2de1728e3bf480350f25e07e21c947d19e3376f09b3c1e161742",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "6.2. Curve448",
      "section_title": true,
      "ja": "6.2. 曲線448"
    },
    {
      "indent": 3,
      "text": "The X448 function can be used in an ECDH protocol very much like the X25519 function.",
      "ja": "X448関数は、X25519関数と非常によく似たECDHプロトコルで使用できます。"
    },
    {
      "indent": 3,
      "text": "If X448 is to be used, the only differences are that Alice and Bob generate 56 random bytes (not 32) and calculate K_A = X448(a, 5) or K_B = X448(b, 5), where 5 is the u-coordinate of the base point and is encoded as a byte with value 5, followed by 55 zero bytes.",
      "ja": "X448を使用する場合、唯一の違いは、アリスとボブが（32ではなく）56のランダムバイトを生成し、K_A = X448（a、5）またはK_B = X448（b、5）を計算することです。ここで、5はu座標です。基点の値であり、値5のバ​​イトとしてエンコードされ、その後に0バイトが55バイト続きます。"
    },
    {
      "indent": 3,
      "text": "As with X25519, both sides MAY check, without leaking extra information about the value of K, whether the resulting shared K is the all-zero value and abort if so.",
      "ja": "X25519と同様に、Kの値に関する追加情報を漏らさずに、結果の共有Kがすべてゼロの値であるかどうかを両側でチェックし、そうであれば中止します。"
    },
    {
      "indent": 3,
      "text": "Test vector:",
      "ja": "テストベクトル："
    },
    {
      "indent": 3,
      "text": "Alice's private key, a:\n  9a8f4925d1519f5775cf46b04b5800d4ee9ee8bae8bc5565d498c28d\n  d9c9baf574a9419744897391006382a6f127ab1d9ac2d8c0a598726b\nAlice's public key, X448(a, 5):\n  9b08f7cc31b7e3e67d22d5aea121074a273bd2b83de09c63faa73d2c\n  22c5d9bbc836647241d953d40c5b12da88120d53177f80e532c41fa0\nBob's private key, b:\n  1c306a7ac2a0e2e0990b294470cba339e6453772b075811d8fad0d1d\n  6927c120bb5ee8972b0d3e21374c9c921b09d1b0366f10b65173992d\nBob's public key, X448(b, 5):\n  3eb7a829b0cd20f5bcfc0b599b6feccf6da4627107bdb0d4f345b430\n  27d8b972fc3e34fb4232a13ca706dcb57aec3dae07bdc1c67bf33609\nTheir shared secret, K:\n  07fff4181ac6cc95ec1c16a94a0f74d12da232ce40a77552281d282b\n  b60c0b56fd2464c335543936521c24403085d59a449a5037514a879d",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "7. Security Considerations",
      "section_title": true,
      "ja": "7. セキュリティに関する考慮事項"
    },
    {
      "indent": 3,
      "text": "The security level (i.e., the number of \"operations\" needed for a brute-force attack on a primitive) of curve25519 is slightly under the standard 128-bit level. This is acceptable because the standard security levels are primarily driven by much simpler, symmetric primitives where the security level naturally falls on a power of two. For asymmetric primitives, rigidly adhering to a power-of-two security level would require compromises in other parts of the design, which we reject. Additionally, comparing security levels between types of primitives can be misleading under common threat models where multiple targets can be attacked concurrently [bruteforce].",
      "ja": "curve25519のセキュリティレベル（つまり、プリミティブに対するブルートフォース攻撃に必要な「操作」の数）は、標準の128ビットレベルをわずかに下回っています。標準のセキュリティレベルは主に、セキュリティレベルが2のべき乗に落ちるはるかに単純な対称プリミティブによって主に駆動されるため、これは許容範囲です。非対称プリミティブの場合、2の累乗のセキュリティレベルに厳密に準拠するには、設計の他の部分での妥協が必要になるため、これを拒否します。さらに、プリミティブのタイプ間のセキュリティレベルの比較は、複数のターゲットが同時に攻撃される可能性がある一般的な脅威モデルの下で誤解を招く可能性があります[ブルートフォース]。"
    },
    {
      "indent": 3,
      "text": "The ~224-bit security level of curve448 is a trade-off between performance and paranoia. Large quantum computers, if ever created, will break both curve25519 and curve448, and reasonable projections of the abilities of classical computers conclude that curve25519 is perfectly safe. However, some designs have relaxed performance requirements and wish to hedge against some amount of analytical advance against elliptic curves and thus curve448 is also provided.",
      "ja": "curve448の〜224ビットのセキュリティレベルは、パフォーマンスと偏執狂の間のトレードオフです。大規模な量子コンピューターは、作成されたとしても、curve25519とcurve448の両方を壊し、古典的なコンピューターの能力の合理的な予測では、curve25519は完全に安全であると結論付けています。ただし、一部の設計ではパフォーマンス要件が緩和されており、楕円曲線に対するある程度の分析の進歩を回避したいため、curve448も用意されています。"
    },
    {
      "indent": 3,
      "text": "Protocol designers using Diffie-Hellman over the curves defined in this document must not assume \"contributory behaviour\". Specially, contributory behaviour means that both parties' private keys contribute to the resulting shared key. Since curve25519 and curve448 have cofactors of 8 and 4 (respectively), an input point of small order will eliminate any contribution from the other party's private key. This situation can be detected by checking for the all-zero output, which implementations MAY do, as specified in Section 6. However, a large number of existing implementations do not do this.",
      "ja": "このドキュメントで定義されている曲線上でDiffie-Hellmanを使用するプロトコル設計者は、「寄与動作」を想定してはなりません。特に、寄与動作とは、両方の当事者の秘密鍵が結果の共有鍵に寄与することを意味します。 curve25519とcurve448の補因子は（それぞれ）8と4であるため、小さい順序の入力ポイントでは、相手の秘密鍵からの貢献が排除されます。この状況は、セクション6で指定されているように、すべてゼロの出力をチェックすることで検出できます。ただし、既存の実装の多くはこれを行いません。"
    },
    {
      "indent": 3,
      "text": "Designers using these curves should be aware that for each public key, there are several publicly computable public keys that are equivalent to it, i.e., they produce the same shared secrets. Thus using a public key as an identifier and knowledge of a shared secret as proof of ownership (without including the public keys in the key derivation) might lead to subtle vulnerabilities.",
      "ja": "これらの曲線を使用する設計者は、公開鍵ごとに、それに相当する公開で計算可能な公開鍵がいくつかある、つまり、同じ共有秘密を生成することに注意する必要があります。したがって、公開鍵を識別子として使用し、共有秘密の知識を所有権の証明として使用すると（公開鍵を鍵導出に含めないで）、微妙な脆弱性につながる可能性があります。"
    },
    {
      "indent": 3,
      "text": "Designers should also be aware that implementations of these curves might not use the Montgomery ladder as specified in this document, but could use generic, elliptic-curve libraries instead. These implementations could reject points on the twist and could reject non-minimal field elements. While not recommended, such implementations will interoperate with the Montgomery ladder specified here but may be trivially distinguishable from it. For example, sending a non-canonical value or a point on the twist may cause such implementations to produce an observable error while an implementation that follows the design in this text would successfully produce a shared key.",
      "ja": "設計者は、これらの曲線の実装では、このドキュメントで指定されているモンゴメリーラダーを使用しない場合がありますが、代わりに一般的な楕円曲線ライブラリを使用できることにも注意してください。これらの実装は、ツイスト上のポイントを拒否し、最小でないフィールド要素を拒否する可能性があります。推奨されませんが、そのような実装は、ここで指定されたモンゴメリーラダーと相互運用しますが、簡単に区別できる場合があります。たとえば、非標準値またはツイスト上のポイントを送信すると、このような実装で観察可能なエラーが発生し、このテキストの設計に従う実装では共有キーが正常に生成されます。"
    },
    {
      "indent": 0,
      "text": "8. References",
      "section_title": true,
      "ja": "8. 参考文献"
    },
    {
      "indent": 0,
      "text": "8.1. Normative References",
      "section_title": true,
      "ja": "8.1. 引用文献"
    },
    {
      "indent": 3,
      "text": "[RFC2119] Bradner, S., \"Key words for use in RFCs to Indicate Requirement Levels\", BCP 14, RFC 2119, DOI 10.17487/RFC2119, March 1997, <http://www.rfc-editor.org/info/rfc2119>.",
      "ja": "[RFC2119] Bradner、S。、「要件レベルを示すためにRFCで使用するキーワード」、BCP 14、RFC 2119、DOI 10.17487 / RFC2119、1997年3月、<http://www.rfc-editor.org/info/ rfc2119>。"
    },
    {
      "indent": 0,
      "text": "8.2. Informative References",
      "section_title": true,
      "ja": "8.2. 参考引用"
    },
    {
      "indent": 3,
      "text": "[brainpool] ECC Brainpool, \"ECC Brainpool Standard Curves and Curve Generation\", October 2005, <http://www.ecc-brainpool.org/download/ Domain-parameters.pdf>.",
      "ja": "[brainpool] ECC Brainpool、「ECC Brainpool Standard Curves and Curve Generation」、2005年10月、<http://www.ecc-brainpool.org/download/ Domain-parameters.pdf>。"
    },
    {
      "indent": 3,
      "text": "[bruteforce] Bernstein, D., \"Understanding brute force\", April 2005, <http://cr.yp.to/snuffle/bruteforce-20050425.pdf>.",
      "ja": "[bruteforce] Bernstein、D。、「Understanding brute force」、2005年4月、<http://cr.yp.to/snuffle/bruteforce-20050425.pdf>。"
    },
    {
      "indent": 3,
      "text": "[curve25519] Bernstein, D., \"Curve25519: new Diffie-Hellman speed records\", 2006, <http://www.iacr.org/cryptodb/archive/2006/ PKC/3351/3351.pdf>.",
      "ja": "[curve25519] Bernstein、D。、「Curve25519：new Diffie-Hellman speed records」、2006、<http://www.iacr.org/cryptodb/archive/2006/ PKC / 3351 / 3351.pdf>。"
    },
    {
      "indent": 3,
      "text": "[ed25519] Bernstein, D., Duif, N., Lange, T., Schwabe, P., and B. Yang, \"High-Speed High-Security Signatures\", 2011, <http://link.springer.com/ chapter/10.1007/978-3-642-23951-9_9>.",
      "ja": "[ed25519] Bernstein、D.、Duif、N.、Lange、T.、Schwabe、P。、およびB. Yang、「High-Speed High-Security Signatures」、2011、<http://link.springer.com / chapter / 10.1007 / 978-3-642-23951-9_9>。"
    },
    {
      "indent": 3,
      "text": "[goldilocks] Hamburg, M., \"Ed448-Goldilocks, a new elliptic curve\", 2015, <http://eprint.iacr.org/2015/625.pdf>.",
      "ja": "[goldilocks]ハンブルク、M。、「Ed448-Goldilocks、新しい楕円曲線」、2015年、<http://eprint.iacr.org/2015/625.pdf>。"
    },
    {
      "indent": 3,
      "text": "[montgomery] Montgomery, P., \"Speeding the Pollard and Elliptic Curve Methods of Factorization\", January 1987, <http://www.ams.org/journals/mcom/1987-48-177/ S0025-5718-1987-0866113-7/S0025-5718-1987-0866113-7.pdf>.",
      "ja": "[montgomery]モンゴメリー、P。、「分解のポラードおよび楕円曲線法の高速化」、1987年1月、<http://www.ams.org/journals/mcom/1987-48-177/ S0025-5718-1987- 0866113-7 / S0025-5718-1987-0866113-7.pdf>。"
    },
    {
      "indent": 3,
      "text": "[NIST] National Institute of Standards, \"Recommended Elliptic Curves for Federal Government Use\", July 1999, <http://csrc.nist.gov/groups/ST/toolkit/documents/dss/ NISTReCur.pdf>.",
      "ja": "[NIST]国立標準研究所、「連邦政府の使用に推奨される楕円曲線」、1999年7月、<http://csrc.nist.gov/groups/ST/toolkit/documents/dss/ NISTReCur.pdf>。"
    },
    {
      "indent": 3,
      "text": "[reducing] Menezes, A., Okamoto, T., and S. Vanstone, \"Reducing elliptic curve logarithms to logarithms in a finite field\", DOI 10.1109/18.259647, 1993, <http://ieeexplore.ieee.org/xpl/ articleDetails.jsp?arnumber=259647>.",
      "ja": "[reduce] Menezes、A.、Okamoto、T。、およびS. Vanstone、「楕円曲線の対数を有限体の対数に減らす」、DOI 10.1109 / 18.259647、1993、<http://ieeexplore.ieee.org/xpl / articleDetails.jsp？arnumber = 259647>。"
    },
    {
      "indent": 3,
      "text": "[RFC6090] McGrew, D., Igoe, K., and M. Salter, \"Fundamental Elliptic Curve Cryptography Algorithms\", RFC 6090, DOI 10.17487/RFC6090, February 2011, <http://www.rfc-editor.org/info/rfc6090>.",
      "ja": "[RFC6090] McGrew、D.、Igoe、K。、およびM. Salter、「Fundamental Elliptic Curve Cryptography Algorithms」、RFC 6090、DOI 10.17487 / RFC6090、2011年2月、<http://www.rfc-editor.org/ info / rfc6090>。"
    },
    {
      "indent": 3,
      "text": "[safecurves] Bernstein, D. and T. Lange, \"SafeCurves: choosing safe curves for elliptic-curve cryptography\", Oct 2013, <http://safecurves.cr.yp.to/>.",
      "ja": "[safecurves] Bernstein、D.とT. Lange、「SafeCurves：Choose a safecurs for elliptic-curve cryptography」、2013年10月、<http://safecurves.cr.yp.to/>。"
    },
    {
      "indent": 3,
      "text": "[satoh] Satoh, T. and K. Araki, \"Fermat quotients and the polynomial time discrete log algorithm for anomalous elliptic curves\", 1998.",
      "ja": "[satoh] Satoh、T. and K. Araki、 \"Fermat quotients and the polynomial time離散log algorithm for anomalys ellipticcurves\"、1998。"
    },
    {
      "indent": 3,
      "text": "[SEC1] Certicom Research, \"SEC 1: Elliptic Curve Cryptography\", September 2000, <http://www.secg.org/sec1-v2.pdf>.",
      "ja": "[SEC1] Certicom Research、「SEC 1：Elliptic Curve Cryptography」、2000年9月、<http://www.secg.org/sec1-v2.pdf>。"
    },
    {
      "indent": 3,
      "text": "[semaev] Semaev, I., \"Evaluation of discrete logarithms on some elliptic curves\", 1998, <http://www.ams.org/journals/ mcom/1998-67-221/S0025-5718-98-00887-4/ S0025-5718-98-00887-4.pdf>.",
      "ja": "[semaev] Semaev、I。、「いくつかの楕円曲線上の離散対数の評価」、1998、<http://www.ams.org/journals/ mcom / 1998-67-221 / S0025-5718-98-00887- 4 / S0025-5718-98-00887-4.pdf>。"
    },
    {
      "indent": 3,
      "text": "[smart] Smart, N., \"The Discrete Logarithm Problem on Elliptic Curves of Trace One\", 1999, <http://www.hpl.hp.com/techreports/97/HPL-97-128.pdf>.",
      "ja": "[smart] Smart、N。、「Trace Oneの楕円曲線の離散対数問題」、1999、<http://www.hpl.hp.com/techreports/97/HPL-97-128.pdf>。"
    },
    {
      "indent": 0,
      "text": "Appendix A. Deterministic Generation",
      "section_title": true,
      "ja": "付録A.確定的生成"
    },
    {
      "indent": 3,
      "text": "This section specifies the procedure that was used to generate the above curves; specifically, it defines how to generate the parameter A of the Montgomery curve y^2 = x^3 + A*x^2 + x. This procedure is intended to be as objective as can reasonably be achieved so that it's clear that no untoward considerations influenced the choice of curve. The input to this process is p, the prime that defines the underlying field. The size of p determines the amount of work needed to compute a discrete logarithm in the elliptic curve group, and choosing a precise p depends on many implementation concerns. The performance of the curve will be dominated by operations in GF(p), so carefully choosing a value that allows for easy reductions on the intended architecture is critical. This document does not attempt to articulate all these considerations.",
      "ja": "このセクションでは、上記の曲線を生成するために使用された手順を指定します。具体的には、モンゴメリ曲線y ^ 2 = x ^ 3 + A * x ^ 2 + xのパラメータAの生成方法を定義します。この手順は、合理的に達成できるのと同じくらい客観的であることを目的としているため、不都合な考慮事項が曲線の選択に影響を与えなかったことが明らかです。このプロセスへの入力は、基礎となるフィールドを定義する素数であるpです。 pのサイズは、楕円曲線グループの離散対数を計算するために必要な作業量を決定し、正確なpの選択は、多くの実装上の問題に依存します。曲線のパフォーマンスはGF（p）の演算に支配されるため、意図したアーキテクチャーを簡単に削減できる値を慎重に選択することが重要です。このドキュメントでは、これらすべての考慮事項を明確に説明することはしません。"
    },
    {
      "indent": 3,
      "text": "The value (A-2)/4 is used in several of the elliptic curve point arithmetic formulas. For simplicity and performance reasons, it is beneficial to make this constant small, i.e., to choose A so that (A-2) is a small integer that is divisible by four.",
      "ja": "値（A-2）/ 4は、いくつかの楕円曲線点演算式で使用されています。単純化とパフォーマンス上の理由から、この定数を小さくすること、つまりAを選択して（A-2）が4で割り切れる小さな整数になるようにすることが有益です。"
    },
    {
      "indent": 3,
      "text": "For each curve at a specific security level:",
      "ja": "特定のセキュリティレベルの各曲線について："
    },
    {
      "indent": 3,
      "text": "1. The trace of Frobenius MUST NOT be in {0, 1} in order to rule out the attacks described in [smart], [satoh], and [semaev], as in [brainpool] and [safecurves].",
      "ja": "1. [brainpool]や[safecurves]のように、[smart]、[satoh]、[semaev]で説明されている攻撃を除外するために、フロベニウスの痕跡を{0、1}に含めてはなりません。"
    },
    {
      "indent": 3,
      "text": "2. MOV Degree [reducing]: the embedding degree MUST be greater than (order - 1) / 100, as in [brainpool] and [safecurves].",
      "ja": "2. MOV Degree [reducing]：埋め込みの度合いは、[brainpool]や[safecurves]のように、（order-1）/ 100より大きくなければなりません（MUST）。"
    },
    {
      "indent": 3,
      "text": "3. CM Discriminant: discriminant D MUST be greater than 2^100, as in [safecurves].",
      "ja": "3. CM判別式：[safecurves]のように、判別式Dは2 ^ 100より大きい必要があります。"
    },
    {
      "indent": 0,
      "text": "A.1. p = 1 mod 4",
      "section_title": true,
      "ja": "A.1. p = 1 mod 4"
    },
    {
      "indent": 3,
      "text": "For primes congruent to 1 mod 4, the minimal cofactors of the curve and its twist are either {4, 8} or {8, 4}. We choose a curve with the latter cofactors so that any algorithms that take the cofactor into account don't have to worry about checking for points on the twist, because the twist cofactor will be the smaller of the two.",
      "ja": "1 mod 4に一致する素数の場合、曲線の最小補因子とそのねじれは{4、8}または{8、4}のいずれかです。後者の補因子を持つ曲線を選択します。これにより、補因子を考慮に入れるアルゴリズムは、ツイスト上の因子のチェックについて心配する必要がなくなります。これは、ツイスト補因子が2つのうち小さい方になるためです。"
    },
    {
      "indent": 3,
      "text": "To generate the Montgomery curve, we find the minimal, positive A value such that A > 2 and (A-2) is divisible by four and where the cofactors are as desired. The find1Mod4 function in the following Sage script returns this value given p:",
      "ja": "モンゴメリー曲線を生成するために、A> 2で（A-2）が4で割り切れるような最小の正のA値を見つけ、補因子は希望どおりです。次のSageスクリプトのfind1Mod4関数は、pを指定するとこの値を返します。"
    },
    {
      "indent": 3,
      "text": "<CODE BEGINS>\ndef findCurve(prime, curveCofactor, twistCofactor):\n    F = GF(prime)",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 7,
      "text": "for A in xrange(3, int(1e9)):\n    if (A-2) % 4 != 0:\n      continue",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 11,
      "text": "try: E = EllipticCurve(F, [0, A, 0, 1, 0]) except: continue",
      "ja": "試行：E = EllipticCurve（F、[0、A、0、1、0]）以外：続行"
    },
    {
      "indent": 11,
      "text": "groupOrder = E.order()\ntwistOrder = 2*(prime+1)-groupOrder",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 11,
      "text": "if (groupOrder % curveCofactor == 0 and\n    is_prime(groupOrder // curveCofactor) and\n    twistOrder % twistCofactor == 0 and\n    is_prime(twistOrder // twistCofactor)):\n    return A",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "def find1Mod4(prime):\n    assert((prime % 4) == 1)\n    return findCurve(prime, 8, 4)\n<CODE ENDS>",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 19,
      "text": "Generating a curve where p = 1 mod 4",
      "ja": "p = 1 mod 4である曲線の生成"
    },
    {
      "indent": 0,
      "text": "A.2. p = 3 mod 4",
      "section_title": true,
      "ja": "A.2. p = 3 mod 4"
    },
    {
      "indent": 3,
      "text": "For a prime congruent to 3 mod 4, both the curve and twist cofactors can be 4, and this is minimal. Thus, we choose the curve with these cofactors and minimal, positive A such that A > 2 and (A-2) is divisible by four. The find3Mod4 function in the following Sage script returns this value given p:",
      "ja": "3 mod 4に一致する素数の場合、曲線とねじれの両方の補因子を4にすることができ、これは最小限です。したがって、A> 2および（A-2）が4で割り切れるように、これらの補因子と最小の正のAを持つ曲線を選択します。次のSageスクリプトのfind3Mod4関数は、pを指定するとこの値を返します。"
    },
    {
      "indent": 3,
      "text": "<CODE BEGINS>\ndef find3Mod4(prime):\n    assert((prime % 4) == 3)\n    return findCurve(prime, 4, 4)\n<CODE ENDS>",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 19,
      "text": "Generating a curve where p = 3 mod 4",
      "ja": "p = 3 mod 4である曲線の生成"
    },
    {
      "indent": 0,
      "text": "A.3. Base Points",
      "section_title": true,
      "ja": "A.3. 基点"
    },
    {
      "indent": 3,
      "text": "The base point for a curve is the point with minimal, positive u value that is in the correct subgroup. The findBasepoint function in the following Sage script returns this value given p and A:",
      "ja": "曲線の基点は、正しいサブグループ内にある、最小の正のu値を持つ点です。次のSageスクリプトのfindBasepoint関数は、pとAを指定してこの値を返します。"
    },
    {
      "indent": 3,
      "text": "<CODE BEGINS>\ndef findBasepoint(prime, A):\n    F = GF(prime)\n    E = EllipticCurve(F, [0, A, 0, 1, 0])",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 7,
      "text": "for uInt in range(1, 1e3):\n  u = F(uInt)\n  v2 = u^3 + A*u^2 + u\n  if not v2.is_square():\n    continue\n  v = v2.sqrt()",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "      point = E(u, v)\n      pointOrder = point.order()\n      if pointOrder > 8 and pointOrder.is_prime():\n        return point\n<CODE ENDS>",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 25,
      "text": "Generating the base point",
      "ja": "基点の生成"
    },
    {
      "indent": 0,
      "text": "Acknowledgements",
      "ja": "謝辞"
    },
    {
      "indent": 3,
      "text": "This document is the result of a combination of draft-black-rpgecc-01 and draft-turner-thecurve25519function-01. The following authors of those documents wrote much of the text and figures but are not listed as authors on this document: Benjamin Black, Joppe W. Bos, Craig Costello, Patrick Longa, Michael Naehrig, Watson Ladd, and Rich Salz.",
      "ja": "このドキュメントはdraft-black-rpgecc-01とdraft-turner-thecurve25519function-01の組み合わせの結果です。これらの文書の次の著者は、テキストと図の多くを書いたが、この文書の著者として記載されていない：ベンジャミンブラック、ジョッペWボス、クレイグコステロ、パトリックロンガ、マイケルネーリッグ、ワトソンラッド、およびリッチサルツ。"
    },
    {
      "indent": 3,
      "text": "The authors would also like to thank Tanja Lange, Rene Struik, Rich Salz, Ilari Liusvaara, Deirdre Connolly, Simon Josefsson, Stephen Farrell, Georg Nestmann, Trevor Perrin, and John Mattsson for their reviews and contributions.",
      "ja": "著者はまた、レビューと貢献をしてくれたTanja Lange、Rene Struik、Rich Salz、Ilari Liusvaara、Deirdre Connolly、Simon Josefsson、Stephen Farrell、Georg Nestmann、Trevor Perrin、およびJohn Mattssonにも感謝します。"
    },
    {
      "indent": 3,
      "text": "The X25519 function was developed by Daniel J. Bernstein in [curve25519].",
      "ja": "X25519関数は、Daniel J. Bernsteinによって[curve25519]で開発されました。"
    },
    {
      "indent": 0,
      "text": "Authors' Addresses",
      "ja": "著者のアドレス"
    },
    {
      "indent": 3,
      "text": "Adam Langley Google 345 Spear Street San Francisco, CA 94105 United States",
      "ja": "Adam Langley Google 345 Spear Streetサンフランシスコ、CA 94105アメリカ合衆国"
    },
    {
      "indent": 3,
      "text": "Email: agl@google.com",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "Mike Hamburg Rambus Cryptography Research 425 Market Street, 11th Floor San Francisco, CA 94105 United States",
      "ja": "Mike Hamburg Rambus Cryptography Research 425 Market Street、11th Floor San Francisco、CA 94105 United States"
    },
    {
      "indent": 3,
      "text": "Email: mike@shiftleft.org",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "Sean Turner sn3rd",
      "ja": "ショーンターナーsn3rd"
    },
    {
      "indent": 3,
      "text": "Email: sean@sn3rd.com",
      "raw": true,
      "ja": ""
    }
  ]
}