{
  "title": {
    "text": "RFC 6455 - The WebSocket Protocol",
    "ja": "RFC 6455 - WebSocketプロトコル"
  },
  "number": 6455,
  "created_at": "2020-08-15 21:43:36.456911+09:00",
  "updated_by": "",
  "contents": [
    {
      "indent": 0,
      "text": "Internet Engineering Task Force (IETF)                          I. Fette\nRequest for Comments: 6455                                  Google, Inc.\nCategory: Standards Track                                    A. Melnikov\nISSN: 2070-1721                                               Isode Ltd.\n                                                           December 2011",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 25,
      "text": "The WebSocket Protocol",
      "ja": "WebSocketプロトコル"
    },
    {
      "indent": 0,
      "text": "Abstract",
      "ja": "概要"
    },
    {
      "indent": 3,
      "text": "The WebSocket Protocol enables two-way communication between a client running untrusted code in a controlled environment to a remote host that has opted-in to communications from that code. The security model used for this is the origin-based security model commonly used by web browsers. The protocol consists of an opening handshake followed by basic message framing, layered over TCP. The goal of this technology is to provide a mechanism for browser-based applications that need two-way communication with servers that does not rely on opening multiple HTTP connections (e.g., using XMLHttpRequest or <iframe>s and long polling).",
      "ja": "WebSocketプロトコルにより、制御された環境で信頼できないコードを実行しているクライアントと、そのコードからの通信をオプトインしたリモートホストとの間の双方向通信が可能になります。これに使用されるセキュリティモデルは、Webブラウザで一般的に使用されるオリジンベースのセキュリティモデルです。このプロトコルは、TCPで階層化された開始ハンドシェイクとそれに続く基本的なメッセージフレーミングで構成されています。このテクノロジーの目的は、複数のHTTP接続のオープンに依存しないサーバーとの双方向通信を必要とするブラウザーベースのアプリケーションにメカニズムを提供することです（たとえば、XMLHttpRequestまたは<iframe>の使用とロングポーリング）。"
    },
    {
      "indent": 0,
      "text": "Status of This Memo",
      "ja": "本文書の状態"
    },
    {
      "indent": 3,
      "text": "This is an Internet Standards Track document.",
      "ja": "これはInternet Standards Trackドキュメントです。"
    },
    {
      "indent": 3,
      "text": "This document is a product of the Internet Engineering Task Force (IETF). It represents the consensus of the IETF community. It has received public review and has been approved for publication by the Internet Engineering Steering Group (IESG). Further information on Internet Standards is available in Section 2 of RFC 5741.",
      "ja": "このドキュメントは、IETF（Internet Engineering Task Force）の製品です。これは、IETFコミュニティのコンセンサスを表しています。公開レビューを受け、インターネットエンジニアリングステアリンググループ（IESG）による公開が承認されました。インターネット標準の詳細については、RFC 5741のセクション2をご覧ください。"
    },
    {
      "indent": 3,
      "text": "Information about the current status of this document, any errata, and how to provide feedback on it may be obtained at http://www.rfc-editor.org/info/rfc6455.",
      "ja": "このドキュメントの現在のステータス、正誤表、およびフィードバックの提供方法に関する情報は、http：//www.rfc-editor.org/info/rfc6455で入手できます。"
    },
    {
      "indent": 0,
      "text": "Copyright Notice",
      "ja": "著作権表示"
    },
    {
      "indent": 3,
      "text": "Copyright (c) 2011 IETF Trust and the persons identified as the document authors. All rights reserved.",
      "ja": "Copyright（c）2011 IETF Trustおよびドキュメントの作成者として識別された人物。全著作権所有。"
    },
    {
      "indent": 0,
      "text": " This document is subject to BCP 78 and the IETF Trust's Legal Provisions Relating to IETF Documents (http://trustee.ietf.org/license-info) in effect on the date of publication of this document. Please review these documents carefully, as they describe your rights and restrictions with respect to this document. Code Components extracted from this document must include Simplified BSD License text as described in Section 4.e of the Trust Legal Provisions and are provided without warranty as described in the Simplified BSD License.",
      "ja": "この文書は、BCP 78およびこの文書の発行日に有効なIETF文書に関するIETFトラストの法的規定（http://trustee.ietf.org/license-info）の対象となります。これらのドキュメントは、このドキュメントに関するあなたの権利と制限を説明しているため、注意深く確認してください。このドキュメントから抽出されたコードコンポーネントには、Trust Legal Provisionsのセクション4.eに記載されているSimplified BSD Licenseのテキストが含まれている必要があり、Simplified BSD Licenseに記載されているように保証なしで提供されます。"
    },
    {
      "indent": 0,
      "text": "Table of Contents",
      "ja": "目次"
    },
    {
      "indent": 3,
      "text": "1.  Introduction . . . . . . . . . . . . . . . . . . . . . . . . .  4\n  1.1.  Background . . . . . . . . . . . . . . . . . . . . . . . .  4\n  1.2.  Protocol Overview  . . . . . . . . . . . . . . . . . . . .  5\n  1.3.  Opening Handshake  . . . . . . . . . . . . . . . . . . . .  6\n  1.4.  Closing Handshake  . . . . . . . . . . . . . . . . . . . .  9\n  1.5.  Design Philosophy  . . . . . . . . . . . . . . . . . . . .  9\n  1.6.  Security Model . . . . . . . . . . . . . . . . . . . . . . 10\n  1.7.  Relationship to TCP and HTTP . . . . . . . . . . . . . . . 11\n  1.8.  Establishing a Connection  . . . . . . . . . . . . . . . . 11\n  1.9.  Subprotocols Using the WebSocket Protocol  . . . . . . . . 12\n2.  Conformance Requirements . . . . . . . . . . . . . . . . . . . 12\n  2.1.  Terminology and Other Conventions  . . . . . . . . . . . . 13\n3.  WebSocket URIs . . . . . . . . . . . . . . . . . . . . . . . . 14\n4.  Opening Handshake  . . . . . . . . . . . . . . . . . . . . . . 14\n  4.1.  Client Requirements  . . . . . . . . . . . . . . . . . . . 14\n  4.2.  Server-Side Requirements . . . . . . . . . . . . . . . . . 20\n    4.2.1.  Reading the Client's Opening Handshake . . . . . . . . 21\n    4.2.2.  Sending the Server's Opening Handshake . . . . . . . . 22\n  4.3.  Collected ABNF for New Header Fields Used in Handshake . . 25\n  4.4.  Supporting Multiple Versions of WebSocket Protocol . . . . 26\n5.  Data Framing . . . . . . . . . . . . . . . . . . . . . . . . . 27\n  5.1.  Overview . . . . . . . . . . . . . . . . . . . . . . . . . 27\n  5.2.  Base Framing Protocol  . . . . . . . . . . . . . . . . . . 28\n  5.3.  Client-to-Server Masking . . . . . . . . . . . . . . . . . 32\n  5.4.  Fragmentation  . . . . . . . . . . . . . . . . . . . . . . 33\n  5.5.  Control Frames . . . . . . . . . . . . . . . . . . . . . . 36\n    5.5.1.  Close  . . . . . . . . . . . . . . . . . . . . . . . . 36\n    5.5.2.  Ping . . . . . . . . . . . . . . . . . . . . . . . . . 37\n    5.5.3.  Pong . . . . . . . . . . . . . . . . . . . . . . . . . 37\n  5.6.  Data Frames  . . . . . . . . . . . . . . . . . . . . . . . 38\n  5.7.  Examples . . . . . . . . . . . . . . . . . . . . . . . . . 38\n  5.8.  Extensibility  . . . . . . . . . . . . . . . . . . . . . . 39\n6.  Sending and Receiving Data . . . . . . . . . . . . . . . . . . 39\n  6.1.  Sending Data . . . . . . . . . . . . . . . . . . . . . . . 39\n  6.2.  Receiving Data . . . . . . . . . . . . . . . . . . . . . . 40\n7.  Closing the Connection . . . . . . . . . . . . . . . . . . . . 41\n  7.1.  Definitions  . . . . . . . . . . . . . . . . . . . . . . . 41\n    7.1.1.  Close the WebSocket Connection . . . . . . . . . . . . 41\n    7.1.2.  Start the WebSocket Closing Handshake  . . . . . . . . 42\n    7.1.3.  The WebSocket Closing Handshake is Started . . . . . . 42\n    7.1.4.  The WebSocket Connection is Closed . . . . . . . . . . 42\n    7.1.5.  The WebSocket Connection Close Code  . . . . . . . . . 42",
      "raw": true,
      "toc": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "    7.1.6.  The WebSocket Connection Close Reason  . . . . . . . . 43\n    7.1.7.  Fail the WebSocket Connection  . . . . . . . . . . . . 43\n  7.2.  Abnormal Closures  . . . . . . . . . . . . . . . . . . . . 44\n    7.2.1.  Client-Initiated Closure . . . . . . . . . . . . . . . 44\n    7.2.2.  Server-Initiated Closure . . . . . . . . . . . . . . . 44\n    7.2.3.  Recovering from Abnormal Closure . . . . . . . . . . . 44\n  7.3.  Normal Closure of Connections  . . . . . . . . . . . . . . 45\n  7.4.  Status Codes . . . . . . . . . . . . . . . . . . . . . . . 45\n    7.4.1.  Defined Status Codes . . . . . . . . . . . . . . . . . 45\n    7.4.2.  Reserved Status Code Ranges  . . . . . . . . . . . . . 47\n8.  Error Handling . . . . . . . . . . . . . . . . . . . . . . . . 48\n  8.1.  Handling Errors in UTF-8-Encoded Data  . . . . . . . . . . 48\n9.  Extensions . . . . . . . . . . . . . . . . . . . . . . . . . . 48\n  9.1.  Negotiating Extensions . . . . . . . . . . . . . . . . . . 48\n  9.2.  Known Extensions . . . . . . . . . . . . . . . . . . . . . 50\n10. Security Considerations  . . . . . . . . . . . . . . . . . . . 50\n  10.1. Non-Browser Clients  . . . . . . . . . . . . . . . . . . . 50\n  10.2. Origin Considerations  . . . . . . . . . . . . . . . . . . 50\n  10.3. Attacks On Infrastructure (Masking)  . . . . . . . . . . . 51\n  10.4. Implementation-Specific Limits . . . . . . . . . . . . . . 52\n  10.5. WebSocket Client Authentication  . . . . . . . . . . . . . 53\n  10.6. Connection Confidentiality and Integrity . . . . . . . . . 53\n  10.7. Handling of Invalid Data . . . . . . . . . . . . . . . . . 53\n  10.8. Use of SHA-1 by the WebSocket Handshake  . . . . . . . . . 54\n11. IANA Considerations  . . . . . . . . . . . . . . . . . . . . . 54\n  11.1. Registration of New URI Schemes  . . . . . . . . . . . . . 54\n    11.1.1. Registration of \"ws\" Scheme  . . . . . . . . . . . . . 54\n    11.1.2. Registration of \"wss\" Scheme . . . . . . . . . . . . . 55\n  11.2. Registration of the \"WebSocket\" HTTP Upgrade Keyword . . . 56\n  11.3. Registration of New HTTP Header Fields . . . . . . . . . . 57\n    11.3.1. Sec-WebSocket-Key  . . . . . . . . . . . . . . . . . . 57\n    11.3.2. Sec-WebSocket-Extensions . . . . . . . . . . . . . . . 58\n    11.3.3. Sec-WebSocket-Accept . . . . . . . . . . . . . . . . . 58\n    11.3.4. Sec-WebSocket-Protocol . . . . . . . . . . . . . . . . 59\n    11.3.5. Sec-WebSocket-Version  . . . . . . . . . . . . . . . . 60\n  11.4. WebSocket Extension Name Registry  . . . . . . . . . . . . 61\n  11.5. WebSocket Subprotocol Name Registry  . . . . . . . . . . . 61\n  11.6. WebSocket Version Number Registry  . . . . . . . . . . . . 62\n  11.7. WebSocket Close Code Number Registry . . . . . . . . . . . 64\n  11.8. WebSocket Opcode Registry  . . . . . . . . . . . . . . . . 65\n  11.9. WebSocket Framing Header Bits Registry . . . . . . . . . . 66\n12. Using the WebSocket Protocol from Other Specifications . . . . 66\n13. Acknowledgements . . . . . . . . . . . . . . . . . . . . . . . 67\n14. References . . . . . . . . . . . . . . . . . . . . . . . . . . 68\n  14.1. Normative References . . . . . . . . . . . . . . . . . . . 68\n  14.2. Informative References . . . . . . . . . . . . . . . . . . 69",
      "raw": true,
      "toc": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "1. Introduction",
      "section_title": true,
      "ja": "1. はじめに"
    },
    {
      "indent": 0,
      "text": "1.1. Background",
      "section_title": true,
      "ja": "1.1. バックグラウンド"
    },
    {
      "indent": 3,
      "text": "_This section is non-normative._",
      "ja": "_このセクションは非規範的です。_"
    },
    {
      "indent": 3,
      "text": "Historically, creating web applications that need bidirectional communication between a client and a server (e.g., instant messaging and gaming applications) has required an abuse of HTTP to poll the server for updates while sending upstream notifications as distinct HTTP calls [RFC6202].",
      "ja": "これまで、クライアントとサーバー間の双方向通信を必要とするウェブアプリケーション（インスタントメッセージングやゲームアプリケーションなど）を作成するには、アップストリーム通知を別個のHTTP呼び出しとして送信しながら、サーバーの更新をポーリングするHTTPの悪用が必要でした[RFC6202]。"
    },
    {
      "indent": 3,
      "text": "This results in a variety of problems:",
      "ja": "これにより、さまざまな問題が発生します。"
    },
    {
      "indent": 3,
      "text": "o The server is forced to use a number of different underlying TCP connections for each client: one for sending information to the client and a new one for each incoming message.",
      "ja": "o サーバーは、クライアントごとにいくつかの異なる基本的なTCP接続を使用する必要があります。"
    },
    {
      "indent": 3,
      "text": "o The wire protocol has a high overhead, with each client-to-server message having an HTTP header.",
      "ja": "o ワイヤープロトコルはオーバーヘッドが高く、クライアントからサーバーへの各メッセージにはHTTPヘッダーがあります。"
    },
    {
      "indent": 3,
      "text": "o The client-side script is forced to maintain a mapping from the outgoing connections to the incoming connection to track replies.",
      "ja": "o クライアント側のスクリプトは、返信を追跡するために、発信接続から着信接続へのマッピングを維持することを強制されます。"
    },
    {
      "indent": 3,
      "text": "A simpler solution would be to use a single TCP connection for traffic in both directions. This is what the WebSocket Protocol provides. Combined with the WebSocket API [WSAPI], it provides an alternative to HTTP polling for two-way communication from a web page to a remote server.",
      "ja": "より簡単な解決策は、双方向のトラフィックに単一のTCP接続を使用することです。これは、WebSocketプロトコルが提供するものです。 WebSocket API [WSAPI]と組み合わせることで、Webページからリモートサーバーへの双方向通信のためのHTTPポーリングの代替手段を提供します。"
    },
    {
      "indent": 3,
      "text": "The same technique can be used for a variety of web applications: games, stock tickers, multiuser applications with simultaneous editing, user interfaces exposing server-side services in real time, etc.",
      "ja": "同じ手法をさまざまなWebアプリケーションに使用できます。ゲーム、株価表示、同時編集が可能なマルチユーザーアプリケーション、サーバー側のサービスをリアルタイムで公開するユーザーインターフェイスなどです。"
    },
    {
      "indent": 0,
      "text": " The WebSocket Protocol is designed to supersede existing bidirectional communication technologies that use HTTP as a transport layer to benefit from existing infrastructure (proxies, filtering, authentication). Such technologies were implemented as trade-offs between efficiency and reliability because HTTP was not initially meant to be used for bidirectional communication (see [RFC6202] for further discussion). The WebSocket Protocol attempts to address the goals of existing bidirectional HTTP technologies in the context of the existing HTTP infrastructure; as such, it is designed to work over HTTP ports 80 and 443 as well as to support HTTP proxies and intermediaries, even if this implies some complexity specific to the current environment. However, the design does not limit WebSocket to HTTP, and future implementations could use a simpler handshake over a dedicated port without reinventing the entire protocol. This last point is important because the traffic patterns of interactive messaging do not closely match standard HTTP traffic and can induce unusual loads on some components.",
      "ja": "WebSocketプロトコルは、HTTPをトランスポート層として使用する既存の双方向通信技術に取って代わり、既存のインフラストラクチャ（プロキシ、フィルタリング、認証）を活用するように設計されています。 HTTPは当初、双方向通信に使用することを目的としていなかったため、このようなテクノロジーは効率と信頼性のトレードオフとして実装されました（詳細については[RFC6202]を参照）。 WebSocketプロトコルは、既存のHTTPインフラストラクチャのコンテキストで、既存の双方向HTTPテクノロジーの目標に対処しようとします。そのため、現在の環境に固有の複雑さを示唆している場合でも、HTTPポート80および443で動作するように設計されており、HTTPプロキシと仲介者をサポートしています。ただし、この設計はWebSocketをHTTPに限定するものではなく、将来の実装では、プロトコル全体を再発明することなく、専用ポートでより簡単なハンドシェイクを使用できるようになります。インタラクティブメッセージングのトラフィックパターンは標準のHTTPトラフィックと厳密には一致せず、一部のコンポーネントに異常な負荷を引き起こす可能性があるため、この最後のポイントは重要です。"
    },
    {
      "indent": 0,
      "text": "1.2. Protocol Overview",
      "section_title": true,
      "ja": "1.2. プロトコルの概要"
    },
    {
      "indent": 3,
      "text": "_This section is non-normative._",
      "ja": "_このセクションは非規範的です。_"
    },
    {
      "indent": 3,
      "text": "The protocol has two parts: a handshake and the data transfer.",
      "ja": "プロトコルには、ハンドシェイクとデータ転送の2つの部分があります。"
    },
    {
      "indent": 3,
      "text": "The handshake from the client looks as follows:",
      "ja": "クライアントからのハンドシェイクは次のようになります。"
    },
    {
      "indent": 8,
      "text": "GET /chat HTTP/1.1\nHost: server.example.com\nUpgrade: websocket\nConnection: Upgrade\nSec-WebSocket-Key: dGhlIHNhbXBsZSBub25jZQ==\nOrigin: http://example.com\nSec-WebSocket-Protocol: chat, superchat\nSec-WebSocket-Version: 13",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "The handshake from the server looks as follows:",
      "ja": "サーバーからのハンドシェイクは次のようになります。"
    },
    {
      "indent": 8,
      "text": "HTTP/1.1 101 Switching Protocols\nUpgrade: websocket\nConnection: Upgrade\nSec-WebSocket-Accept: s3pPLMBiTxaQ9kYGzzhZRbK+xOo=\nSec-WebSocket-Protocol: chat",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "The leading line from the client follows the Request-Line format. The leading line from the server follows the Status-Line format. The Request-Line and Status-Line productions are defined in [RFC2616].",
      "ja": "クライアントからのリーディングラインは、Request-Lineフォーマットに従います。サーバーからの先頭行は、ステータス行形式に従います。 Request-LineおよびStatus-Lineプロダクションは、[RFC2616]で定義されています。"
    },
    {
      "indent": 3,
      "text": "An unordered set of header fields comes after the leading line in both cases. The meaning of these header fields is specified in Section 4 of this document. Additional header fields may also be present, such as cookies [RFC6265]. The format and parsing of headers is as defined in [RFC2616].",
      "ja": "順序付けされていないヘッダーフィールドのセットは、どちらの場合も先頭行の後にあります。これらのヘッダーフィールドの意味は、このドキュメントのセクション4で指定されています。 Cookie [RFC6265]などの追加のヘッダーフィールドが存在する場合もあります。ヘッダーのフォーマットと解析は[RFC2616]で定義されています。"
    },
    {
      "indent": 3,
      "text": "Once the client and server have both sent their handshakes, and if the handshake was successful, then the data transfer part starts. This is a two-way communication channel where each side can, independently from the other, send data at will.",
      "ja": "クライアントとサーバーの両方がハンドシェイクを送信すると、ハンドシェイクが成功した場合、データ転送部分が開始されます。これは、双方向通信チャネルであり、各サイドは、互いに独立して、自由にデータを送信できます。"
    },
    {
      "indent": 0,
      "text": " After a successful handshake, clients and servers transfer data back and forth in conceptual units referred to in this specification as \"messages\". On the wire, a message is composed of one or more frames. The WebSocket message does not necessarily correspond to a particular network layer framing, as a fragmented message may be coalesced or split by an intermediary.",
      "ja": "ハンドシェイクが成功すると、クライアントとサーバーは、この仕様で「メッセージ」と呼ばれる概念的な単位でデータを送受信します。ネットワーク上では、メッセージは1つ以上のフレームで構成されます。断片化されたメッセージは仲介者によって合体または分割される可能性があるため、WebSocketメッセージは必ずしも特定のネットワーク層のフレーミングに対応しているわけではありません。"
    },
    {
      "indent": 3,
      "text": "A frame has an associated type. Each frame belonging to the same message contains the same type of data. Broadly speaking, there are types for textual data (which is interpreted as UTF-8 [RFC3629] text), binary data (whose interpretation is left up to the application), and control frames (which are not intended to carry data for the application but instead for protocol-level signaling, such as to signal that the connection should be closed). This version of the protocol defines six frame types and leaves ten reserved for future use.",
      "ja": "フレームにはタイプが関連付けられています。同じメッセージに属する各フレームには、同じタイプのデータが含まれています。大まかに言えば、テキストデータ（UTF-8 [RFC3629]テキストとして解釈される）、バイナリデータ（解釈はアプリケーションに任されている）、および制御フレーム（アプリケーションのデータを運ぶことを目的としていない）のタイプがあります。ただし、代わりに、接続を閉じる必要があることを通知するなど、プロトコルレベルのシグナリング用です。このバージョンのプロトコルは6つのフレームタイプを定義し、将来の使用のために10を予約しておきます。"
    },
    {
      "indent": 0,
      "text": "1.3. Opening Handshake",
      "section_title": true,
      "ja": "1.3. ハンドシェイクを開く"
    },
    {
      "indent": 3,
      "text": "_This section is non-normative._",
      "ja": "_このセクションは非規範的です。_"
    },
    {
      "indent": 3,
      "text": "The opening handshake is intended to be compatible with HTTP-based server-side software and intermediaries, so that a single port can be used by both HTTP clients talking to that server and WebSocket clients talking to that server. To this end, the WebSocket client's handshake is an HTTP Upgrade request:",
      "ja": "オープニングハンドシェイクは、HTTPベースのサーバー側のソフトウェアおよび仲介者と互換性があるように意図されているため、そのサーバーと通信するHTTPクライアントとそのサーバーと通信するWebSocketクライアントの両方で1つのポートを使用できます。このため、WebSocketクライアントのハンドシェイクはHTTPアップグレードリクエストです。"
    },
    {
      "indent": 8,
      "text": "GET /chat HTTP/1.1\nHost: server.example.com\nUpgrade: websocket\nConnection: Upgrade\nSec-WebSocket-Key: dGhlIHNhbXBsZSBub25jZQ==\nOrigin: http://example.com\nSec-WebSocket-Protocol: chat, superchat\nSec-WebSocket-Version: 13",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "In compliance with [RFC2616], header fields in the handshake may be sent by the client in any order, so the order in which different header fields are received is not significant.",
      "ja": "[RFC2616]に準拠して、ハンドシェイクのヘッダーフィールドは任意の順序でクライアントから送信される可能性があるため、異なるヘッダーフィールドが受信される順序は重要ではありません。"
    },
    {
      "indent": 3,
      "text": "The \"Request-URI\" of the GET method [RFC2616] is used to identify the endpoint of the WebSocket connection, both to allow multiple domains to be served from one IP address and to allow multiple WebSocket endpoints to be served by a single server.",
      "ja": "GETメソッド[RFC2616]の「Request-URI」は、WebSocket接続のエンドポイントを識別するために使用されます。これにより、1つのIPアドレスから複数のドメインにサービスを提供したり、1つのサーバーで複数のWebSocketエンドポイントにサービスを提供したりできます。"
    },
    {
      "indent": 3,
      "text": "The client includes the hostname in the |Host| header field of its handshake as per [RFC2616], so that both the client and the server can verify that they agree on which host is in use.",
      "ja": "クライアントのホスト名が| Host |に含まれている[RFC2616]によるハンドシェイクのヘッダーフィールド。これにより、クライアントとサーバーの両方が、どのホストが使用されているかについて合意できることを確認できます。"
    },
    {
      "indent": 3,
      "text": "Additional header fields are used to select options in the WebSocket Protocol. Typical options available in this version are the subprotocol selector (|Sec-WebSocket-Protocol|), list of extensions support by the client (|Sec-WebSocket-Extensions|), |Origin| header field, etc. The |Sec-WebSocket-Protocol| request-header field can be used to indicate what subprotocols (application-level protocols layered over the WebSocket Protocol) are acceptable to the client. The server selects one or none of the acceptable protocols and echoes that value in its handshake to indicate that it has selected that protocol.",
      "ja": "追加のヘッダーフィールドは、WebSocketプロトコルのオプションを選択するために使用されます。このバージョンで使用できる一般的なオプションは、サブプロトコルセレクター（| Sec-WebSocket-Protocol |）、クライアントがサポートする拡張機能のリスト（| Sec-WebSocket-Extensions |）、| Origin |です。ヘッダーフィールドなど。| Sec-WebSocket-Protocol | request-headerフィールドは、どのサブプロトコル（WebSocketプロトコルを介して階層化されたアプリケーションレベルのプロトコル）がクライアントに受け入れられるかを示すために使用できます。サーバーは、受け入れ可能なプロトコルを1つまたはまったく選択せず、その値をハンドシェイクにエコーして、そのプロトコルが選択されたことを示します。"
    },
    {
      "indent": 8,
      "text": "Sec-WebSocket-Protocol: chat",
      "ja": "Sec-WebSocket-Protocol：チャット"
    },
    {
      "indent": 3,
      "text": "The |Origin| header field [RFC6454] is used to protect against unauthorized cross-origin use of a WebSocket server by scripts using the WebSocket API in a web browser. The server is informed of the script origin generating the WebSocket connection request. If the server does not wish to accept connections from this origin, it can choose to reject the connection by sending an appropriate HTTP error code. This header field is sent by browser clients; for non-browser clients, this header field may be sent if it makes sense in the context of those clients.",
      "ja": "|起源|ヘッダーフィールド[RFC6454]は、WebブラウザーでWebSocket APIを使用するスクリプトによるWebSocketサーバーの不正なクロスオリジン使用から保護するために使用されます。サーバーは、WebSocket接続要求を生成するスクリプトの起点を通知されます。サーバーがこのオリジンからの接続を受け入れたくない場合は、適切なHTTPエラーコードを送信して、接続を拒否することを選択できます。このヘッダーフィールドはブラウザクライアントによって送信されます。非ブラウザークライアントの場合、これらのクライアントのコンテキストで意味がある場合、このヘッダーフィールドが送信されることがあります。"
    },
    {
      "indent": 3,
      "text": "Finally, the server has to prove to the client that it received the client's WebSocket handshake, so that the server doesn't accept connections that are not WebSocket connections. This prevents an attacker from tricking a WebSocket server by sending it carefully crafted packets using XMLHttpRequest [XMLHttpRequest] or a form submission.",
      "ja": "最後に、サーバーはクライアントのWebSocketハンドシェイクを受信したことをクライアントに証明する必要があるため、サーバーはWebSocket接続ではない接続を受け入れません。これにより、攻撃者がXMLHttpRequest [XMLHttpRequest]またはフォーム送信を使用して巧妙に細工されたパケットを送信することにより、WebSocketサーバーをだますことができなくなります。"
    },
    {
      "indent": 3,
      "text": "To prove that the handshake was received, the server has to take two pieces of information and combine them to form a response. The first piece of information comes from the |Sec-WebSocket-Key| header field in the client handshake:",
      "ja": "ハンドシェイクが受信されたことを証明するために、サーバーは2つの情報を取得し、それらを組み合わせて応答を形成する必要があります。最初の情報は、| Sec-WebSocket-Key |から取得されます。クライアントハンドシェイクのヘッダーフィールド："
    },
    {
      "indent": 8,
      "text": "Sec-WebSocket-Key: dGhlIHNhbXBsZSBub25jZQ==",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "For this header field, the server has to take the value (as present in the header field, e.g., the base64-encoded [RFC4648] version minus any leading and trailing whitespace) and concatenate this with the Globally Unique Identifier (GUID, [RFC4122]) \"258EAFA5-E914-47DA-95CA-C5AB0DC85B11\" in string form, which is unlikely to be used by network endpoints that do not understand the WebSocket Protocol. A SHA-1 hash (160 bits) [FIPS.180-3], base64-encoded (see Section 4 of [RFC4648]), of this concatenation is then returned in the server's handshake.",
      "ja": "このヘッダーフィールドの場合、サーバーは値を取得し（ヘッダーフィールドに存在するように、たとえば、base64でエンコードされた[RFC4648]バージョンから先頭と末尾の空白を差し引いたもの）、これをグローバル一意識別子（GUID、[RFC4122 ]）文字列形式の「258EAFA5-E914-47DA-95CA-C5AB0DC85B11」。これは、WebSocketプロトコルを理解しないネットワークエンドポイントでは使用されない可能性があります。この連結のSHA-1ハッシュ（160ビット）[FIPS.180-3]、base64エンコード（[RFC4648]のセクション4を参照）は、サーバーのハンドシェイクで返されます。"
    },
    {
      "indent": 3,
      "text": "Concretely, if as in the example above, the |Sec-WebSocket-Key| header field had the value \"dGhlIHNhbXBsZSBub25jZQ==\", the server would concatenate the string \"258EAFA5-E914-47DA-95CA-C5AB0DC85B11\" to form the string \"dGhlIHNhbXBsZSBub25jZQ==258EAFA5-E914-47DA-95CA-C5AB0DC85B11\". The server would then take the SHA-1 hash of this, giving the value 0xb3 0x7a 0x4f 0x2c 0xc0 0x62 0x4f 0x16 0x90 0xf6 0x46 0x06 0xcf 0x38 0x59 0x45 0xb2 0xbe 0xc4 0xea. This value is then base64-encoded (see Section 4 of [RFC4648]), to give the value \"s3pPLMBiTxaQ9kYGzzhZRbK+xOo=\". This value would then be echoed in the |Sec-WebSocket-Accept| header field.",
      "ja": "具体的には、上記の例のように、| Sec-WebSocket-Key |ヘッダーフィールドの値が \"dGhlIHNhbXBsZSBub25jZQ ==\"の場合、サーバーは文字列 \"258EAFA5-E914-47DA-95CA-C5AB0DC85B11\"を連結して文字列 \"dGhlIHNhbXBsZSBub25jZQ == 258EAFA5-E914-47DA-95CA-95CA-95CA-95CA-95CA-5CAB-95CA-5CAB11C95C-ABC95C5サーバーはこのSHA-1ハッシュを取得し、値0xb3 0x7a 0x4f 0x2c 0xc0 0x62 0x4f 0x16 0x90 0xf6 0x46 0x06 0xcf 0x38 0x59 0x45 0xb2 0xbe 0xc4 0xeaを提供します。次に、この値はbase64でエンコードされ（[RFC4648]のセクション4を参照）、値 \"s3pPLMBiTxaQ9kYGzzhZRbK + xOo =\"が得られます。この値は、| Sec-WebSocket-Accept |にエコーされます。ヘッダーフィールド。"
    },
    {
      "indent": 3,
      "text": "The handshake from the server is much simpler than the client handshake. The first line is an HTTP Status-Line, with the status code 101:",
      "ja": "サーバーからのハンドシェイクは、クライアントのハンドシェイクよりもはるかに簡単です。最初の行はHTTPステータス行で、ステータスコードは101です。"
    },
    {
      "indent": 8,
      "text": "HTTP/1.1 101 Switching Protocols",
      "ja": "HTTP / 1.1 101スイッチングプロトコル"
    },
    {
      "indent": 3,
      "text": "Any status code other than 101 indicates that the WebSocket handshake has not completed and that the semantics of HTTP still apply. The headers follow the status code.",
      "ja": "101以外のステータスコードは、WebSocketハンドシェイクが完了しておらず、HTTPのセマンティクスが引き続き適用されることを示します。ヘッダーはステータスコードの後に​​続きます。"
    },
    {
      "indent": 3,
      "text": "The |Connection| and |Upgrade| header fields complete the HTTP Upgrade. The |Sec-WebSocket-Accept| header field indicates whether the server is willing to accept the connection. If present, this header field must include a hash of the client's nonce sent in |Sec-WebSocket-Key| along with a predefined GUID. Any other value must not be interpreted as an acceptance of the connection by the server.",
      "ja": "|接続|と|アップグレード|ヘッダーフィールドは、HTTPアップグレードを完了します。 | Sec-WebSocket-Accept |ヘッダーフィールドは、サーバーが接続を受け入れる用意があるかどうかを示します。存在する場合、このヘッダーフィールドには、| Sec-WebSocket-Key |で送信されるクライアントのナンスのハッシュが含まれている必要があります。事前定義されたGUIDとともに。その他の値は、サーバーによる接続の受け入れとして解釈されてはなりません。"
    },
    {
      "indent": 8,
      "text": "HTTP/1.1 101 Switching Protocols\nUpgrade: websocket\nConnection: Upgrade\nSec-WebSocket-Accept: s3pPLMBiTxaQ9kYGzzhZRbK+xOo=",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "These fields are checked by the WebSocket client for scripted pages. If the |Sec-WebSocket-Accept| value does not match the expected value, if the header field is missing, or if the HTTP status code is not 101, the connection will not be established, and WebSocket frames will not be sent.",
      "ja": "これらのフィールドは、スクリプト化されたページについてWebSocketクライアントによってチェックされます。 | Sec-WebSocket-Accept |値が期待値と一致しない、ヘッダーフィールドがない、またはHTTPステータスコードが101でない場合、接続は確立されず、WebSocketフレームは送信されません。"
    },
    {
      "indent": 3,
      "text": "Option fields can also be included. In this version of the protocol, the main option field is |Sec-WebSocket-Protocol|, which indicates the subprotocol that the server has selected. WebSocket clients verify that the server included one of the values that was specified in the WebSocket client's handshake. A server that speaks multiple subprotocols has to make sure it selects one based on the client's handshake and specifies it in its handshake.",
      "ja": "オプションフィールドも含めることができます。このバージョンのプロトコルでは、メインオプションフィールドは| Sec-WebSocket-Protocol |で、サーバーが選択したサブプロトコルを示します。 WebSocketクライアントは、サーバーにWebSocketクライアントのハンドシェイクで指定された値の1つが含まれていたことを確認します。複数のサブプロトコルを話すサーバーは、クライアントのハンドシェイクに基づいて1つを選択し、ハンドシェイクでそれを指定する必要があります。"
    },
    {
      "indent": 8,
      "text": "Sec-WebSocket-Protocol: chat",
      "ja": "Sec-WebSocket-Protocol：チャット"
    },
    {
      "indent": 3,
      "text": "The server can also set cookie-related option fields to _set_ cookies, as described in [RFC6265].",
      "ja": "[RFC6265]で説明されているように、サーバーはcookie関連のオプションフィールドを_set_ cookiesに設定することもできます。"
    },
    {
      "indent": 0,
      "text": "1.4. Closing Handshake",
      "section_title": true,
      "ja": "1.4. ハンドシェイクを閉じる"
    },
    {
      "indent": 3,
      "text": "_This section is non-normative._",
      "ja": "_このセクションは非規範的です。_"
    },
    {
      "indent": 3,
      "text": "The closing handshake is far simpler than the opening handshake.",
      "ja": "クローズハンドシェイクは、オープンハンドシェイクよりもはるかに単純です。"
    },
    {
      "indent": 3,
      "text": "Either peer can send a control frame with data containing a specified control sequence to begin the closing handshake (detailed in Section 5.5.1). Upon receiving such a frame, the other peer sends a Close frame in response, if it hasn't already sent one. Upon receiving _that_ control frame, the first peer then closes the connection, safe in the knowledge that no further data is forthcoming.",
      "ja": "どちらのピアも、指定された制御シーケンスを含むデータを含む制御フレームを送信して、クローズハンドシェイクを開始できます（詳細は5.5.1項を参照）。そのようなフレームを受信すると、もう一方のピアは、まだフレームを送信していない場合は、それに応答してCloseフレームを送信します。最初のピアは、その制御フレームを受信すると接続を閉じ、これ以上データが送信されないことを確認して安全です。"
    },
    {
      "indent": 3,
      "text": "After sending a control frame indicating the connection should be closed, a peer does not send any further data; after receiving a control frame indicating the connection should be closed, a peer discards any further data received.",
      "ja": "接続を閉じる必要があることを示す制御フレームを送信した後、ピアはそれ以上データを送信しません。接続を閉じる必要があることを示す制御フレームを受信した後、ピアは受信したデータを破棄します。"
    },
    {
      "indent": 3,
      "text": "It is safe for both peers to initiate this handshake simultaneously.",
      "ja": "両方のピアがこのハンドシェイクを同時に開始しても安全です。"
    },
    {
      "indent": 3,
      "text": "The closing handshake is intended to complement the TCP closing handshake (FIN/ACK), on the basis that the TCP closing handshake is not always reliable end-to-end, especially in the presence of intercepting proxies and other intermediaries.",
      "ja": "クロージングハンドシェイクは、TCPクロージングハンドシェイク（FIN / ACK）を補完することを目的としています。TCPクロージングハンドシェイクは、特に傍受するプロキシやその他の仲介者が存在する場合、エンドツーエンドで常に信頼できるとは限らないためです。"
    },
    {
      "indent": 3,
      "text": "By sending a Close frame and waiting for a Close frame in response, certain cases are avoided where data may be unnecessarily lost. For instance, on some platforms, if a socket is closed with data in the receive queue, a RST packet is sent, which will then cause recv() to fail for the party that received the RST, even if there was data waiting to be read.",
      "ja": "Closeフレームを送信し、それに応答してCloseフレームを待機することにより、データが不必要に失われる可能性がある特定のケースが回避されます。たとえば、一部のプラットフォームでは、受信キューにデータがあるソケットが閉じられると、RSTパケットが送信されます。これにより、データを待っているデータがあったとしても、RSTを受信したパーティでrecv()が失敗します。読んだ。"
    },
    {
      "indent": 0,
      "text": "1.5. Design Philosophy",
      "section_title": true,
      "ja": "1.5. デザイン哲学"
    },
    {
      "indent": 3,
      "text": "_This section is non-normative._",
      "ja": "_このセクションは非規範的です。_"
    },
    {
      "indent": 0,
      "text": " The WebSocket Protocol is designed on the principle that there should be minimal framing (the only framing that exists is to make the protocol frame-based instead of stream-based and to support a distinction between Unicode text and binary frames). It is expected that metadata would be layered on top of WebSocket by the application layer, in the same way that metadata is layered on top of TCP by the application layer (e.g., HTTP).",
      "ja": "WebSocketプロトコルは、最小限のフレーミングが必要であるという原則に基づいて設計されています（存在する唯一のフレーミングは、プロトコルをストリームベースではなくフレームベースにし、Unicodeテキストとバイナリフレームの区別をサポートすることです）。メタデータがアプリケーションレイヤー（たとえば、HTTP）によってTCPの上に階層化されるのと同じ方法で、メタデータはアプリケーションレイヤーによってWebSocketの上に階層化されることが期待されます。"
    },
    {
      "indent": 3,
      "text": "Conceptually, WebSocket is really just a layer on top of TCP that does the following:",
      "ja": "概念的には、WebSocketは実際にはTCP上のレイヤーにすぎず、次のことを行います。"
    },
    {
      "indent": 3,
      "text": "o adds a web origin-based security model for browsers",
      "ja": "o ブラウザにWebオリジンベースのセキュリティモデルを追加します"
    },
    {
      "indent": 3,
      "text": "o adds an addressing and protocol naming mechanism to support multiple services on one port and multiple host names on one IP address",
      "ja": "o 1つのポートで複数のサービスと1つのIPアドレスで複数のホスト名をサポートするために、アドレッシングとプロトコルの命名メカニズムを追加します"
    },
    {
      "indent": 3,
      "text": "o layers a framing mechanism on top of TCP to get back to the IP packet mechanism that TCP is built on, but without length limits",
      "ja": "o TCPの上にフレーミングメカニズムを重ねて、TCPが構築されているが長さの制限がないIPパケットメカニズムに戻る"
    },
    {
      "indent": 3,
      "text": "o includes an additional closing handshake in-band that is designed to work in the presence of proxies and other intermediaries",
      "ja": "o プロキシやその他の仲介者の存在下で機能するように設計された追加のハンドシェイクインバンドが追加で含まれています"
    },
    {
      "indent": 3,
      "text": "Other than that, WebSocket adds nothing. Basically it is intended to be as close to just exposing raw TCP to script as possible given the constraints of the Web. It's also designed in such a way that its servers can share a port with HTTP servers, by having its handshake be a valid HTTP Upgrade request. One could conceptually use other protocols to establish client-server messaging, but the intent of WebSockets is to provide a relatively simple protocol that can coexist with HTTP and deployed HTTP infrastructure (such as proxies) and that is as close to TCP as is safe for use with such infrastructure given security considerations, with targeted additions to simplify usage and keep simple things simple (such as the addition of message semantics).",
      "ja": "それ以外は、WebSocketは何も追加しません。基本的には、Webの制約を考慮して、生のTCPをスクリプトに公開するだけに近いものにすることを目的としています。また、ハンドシェイクを有効なHTTPアップグレード要求にすることで、サーバーがHTTPサーバーとポートを共有できるように設計されています。概念的には他のプロトコルを使用してクライアント/サーバーメッセージングを確立することもできますが、WebSocketの目的は、HTTPやデプロイされたHTTPインフラストラクチャ（プロキシなど）と共存でき、安全である限りTCPに近い、比較的単純なプロトコルを提供することですセキュリティを考慮してこのようなインフラストラクチャで使用します。ターゲットを追加して使用を簡素化し、単純なものを単純に保ちます（メッセージセマンティクスの追加など）。"
    },
    {
      "indent": 3,
      "text": "The protocol is intended to be extensible; future versions will likely introduce additional concepts such as multiplexing.",
      "ja": "プロトコルは拡張可能であることを目的としています。将来のバージョンでは、多重化などの追加の概念が導入される可能性があります。"
    },
    {
      "indent": 0,
      "text": "1.6. Security Model",
      "section_title": true,
      "ja": "1.6. セキュリティモデル"
    },
    {
      "indent": 3,
      "text": "_This section is non-normative._",
      "ja": "_このセクションは非規範的です。_"
    },
    {
      "indent": 3,
      "text": "The WebSocket Protocol uses the origin model used by web browsers to restrict which web pages can contact a WebSocket server when the WebSocket Protocol is used from a web page. Naturally, when the WebSocket Protocol is used by a dedicated client directly (i.e., not from a web page through a web browser), the origin model is not useful, as the client can provide any arbitrary origin string.",
      "ja": "WebSocketプロトコルは、Webブラウザーが使用するオリジンモデルを使用して、WebSocketプロトコルがWebページから使用されるときにWebSocketサーバーに接続できるWebページを制限します。当然、WebSocketプロトコルが専用クライアントによって直接（つまり、WebブラウザからではなくWebページから）使用される場合、クライアントは任意の起点文字列を提供できるため、起点モデルは役に立ちません。"
    },
    {
      "indent": 0,
      "text": " This protocol is intended to fail to establish a connection with servers of pre-existing protocols like SMTP [RFC5321] and HTTP, while allowing HTTP servers to opt-in to supporting this protocol if desired. This is achieved by having a strict and elaborate handshake and by limiting the data that can be inserted into the connection before the handshake is finished (thus limiting how much the server can be influenced).",
      "ja": "このプロトコルは、SMTP [RFC5321]やHTTPなどの既存のプロトコルのサーバーとの接続を確立できず、必要に応じてHTTPサーバーがこのプロトコルのサポートをオプトインできるようにすることを目的としています。これは、厳密で手の込んだハンドシェイクを使用し、ハンドシェイクが完了する前に接続に挿入できるデータを制限することで実現されます（したがって、サーバーに影響を与えることができる量を制限します）。"
    },
    {
      "indent": 3,
      "text": "It is similarly intended to fail to establish a connection when data from other protocols, especially HTTP, is sent to a WebSocket server, for example, as might happen if an HTML \"form\" were submitted to a WebSocket server. This is primarily achieved by requiring that the server prove that it read the handshake, which it can only do if the handshake contains the appropriate parts, which can only be sent by a WebSocket client. In particular, at the time of writing of this specification, fields starting with |Sec-| cannot be set by an attacker from a web browser using only HTML and JavaScript APIs such as XMLHttpRequest [XMLHttpRequest].",
      "ja": "同様に、他のプロトコル、特にHTTPからのデータがWebSocketサーバーに送信されたときに、たとえばHTML \"フォーム\"がWebSocketサーバーに送信された場合に発生する可能性があるように、接続の確立に失敗することを目的としています。これは主に、サーバーがハンドシェイクを読み取ることを証明することを要求することで実現されます。これは、ハンドシェイクに適切なパーツが含まれ、WebSocketクライアントからのみ送信できる場合にのみ可能です。特に、この仕様の執筆時点では、| Sec- |で始まるフィールドXMLHttpRequest [XMLHttpRequest]などのHTMLおよびJavaScript APIのみを使用して、攻撃者がWebブラウザーから設定することはできません。"
    },
    {
      "indent": 0,
      "text": "1.7. Relationship to TCP and HTTP",
      "section_title": true,
      "ja": "1.7. TCPおよびHTTPとの関係"
    },
    {
      "indent": 3,
      "text": "_This section is non-normative._",
      "ja": "_このセクションは非規範的です。_"
    },
    {
      "indent": 3,
      "text": "The WebSocket Protocol is an independent TCP-based protocol. Its only relationship to HTTP is that its handshake is interpreted by HTTP servers as an Upgrade request.",
      "ja": "WebSocketプロトコルは、独立したTCPベースのプロトコルです。 HTTPとの唯一の関係は、そのハンドシェイクがHTTPサーバーによってアップグレード要求として解釈されることです。"
    },
    {
      "indent": 3,
      "text": "By default, the WebSocket Protocol uses port 80 for regular WebSocket connections and port 443 for WebSocket connections tunneled over Transport Layer Security (TLS) [RFC2818].",
      "ja": "デフォルトでは、WebSocketプロトコルは、通常のWebSocket接続にポート80を使用し、トランスポート層セキュリティ（TLS）[RFC2818]でトンネリングされたWebSocket接続にポート443を使用します。"
    },
    {
      "indent": 0,
      "text": "1.8. Establishing a Connection",
      "section_title": true,
      "ja": "1.8. 接続の確立"
    },
    {
      "indent": 3,
      "text": "_This section is non-normative._",
      "ja": "_このセクションは非規範的です。_"
    },
    {
      "indent": 3,
      "text": "When a connection is to be made to a port that is shared by an HTTP server (a situation that is quite likely to occur with traffic to ports 80 and 443), the connection will appear to the HTTP server to be a regular GET request with an Upgrade offer. In relatively simple setups with just one IP address and a single server for all traffic to a single hostname, this might allow a practical way for systems based on the WebSocket Protocol to be deployed. In more elaborate setups (e.g., with load balancers and multiple servers), a dedicated set of hosts for WebSocket connections separate from the HTTP servers is probably easier to manage. At the time of writing of this specification, it should be noted that connections on ports 80 and 443 have significantly different success rates, with connections on port 443 being significantly more likely to succeed, though this may change with time.",
      "ja": "HTTPサーバーで共有されているポートに接続する場合（ポート80と443へのトラフィックで発生する可能性が非常に高い状況）、接続はHTTPサーバーに表示され、通常のGET要求であるように見えます。アップグレードのオファー。単一のホスト名へのすべてのトラフィックに対して単一のIPアドレスと単一のサーバーを使用する比較的単純なセットアップでは、これにより、WebSocketプロトコルに基づくシステムを展開するための実用的な方法が可能になる場合があります。より複雑な設定（たとえば、ロードバランサーと複数のサーバー）では、HTTPサーバーとは別のWebSocket接続専用のホストのセットを管理する方がおそらく簡単です。この仕様の執筆時点では、ポート80と443での接続の成功率は大きく異なり、ポート443での接続は成功する可能性が大幅に高くなっていますが、これは時間とともに変化する可能性があります。"
    },
    {
      "indent": 0,
      "text": "1.9. Subprotocols Using the WebSocket Protocol",
      "section_title": true,
      "ja": "1.9. WebSocketプロトコルを使用したサブプロトコル"
    },
    {
      "indent": 3,
      "text": "_This section is non-normative._",
      "ja": "_このセクションは非規範的です。_"
    },
    {
      "indent": 3,
      "text": "The client can request that the server use a specific subprotocol by including the |Sec-WebSocket-Protocol| field in its handshake. If it is specified, the server needs to include the same field and one of the selected subprotocol values in its response for the connection to be established.",
      "ja": "| Sec-WebSocket-Protocol |を含めることにより、クライアントはサーバーが特定のサブプロトコルを使用することを要求できます。その握手でフィールド。これが指定されている場合、サーバーは、接続を確立するために、応答に同じフィールドと選択されたサブプロトコル値の1つを含める必要があります。"
    },
    {
      "indent": 3,
      "text": "These subprotocol names should be registered as per Section 11.5. To avoid potential collisions, it is recommended to use names that contain the ASCII version of the domain name of the subprotocol's originator. For example, if Example Corporation were to create a Chat subprotocol to be implemented by many servers around the Web, they could name it \"chat.example.com\". If the Example Organization called their competing subprotocol \"chat.example.org\", then the two subprotocols could be implemented by servers simultaneously, with the server dynamically selecting which subprotocol to use based on the value sent by the client.",
      "ja": "これらのサブプロトコル名は、セクション11.5に従って登録する必要があります。潜在的な衝突を回避するために、サブプロトコルの発信元のドメイン名のASCIIバージョンを含む名前を使用することをお勧めします。たとえば、Example Corporationがウェブ上の多くのサーバーによって実装されるチャットサブプロトコルを作成する場合、「chat.example.com」という名前を付けることができます。サンプル組織が競合するサブプロトコル「chat.example.org」を呼び出した場合、2つのサブプロトコルはサーバーによって同時に実装でき、サーバーはクライアントから送信された値に基づいて使用するサブプロトコルを動的に選択します。"
    },
    {
      "indent": 3,
      "text": "Subprotocols can be versioned in backward-incompatible ways by changing the subprotocol name, e.g., going from \"bookings.example.net\" to \"v2.bookings.example.net\". These subprotocols would be considered completely separate by WebSocket clients. Backward-compatible versioning can be implemented by reusing the same subprotocol string but carefully designing the actual subprotocol to support this kind of extensibility.",
      "ja": "サブプロトコルは、サブプロトコル名を変更することで、下位互換性のない方法でバージョン管理できます。たとえば、「bookings.example.net」から「v2.bookings.example.net」に変更できます。これらのサブプロトコルは、WebSocketクライアントによって完全に分離されていると見なされます。下位互換性のあるバージョン管理は、同じサブプロトコル文字列を再利用することで実装できますが、この種の拡張性をサポートするように実際のサブプロトコルを慎重に設計します。"
    },
    {
      "indent": 0,
      "text": "2. Conformance Requirements",
      "section_title": true,
      "ja": "2. 適合要件"
    },
    {
      "indent": 3,
      "text": "All diagrams, examples, and notes in this specification are non-normative, as are all sections explicitly marked non-normative. Everything else in this specification is normative.",
      "ja": "この仕様のすべての図、例、および注釈は非規範的であり、すべてのセクションは明示的に非規範的とマークされています。この仕様の他のすべては規範的です。"
    },
    {
      "indent": 3,
      "text": "The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as described in [RFC2119].",
      "ja": "このドキュメントのキーワード「MUST」、「MUST NOT」、「REQUIRED」、「SHALL」、「SHALL NOT」、「SHOULD」、「SHOULD NOT」、「RECOMMENDED」、「MAY」、および「OPTIONAL」は、 [RFC2119]で説明されているように解釈されます。"
    },
    {
      "indent": 3,
      "text": "Requirements phrased in the imperative as part of algorithms (such as \"strip any leading space characters\" or \"return false and abort these steps\") are to be interpreted with the meaning of the key word (\"MUST\", \"SHOULD\", \"MAY\", etc.) used in introducing the algorithm.",
      "ja": "アルゴリズムの一部として命令で語られた要件（「先頭の空白文字を取り除く」または「falseを返してこれらの手順を中止する」など）は、キーワードの意味（「MUST」、「SHOULD」、「 MAY \"など）を使用してアルゴリズムを紹介します。"
    },
    {
      "indent": 3,
      "text": "Conformance requirements phrased as algorithms or specific steps MAY be implemented in any manner, so long as the end result is equivalent. (In particular, the algorithms defined in this specification are intended to be easy to follow and not intended to be performant.)",
      "ja": "アルゴリズムまたは特定のステップとして表現された適合要件は、最終結果が同等である限り、任意の方法で実装できます。 （特に、この仕様で定義されているアルゴリズムは、わかりやすくするためのものであり、パフォーマンスを向上させるためのものではありません。）"
    },
    {
      "indent": 0,
      "text": "2.1. Terminology and Other Conventions",
      "section_title": true,
      "ja": "2.1. 用語とその他の規約"
    },
    {
      "indent": 3,
      "text": "_ASCII_ shall mean the character-encoding scheme defined in [ANSI.X3-4.1986].",
      "ja": "_ASCII_は、[ANSI.X3-4.1986]で定義されている文字エンコード方式を意味します。"
    },
    {
      "indent": 3,
      "text": "This document makes reference to UTF-8 values and uses UTF-8 notational formats as defined in STD 63 [RFC3629].",
      "ja": "このドキュメントでは、UTF-8値を参照し、STD 63 [RFC3629]で定義されているUTF-8表記形式を使用しています。"
    },
    {
      "indent": 3,
      "text": "Key terms such as named algorithms or definitions are indicated like _this_.",
      "ja": "名前付きアルゴリズムや定義などの主要な用語は、_this_のように示されます。"
    },
    {
      "indent": 3,
      "text": "Names of header fields or variables are indicated like |this|.",
      "ja": "ヘッダーフィールドまたは変数の名前は、| this |のように示されます。"
    },
    {
      "indent": 3,
      "text": "Variable values are indicated like /this/.",
      "ja": "変数値は/ this /のように示されます。"
    },
    {
      "indent": 3,
      "text": "This document references the procedure to _Fail the WebSocket Connection_. This procedure is defined in Section 7.1.7.",
      "ja": "このドキュメントでは、_WebSocket接続に失敗する手順について説明します。この手順は、セクション7.1.7で定義されています。"
    },
    {
      "indent": 3,
      "text": "_Converting a string to ASCII lowercase_ means replacing all characters in the range U+0041 to U+005A (i.e., LATIN CAPITAL LETTER A to LATIN CAPITAL LETTER Z) with the corresponding characters in the range U+0061 to U+007A (i.e., LATIN SMALL LETTER A to LATIN SMALL LETTER Z).",
      "ja": "_文字列をASCII小文字に変換することは、U + 0041からU + 005Aの範囲内のすべての文字（つまり、ラテン大文字Aからラテン大文字Zまで）を、U + 0061からU + 007Aの範囲内の対応する文字（つまり、ローマ字小文字Aからローマ字小文字Z）。"
    },
    {
      "indent": 3,
      "text": "Comparing two strings in an _ASCII case-insensitive_ manner means comparing them exactly, code point for code point, except that the characters in the range U+0041 to U+005A (i.e., LATIN CAPITAL LETTER A to LATIN CAPITAL LETTER Z) and the corresponding characters in the range U+0061 to U+007A (i.e., LATIN SMALL LETTER A to LATIN SMALL LETTER Z) are considered to also match.",
      "ja": "_ASCIIの大文字と小文字を区別しない方法で2つの文字列を比較することは、U + 0041からU + 005Aの範囲の文字（つまり、ラテン大文字Aからラテン大文字Z）の文字とU + 0061からU + 007Aの範囲の対応する文字（つまり、ラテン小文字Aからラテン小文字Zまで）も一致すると見なされます。"
    },
    {
      "indent": 3,
      "text": "The term \"URI\" is used in this document as defined in [RFC3986].",
      "ja": "このドキュメントでは、[RFC3986]で定義されている「URI」という用語が使用されています。"
    },
    {
      "indent": 3,
      "text": "When an implementation is required to _send_ data as part of the WebSocket Protocol, the implementation MAY delay the actual transmission arbitrarily, e.g., buffering data so as to send fewer IP packets.",
      "ja": "WebSocketプロトコルの一部としてデータを_send_する実装が必要な場合、実装は実際の送信を任意に遅延させることができます（例：データをバッファリングして、送信するIPパケットを少なくします）。"
    },
    {
      "indent": 3,
      "text": "Note that this document uses both [RFC5234] and [RFC2616] variants of ABNF in different sections.",
      "ja": "このドキュメントでは、異なるセクションでABNFの[RFC5234]と[RFC2616]の両方のバリアントを使用していることに注意してください。"
    },
    {
      "indent": 0,
      "text": "3. WebSocket URIs",
      "section_title": true,
      "ja": "3. WebSocket URI"
    },
    {
      "indent": 3,
      "text": "This specification defines two URI schemes, using the ABNF syntax defined in RFC 5234 [RFC5234], and terminology and ABNF productions defined by the URI specification RFC 3986 [RFC3986].",
      "ja": "この仕様は、RFC 5234 [RFC5234]で定義されたABNF構文と、URI仕様RFC 3986 [RFC3986]で定義された用語とABNFプロダクションを使用して、2つのURIスキームを定義します。"
    },
    {
      "indent": 10,
      "text": "ws-URI = \"ws:\" \"//\" host [ \":\" port ] path [ \"?\" query ]\nwss-URI = \"wss:\" \"//\" host [ \":\" port ] path [ \"?\" query ]",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 10,
      "text": "host = <host, defined in [RFC3986], Section 3.2.2>\nport = <port, defined in [RFC3986], Section 3.2.3>\npath = <path-abempty, defined in [RFC3986], Section 3.3>\nquery = <query, defined in [RFC3986], Section 3.4>",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "The port component is OPTIONAL; the default for \"ws\" is port 80, while the default for \"wss\" is port 443.",
      "ja": "ポートコンポーネントはオプションです。 「ws」のデフォルトはポート80、「wss」のデフォルトはポート443です。"
    },
    {
      "indent": 3,
      "text": "The URI is called \"secure\" (and it is said that \"the secure flag is set\") if the scheme component matches \"wss\" case-insensitively.",
      "ja": "スキーマコンポーネントが大文字と小文字を区別せずに「wss」と一致する場合、URIは「セキュア」と呼ばれます（「セキュアフラグが設定されている」と呼ばれます）。"
    },
    {
      "indent": 3,
      "text": "The \"resource-name\" (also known as /resource name/ in Section 4.1) can be constructed by concatenating the following:",
      "ja": "「リソース名」（4.1節では/ resource name /とも呼ばれます）は、以下を連結することで作成できます。"
    },
    {
      "indent": 3,
      "text": "o \"/\" if the path component is empty",
      "ja": "o 「/」、パスコンポーネントが空の場合"
    },
    {
      "indent": 3,
      "text": "o the path component",
      "ja": "o パスコンポーネント"
    },
    {
      "indent": 3,
      "text": "o \"?\" if the query component is non-empty",
      "ja": "o 「？」クエリコンポーネントが空でない場合"
    },
    {
      "indent": 3,
      "text": "o the query component",
      "ja": "o クエリコンポーネント"
    },
    {
      "indent": 3,
      "text": "Fragment identifiers are meaningless in the context of WebSocket URIs and MUST NOT be used on these URIs. As with any URI scheme, the character \"#\", when not indicating the start of a fragment, MUST be escaped as %23.",
      "ja": "フラグメント識別子はWebSocket URIのコンテキストでは無意味であり、これらのURIで使用してはなりません（MUST NOT）。他のURIスキームと同様に、文字「＃」は、フラグメントの開始を示さない場合、％23としてエスケープする必要があります。"
    },
    {
      "indent": 0,
      "text": "4. Opening Handshake",
      "section_title": true,
      "ja": "4. ハンドシェイクを開く"
    },
    {
      "indent": 0,
      "text": "4.1. Client Requirements",
      "section_title": true,
      "ja": "4.1. クライアントの要件"
    },
    {
      "indent": 3,
      "text": "To _Establish a WebSocket Connection_, a client opens a connection and sends a handshake as defined in this section. A connection is defined to initially be in a CONNECTING state. A client will need to supply a /host/, /port/, /resource name/, and a /secure/ flag, which are the components of a WebSocket URI as discussed in Section 3, along with a list of /protocols/ and /extensions/ to be used. Additionally, if the client is a web browser, it supplies /origin/.",
      "ja": "_WebSocket接続を確立する_ために、クライアントは接続を開き、このセクションで定義されているようにハンドシェイクを送信します。接続は、最初はCONNECTING状態になるように定義されています。クライアントは、/ host /、/ port /、/ resource name /、および/ secure /フラグを提供する必要があります。これらは、セクション3で説明したWebSocket URIのコンポーネントであり、/ protocols /および/ extensions /使用されます。さらに、クライアントがWebブラウザーの場合は、/ origin /を提供します。"
    },
    {
      "indent": 3,
      "text": "Clients running in controlled environments, e.g., browsers on mobile handsets tied to specific carriers, MAY offload the management of the connection to another agent on the network. In such a situation, the client for the purposes of this specification is considered to include both the handset software and any such agents.",
      "ja": "制御された環境で実行されているクライアント（特定のキャリアに関連付けられたモバイルハンドセットのブラウザーなど）は、ネットワーク上の別のエージェントへの接続の管理をオフロードできます（MAY）。そのような状況では、この仕様の目的のクライアントは、ハンドセットソフトウェアとそのようなエージェントの両方を含むと見なされます。"
    },
    {
      "indent": 3,
      "text": "When the client is to _Establish a WebSocket Connection_ given a set of (/host/, /port/, /resource name/, and /secure/ flag), along with a list of /protocols/ and /extensions/ to be used, and an /origin/ in the case of web browsers, it MUST open a connection, send an opening handshake, and read the server's handshake in response. The exact requirements of how the connection should be opened, what should be sent in the opening handshake, and how the server's response should be interpreted are as follows in this section. In the following text, we will use terms from Section 3, such as \"/host/\" and \"/secure/ flag\" as defined in that section.",
      "ja": "（_host /、/ port /、/ resource name /、および/ secure /フラグ）のセットと、使用する/ protocols /および/ extensions /のリストを指定して、クライアントが_WebSocket接続を確立する場合、および/ origin /（Webブラウザーの場合）は、接続を開き、開始ハンドシェイクを送信し、それに応じてサーバーのハンドシェイクを読み取る必要があります。このセクションでは、接続を開く方法、開始ハンドシェイクで何を送信するか、サーバーの応答をどのように解釈するかの正確な要件について説明します。以下のテキストでは、そのセクションで定義されている「/ host /」や「/ secure / flag」など、セクション3の用語を使用します。"
    },
    {
      "indent": 3,
      "text": "1. The components of the WebSocket URI passed into this algorithm (/host/, /port/, /resource name/, and /secure/ flag) MUST be valid according to the specification of WebSocket URIs specified in Section 3. If any of the components are invalid, the client MUST _Fail the WebSocket Connection_ and abort these steps.",
      "ja": "1. このアルゴリズムに渡されるWebSocket URIのコンポーネント（/ host /、/ port /、/ resource name /、および/ secure /フラグ）は、セクション3で指定されたWebSocket URIの仕様に従って有効でなければなりません（MUST）。が無効な場合、クライアントは_WebSocket接続に失敗_し、これらの手順を中止する必要があります。"
    },
    {
      "indent": 3,
      "text": "2. If the client already has a WebSocket connection to the remote host (IP address) identified by /host/ and port /port/ pair, even if the remote host is known by another name, the client MUST wait until that connection has been established or for that connection to have failed. There MUST be no more than one connection in a CONNECTING state. If multiple connections to the same IP address are attempted simultaneously, the client MUST serialize them so that there is no more than one connection at a time running through the following steps.",
      "ja": "2. / host /とポート/ port /のペアで識別されるリモートホスト（IPアドレス）へのWebSocket接続がクライアントにすでにある場合、リモートホストが別の名前で認識されている場合でも、クライアントはその接続が確立されるまで待機する必要があります。その接続が失敗したため。 CONNECTING状態の接続は1つだけでなければなりません。同じIPアドレスへの複数の接続が同時に試行される場合、クライアントは、一度に複数の接続が実行されないように、それらをシリアル化して、次の手順を実行する必要があります。"
    },
    {
      "indent": 7,
      "text": "If the client cannot determine the IP address of the remote host (for example, because all communication is being done through a proxy server that performs DNS queries itself), then the client MUST assume for the purposes of this step that each host name refers to a distinct remote host, and instead the client SHOULD limit the total number of simultaneous pending connections to a reasonably low number (e.g., the client might allow simultaneous pending connections to a.example.com and b.example.com, but if thirty simultaneous connections to a single host are requested, that may not be allowed). For example, in a web browser context, the client needs to consider the number of tabs the user has open in setting a limit to the number of simultaneous pending connections.",
      "ja": "クライアントがリモートホストのIPアドレスを判別できない場合（たとえば、すべての通信がDNSクエリ自体を実行するプロキシサーバーを介して行われているため）、クライアントはこの手順の目的のために、各ホスト名が参照していると想定する必要があります。別個のリモートホスト、および代わりにクライアントは、同時保留接続の総数をかなり低い数に制限する必要があります（たとえば、クライアントはa.example.comとb.example.comへの同時保留接続を許可する場合がありますが、同時に30の場合単一のホストへの接続が要求されますが、許可されない場合があります）。たとえば、Webブラウザーのコンテキストでは、クライアントは、保留中の同時接続の数に制限を設定するときに、ユーザーが開いているタブの数を考慮する必要があります。"
    },
    {
      "indent": 7,
      "text": "NOTE: This makes it harder for a script to perform a denial-of-service attack by just opening a large number of WebSocket connections to a remote host. A server can further reduce the load on itself when attacked by pausing before closing the connection, as that will reduce the rate at which the client reconnects.",
      "ja": "注：これにより、リモートホストへのWebSocket接続を多数開くだけで、スクリプトがサービス拒否攻撃を実行することが困難になります。サーバーは、クライアントが再接続する速度を低下させるため、接続を閉じる前に一時停止することにより、攻撃されたときのサーバー自体の負荷をさらに軽減できます。"
    },
    {
      "indent": 7,
      "text": "NOTE: There is no limit to the number of established WebSocket connections a client can have with a single remote host. Servers can refuse to accept connections from hosts/IP addresses with an excessive number of existing connections or disconnect resource-hogging connections when suffering high load.",
      "ja": "注：クライアントが単一のリモートホストと確立できるWebSocket接続の数に制限はありません。サーバーは、過剰な数の既存の接続があるホスト/ IPアドレスからの接続の受け入れを拒否したり、高負荷の場合にリソースを消費する接続を切断したりできます。"
    },
    {
      "indent": 3,
      "text": "3. _Proxy Usage_: If the client is configured to use a proxy when using the WebSocket Protocol to connect to host /host/ and port /port/, then the client SHOULD connect to that proxy and ask it to open a TCP connection to the host given by /host/ and the port given by /port/.",
      "ja": "3. _Proxy Usage_：クライアントがWebSocketプロトコルを使用してホスト/ host /およびポート/ port /に接続するときにプロキシを使用するように構成されている場合、クライアントはそのプロキシに接続して、指定されたホストへのTCP接続を開くように要求する必要があります（SHOULD） / host /および/ port /で指定されたポート。"
    },
    {
      "indent": 10,
      "text": "EXAMPLE: For example, if the client uses an HTTP proxy for all traffic, then if it was to try to connect to port 80 on server example.com, it might send the following lines to the proxy server:",
      "ja": "例：たとえば、クライアントがすべてのトラフィックにHTTPプロキシを使用している場合、サーバーexample.comのポート80に接続しようとすると、次の行がプロキシサーバーに送信されます。"
    },
    {
      "indent": 14,
      "text": "CONNECT example.com:80 HTTP/1.1 Host: example.com",
      "ja": "CONNECT example.com:80 HTTP / 1.1ホスト：example.com"
    },
    {
      "indent": 10,
      "text": "If there was a password, the connection might look like:",
      "ja": "パスワードがあった場合、接続は次のようになります。"
    },
    {
      "indent": 14,
      "text": "CONNECT example.com:80 HTTP/1.1\nHost: example.com\nProxy-authorization: Basic ZWRuYW1vZGU6bm9jYXBlcyE=",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 7,
      "text": "If the client is not configured to use a proxy, then a direct TCP connection SHOULD be opened to the host given by /host/ and the port given by /port/.",
      "ja": "クライアントがプロキシを使用するように構成されていない場合、/ host /で指定されたホストと/ port /で指定されたポートへの直接TCP接続を開く必要があります（SHOULD）。"
    },
    {
      "indent": 7,
      "text": "NOTE: Implementations that do not expose explicit UI for selecting a proxy for WebSocket connections separate from other proxies are encouraged to use a SOCKS5 [RFC1928] proxy for WebSocket connections, if available, or failing that, to prefer the proxy configured for HTTPS connections over the proxy configured for HTTP connections.",
      "ja": "注：他のプロキシとは別のWebSocket接続のプロキシを選択するための明示的なUIを公開していない実装では、WebSocket接続にSOCKS5 [RFC1928]プロキシを使用することをお勧めします。 HTTP接続用に構成されたプロキシ。"
    },
    {
      "indent": 7,
      "text": "For the purpose of proxy autoconfiguration scripts, the URI to pass the function MUST be constructed from /host/, /port/, /resource name/, and the /secure/ flag using the definition of a WebSocket URI as given in Section 3.",
      "ja": "プロキシ自動設定スクリプトの目的のために、関数を渡すためのURIは、セクション3で指定されているWebSocket URIの定義を使用して、/ host /、/ port /、/ resource name /、および/ secure /フラグから構築する必要があります。"
    },
    {
      "indent": 7,
      "text": "NOTE: The WebSocket Protocol can be identified in proxy autoconfiguration scripts from the scheme (\"ws\" for unencrypted connections and \"wss\" for encrypted connections).",
      "ja": "注：WebSocketプロトコルは、スキームのプロキシ自動構成スクリプトで識別できます（非暗号化接続の場合は「ws」、暗号化接続の場合は「wss」）。"
    },
    {
      "indent": 3,
      "text": "4. If the connection could not be opened, either because a direct connection failed or because any proxy used returned an error, then the client MUST _Fail the WebSocket Connection_ and abort the connection attempt.",
      "ja": "4. 直接接続が失敗したため、または使用されたプロキシがエラーを返したために接続を開くことができなかった場合、クライアントは_WebSocket接続に失敗_し、接続試行を中止する必要があります。"
    },
    {
      "indent": 3,
      "text": "5. If /secure/ is true, the client MUST perform a TLS handshake over the connection after opening the connection and before sending the handshake data [RFC2818]. If this fails (e.g., the server's certificate could not be verified), then the client MUST _Fail the WebSocket Connection_ and abort the connection. Otherwise, all further communication on this channel MUST run through the encrypted tunnel [RFC5246].",
      "ja": "5. / secure /がtrueの場合、クライアントは、接続を開いた後、ハンドシェイクデータ[RFC2818]を送信する前に、接続を介してTLSハンドシェイクを実行する必要があります。これが失敗した場合（たとえば、サーバーの証明書を検証できなかった場合）、クライアントは_WebSocket接続に失敗_し、接続を中止する必要があります。それ以外の場合、このチャネルでの以降のすべての通信は、暗号化されたトンネル[RFC5246]を介して実行する必要があります。"
    },
    {
      "indent": 7,
      "text": "Clients MUST use the Server Name Indication extension in the TLS handshake [RFC6066].",
      "ja": "クライアントは、TLSハンドシェイク[RFC6066]でサーバー名表示拡張機能を使用する必要があります。"
    },
    {
      "indent": 3,
      "text": "Once a connection to the server has been established (including a connection via a proxy or over a TLS-encrypted tunnel), the client MUST send an opening handshake to the server. The handshake consists of an HTTP Upgrade request, along with a list of required and optional header fields. The requirements for this handshake are as follows.",
      "ja": "サーバーへの接続が確立されると（プロキシ経由またはTLS暗号化トンネル経由の接続を含む）、クライアントはサーバーにオープニングハンドシェイクを送信する必要があります。ハンドシェイクは、必須およびオプションのヘッダーフィールドのリストとともに、HTTPアップグレードリクエストで構成されます。このハンドシェイクの要件は次のとおりです。"
    },
    {
      "indent": 3,
      "text": "1. The handshake MUST be a valid HTTP request as specified by [RFC2616].",
      "ja": "1. [RFC2616]で指定されているように、ハンドシェイクは有効なHTTPリクエストである必要があります。"
    },
    {
      "indent": 3,
      "text": "2. The method of the request MUST be GET, and the HTTP version MUST be at least 1.1.",
      "ja": "2. リクエストのメソッドはGETでなければならず、HTTPバージョンは少なくとも1.1でなければなりません。"
    },
    {
      "indent": 8,
      "text": "For example, if the WebSocket URI is \"ws://example.com/chat\", the first line sent should be \"GET /chat HTTP/1.1\".",
      "ja": "たとえば、WebSocket URIが「ws：//example.com/chat」の場合、送信される最初の行は「GET / chat HTTP / 1.1」である必要があります。"
    },
    {
      "indent": 3,
      "text": "3. The \"Request-URI\" part of the request MUST match the /resource name/ defined in Section 3 (a relative URI) or be an absolute http/https URI that, when parsed, has a /resource name/, /host/, and /port/ that match the corresponding ws/wss URI.",
      "ja": "3. リクエストの「Request-URI」部分は、セクション3で定義された/ resource name /（相対URI）と一致するか、解析時に/ resource name /、/ host /、および/ port /は、対応するws / wss URIに一致します。"
    },
    {
      "indent": 3,
      "text": "4. The request MUST contain a |Host| header field whose value contains /host/ plus optionally \":\" followed by /port/ (when not using the default port).",
      "ja": "4. リクエストには| Host |を含める必要があります値が/ host /とオプションで \"：\"の後に続く/ port /を含むヘッダーフィールド（デフォルトのポートを使用しない場合）。"
    },
    {
      "indent": 3,
      "text": "5. The request MUST contain an |Upgrade| header field whose value MUST include the \"websocket\" keyword.",
      "ja": "5. リクエストには|アップグレード|が含まれている必要があります値が「websocket」キーワードを含まなければならないヘッダーフィールド。"
    },
    {
      "indent": 3,
      "text": "6. The request MUST contain a |Connection| header field whose value MUST include the \"Upgrade\" token.",
      "ja": "6. リクエストには|接続|が含まれている必要がありますその値が「アップグレード」トークンを含まなければならないヘッダーフィールド。"
    },
    {
      "indent": 3,
      "text": "7. The request MUST include a header field with the name |Sec-WebSocket-Key|. The value of this header field MUST be a nonce consisting of a randomly selected 16-byte value that has been base64-encoded (see Section 4 of [RFC4648]). The nonce MUST be selected randomly for each connection.",
      "ja": "7. リクエストには、| Sec-WebSocket-Key |という名前のヘッダーフィールドを含める必要があります。このヘッダーフィールドの値は、base64でエンコードされたランダムに選択された16バイトの値で構成されるナンスでなければなりません（[RFC4648]のセクション4を参照）。 nonceは、接続ごとにランダムに選択する必要があります。"
    },
    {
      "indent": 8,
      "text": "NOTE: As an example, if the randomly selected value was the sequence of bytes 0x01 0x02 0x03 0x04 0x05 0x06 0x07 0x08 0x09 0x0a 0x0b 0x0c 0x0d 0x0e 0x0f 0x10, the value of the header field would be \"AQIDBAUGBwgJCgsMDQ4PEC==\"",
      "ja": "注：例として、ランダムに選択された値がバイトのシーケンス0x01 0x02 0x03 0x04 0x05 0x06 0x07 0x08 0x09 0x0a 0x0b 0x0c 0x0d 0x0e 0x0f 0x10である場合、ヘッダーフィールドの値は「AQIDBAUGBwgJCgsMDQ4PE ="
    },
    {
      "indent": 3,
      "text": "8. The request MUST include a header field with the name |Origin| [RFC6454] if the request is coming from a browser client. If the connection is from a non-browser client, the request MAY include this header field if the semantics of that client match the use-case described here for browser clients. The value of this header field is the ASCII serialization of origin of the context in which the code establishing the connection is running. See [RFC6454] for the details of how this header field value is constructed.",
      "ja": "8. リクエストには、| Origin |という名前のヘッダーフィールドを含める必要があります。 [RFC6454]リクエストがブラウザクライアントからのものである場合。接続が非ブラウザークライアントからのものである場合、そのクライアントのセマンティクスが、ここで説明するブラウザークライアントのユースケースと一致すれば、リクエストにこのヘッダーフィールドが含まれる場合があります。このヘッダーフィールドの値は、接続を確立するコードが実行されているコンテキストの起点のASCIIシリアル化です。このヘッダーフィールド値の構成方法の詳細については、[RFC6454]を参照してください。"
    },
    {
      "indent": 8,
      "text": "As an example, if code downloaded from www.example.com attempts to establish a connection to ww2.example.com, the value of the header field would be \"http://www.example.com\".",
      "ja": "例として、www.example.comからダウンロードされたコードがww2.example.comへの接続を確立しようとした場合、ヘッダーフィールドの値は「http://www.example.com」になります。"
    },
    {
      "indent": 3,
      "text": "9. The request MUST include a header field with the name |Sec-WebSocket-Version|. The value of this header field MUST be 13.",
      "ja": "9. リクエストには、| Sec-WebSocket-Version |という名前のヘッダーフィールドを含める必要があります。このヘッダーフィールドの値は13でなければなりません。"
    },
    {
      "indent": 8,
      "text": "NOTE: Although draft versions of this document (-09, -10, -11, and -12) were posted (they were mostly comprised of editorial changes and clarifications and not changes to the wire protocol), values 9, 10, 11, and 12 were not used as valid values for Sec-WebSocket-Version. These values were reserved in the IANA registry but were not and will not be used.",
      "ja": "注：このドキュメントのドラフトバージョン（-09、-10、-11、および-12）が投稿されました（それらは主に編集上の変更と説明で構成され、ワイヤープロトコルへの変更ではありませんでした）、値9、10、11および12は、Sec-WebSocket-Versionの有効な値として使用されていません。これらの値はIANAレジストリで予約されていましたが、使用されておらず、今後も使用されません。"
    },
    {
      "indent": 3,
      "text": "10. The request MAY include a header field with the name |Sec-WebSocket-Protocol|. If present, this value indicates one or more comma-separated subprotocol the client wishes to speak, ordered by preference. The elements that comprise this value MUST be non-empty strings with characters in the range U+0021 to U+007E not including separator characters as defined in [RFC2616] and MUST all be unique strings. The ABNF for the value of this header field is 1#token, where the definitions of constructs and rules are as given in [RFC2616].",
      "ja": "10. リクエストには、| Sec-WebSocket-Protocol |という名前のヘッダーフィールドを含めることができます。存在する場合、この値は、クライアントが発話したい1つ以上のコンマ区切りのサブプロトコルを優先順に示します。この値を構成する要素は、[RFC2616]で定義されている区切り文字を含まないU + 0021からU + 007Eの範囲の文字を含む空でない文字列である必要があり、すべて一意の文字列である必要があります。このヘッダーフィールドの値のABNFは1＃tokenです。ここで、構成とルールの定義は[RFC2616]に記載されています。"
    },
    {
      "indent": 3,
      "text": "11. The request MAY include a header field with the name |Sec-WebSocket-Extensions|. If present, this value indicates the protocol-level extension(s) the client wishes to speak. The interpretation and format of this header field is described in Section 9.1.",
      "ja": "11. リクエストには、| Sec-WebSocket-Extensions |という名前のヘッダーフィールドを含めることができます。存在する場合、この値は、クライアントが話したいプロトコルレベルの拡張機能を示します。このヘッダーフィールドの解釈と形式については、セクション9.1で説明します。"
    },
    {
      "indent": 3,
      "text": "12. The request MAY include any other header fields, for example, cookies [RFC6265] and/or authentication-related header fields such as the |Authorization| header field [RFC2616], which are processed according to documents that define them.",
      "ja": "12. リクエストには、Cookie [RFC6265]や| Authorization |などの認証関連ヘッダーフィールドなど、他のヘッダーフィールドを含めることができます（MAY）。ヘッダーフィールド[RFC2616]。ヘッダーフィールドを定義するドキュメントに従って処理されます。"
    },
    {
      "indent": 3,
      "text": "Once the client's opening handshake has been sent, the client MUST wait for a response from the server before sending any further data. The client MUST validate the server's response as follows:",
      "ja": "クライアントのオープニングハンドシェイクが送信されると、クライアントはサーバーからの応答を待ってから、データを送信する必要があります。クライアントは、次のようにサーバーの応答を検証する必要があります。"
    },
    {
      "indent": 3,
      "text": "1. If the status code received from the server is not 101, the client handles the response per HTTP [RFC2616] procedures. In particular, the client might perform authentication if it receives a 401 status code; the server might redirect the client using a 3xx status code (but clients are not required to follow them), etc. Otherwise, proceed as follows.",
      "ja": "1. サーバーから受信したステータスコードが101でない場合、クライアントはHTTP [RFC2616]手順に従って応答を処理します。特に、クライアントは、401ステータスコードを受信すると認証を実行する可能性があります。サーバーは、3xxステータスコードを使用してクライアントをリダイレクトする場合があります（ただし、クライアントはそれらに従う必要はありません）。それ以外の場合は、次の手順を実行します。"
    },
    {
      "indent": 3,
      "text": "2. If the response lacks an |Upgrade| header field or the |Upgrade| header field contains a value that is not an ASCII case-insensitive match for the value \"websocket\", the client MUST _Fail the WebSocket Connection_.",
      "ja": "2. 応答に|アップグレード|がない場合ヘッダーフィールドまたは|アップグレード|ヘッダーフィールドに値「websocket」のASCIIの大文字と小文字を区別しない一致ではない値が含まれています。クライアントは_WebSocket接続に失敗する必要があります_。"
    },
    {
      "indent": 3,
      "text": "3. If the response lacks a |Connection| header field or the |Connection| header field doesn't contain a token that is an ASCII case-insensitive match for the value \"Upgrade\", the client MUST _Fail the WebSocket Connection_.",
      "ja": "3. 応答に|接続|がない場合ヘッダーフィールドまたは|接続|ヘッダーフィールドには、値「Upgrade」のASCIIの大文字と小文字を区別しない一致であるトークンが含まれていません。クライアントは_WebSocket接続に失敗する必要があります_。"
    },
    {
      "indent": 3,
      "text": "4. If the response lacks a |Sec-WebSocket-Accept| header field or the |Sec-WebSocket-Accept| contains a value other than the base64-encoded SHA-1 of the concatenation of the |Sec-WebSocket-Key| (as a string, not base64-decoded) with the string \"258EAFA5- E914-47DA-95CA-C5AB0DC85B11\" but ignoring any leading and trailing whitespace, the client MUST _Fail the WebSocket Connection_.",
      "ja": "4. 応答に| Sec-WebSocket-Accept |がない場合ヘッダーフィールドまたは| Sec-WebSocket-Accept | | Sec-WebSocket-Key |の連結のbase64エンコードSHA-1以外の値が含まれています（base64デコードではなく文字列として）文字列「258EAFA5- E914-47DA-95CA-C5AB0DC85B11」を使用しますが、先頭と末尾の空白を無視して、クライアントは_WebSocket接続に失敗する必要があります_。"
    },
    {
      "indent": 3,
      "text": "5. If the response includes a |Sec-WebSocket-Extensions| header field and this header field indicates the use of an extension that was not present in the client's handshake (the server has indicated an extension not requested by the client), the client MUST _Fail the WebSocket Connection_. (The parsing of this header field to determine which extensions are requested is discussed in Section 9.1.)",
      "ja": "5. 応答に| Sec-WebSocket-Extensions |が含まれている場合ヘッダーフィールドとこのヘッダーフィールドは、クライアントのハンドシェイクに存在しない拡張機能の使用を示します（サーバーはクライアントから要求されていない拡張機能を示しました）、クライアントは_WebSocket接続に失敗する必要があります_。 （要求された拡張を判別するためのこのヘッダーフィールドの解析については、セクション9.1で説明します。）"
    },
    {
      "indent": 3,
      "text": "6. If the response includes a |Sec-WebSocket-Protocol| header field and this header field indicates the use of a subprotocol that was not present in the client's handshake (the server has indicated a subprotocol not requested by the client), the client MUST _Fail the WebSocket Connection_.",
      "ja": "6. 応答に| Sec-WebSocket-Protocol |が含まれている場合ヘッダーフィールドとこのヘッダーフィールドは、クライアントのハンドシェイクに存在しないサブプロトコルの使用を示します（サーバーはクライアントから要求されていないサブプロトコルを示しました）、クライアントは_WebSocket接続に失敗する必要があります_。"
    },
    {
      "indent": 3,
      "text": "If the server's response does not conform to the requirements for the server's handshake as defined in this section and in Section 4.2.2, the client MUST _Fail the WebSocket Connection_.",
      "ja": "サーバーの応答が、このセクションとセクション4.2.2で定義されているサーバーのハンドシェイクの要件に準拠していない場合、クライアントは_WebSocket接続に失敗する必要があります_。"
    },
    {
      "indent": 3,
      "text": "Please note that according to [RFC2616], all header field names in both HTTP requests and HTTP responses are case-insensitive.",
      "ja": "[RFC2616]によると、HTTPリクエストとHTTPレスポンスの両方のヘッダーフィールド名はすべて大文字と小文字が区別されないことに注意してください。"
    },
    {
      "indent": 3,
      "text": "If the server's response is validated as provided for above, it is said that _The WebSocket Connection is Established_ and that the WebSocket Connection is in the OPEN state. The _Extensions In Use_ is defined to be a (possibly empty) string, the value of which is equal to the value of the |Sec-WebSocket-Extensions| header field supplied by the server's handshake or the null value if that header field was not present in the server's handshake. The _Subprotocol In Use_ is defined to be the value of the |Sec-WebSocket-Protocol| header field in the server's handshake or the null value if that header field was not present in the server's handshake. Additionally, if any header fields in the server's handshake indicate that cookies should be set (as defined by [RFC6265]), these cookies are referred to as _Cookies Set During the Server's Opening Handshake_.",
      "ja": "上記のようにサーバーの応答が検証されると、_WebSocket接続が確立された_、WebSocket接続がOPEN状態であると見なされます。 _Extensions In Use_は（おそらく空の）文字列として定義され、その値は| Sec-WebSocket-Extensions |の値と同じです。サーバーのハンドシェイクによって提供されるヘッダーフィールド、またはそのヘッダーフィールドがサーバーのハンドシェイクに存在しない場合はnull値。 _Subprotocol In Use_は、| Sec-WebSocket-Protocol |の値として定義されています。サーバーのハンドシェイクのヘッダーフィールド、またはそのヘッダーフィールドがサーバーのハンドシェイクに存在しない場合はnull値。さらに、サーバーのハンドシェイクのヘッダーフィールドがCookieを設定する必要があることを示している場合（[RFC6265]で定義）、これらのCookieは_Cookieがサーバーのオープニングハンドシェイク中に設定されると呼ばれます。"
    },
    {
      "indent": 0,
      "text": "4.2. Server-Side Requirements",
      "section_title": true,
      "ja": "4.2. サーバー側の要件"
    },
    {
      "indent": 3,
      "text": "Servers MAY offload the management of the connection to other agents on the network, for example, load balancers and reverse proxies. In such a situation, the server for the purposes of this specification is considered to include all parts of the server-side infrastructure from the first device to terminate the TCP connection all the way to the server that processes requests and sends responses.",
      "ja": "サーバーは、ロードバランサーやリバースプロキシなど、ネットワーク上の他のエージェントへの接続管理の負荷を軽減できます（MAY）。このような状況では、この仕様のサーバーは、最初のデバイスからサーバー側インフラストラクチャのすべての部分を含み、要求を処理して応答を送信するサーバーへのTCP接続を完全に終了すると見なされます。"
    },
    {
      "indent": 3,
      "text": "EXAMPLE: A data center might have a server that responds to WebSocket requests with an appropriate handshake and then passes the connection to another server to actually process the data frames. For the purposes of this specification, the \"server\" is the combination of both computers.",
      "ja": "例：データセンターには、適切なハンドシェイクでWebSocket要求に応答し、接続を別のサーバーに渡して実際にデータフレームを処理するサーバーがある場合があります。この仕様では、「サーバー」は両方のコンピューターの組み合わせです。"
    },
    {
      "indent": 0,
      "text": "4.2.1. Reading the Client's Opening Handshake",
      "section_title": true,
      "ja": "4.2.1. クライアントのオープニングハンドシェイクを読み取る"
    },
    {
      "indent": 3,
      "text": "When a client starts a WebSocket connection, it sends its part of the opening handshake. The server must parse at least part of this handshake in order to obtain the necessary information to generate the server part of the handshake.",
      "ja": "クライアントがWebSocket接続を開始すると、開始ハンドシェイクの一部を送信します。サーバーは、ハンドシェイクのサーバー部分を生成するために必要な情報を取得するために、このハンドシェイクの少なくとも一部を解析する必要があります。"
    },
    {
      "indent": 3,
      "text": "The client's opening handshake consists of the following parts. If the server, while reading the handshake, finds that the client did not send a handshake that matches the description below (note that as per [RFC2616], the order of the header fields is not important), including but not limited to any violations of the ABNF grammar specified for the components of the handshake, the server MUST stop processing the client's handshake and return an HTTP response with an appropriate error code (such as 400 Bad Request).",
      "ja": "クライアントのオープニングハンドシェイクは、次の部分で構成されています。サーバーがハンドシェイクの読み取り中に、クライアントが以下の説明に一致するハンドシェイクを送信しなかったことが判明した場合（[RFC2616]によると、ヘッダーフィールドの順序は重要ではありません）。違反も含まれますが、これらに限定されません。ハンドシェイクのコンポーネントに指定されたABNF文法の場合、サーバーはクライアントのハンドシェイクの処理を停止し、適切なエラーコード（400 Bad Requestなど）を含むHTTP応答を返す必要があります。"
    },
    {
      "indent": 3,
      "text": "1. An HTTP/1.1 or higher GET request, including a \"Request-URI\" [RFC2616] that should be interpreted as a /resource name/ defined in Section 3 (or an absolute HTTP/HTTPS URI containing the /resource name/).",
      "ja": "1. セクション3で定義された/ resource name /（または/ resource name /を含む絶対HTTP / HTTPS URI）として解釈される「Request-URI」[RFC2616]を含むHTTP / 1.1以降のGETリクエスト。"
    },
    {
      "indent": 3,
      "text": "2. A |Host| header field containing the server's authority.",
      "ja": "2. |ホスト|サーバーの権限を含むヘッダーフィールド。"
    },
    {
      "indent": 3,
      "text": "3. An |Upgrade| header field containing the value \"websocket\", treated as an ASCII case-insensitive value.",
      "ja": "3. |アップグレード|値「websocket」を含むヘッダーフィールド。ASCIIの大文字と小文字を区別しない値として扱われます。"
    },
    {
      "indent": 3,
      "text": "4. A |Connection| header field that includes the token \"Upgrade\", treated as an ASCII case-insensitive value.",
      "ja": "4. A |接続|トークン「Upgrade」を含むヘッダーフィールド。ASCIIの大文字と小文字を区別しない値として扱われます。"
    },
    {
      "indent": 3,
      "text": "5. A |Sec-WebSocket-Key| header field with a base64-encoded (see Section 4 of [RFC4648]) value that, when decoded, is 16 bytes in length.",
      "ja": "5. | Sec-WebSocket-Key | base64でエンコードされた（[RFC4648]のセクション4を参照）値を持つヘッダーフィールド。デコードされると、長さが16バイトになります。"
    },
    {
      "indent": 3,
      "text": "6. A |Sec-WebSocket-Version| header field, with a value of 13.",
      "ja": "6. | Sec-WebSocket-Version |ヘッダーフィールド、値は13。"
    },
    {
      "indent": 3,
      "text": "7. Optionally, an |Origin| header field. This header field is sent by all browser clients. A connection attempt lacking this header field SHOULD NOT be interpreted as coming from a browser client.",
      "ja": "7. オプションで、| Origin |ヘッダーフィールド。このヘッダーフィールドは、すべてのブラウザクライアントから送信されます。このヘッダーフィールドがない接続試行は、ブラウザクライアントからの接続として解釈されるべきではありません（SHOULD NOT）。"
    },
    {
      "indent": 3,
      "text": "8. Optionally, a |Sec-WebSocket-Protocol| header field, with a list of values indicating which protocols the client would like to speak, ordered by preference.",
      "ja": "8. オプションで、| Sec-WebSocket-Protocol |ヘッダーフィールド。クライアントが話したいプロトコルを示す値のリストがあり、優先順に並べられています。"
    },
    {
      "indent": 3,
      "text": "9. Optionally, a |Sec-WebSocket-Extensions| header field, with a list of values indicating which extensions the client would like to speak. The interpretation of this header field is discussed in Section 9.1.",
      "ja": "9. オプションで、| Sec-WebSocket-Extensions |ヘッダーフィールドと、クライアントが話したい拡張機能を示す値のリスト。このヘッダーフィールドの解釈については、セクション9.1で説明します。"
    },
    {
      "indent": 3,
      "text": "10. Optionally, other header fields, such as those used to send cookies or request authentication to a server. Unknown header fields are ignored, as per [RFC2616].",
      "ja": "10. 必要に応じて、Cookieの送信やサーバーへの認証の要求に使用されるフィールドなど、他のヘッダーフィールド。 [RFC2616]に従い、不明なヘッダーフィールドは無視されます。"
    },
    {
      "indent": 0,
      "text": "4.2.2. Sending the Server's Opening Handshake",
      "section_title": true,
      "ja": "4.2.2. サーバーのオープニングハンドシェイクの送信"
    },
    {
      "indent": 3,
      "text": "When a client establishes a WebSocket connection to a server, the server MUST complete the following steps to accept the connection and send the server's opening handshake.",
      "ja": "クライアントがサーバーへのWebSocket接続を確立すると、サーバーは次の手順を完了して接続を受け入れ、サーバーの開始ハンドシェイクを送信する必要があります。"
    },
    {
      "indent": 3,
      "text": "1. If the connection is happening on an HTTPS (HTTP-over-TLS) port, perform a TLS handshake over the connection. If this fails (e.g., the client indicated a host name in the extended client hello \"server_name\" extension that the server does not host), then close the connection; otherwise, all further communication for the connection (including the server's handshake) MUST run through the encrypted tunnel [RFC5246].",
      "ja": "1. 接続がHTTPS（HTTP-over-TLS）ポートで行われている場合は、接続でTLSハンドシェイクを実行します。これが失敗した場合（たとえば、サーバーがホストしていない拡張クライアントhello \"server_name\"拡張でクライアントがホスト名を示した場合）、接続を閉じます。それ以外の場合、接続（サーバーのハンドシェイクを含む）のためのそれ以降のすべての通信は、暗号化されたトンネル[RFC5246]を介して実行する必要があります。"
    },
    {
      "indent": 3,
      "text": "2. The server can perform additional client authentication, for example, by returning a 401 status code with the corresponding |WWW-Authenticate| header field as described in [RFC2616].",
      "ja": "2. サーバーは、たとえば対応する| WWW-Authenticate |とともに401ステータスコードを返すことにより、追加のクライアント認証を実行できます。 [RFC2616]で説明されているヘッダーフィールド。"
    },
    {
      "indent": 3,
      "text": "3. The server MAY redirect the client using a 3xx status code [RFC2616]. Note that this step can happen together with, before, or after the optional authentication step described above.",
      "ja": "3. サーバーは、3xxステータスコード[RFC2616]を使用してクライアントをリダイレクトしてもよい（MAY）。このステップは、上記のオプションの認証ステップと同時、その前、または後に実行できることに注意してください。"
    },
    {
      "indent": 3,
      "text": "4. Establish the following information:",
      "ja": "4. 次の情報を確立します。"
    },
    {
      "indent": 7,
      "text": "/origin/ The |Origin| header field in the client's handshake indicates the origin of the script establishing the connection. The origin is serialized to ASCII and converted to lowercase. The server MAY use this information as part of a determination of whether to accept the incoming connection. If the server does not validate the origin, it will accept connections from anywhere. If the server does not wish to accept this connection, it MUST return an appropriate HTTP error code (e.g., 403 Forbidden) and abort the WebSocket handshake described in this section. For more detail, refer to Section 10.",
      "ja": "/ origin / The | Origin |クライアントのハンドシェイクのヘッダーフィールドは、接続を確立するスクリプトの発信元を示します。オリジンはASCIIにシリアル化され、小文字に変換されます。サーバーは、着信接続を受け入れるかどうかの決定の一部としてこの情報を使用する場合があります。サーバーがオリジンを検証しない場合、サーバーはどこからの接続も受け入れます。サーバーがこの接続を受け入れたくない場合は、適切なHTTPエラーコード（403 Forbiddenなど）を返し、このセクションで説明するWebSocketハンドシェイクを中止する必要があります。詳細については、セクション10を参照してください。"
    },
    {
      "indent": 7,
      "text": "/key/ The |Sec-WebSocket-Key| header field in the client's handshake includes a base64-encoded value that, if decoded, is 16 bytes in length. This (encoded) value is used in the creation of the server's handshake to indicate an acceptance of the connection. It is not necessary for the server to base64- decode the |Sec-WebSocket-Key| value.",
      "ja": "/ key / | Sec-WebSocket-Key |クライアントのハンドシェイクのヘッダーフィールドには、base64でエンコードされた値が含まれます。デコードされた場合、長さは16バイトです。この（エンコードされた）値は、サーバーのハンドシェイクの作成で使用され、接続の受け入れを示します。サーバーがbase64-| Sec-WebSocket-Key |をデコードする必要はありません値。"
    },
    {
      "indent": 7,
      "text": "/version/ The |Sec-WebSocket-Version| header field in the client's handshake includes the version of the WebSocket Protocol with which the client is attempting to communicate. If this version does not match a version understood by the server, the server MUST abort the WebSocket handshake described in this section and instead send an appropriate HTTP error code (such as 426 Upgrade Required) and a |Sec-WebSocket-Version| header field indicating the version(s) the server is capable of understanding.",
      "ja": "/ version / | Sec-WebSocket-Version |クライアントのハンドシェイクのヘッダーフィールドには、クライアントが通信しようとしているWebSocketプロトコルのバージョンが含まれています。このバージョンがサーバーが理解するバージョンと一致しない場合、サーバーはこのセクションで説明するWebSocketハンドシェイクを中止し、代わりに適切なHTTPエラーコード（426アップグレードが必要など）と| Sec-WebSocket-Version |を送信する必要があります。サーバーが理解できるバージョンを示すヘッダーフィールド。"
    },
    {
      "indent": 7,
      "text": "/resource name/ An identifier for the service provided by the server. If the server provides multiple services, then the value should be derived from the resource name given in the client's handshake in the \"Request-URI\" [RFC2616] of the GET method. If the requested service is not available, the server MUST send an appropriate HTTP error code (such as 404 Not Found) and abort the WebSocket handshake.",
      "ja": "/ resource name /サーバーが提供するサービスの識別子。サーバーが複数のサービスを提供する場合、値は、GETメソッドの「Request-URI」[RFC2616]のクライアントのハンドシェイクで指定されたリソース名から派生する必要があります。要求されたサービスが利用できない場合、サーバーは適切なHTTPエラーコード（404 Not Foundなど）を送信し、WebSocketハンドシェイクを中止する必要があります。"
    },
    {
      "indent": 7,
      "text": "/subprotocol/ Either a single value representing the subprotocol the server is ready to use or null. The value chosen MUST be derived from the client's handshake, specifically by selecting one of the values from the |Sec-WebSocket-Protocol| field that the server is willing to use for this connection (if any). If the client's handshake did not contain such a header field or if the server does not agree to any of the client's requested subprotocols, the only acceptable value is null. The absence of such a field is equivalent to the null value (meaning that if the server does not wish to agree to one of the suggested subprotocols, it MUST NOT send back a |Sec-WebSocket-Protocol| header field in its response). The empty string is not the same as the null value for these purposes and is not a legal value for this field. The ABNF for the value of this header field is (token), where the definitions of constructs and rules are as given in [RFC2616].",
      "ja": "/ subprotocol /サーバーが使用できるサブプロトコルを表す単一の値、またはnullのいずれか。選択された値は、特に| Sec-WebSocket-Protocol |から値の1つを選択することにより、クライアントのハンドシェイクから派生しなければなりません（MUST）。サーバーがこの接続に使用する用意があるフィールド（存在する場合）。クライアントのハンドシェイクにそのようなヘッダーフィールドが含まれていない場合、またはサーバーがクライアントの要求されたサブプロトコルのいずれにも同意しない場合、許容される値はnullのみです。そのようなフィールドがないことはnull値に相当します（つまり、サーバーが提案されたサブプロトコルの1つに同意したくない場合は、その応答で| Sec-WebSocket-Protocol |ヘッダーフィールドを返してはなりません）。空の文字列は、これらの目的ではnull値と同じではなく、このフィールドでは有効な値ではありません。このヘッダーフィールドの値のABNFは（トークン）であり、構成とルールの定義は[RFC2616]に記載されています。"
    },
    {
      "indent": 0,
      "text": " /extensions/ A (possibly empty) list representing the protocol-level extensions the server is ready to use. If the server supports multiple extensions, then the value MUST be derived from the client's handshake, specifically by selecting one or more of the values from the |Sec-WebSocket-Extensions| field. The absence of such a field is equivalent to the null value. The empty string is not the same as the null value for these purposes. Extensions not listed by the client MUST NOT be listed. The method by which these values should be selected and interpreted is discussed in Section 9.1.",
      "ja": "/ extensions /サーバーが使用できるプロトコルレベルの拡張機能を表す（場合によっては空の）リスト。サーバーが複数の拡張機能をサポートしている場合、値はクライアントのハンドシェイクから、具体的には| Sec-WebSocket-Extensions |から1つ以上の値を選択することによって派生する必要があります。フィールド。そのようなフィールドがないことは、null値と同等です。空の文字列は、これらの目的のためのnull値と同じではありません。クライアントによってリストされていない拡張機能はリストしてはいけません。これらの値を選択して解釈する方法については、セクション9.1で説明します。"
    },
    {
      "indent": 3,
      "text": "5. If the server chooses to accept the incoming connection, it MUST reply with a valid HTTP response indicating the following.",
      "ja": "5. サーバーが着信接続を受け入れることを選択した場合は、以下を示す有効なHTTP応答で応答する必要があります。"
    },
    {
      "indent": 7,
      "text": "1. A Status-Line with a 101 response code as per RFC 2616 [RFC2616]. Such a response could look like \"HTTP/1.1 101 Switching Protocols\".",
      "ja": "1. RFC 2616 [RFC2616]に基づく101応答コードを含むStatus-Line。このような応答は、「HTTP / 1.1 101スイッチングプロトコル」のようになります。"
    },
    {
      "indent": 7,
      "text": "2. An |Upgrade| header field with value \"websocket\" as per RFC 2616 [RFC2616].",
      "ja": "2. |アップグレード| RFC 2616 [RFC2616]に基づく「websocket」という値を持つヘッダーフィールド。"
    },
    {
      "indent": 7,
      "text": "3. A |Connection| header field with value \"Upgrade\".",
      "ja": "3. A |接続|値が「Upgrade」のヘッダーフィールド。"
    },
    {
      "indent": 7,
      "text": "4. A |Sec-WebSocket-Accept| header field. The value of this header field is constructed by concatenating /key/, defined above in step 4 in Section 4.2.2, with the string \"258EAFA5- E914-47DA-95CA-C5AB0DC85B11\", taking the SHA-1 hash of this concatenated value to obtain a 20-byte value and base64- encoding (see Section 4 of [RFC4648]) this 20-byte hash.",
      "ja": "4. A | Sec-WebSocket-Accept |ヘッダーフィールド。このヘッダーフィールドの値は、セクション4.2.2のステップ4で定義された/ key /を文字列 \"258EAFA5- E914-47DA-95CA-C5AB0DC85B11\"と連結し、この連結された値のSHA-1ハッシュをとることによって構築されます。 20バイトの値とbase64エンコーディング（[RFC4648]のセクション4を参照）を取得するには、この20バイトのハッシュを使用します。"
    },
    {
      "indent": 11,
      "text": "The ABNF [RFC2616] of this header field is defined as follows:",
      "ja": "このヘッダーフィールドのABNF [RFC2616]は、次のように定義されています。"
    },
    {
      "indent": 11,
      "text": "Sec-WebSocket-Accept     = base64-value-non-empty\nbase64-value-non-empty = (1*base64-data [ base64-padding ]) |\n                         base64-padding\nbase64-data      = 4base64-character\nbase64-padding   = (2base64-character \"==\") |\n                   (3base64-character \"=\")\nbase64-character = ALPHA | DIGIT | \"+\" | \"/\"",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "NOTE: As an example, if the value of the |Sec-WebSocket-Key| header field in the client's handshake were \"dGhlIHNhbXBsZSBub25jZQ==\", the server would append the string \"258EAFA5-E914-47DA-95CA-C5AB0DC85B11\" to form the string \"dGhlIHNhbXBsZSBub25jZQ==258EAFA5-E914-47DA-95CA-C5AB0DC85B11\". The server would then take the SHA-1 hash of this string, giving the value 0xb3 0x7a 0x4f 0x2c 0xc0 0x62 0x4f 0x16 0x90 0xf6 0x46 0x06 0xcf 0x38 0x59 0x45 0xb2 0xbe 0xc4 0xea. This value is then base64-encoded, to give the value \"s3pPLMBiTxaQ9kYGzzhZRbK+xOo=\", which would be returned in the |Sec-WebSocket-Accept| header field.",
      "ja": "注：例として、| Sec-WebSocket-Key |の値がクライアントのハンドシェイクのヘッダーフィールドは \"dGhlIHNhbXBsZSBub25jZQ ==\"だった場合、サーバーは文字列 \"258EAFA5-E914-47DA-95CA-C5AB0DC85B11\"を追加して文字列 \"dGhlIHNhbXBsZSBub25jZQ == 258EAFA5-E914-47DA.47AB95C47A95C-47AB95C11A47-95AB11サーバーはこの文字列のSHA-1ハッシュを取得し、値0xb3 0x7a 0x4f 0x2c 0xc0 0x62 0x4f 0x16 0x90 0xf6 0x46 0x06 0xcf 0x38 0x59 0x45 0xb2 0xbe 0xc4 0xeaを提供します。次に、この値はbase64でエンコードされ、値 \"s3pPLMBiTxaQ9kYGzzhZRbK + xOo =\"を提供します。これは、| Sec-WebSocket-Accept |で返されます。ヘッダーフィールド。"
    },
    {
      "indent": 7,
      "text": "5. Optionally, a |Sec-WebSocket-Protocol| header field, with a value /subprotocol/ as defined in step 4 in Section 4.2.2.",
      "ja": "5. オプションで、| Sec-WebSocket-Protocol |セクション4.2.2のステップ4で定義された値/ subprotocol /を持つヘッダーフィールド。"
    },
    {
      "indent": 7,
      "text": "6. Optionally, a |Sec-WebSocket-Extensions| header field, with a value /extensions/ as defined in step 4 in Section 4.2.2. If multiple extensions are to be used, they can all be listed in a single |Sec-WebSocket-Extensions| header field or split between multiple instances of the |Sec-WebSocket-Extensions| header field.",
      "ja": "6. オプションで、| Sec-WebSocket-Extensions |セクション4.2.2のステップ4で定義された/ extensions /の値を持つヘッダーフィールド。複数の拡張機能を使用する場合、それらすべてを単一の| Sec-WebSocket-Extensions |にリストできます。ヘッダーフィールドまたは| Sec-WebSocket-Extensions |の複数のインスタンス間で分割ヘッダーフィールド。"
    },
    {
      "indent": 3,
      "text": "This completes the server's handshake. If the server finishes these steps without aborting the WebSocket handshake, the server considers the WebSocket connection to be established and that the WebSocket connection is in the OPEN state. At this point, the server may begin sending (and receiving) data.",
      "ja": "これでサーバーのハンドシェイクが完了しました。サーバーがWebSocketハンドシェイクを中止せずにこれらの手順を完了すると、サーバーはWebSocket接続が確立されていると見なし、WebSocket接続がOPEN状態にあると見なします。この時点で、サーバーはデータの送信（および受信）を開始します。"
    },
    {
      "indent": 0,
      "text": "4.3. Collected ABNF for New Header Fields Used in Handshake",
      "section_title": true,
      "ja": "4.3. ハンドシェイクで使用される新しいヘッダーフィールドのABNFを収集"
    },
    {
      "indent": 3,
      "text": "This section is using ABNF syntax/rules from Section 2.1 of [RFC2616], including the \"implied *LWS rule\".",
      "ja": "このセクションでは、[暗黙の* LWSルール]を含め、[RFC2616]のセクション2.1のABNF構文/ルールを使用しています。"
    },
    {
      "indent": 3,
      "text": "Note that the following ABNF conventions are used in this section. Some names of the rules correspond to names of the corresponding header fields. Such rules express values of the corresponding header fields, for example, the Sec-WebSocket-Key ABNF rule describes syntax of the |Sec-WebSocket-Key| header field value. ABNF rules with the \"-Client\" suffix in the name are only used in requests sent by the client to the server; ABNF rules with the \"-Server\" suffix in the name are only used in responses sent by the server to the client. For example, the ABNF rule Sec-WebSocket-Protocol-Client describes syntax of the |Sec-WebSocket-Protocol| header field value sent by the client to the server.",
      "ja": "このセクションでは、次のABNF規則が使用されていることに注意してください。ルールの一部の名前は、対応するヘッダーフィールドの名前に対応しています。このようなルールは、対応するヘッダーフィールドの値を表します。たとえば、Sec-WebSocket-Key ABNFルールは、| Sec-WebSocket-Key |の構文を記述します。ヘッダーフィールドの値。名前に「-Client」というサフィックスが付いたABNFルールは、クライアントからサーバーに送信されるリクエストでのみ使用されます。名前に「-Server」という接尾辞が付いたABNFルールは、サーバーからクライアントに送信される応答でのみ使用されます。たとえば、ABNFルールSec-WebSocket-Protocol-Clientは、| Sec-WebSocket-Protocol |の構文を記述します。クライアントからサーバーに送信されるヘッダーフィールド値。"
    },
    {
      "indent": 3,
      "text": "The following new header fields can be sent during the handshake from the client to the server:",
      "ja": "次の新しいヘッダーフィールドは、ハンドシェイク中にクライアントからサーバーに送信できます。"
    },
    {
      "indent": 6,
      "text": "Sec-WebSocket-Key = base64-value-non-empty Sec-WebSocket-Extensions = extension-list Sec-WebSocket-Protocol-Client = 1#token Sec-WebSocket-Version-Client = version",
      "ja": "Sec-WebSocket-Key = base64-value-non-empty Sec-WebSocket-Extensions = extension-list Sec-WebSocket-Protocol-Client = 1＃token Sec-WebSocket-Version-Client = version"
    },
    {
      "indent": 0,
      "text": "      base64-value-non-empty = (1*base64-data [ base64-padding ]) |\n                                base64-padding\n      base64-data      = 4base64-character\n      base64-padding   = (2base64-character \"==\") |\n                         (3base64-character \"=\")\n      base64-character = ALPHA | DIGIT | \"+\" | \"/\"\n      extension-list = 1#extension\n      extension = extension-token *( \";\" extension-param )\n      extension-token = registered-token\n      registered-token = token\n      extension-param = token [ \"=\" (token | quoted-string) ]\n           ; When using the quoted-string syntax variant, the value\n           ; after quoted-string unescaping MUST conform to the\n           ; 'token' ABNF.\n      NZDIGIT       =  \"1\" | \"2\" | \"3\" | \"4\" | \"5\" | \"6\" |\n                       \"7\" | \"8\" | \"9\"\n      version = DIGIT | (NZDIGIT DIGIT) |\n                (\"1\" DIGIT DIGIT) | (\"2\" DIGIT DIGIT)\n                ; Limited to 0-255 range, with no leading zeros",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "The following new header fields can be sent during the handshake from the server to the client:",
      "ja": "次の新しいヘッダーフィールドは、ハンドシェイク中にサーバーからクライアントに送信できます。"
    },
    {
      "indent": 6,
      "text": "Sec-WebSocket-Extensions = extension-list Sec-WebSocket-Accept = base64-value-non-empty Sec-WebSocket-Protocol-Server = token Sec-WebSocket-Version-Server = 1#version",
      "ja": "Sec-WebSocket-Extensions = extension-list Sec-WebSocket-Accept = base64-value-non-empty Sec-WebSocket-Protocol-Server = token Sec-WebSocket-Version-Server = 1＃version"
    },
    {
      "indent": 0,
      "text": "4.4. Supporting Multiple Versions of WebSocket Protocol",
      "section_title": true,
      "ja": "4.4. WebSocketプロトコルの複数のバージョンのサポート"
    },
    {
      "indent": 3,
      "text": "This section provides some guidance on supporting multiple versions of the WebSocket Protocol in clients and servers.",
      "ja": "このセクションでは、クライアントとサーバーでWebSocketプロトコルの複数のバージョンをサポートするためのガイダンスを提供します。"
    },
    {
      "indent": 3,
      "text": "Using the WebSocket version advertisement capability (the\n|Sec-WebSocket-Version| header field), a client can initially request\nthe version of the WebSocket Protocol that it prefers (which doesn't\nnecessarily have to be the latest supported by the client).  If the\nserver supports the requested version and the handshake message is\notherwise valid, the server will accept that version.  If the server\ndoesn't support the requested version, it MUST respond with a\n|Sec-WebSocket-Version| header field (or multiple\n|Sec-WebSocket-Version| header fields) containing all versions it is\nwilling to use.  At this point, if the client supports one of the\nadvertised versions, it can repeat the WebSocket handshake using a\nnew version value.",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "The following example demonstrates version negotiation described above:",
      "ja": "次の例は、上記のバージョンネゴシエーションを示しています。"
    },
    {
      "indent": 6,
      "text": "GET /chat HTTP/1.1 Host: server.example.com Upgrade: websocket Connection: Upgrade ... Sec-WebSocket-Version: 25",
      "ja": "GET / chat HTTP / 1.1ホスト：server.example.comアップグレード：websocket接続：アップグレード... Sec-WebSocket-Version：25"
    },
    {
      "indent": 3,
      "text": "The response from the server might look as follows:",
      "ja": "サーバーからの応答は次のようになります。"
    },
    {
      "indent": 6,
      "text": "HTTP/1.1 400 Bad Request ... Sec-WebSocket-Version: 13, 8, 7",
      "ja": "HTTP / 1.1 400 Bad Request ... Sec-WebSocket-Version：13、8、7"
    },
    {
      "indent": 3,
      "text": "Note that the last response from the server might also look like:",
      "ja": "サーバーからの最後の応答も次のようになる可能性があることに注意してください。"
    },
    {
      "indent": 6,
      "text": "HTTP/1.1 400 Bad Request ... Sec-WebSocket-Version: 13 Sec-WebSocket-Version: 8, 7",
      "ja": "HTTP / 1.1 400 Bad Request ... Sec-WebSocket-Version：13 Sec-WebSocket-Version：8、7"
    },
    {
      "indent": 3,
      "text": "The client now repeats the handshake that conforms to version 13:",
      "ja": "クライアントはバージョン13に準拠するハンドシェイクを繰り返します。"
    },
    {
      "indent": 6,
      "text": "GET /chat HTTP/1.1 Host: server.example.com Upgrade: websocket Connection: Upgrade ... Sec-WebSocket-Version: 13",
      "ja": "GET / chat HTTP / 1.1ホスト：server.example.comアップグレード：websocket接続：アップグレード... Sec-WebSocket-Version：13"
    },
    {
      "indent": 0,
      "text": "5. Data Framing",
      "section_title": true,
      "ja": "5. データフレーミング"
    },
    {
      "indent": 0,
      "text": "5.1. Overview",
      "section_title": true,
      "ja": "5.1. 概観"
    },
    {
      "indent": 3,
      "text": "In the WebSocket Protocol, data is transmitted using a sequence of frames. To avoid confusing network intermediaries (such as intercepting proxies) and for security reasons that are further discussed in Section 10.3, a client MUST mask all frames that it sends to the server (see Section 5.3 for further details). (Note that masking is done whether or not the WebSocket Protocol is running over TLS.) The server MUST close the connection upon receiving a frame that is not masked. In this case, a server MAY send a Close frame with a status code of 1002 (protocol error) as defined in Section 7.4.1. A server MUST NOT mask any frames that it sends to the client. A client MUST close a connection if it detects a masked frame. In this case, it MAY use the status code 1002 (protocol error) as defined in Section 7.4.1. (These rules might be relaxed in a future specification.)",
      "ja": "WebSocketプロトコルでは、データは一連のフレームを使用して送信されます。ネットワークメディエーション（インターセプトプロキシなど）の混乱を避け、セクション10.3でさらに説明するセキュリティ上の理由から、クライアントはサーバーに送信するすべてのフレームをマスクする必要があります（詳細については、セクション5.3を参照）。 （WebSocketプロトコルがTLSで実行されているかどうかにかかわらず、マスキングが行われることに注意してください。）サーバーは、マスキングされていないフレームを受信すると接続を閉じる必要があります。この場合、サーバーは、セクション7.4.1で定義されているように、ステータスコード1002（プロトコルエラー）のCloseフレームを送信できます（MAY）。サーバーは、クライアントに送信するフレームをマスクしてはなりません（MUST NOT）。クライアントは、マスクされたフレームを検出した場合、接続を閉じる必要があります。この場合、セクション7.4.1で定義されているように、ステータスコード1002（プロトコルエラー）を使用できます。 （これらのルールは、将来の仕様で緩和される可能性があります。）"
    },
    {
      "indent": 3,
      "text": "The base framing protocol defines a frame type with an opcode, a payload length, and designated locations for \"Extension data\" and \"Application data\", which together define the \"Payload data\". Certain bits and opcodes are reserved for future expansion of the protocol.",
      "ja": "基本フレーミングプロトコルは、オペコード、ペイロード長、および「ペイロードデータ」を定義する「拡張データ」と「アプリケーションデータ」の指定位置でフレームタイプを定義します。特定のビットとオペコードは、プロトコルの将来の拡張のために予約されています。"
    },
    {
      "indent": 3,
      "text": "A data frame MAY be transmitted by either the client or the server at any time after opening handshake completion and before that endpoint has sent a Close frame (Section 5.5.1).",
      "ja": "データフレームは、ハンドシェイクの開始が完了した後、エンドポイントがクローズフレームを送信する前にいつでもクライアントまたはサーバーのいずれかから送信できます（セクション5.5.1）。"
    },
    {
      "indent": 0,
      "text": "5.2. Base Framing Protocol",
      "section_title": true,
      "ja": "5.2. 基本フレーミングプロトコル"
    },
    {
      "indent": 3,
      "text": "This wire format for the data transfer part is described by the ABNF [RFC5234] given in detail in this section. (Note that, unlike in other sections of this document, the ABNF in this section is operating on groups of bits. The length of each group of bits is indicated in a comment. When encoded on the wire, the most significant bit is the leftmost in the ABNF). A high-level overview of the framing is given in the following figure. In a case of conflict between the figure below and the ABNF specified later in this section, the figure is authoritative.",
      "ja": "データ転送部分のこのワイヤ形式は、このセクションで詳細に説明されているABNF [RFC5234]によって記述されています。 （このドキュメントの他のセクションとは異なり、このセクションのABNFはビットのグループで動作していることに注意してください。ビットの各グループの長さはコメントに示されています。ネットワーク上でエンコードされる場合、最上位ビットは左端です。 ABNFで）。フレーミングの概要を次の図に示します。以下の図と、このセクションで後で指定するABNFとの間に矛盾がある場合、図は信頼できるものです。"
    },
    {
      "indent": 5,
      "text": " 0                   1                   2                   3\n 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n+-+-+-+-+-------+-+-------------+-------------------------------+\n|F|R|R|R| opcode|M| Payload len |    Extended payload length    |\n|I|S|S|S|  (4)  |A|     (7)     |             (16/64)           |\n|N|V|V|V|       |S|             |   (if payload len==126/127)   |\n| |1|2|3|       |K|             |                               |\n+-+-+-+-+-------+-+-------------+ - - - - - - - - - - - - - - - +\n|     Extended payload length continued, if payload len == 127  |\n+ - - - - - - - - - - - - - - - +-------------------------------+\n|                               |Masking-key, if MASK set to 1  |\n+-------------------------------+-------------------------------+\n| Masking-key (continued)       |          Payload Data         |\n+-------------------------------- - - - - - - - - - - - - - - - +\n:                     Payload Data continued ...                :\n+ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +\n|                     Payload Data continued ...                |\n+---------------------------------------------------------------+",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "FIN: 1 bit",
      "ja": "FIN：1ビット"
    },
    {
      "indent": 6,
      "text": "Indicates that this is the final fragment in a message. The first fragment MAY also be the final fragment.",
      "ja": "これがメッセージの最後のフラグメントであることを示します。最初のフラグメントは、最後のフラグメントでもかまいません。"
    },
    {
      "indent": 3,
      "text": "RSV1, RSV2, RSV3: 1 bit each",
      "ja": "RSV1、RSV2、RSV3：各1ビット"
    },
    {
      "indent": 6,
      "text": "MUST be 0 unless an extension is negotiated that defines meanings for non-zero values. If a nonzero value is received and none of the negotiated extensions defines the meaning of such a nonzero value, the receiving endpoint MUST _Fail the WebSocket Connection_.",
      "ja": "0以外の値の意味を定義する拡張がネゴシエートされない限り、0でなければなりません。ゼロ以外の値が受信され、ネゴシエートされた拡張機能のいずれもそのようなゼロ以外の値の意味を定義していない場合、受信側のエンドポイントは_WebSocket接続に失敗する必要があります_。"
    },
    {
      "indent": 3,
      "text": "Opcode: 4 bits",
      "ja": "オペコード：4ビット"
    },
    {
      "indent": 6,
      "text": "Defines the interpretation of the \"Payload data\". If an unknown opcode is received, the receiving endpoint MUST _Fail the WebSocket Connection_. The following values are defined.",
      "ja": "「ペイロードデータ」の解釈を定義します。不明なオペコードを受信した場合、受信エンドポイントは_WebSocket接続に失敗する必要があります_。以下の値が定義されています。"
    },
    {
      "indent": 6,
      "text": "* %x0 denotes a continuation frame",
      "ja": "* ％x0は継続フレームを示します"
    },
    {
      "indent": 6,
      "text": "* %x1 denotes a text frame",
      "ja": "* ％x1はテキストフレームを示します"
    },
    {
      "indent": 6,
      "text": "* %x2 denotes a binary frame",
      "ja": "* ％x2はバイナリフレームを示します"
    },
    {
      "indent": 6,
      "text": "* %x3-7 are reserved for further non-control frames",
      "ja": "* ％x3-7は、それ以外の非制御フレーム用に予約されています"
    },
    {
      "indent": 6,
      "text": "* %x8 denotes a connection close",
      "ja": "* ％x8は接続のクローズを示します"
    },
    {
      "indent": 6,
      "text": "* %x9 denotes a ping",
      "ja": "* ％x9はpingを示します"
    },
    {
      "indent": 6,
      "text": "* %xA denotes a pong",
      "ja": "* ％xAはポンを示します"
    },
    {
      "indent": 6,
      "text": "* %xB-F are reserved for further control frames",
      "ja": "* ％xB-Fは、以降の制御フレーム用に予約されています"
    },
    {
      "indent": 3,
      "text": "Mask: 1 bit",
      "ja": "マスク：1ビット"
    },
    {
      "indent": 6,
      "text": "Defines whether the \"Payload data\" is masked. If set to 1, a masking key is present in masking-key, and this is used to unmask the \"Payload data\" as per Section 5.3. All frames sent from client to server have this bit set to 1.",
      "ja": "「ペイロードデータ」がマスクされるかどうかを定義します。 1に設定すると、マスキングキーがmasking-keyに存在し、これを使用して、セクション5.3の「ペイロードデータ」のマスクを解除します。クライアントからサーバーに送信されるすべてのフレームでは、このビットが1に設定されています。"
    },
    {
      "indent": 3,
      "text": "Payload length:  7 bits, 7+16 bits, or 7+64 bits",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 6,
      "text": "The length of the \"Payload data\", in bytes: if 0-125, that is the payload length. If 126, the following 2 bytes interpreted as a 16-bit unsigned integer are the payload length. If 127, the following 8 bytes interpreted as a 64-bit unsigned integer (the most significant bit MUST be 0) are the payload length. Multibyte length quantities are expressed in network byte order. Note that in all cases, the minimal number of bytes MUST be used to encode the length, for example, the length of a 124-byte-long string can't be encoded as the sequence 126, 0, 124. The payload length is the length of the \"Extension data\" + the length of the \"Application data\". The length of the \"Extension data\" may be zero, in which case the payload length is the length of the \"Application data\".",
      "ja": "「ペイロードデータ」の長さ（バイト）。0〜125の場合、ペイロードの長さです。 126の場合、16ビットの符号なし整数として解釈される次の2バイトはペイロード長です。 127の場合、64ビットの符号なし整数として解釈される次の8バイト（最上位ビットは0でなければならない）は、ペイロードの長さです。マルチバイト長の数量は、ネットワークバイトオーダーで表されます。すべての場合において、最小バイト数を使用して長さをエンコードする必要があることに注意してください。たとえば、124バイト長の文字列の長さは、シーケンス126、0、124としてエンコードできません。ペイロードの長さは「拡張データ」の長さ+「アプリケーションデータ」の長さ。 「拡張データ」の長さはゼロでもかまいません。その場合、ペイロードの長さは「アプリケーションデータ」の長さになります。"
    },
    {
      "indent": 3,
      "text": "Masking-key: 0 or 4 bytes",
      "ja": "マスキングキー：0または4バイト"
    },
    {
      "indent": 6,
      "text": "All frames sent from the client to the server are masked by a 32-bit value that is contained within the frame. This field is present if the mask bit is set to 1 and is absent if the mask bit is set to 0. See Section 5.3 for further information on client-to-server masking.",
      "ja": "クライアントからサーバーに送信されるすべてのフレームは、フレーム内に含まれる32ビット値によってマスクされます。このフィールドは、マスクビットが1に設定されている場合に存在し、マスクビットが0に設定されている場合は存在しません。クライアントからサーバーへのマスキングの詳細については、セクション5.3を参照してください。"
    },
    {
      "indent": 3,
      "text": "Payload data: (x+y) bytes",
      "ja": "ペイロードデータ：（x + y）バイト"
    },
    {
      "indent": 6,
      "text": "The \"Payload data\" is defined as \"Extension data\" concatenated with \"Application data\".",
      "ja": "「ペイロードデータ」は、「拡張データ」と「アプリケーションデータ」を連結したものとして定義されます。"
    },
    {
      "indent": 3,
      "text": "Extension data: x bytes",
      "ja": "拡張データ：xバイト"
    },
    {
      "indent": 6,
      "text": "The \"Extension data\" is 0 bytes unless an extension has been negotiated. Any extension MUST specify the length of the \"Extension data\", or how that length may be calculated, and how the extension use MUST be negotiated during the opening handshake. If present, the \"Extension data\" is included in the total payload length.",
      "ja": "「拡張データ」は、拡張がネゴシエートされていない限り、0バイトです。拡張機能は、「拡張データ」の長さ、またはその長さの計算方法、および開始ハンドシェイク中に拡張機能の使用をネゴシエートする方法を指定する必要があります。存在する場合、「拡張データ」はペイロードの全長に含まれます。"
    },
    {
      "indent": 3,
      "text": "Application data: y bytes",
      "ja": "アプリケーションデータ：yバイト"
    },
    {
      "indent": 6,
      "text": "Arbitrary \"Application data\", taking up the remainder of the frame after any \"Extension data\". The length of the \"Application data\" is equal to the payload length minus the length of the \"Extension data\".",
      "ja": "任意の「アプリケーションデータ」、「拡張データ」の後のフレームの残りを占める。 「アプリケーションデータ」の長さは、ペイロードの長さから「拡張データ」の長さを引いたものに等しくなります。"
    },
    {
      "indent": 3,
      "text": "The base framing protocol is formally defined by the following ABNF [RFC5234]. It is important to note that the representation of this data is binary, not ASCII characters. As such, a field with a length of 1 bit that takes values %x0 / %x1 is represented as a single bit whose value is 0 or 1, not a full byte (octet) that stands for the characters \"0\" or \"1\" in the ASCII encoding. A field with a length of 4 bits with values between %x0-F again is represented by 4 bits, again NOT by an ASCII character or full byte (octet) with these values. [RFC5234] does not specify a character encoding: \"Rules resolve into a string of terminal values, sometimes called characters. In ABNF, a character is merely a non-negative integer. In certain contexts, a specific mapping (encoding) of values into a character set (such as ASCII) will be specified.\" Here, the specified encoding is a binary encoding where each terminal value is encoded in the specified number of bits, which varies for each field.",
      "ja": "基本フレーミングプロトコルは、次のABNF [RFC5234]によって正式に定義されています。このデータの表現はASCII文字ではなくバイナリであることに注意することが重要です。したがって、値％x0 /％x1を取る1ビットの長さのフィールドは、値が0または1の単一ビットとして表され、文字「0」または「1」を表す完全なバイト（オクテット）ではありません。 \"ASCIIエンコーディング。 ％x0-Fの間の値を持つ4ビットの長さのフィールドも、これらの値を持つASCII文字またはフルバイト（オクテット）ではなく、4ビットで表されます。 [RFC5234]は文字エンコードを指定していません。「ルールは、文字と呼ばれることもある最終値の文字列に解決されます。ABNFでは、文字は単なる非負の整数です。特定のコンテキストでは、値の特定のマッピング（エンコード）が文字セット（ASCIIなど）が指定されます。」ここで、指定されたエンコーディングは、各ターミナル値がフィールドごとに異なる指定されたビット数でエンコードされるバイナリエンコーディングです。"
    },
    {
      "indent": 4,
      "text": "ws-frame                = frame-fin           ; 1 bit in length\n                          frame-rsv1          ; 1 bit in length\n                          frame-rsv2          ; 1 bit in length\n                          frame-rsv3          ; 1 bit in length\n                          frame-opcode        ; 4 bits in length\n                          frame-masked        ; 1 bit in length\n                          frame-payload-length   ; either 7, 7+16,\n                                                 ; or 7+64 bits in\n                                                 ; length\n                          [ frame-masking-key ]  ; 32 bits in length\n                          frame-payload-data     ; n*8 bits in\n                                                 ; length, where\n                                                 ; n >= 0",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 4,
      "text": "frame-fin               = %x0 ; more frames of this message follow\n                        / %x1 ; final frame of this message\n                              ; 1 bit in length",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 4,
      "text": "frame-rsv1              = %x0 / %x1\n                          ; 1 bit in length, MUST be 0 unless\n                          ; negotiated otherwise",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 4,
      "text": "frame-rsv2              = %x0 / %x1\n                          ; 1 bit in length, MUST be 0 unless\n                          ; negotiated otherwise",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 4,
      "text": "frame-rsv3              = %x0 / %x1\n                          ; 1 bit in length, MUST be 0 unless\n                          ; negotiated otherwise",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 4,
      "text": "frame-opcode = frame-opcode-non-control / frame-opcode-control / frame-opcode-cont",
      "ja": "frame-opcode = frame-opcode-non-control / frame-opcode-control / frame-opcode-cont"
    },
    {
      "indent": 4,
      "text": "frame-opcode-cont       = %x0 ; frame continuation",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 4,
      "text": "frame-opcode-non-control= %x1 ; text frame\n                        / %x2 ; binary frame\n                        / %x3-7\n                        ; 4 bits in length,\n                        ; reserved for further non-control frames",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 4,
      "text": "frame-opcode-control    = %x8 ; connection close\n                        / %x9 ; ping\n                        / %xA ; pong\n                        / %xB-F ; reserved for further control\n                                ; frames\n                                ; 4 bits in length",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 4,
      "text": "frame-masked            = %x0\n                        ; frame is not masked, no frame-masking-key\n                        / %x1\n                        ; frame is masked, frame-masking-key present\n                        ; 1 bit in length",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 4,
      "text": "frame-payload-length    = ( %x00-7D )\n                        / ( %x7E frame-payload-length-16 )\n                        / ( %x7F frame-payload-length-63 )\n                        ; 7, 7+16, or 7+64 bits in length,\n                        ; respectively",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 4,
      "text": "frame-payload-length-16 = %x0000-FFFF ; 16 bits in length",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 4,
      "text": "frame-payload-length-63 = %x0000000000000000-7FFFFFFFFFFFFFFF\n                        ; 64 bits in length",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 4,
      "text": "frame-masking-key = 4( %x00-FF ) ; present only if frame-masked is 1 ; 32 bits in length",
      "ja": "frame-masking-key = 4（％x00-FF）; frame-maskedが1の場合にのみ存在します。長さ32ビット"
    },
    {
      "indent": 4,
      "text": "frame-payload-data      = (frame-masked-extension-data\n                           frame-masked-application-data)\n                        ; when frame-masked is 1\n                          / (frame-unmasked-extension-data\n                            frame-unmasked-application-data)\n                        ; when frame-masked is 0",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 4,
      "text": "frame-masked-extension-data     = *( %x00-FF )\n                        ; reserved for future extensibility\n                        ; n*8 bits in length, where n >= 0",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 4,
      "text": "frame-masked-application-data   = *( %x00-FF )\n                        ; n*8 bits in length, where n >= 0",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 4,
      "text": "frame-unmasked-extension-data   = *( %x00-FF )\n                        ; reserved for future extensibility\n                        ; n*8 bits in length, where n >= 0",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 4,
      "text": "frame-unmasked-application-data = *( %x00-FF )\n                        ; n*8 bits in length, where n >= 0",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "5.3. Client-to-Server Masking",
      "section_title": true,
      "ja": "5.3. クライアントからサーバーへのマスキング"
    },
    {
      "indent": 3,
      "text": "A masked frame MUST have the field frame-masked set to 1, as defined in Section 5.2.",
      "ja": "マスクされたフレームは、セクション5.2で定義されているように、frame-maskedフィールドを1に設定する必要があります。"
    },
    {
      "indent": 3,
      "text": "The masking key is contained completely within the frame, as defined in Section 5.2 as frame-masking-key. It is used to mask the \"Payload data\" defined in the same section as frame-payload-data, which includes \"Extension data\" and \"Application data\".",
      "ja": "セクション5.2でframe-masking-keyとして定義されているように、マスキングキーは完全にフレーム内に含まれています。 「拡張データ」と「アプリケーションデータ」を含むframe-payload-dataと同じセクションで定義された「ペイロードデータ」をマスクするために使用されます。"
    },
    {
      "indent": 3,
      "text": "The masking key is a 32-bit value chosen at random by the client. When preparing a masked frame, the client MUST pick a fresh masking key from the set of allowed 32-bit values. The masking key needs to be unpredictable; thus, the masking key MUST be derived from a strong source of entropy, and the masking key for a given frame MUST NOT make it simple for a server/proxy to predict the masking key for a subsequent frame. The unpredictability of the masking key is essential to prevent authors of malicious applications from selecting the bytes that appear on the wire. RFC 4086 [RFC4086] discusses what entails a suitable source of entropy for security-sensitive applications.",
      "ja": "マスキングキーは、クライアントによってランダムに選択された32ビットの値です。マスクされたフレームを準備するとき、クライアントは許可された32ビット値のセットから新しいマスキングキーを選択する必要があります。マスキングキーは予測不能である必要があります。したがって、マスキングキーはエントロピーの強力なソースから派生する必要があり、特定のフレームのマスキングキーは、サーバー/プロキシが後続のフレームのマスキングキーを予測することを単純にしてはなりません。マスキングキーの予測不能性は、悪意のあるアプリケーションの作成者が回線に表示されるバイトを選択できないようにするために不可欠です。 RFC 4086 [RFC4086]は、セキュリティの影響を受けやすいアプリケーションに適切なエントロピーのソースを必要とするものについて説明しています。"
    },
    {
      "indent": 3,
      "text": "The masking does not affect the length of the \"Payload data\". To convert masked data into unmasked data, or vice versa, the following algorithm is applied. The same algorithm applies regardless of the direction of the translation, e.g., the same steps are applied to mask the data as to unmask the data.",
      "ja": "マスキングは、「ペイロードデータ」の長さに影響しません。マスクされたデータをマスクされていないデータに、またはその逆に変換するには、次のアルゴリズムが適用されます。変換の方向に関係なく、同じアルゴリズムが適用されます。たとえば、データのマスクを解除する場合と同じステップを適用して、データをマスクします。"
    },
    {
      "indent": 3,
      "text": "Octet i of the transformed data (\"transformed-octet-i\") is the XOR of octet i of the original data (\"original-octet-i\") with octet at index i modulo 4 of the masking key (\"masking-key-octet-j\"):",
      "ja": "変換されたデータのオクテットi（「transformed-octet-i」）は、元のデータ（「original-octet-i」）のオクテットiと、マスキングキー（「masking-key」の4を法とするインデックスiのオクテット）のXORです。 -octet-j \"）："
    },
    {
      "indent": 5,
      "text": "j = i MOD 4 transformed-octet-i = original-octet-i XOR masking-key-octet-j",
      "ja": "j = i MOD 4 transformed-octet-i = original-octet-i XOR masking-key-octet-j"
    },
    {
      "indent": 3,
      "text": "The payload length, indicated in the framing as frame-payload-length, does NOT include the length of the masking key. It is the length of the \"Payload data\", e.g., the number of bytes following the masking key.",
      "ja": "フレーミングでframe-payload-lengthとして示されているペイロード長には、マスキングキーの長さが含まれていません。これは、「ペイロードデータ」の長さです。たとえば、マスキングキーに続くバイト数です。"
    },
    {
      "indent": 0,
      "text": "5.4. Fragmentation",
      "section_title": true,
      "ja": "5.4. 断片化"
    },
    {
      "indent": 3,
      "text": "The primary purpose of fragmentation is to allow sending a message that is of unknown size when the message is started without having to buffer that message. If messages couldn't be fragmented, then an endpoint would have to buffer the entire message so its length could be counted before the first byte is sent. With fragmentation, a server or intermediary may choose a reasonable size buffer and, when the buffer is full, write a fragment to the network.",
      "ja": "フラグメンテーションの主な目的は、メッセージの開始時にサイズが不明なメッセージをバッファリングせずに送信できるようにすることです。メッセージを断片化できなかった場合、エンドポイントはメッセージ全体をバッファーに入れて、最初のバイトが送信される前にその長さをカウントできるようにする必要があります。断片化により、サーバーまたは仲介者は適切なサイズのバッファーを選択し、バッファーがいっぱいになるとフラグメントをネットワークに書き込むことができます。"
    },
    {
      "indent": 0,
      "text": " A secondary use-case for fragmentation is for multiplexing, where it is not desirable for a large message on one logical channel to monopolize the output channel, so the multiplexing needs to be free to split the message into smaller fragments to better share the output channel. (Note that the multiplexing extension is not described in this document.)",
      "ja": "フラグメンテーションの2番目の使用例は、多重化です。1つの論理チャネル上の大きなメッセージが出力チャネルを独占することは望ましくないため、出力チャネルをより適切に共有するには、多重化を自由にしてメッセージを小さなフラグメントに分割する必要があります。 。 （多重化拡張はこのドキュメントでは説明されていないことに注意してください。）"
    },
    {
      "indent": 3,
      "text": "Unless specified otherwise by an extension, frames have no semantic meaning. An intermediary might coalesce and/or split frames, if no extensions were negotiated by the client and the server or if some extensions were negotiated, but the intermediary understood all the extensions negotiated and knows how to coalesce and/or split frames in the presence of these extensions. One implication of this is that in absence of extensions, senders and receivers must not depend on the presence of specific frame boundaries.",
      "ja": "拡張機能で特に指定されていない限り、フレームには意味がありません。クライアントとサーバーによって拡張機能がネゴシエートされなかった場合、または一部の拡張機能がネゴシエートされた場合、仲介者はフレームを結合または分割する可能性がありますが、仲介者はすべての拡張機能をネゴシエートし、存在する場合にフレームを統合または分割する方法を知っています。これらの拡張機能。これが意味することの1つは、拡張機能がない場合、送信者と受信者は特定のフレーム境界の存在に依存してはならないということです。"
    },
    {
      "indent": 3,
      "text": "The following rules apply to fragmentation:",
      "ja": "フラグメンテーションには次のルールが適用されます。"
    },
    {
      "indent": 3,
      "text": "o An unfragmented message consists of a single frame with the FIN bit set (Section 5.2) and an opcode other than 0.",
      "ja": "o フラグメント化されていないメッセージは、FINビットが設定された単一のフレーム（セクション5.2）と、0以外のオペコードで構成されます。"
    },
    {
      "indent": 3,
      "text": "o A fragmented message consists of a single frame with the FIN bit clear and an opcode other than 0, followed by zero or more frames with the FIN bit clear and the opcode set to 0, and terminated by a single frame with the FIN bit set and an opcode of 0. A fragmented message is conceptually equivalent to a single larger message whose payload is equal to the concatenation of the payloads of the fragments in order; however, in the presence of extensions, this may not hold true as the extension defines the interpretation of the \"Extension data\" present. For instance, \"Extension data\" may only be present at the beginning of the first fragment and apply to subsequent fragments, or there may be \"Extension data\" present in each of the fragments that applies only to that particular fragment. In the absence of \"Extension data\", the following example demonstrates how fragmentation works.",
      "ja": "o フラグメント化されたメッセージは、FINビットがクリアされており、オペコードが0以外の単一フレームで構成され、その後にFINビットがクリアされ、オペコードが0に設定された0個以上のフレームが続き、FINビットがセットされ、オペコード0。フラグメント化されたメッセージは、概念的には、そのペイロードがフラグメントのペイロードを順番に連結したものに等しい1つの大きなメッセージと同等です。ただし、拡張が存在する場合、拡張が存在する「拡張データ」の解釈を定義するため、これは当てはまらない場合があります。たとえば、「拡張データ」は最初のフラグメントの先頭にのみ存在し、後続のフラグメントに適用される場合や、特定のフラグメントにのみ適用される「拡張データ」が各フラグメントに存在する場合があります。 「拡張データ」がない場合、次の例は断片化がどのように機能するかを示しています。"
    },
    {
      "indent": 6,
      "text": "EXAMPLE: For a text message sent as three fragments, the first fragment would have an opcode of 0x1 and a FIN bit clear, the second fragment would have an opcode of 0x0 and a FIN bit clear, and the third fragment would have an opcode of 0x0 and a FIN bit that is set.",
      "ja": "例：3つのフラグメントとして送信されるテキストメッセージの場合、最初のフラグメントのオペコードは0x1でFINビットがクリアされ、2番目のフラグメントのオペコードは0x0でFINビットがクリアされ、3番目のフラグメントのオペコードは0x0および設定されているFINビット。"
    },
    {
      "indent": 3,
      "text": "o Control frames (see Section 5.5) MAY be injected in the middle of a fragmented message. Control frames themselves MUST NOT be fragmented.",
      "ja": "o 制御フレーム（セクション5.5を参照）は、断片化されたメッセージの途中に挿入される場合があります。制御フレーム自体は断片化してはいけません。"
    },
    {
      "indent": 3,
      "text": "o Message fragments MUST be delivered to the recipient in the order sent by the sender.",
      "ja": "o メッセージフラグメントは、送信者が送信した順序で受信者に配信される必要があります。"
    },
    {
      "indent": 3,
      "text": "o The fragments of one message MUST NOT be interleaved between the fragments of another message unless an extension has been negotiated that can interpret the interleaving.",
      "ja": "o インターリーブを解釈できる拡張機能がネゴシエートされていない限り、1つのメッセージのフラグメントを別のメッセージのフラグメント間でインターリーブしてはなりません（MUST NOT）。"
    },
    {
      "indent": 3,
      "text": "o An endpoint MUST be capable of handling control frames in the middle of a fragmented message.",
      "ja": "o エンドポイントは、断片化されたメッセージの途中で制御フレームを処理できる必要があります。"
    },
    {
      "indent": 3,
      "text": "o A sender MAY create fragments of any size for non-control messages.",
      "ja": "o 送信者は、非制御メッセージ用に任意のサイズのフラグメントを作成できます（MAY）。"
    },
    {
      "indent": 3,
      "text": "o Clients and servers MUST support receiving both fragmented and unfragmented messages.",
      "ja": "o クライアントとサーバーは、断片化されたメッセージと断片化されていないメッセージの両方の受信をサポートする必要があります。"
    },
    {
      "indent": 3,
      "text": "o As control frames cannot be fragmented, an intermediary MUST NOT attempt to change the fragmentation of a control frame.",
      "ja": "o 制御フレームはフラグメント化できないため、中間者は制御フレームのフラグメント化を変更してはいけません。"
    },
    {
      "indent": 3,
      "text": "o An intermediary MUST NOT change the fragmentation of a message if any reserved bit values are used and the meaning of these values is not known to the intermediary.",
      "ja": "o 予約ビット値が使用され、これらの値の意味が仲介者に知られていない場合、仲介者はメッセージの断片化を変更してはなりません（MUST NOT）。"
    },
    {
      "indent": 3,
      "text": "o An intermediary MUST NOT change the fragmentation of any message in the context of a connection where extensions have been negotiated and the intermediary is not aware of the semantics of the negotiated extensions. Similarly, an intermediary that didn't see the WebSocket handshake (and wasn't notified about its content) that resulted in a WebSocket connection MUST NOT change the fragmentation of any message of such connection.",
      "ja": "o 仲介者は、拡張がネゴシエートされており、仲介者がネゴシエートされた拡張のセマンティクスを認識していない接続のコンテキストで、メッセージの断片化を変更してはなりません（MUST NOT）。同様に、WebSocket接続の原因となったWebSocketハンドシェイクを確認しなかった（およびその内容について通知されなかった）仲介者は、そのような接続のメッセージの断片化を変更してはなりません（MUST NOT）。"
    },
    {
      "indent": 3,
      "text": "o As a consequence of these rules, all fragments of a message are of the same type, as set by the first fragment's opcode. Since control frames cannot be fragmented, the type for all fragments in a message MUST be either text, binary, or one of the reserved opcodes.",
      "ja": "o これらのルールの結果として、メッセージのすべてのフラグメントは、最初のフラグメントのオペコードによって設定されたものと同じタイプになります。コントロールフレームはフラグメント化できないため、メッセージ内のすべてのフラグメントのタイプは、テキスト、バイナリ、または予約済みのオペコードのいずれかである必要があります。"
    },
    {
      "indent": 3,
      "text": "NOTE: If control frames could not be interjected, the latency of a ping, for example, would be very long if behind a large message. Hence, the requirement of handling control frames in the middle of a fragmented message.",
      "ja": "注：制御フレームを挿入できなかった場合、たとえば大きなメッセージの背後にある場合、pingの待機時間は非常に長くなります。したがって、断片化されたメッセージの途中で制御フレームを処理する必要があります。"
    },
    {
      "indent": 3,
      "text": "IMPLEMENTATION NOTE: In the absence of any extension, a receiver doesn't have to buffer the whole frame in order to process it. For example, if a streaming API is used, a part of a frame can be delivered to the application. However, note that this assumption might not hold true for all future WebSocket extensions.",
      "ja": "実装上の注意：拡張子がない場合、受信側はフレーム全体をバッファリングして処理する必要はありません。たとえば、ストリーミングAPIが使用されている場合、フレームの一部をアプリケーションに配信できます。ただし、この仮定は将来のすべてのWebSocket拡張機能に当てはまるとは限らないことに注意してください。"
    },
    {
      "indent": 0,
      "text": "5.5. Control Frames",
      "section_title": true,
      "ja": "5.5. 制御フレーム"
    },
    {
      "indent": 3,
      "text": "Control frames are identified by opcodes where the most significant bit of the opcode is 1. Currently defined opcodes for control frames include 0x8 (Close), 0x9 (Ping), and 0xA (Pong). Opcodes 0xB-0xF are reserved for further control frames yet to be defined.",
      "ja": "制御フレームは、オペコードの最上位ビットが1であるオペコードによって識別されます。制御フレームに現在定義されているオペコードには、0x8（クローズ）、0x9（Ping）、および0xA（ポン）があります。オペコード0xB-0xFは、まだ定義されていない他の制御フレーム用に予約されています。"
    },
    {
      "indent": 3,
      "text": "Control frames are used to communicate state about the WebSocket. Control frames can be interjected in the middle of a fragmented message.",
      "ja": "コントロールフレームは、WebSocketに関する状態を通信するために使用されます。制御フレームは、断片化されたメッセージの途中に挿入できます。"
    },
    {
      "indent": 3,
      "text": "All control frames MUST have a payload length of 125 bytes or less and MUST NOT be fragmented.",
      "ja": "すべての制御フレームは、125バイト以下のペイロード長を持たなければならず（MUST）、フラグメント化してはなりません（MUST NOT）。"
    },
    {
      "indent": 0,
      "text": "5.5.1. Close",
      "section_title": true,
      "ja": "5.5.1. 閉じる"
    },
    {
      "indent": 3,
      "text": "The Close frame contains an opcode of 0x8.",
      "ja": "Closeフレームには、0x8のオペコードが含まれています。"
    },
    {
      "indent": 3,
      "text": "The Close frame MAY contain a body (the \"Application data\" portion of the frame) that indicates a reason for closing, such as an endpoint shutting down, an endpoint having received a frame too large, or an endpoint having received a frame that does not conform to the format expected by the endpoint. If there is a body, the first two bytes of the body MUST be a 2-byte unsigned integer (in network byte order) representing a status code with value /code/ defined in Section 7.4. Following the 2-byte integer, the body MAY contain UTF-8-encoded data with value /reason/, the interpretation of which is not defined by this specification. This data is not necessarily human readable but may be useful for debugging or passing information relevant to the script that opened the connection. As the data is not guaranteed to be human readable, clients MUST NOT show it to end users.",
      "ja": "Closeフレームには、終了する理由を示すボディ（フレームの「アプリケーションデータ」部分）が含まれている場合があります（シャットダウンするエンドポイント、フレームを受信しすぎたエンドポイントが大きすぎる、フレームを受信したエンドポイントなど）。エンドポイントが予期する形式に準拠していません。ボディがある場合、ボディの最初の2バイトは、セクション7.4で定義された値/ code /のステータスコードを表す2バイトの符号なし整数（ネットワークバイト順）である必要があります。 2バイト整数に続いて、本文には値が/ reason /のUTF-8でエンコードされたデータが含まれる場合があり、その解釈はこの仕様では定義されていません。このデータは必ずしも人間が読めるとは限りませんが、接続を開いたスクリプトに関連する情報をデバッグまたは渡すのに役立つ場合があります。データは人間が読めることが保証されていないため、クライアントはそれをエンドユーザーに見せてはいけません。"
    },
    {
      "indent": 3,
      "text": "Close frames sent from client to server must be masked as per Section 5.3.",
      "ja": "クライアントからサーバーに送信されるクローズフレームは、セクション5.3に従ってマスクする必要があります。"
    },
    {
      "indent": 3,
      "text": "The application MUST NOT send any more data frames after sending a Close frame.",
      "ja": "アプリケーションは、Closeフレームを送信した後、これ以上データフレームを送信してはなりません（MUST NOT）。"
    },
    {
      "indent": 3,
      "text": "If an endpoint receives a Close frame and did not previously send a Close frame, the endpoint MUST send a Close frame in response. (When sending a Close frame in response, the endpoint typically echos the status code it received.) It SHOULD do so as soon as practical. An endpoint MAY delay sending a Close frame until its current message is sent (for instance, if the majority of a fragmented message is already sent, an endpoint MAY send the remaining fragments before sending a Close frame). However, there is no guarantee that the endpoint that has already sent a Close frame will continue to process data.",
      "ja": "エンドポイントがCloseフレームを受信し、以前にCloseフレームを送信していない場合、エンドポイントは応答としてCloseフレームを送信する必要があります。 （応答としてCloseフレームを送信する場合、エンドポイントは通常、受信したステータスコードをエコーし​​ます。）できるだけ早くそうする必要があります。エンドポイントは、現在のメッセージが送信されるまでCloseフレームの送信を遅らせる場合があります（たとえば、断片化されたメッセージの大部分がすでに送信されている場合、エンドポイントは、Closeフレームを送信する前に残りのフラグメントを送信する場合があります）。ただし、すでにCloseフレームを送信したエンドポイントが引き続きデータを処理するという保証はありません。"
    },
    {
      "indent": 3,
      "text": "After both sending and receiving a Close message, an endpoint considers the WebSocket connection closed and MUST close the underlying TCP connection. The server MUST close the underlying TCP connection immediately; the client SHOULD wait for the server to close the connection but MAY close the connection at any time after sending and receiving a Close message, e.g., if it has not received a TCP Close from the server in a reasonable time period.",
      "ja": "Closeメッセージの送信と受信の両方の後、エンドポイントはWebSocket接続が閉じられたと見なし、基になるTCP接続を閉じなければなりません（MUST）。サーバーは、基になるTCP接続をすぐに閉じる必要があります。クライアントは、サーバーが接続を閉じるまで待機する必要がありますが、適切な時間内にサーバーからTCP Closeを受信しなかった場合など、Closeメッセージを送受信した後はいつでも接続を閉じることができます（MAY）。"
    },
    {
      "indent": 3,
      "text": "If a client and server both send a Close message at the same time, both endpoints will have sent and received a Close message and should consider the WebSocket connection closed and close the underlying TCP connection.",
      "ja": "クライアントとサーバーの両方が同時にCloseメッセージを送信する場合、両方のエンドポイントがCloseメッセージを送受信しているため、WebSocket接続が閉じていると見なして、基になるTCP接続を閉じる必要があります。"
    },
    {
      "indent": 0,
      "text": "5.5.2. Ping",
      "section_title": true,
      "ja": "5.5.2. ping"
    },
    {
      "indent": 3,
      "text": "The Ping frame contains an opcode of 0x9.",
      "ja": "Pingフレームには、0x9のオペコードが含まれています。"
    },
    {
      "indent": 3,
      "text": "A Ping frame MAY include \"Application data\".",
      "ja": "Pingフレームには「アプリケーションデータ」が含まれる場合があります。"
    },
    {
      "indent": 3,
      "text": "Upon receipt of a Ping frame, an endpoint MUST send a Pong frame in response, unless it already received a Close frame. It SHOULD respond with Pong frame as soon as is practical. Pong frames are discussed in Section 5.5.3.",
      "ja": "エンドポイントは、Pingフレームを受信すると、既にCloseフレームを受信して​​いない限り、応答としてPongフレームを送信する必要があります。それは、実用的であるとすぐに、ポンフレームで応答する必要があります。ピンポンフレームについては、セクション5.5.3で説明します。"
    },
    {
      "indent": 3,
      "text": "An endpoint MAY send a Ping frame any time after the connection is established and before the connection is closed.",
      "ja": "エンドポイントは、接続が確立された後、接続が閉じられる前であればいつでもPingフレームを送信できます（MAY）。"
    },
    {
      "indent": 3,
      "text": "NOTE: A Ping frame may serve either as a keepalive or as a means to verify that the remote endpoint is still responsive.",
      "ja": "注：Pingフレームは、キープアライブとして、またはリモートエンドポイントがまだ応答していることを確認する手段として機能します。"
    },
    {
      "indent": 0,
      "text": "5.5.3. Pong",
      "section_title": true,
      "ja": "5.5.3. ポン"
    },
    {
      "indent": 3,
      "text": "The Pong frame contains an opcode of 0xA.",
      "ja": "Pongフレームには、0xAのオペコードが含まれています。"
    },
    {
      "indent": 3,
      "text": "Section 5.5.2 details requirements that apply to both Ping and Pong frames.",
      "ja": "セクション5.5.2では、PingフレームとPongフレームの両方に適用される要件について詳しく説明しています。"
    },
    {
      "indent": 3,
      "text": "A Pong frame sent in response to a Ping frame must have identical \"Application data\" as found in the message body of the Ping frame being replied to.",
      "ja": "Pingフレームへの応答として送信されるPongフレームは、応答されるPingフレームのメッセージ本文にあるのと同じ「アプリケーションデータ」を持っている必要があります。"
    },
    {
      "indent": 3,
      "text": "If an endpoint receives a Ping frame and has not yet sent Pong frame(s) in response to previous Ping frame(s), the endpoint MAY elect to send a Pong frame for only the most recently processed Ping frame.",
      "ja": "エンドポイントがPingフレームを受信し、以前のPingフレームに応答してPongフレームをまだ送信していない場合、エンドポイントは、最後に処理されたPingフレームに対してのみPongフレームを送信することを選択できます。"
    },
    {
      "indent": 3,
      "text": "A Pong frame MAY be sent unsolicited. This serves as a unidirectional heartbeat. A response to an unsolicited Pong frame is not expected.",
      "ja": "Pongフレームは未承諾で送信される場合があります。これは一方向のハートビートとして機能します。未承諾のPongフレームに対する応答は想定されていません。"
    },
    {
      "indent": 0,
      "text": "5.6. Data Frames",
      "section_title": true,
      "ja": "5.6. データフレーム"
    },
    {
      "indent": 3,
      "text": "Data frames (e.g., non-control frames) are identified by opcodes where the most significant bit of the opcode is 0. Currently defined opcodes for data frames include 0x1 (Text), 0x2 (Binary). Opcodes 0x3-0x7 are reserved for further non-control frames yet to be defined.",
      "ja": "データフレーム（非制御フレームなど）は、オペコードの最上位ビットが0であるオペコードによって識別されます。現在定義されているデータフレームのオペコードには、0x1（テキスト）、0x2（バイナリ）があります。オペコード0x3-0x7は、まだ定義されていない他の非制御フレーム用に予約されています。"
    },
    {
      "indent": 3,
      "text": "Data frames carry application-layer and/or extension-layer data. The opcode determines the interpretation of the data:",
      "ja": "データフレームは、アプリケーション層および/または拡張層のデータを伝送します。オペコードはデータの解釈を決定します："
    },
    {
      "indent": 3,
      "text": "Text",
      "ja": "テキスト"
    },
    {
      "indent": 6,
      "text": "The \"Payload data\" is text data encoded as UTF-8. Note that a particular text frame might include a partial UTF-8 sequence; however, the whole message MUST contain valid UTF-8. Invalid UTF-8 in reassembled messages is handled as described in Section 8.1.",
      "ja": "「ペイロードデータ」は、UTF-8でエンコードされたテキストデータです。特定のテキストフレームに部分的なUTF-8シーケンスが含まれる場合があることに注意してください。ただし、メッセージ全体には有効なUTF-8が含まれている必要があります。再構成されたメッセージ内の無効なUTF-8は、セクション8.1で説明されているように処理されます。"
    },
    {
      "indent": 3,
      "text": "Binary",
      "ja": "バイナリ"
    },
    {
      "indent": 6,
      "text": "The \"Payload data\" is arbitrary binary data whose interpretation is solely up to the application layer.",
      "ja": "「ペイロードデータ」は、アプリケーションレイヤーにのみ解釈される任意のバイナリデータです。"
    },
    {
      "indent": 0,
      "text": "5.7. Examples",
      "section_title": true,
      "ja": "5.7. 例"
    },
    {
      "indent": 3,
      "text": "o A single-frame unmasked text message",
      "ja": "o 単一フレームのマスクされていないテキストメッセージ"
    },
    {
      "indent": 6,
      "text": "* 0x81 0x05 0x48 0x65 0x6c 0x6c 0x6f (contains \"Hello\")",
      "ja": "* 0x81 0x05 0x48 0x65 0x6c 0x6c 0x6f（「Hello」を含む）"
    },
    {
      "indent": 3,
      "text": "o A single-frame masked text message",
      "ja": "o 単一フレームのマスクされたテキストメッセージ"
    },
    {
      "indent": 6,
      "text": "* 0x81 0x85 0x37 0xfa 0x21 0x3d 0x7f 0x9f 0x4d 0x51 0x58 (contains \"Hello\")",
      "ja": "* 0x81 0x85 0x37 0xfa 0x21 0x3d 0x7f 0x9f 0x4d 0x51 0x58（「Hello」を含む）"
    },
    {
      "indent": 3,
      "text": "o A fragmented unmasked text message",
      "ja": "o 断片化されたマスクされていないテキストメッセージ"
    },
    {
      "indent": 6,
      "text": "* 0x01 0x03 0x48 0x65 0x6c (contains \"Hel\")",
      "ja": "* 0x01 0x03 0x48 0x65 0x6c（「Hel」を含む）"
    },
    {
      "indent": 6,
      "text": "* 0x80 0x02 0x6c 0x6f (contains \"lo\")",
      "ja": "* 0x80 0x02 0x6c 0x6f（「lo」を含む）"
    },
    {
      "indent": 3,
      "text": "o Unmasked Ping request and masked Ping response",
      "ja": "o マスクされていないPing要求とマスクされたPing応答"
    },
    {
      "indent": 6,
      "text": "* 0x89 0x05 0x48 0x65 0x6c 0x6c 0x6f (contains a body of \"Hello\", but the contents of the body are arbitrary)",
      "ja": "* 0x89 0x05 0x48 0x65 0x6c 0x6c 0x6f（「Hello」のボディが含まれますが、ボディのコンテンツは任意です）"
    },
    {
      "indent": 6,
      "text": "* 0x8a 0x85 0x37 0xfa 0x21 0x3d 0x7f 0x9f 0x4d 0x51 0x58 (contains a body of \"Hello\", matching the body of the ping)",
      "ja": "* 0x8a 0x85 0x37 0xfa 0x21 0x3d 0x7f 0x9f 0x4d 0x51 0x58（pingの本体と一致する「Hello」の本体を含む）"
    },
    {
      "indent": 3,
      "text": "o 256 bytes binary message in a single unmasked frame",
      "ja": "o 単一のマスクされていないフレーム内の256バイトのバイナリメッセージ"
    },
    {
      "indent": 6,
      "text": "* 0x82 0x7E 0x0100 [256 bytes of binary data]",
      "ja": "* 0x82 0x7E 0x0100 [256バイトのバイナリデータ]"
    },
    {
      "indent": 3,
      "text": "o 64KiB binary message in a single unmasked frame",
      "ja": "o 単一のマスクされていないフレーム内の64KiBバイナリメッセージ"
    },
    {
      "indent": 6,
      "text": "* 0x82 0x7F 0x0000000000010000 [65536 bytes of binary data]",
      "ja": "* 0x82 0x7F 0x0000000000010000 [65536バイトのバイナリデータ]"
    },
    {
      "indent": 0,
      "text": "5.8. Extensibility",
      "section_title": true,
      "ja": "5.8. 拡張性"
    },
    {
      "indent": 3,
      "text": "The protocol is designed to allow for extensions, which will add capabilities to the base protocol. The endpoints of a connection MUST negotiate the use of any extensions during the opening handshake. This specification provides opcodes 0x3 through 0x7 and 0xB through 0xF, the \"Extension data\" field, and the frame-rsv1, frame-rsv2, and frame-rsv3 bits of the frame header for use by extensions. The negotiation of extensions is discussed in further detail in Section 9.1. Below are some anticipated uses of extensions. This list is neither complete nor prescriptive.",
      "ja": "このプロトコルは、基本プロトコルに機能を追加する拡張を可能にするように設計されています。接続のエンドポイントは、開始ハンドシェイク中に拡張機能の使用についてネゴシエートする必要があります。この仕様は、オペコード0x3から0x7および0xBから0xF、「拡張データ」フィールド、および拡張で使用するためのフレームヘッダーのframe-rsv1、frame-rsv2、frame-rsv3ビットを提供します。拡張の交渉については、9.1節でさらに詳しく説明します。以下は、予想される拡張機能の使用例です。このリストは完全でも規範的でもありません。"
    },
    {
      "indent": 3,
      "text": "o \"Extension data\" may be placed in the \"Payload data\" before the \"Application data\".",
      "ja": "o 「拡張データ」は、「ペイロードデータ」の「アプリケーションデータ」の前に配置できます。"
    },
    {
      "indent": 3,
      "text": "o Reserved bits can be allocated for per-frame needs.",
      "ja": "o 予約ビットは、フレームごとのニーズに割り当てることができます。"
    },
    {
      "indent": 3,
      "text": "o Reserved opcode values can be defined.",
      "ja": "o 予約済みのオペコード値を定義できます。"
    },
    {
      "indent": 3,
      "text": "o Reserved bits can be allocated to the opcode field if more opcode values are needed.",
      "ja": "o さらに多くのオペコード値が必要な場合は、予約ビットをオペコードフィールドに割り当てることができます。"
    },
    {
      "indent": 3,
      "text": "o A reserved bit or an \"extension\" opcode can be defined that allocates additional bits out of the \"Payload data\" to define larger opcodes or more per-frame bits.",
      "ja": "o より大きなオペコードまたはより多くのフレームごとのビットを定義するために、「ペイロードデータ」から追加のビットを割り当てる予約ビットまたは「拡張」オペコードを定義できます。"
    },
    {
      "indent": 0,
      "text": "6. Sending and Receiving Data",
      "section_title": true,
      "ja": "6. データの送受信"
    },
    {
      "indent": 0,
      "text": "6.1. Sending Data",
      "section_title": true,
      "ja": "6.1. データの送信"
    },
    {
      "indent": 3,
      "text": "To _Send a WebSocket Message_ comprising of /data/ over a WebSocket connection, an endpoint MUST perform the following steps.",
      "ja": "WebSocket接続を介して/ data /で構成される_WebSocketメッセージを送信するには、エンドポイントは次の手順を実行する必要があります。"
    },
    {
      "indent": 3,
      "text": "1. The endpoint MUST ensure the WebSocket connection is in the OPEN state (cf. Sections 4.1 and 4.2.2.) If at any point the state of the WebSocket connection changes, the endpoint MUST abort the following steps.",
      "ja": "1. エンドポイントは、WebSocket接続がOPEN状態であることを確認する必要があります（セクション4.1および4.2.2を参照）。いずれかの時点でWebSocket接続の状態が変化した場合、エンドポイントは次の手順を中止する必要があります。"
    },
    {
      "indent": 3,
      "text": "2. An endpoint MUST encapsulate the /data/ in a WebSocket frame as defined in Section 5.2. If the data to be sent is large or if the data is not available in its entirety at the point the endpoint wishes to begin sending the data, the endpoint MAY alternately encapsulate the data in a series of frames as defined in Section 5.4.",
      "ja": "2. エンドポイントは、セクション5.2で定義されているように、/ data /をWebSocketフレームにカプセル化する必要があります。送信されるデータが大きい場合、またはエンドポイントがデータの送信を開始したい時点でデータが完全に利用できない場合、エンドポイントは、セクション5.4で定義されている一連のフレームにデータを交互にカプセル化できます（MAY）。"
    },
    {
      "indent": 3,
      "text": "3. The opcode (frame-opcode) of the first frame containing the data MUST be set to the appropriate value from Section 5.2 for data that is to be interpreted by the recipient as text or binary data.",
      "ja": "3. データを含む最初のフレームのオペコード（frame-opcode）は、受信者がテキストまたはバイナリデータとして解釈するデータに対して、セクション5.2の適切な値に設定する必要があります。"
    },
    {
      "indent": 3,
      "text": "4. The FIN bit (frame-fin) of the last frame containing the data MUST be set to 1 as defined in Section 5.2.",
      "ja": "4. セクション5.2で定義されているように、データを含む最後のフレームのFINビット（frame-fin）を1に設定する必要があります。"
    },
    {
      "indent": 3,
      "text": "5. If the data is being sent by the client, the frame(s) MUST be masked as defined in Section 5.3.",
      "ja": "5. データがクライアントによって送信されている場合は、セクション5.3で定義されているようにフレームをマスクする必要があります。"
    },
    {
      "indent": 3,
      "text": "6. If any extensions (Section 9) have been negotiated for the WebSocket connection, additional considerations may apply as per the definition of those extensions.",
      "ja": "6. 拡張（セクション9）がWebSocket接続についてネゴシエートされている場合、それらの拡張の定義に従って追加の考慮事項が適用される場合があります。"
    },
    {
      "indent": 3,
      "text": "7. The frame(s) that have been formed MUST be transmitted over the underlying network connection.",
      "ja": "7. 形成されたフレームは、基になるネットワーク接続を介して送信する必要があります。"
    },
    {
      "indent": 0,
      "text": "6.2. Receiving Data",
      "section_title": true,
      "ja": "6.2. データ受信中"
    },
    {
      "indent": 0,
      "text": " To receive WebSocket data, an endpoint listens on the underlying network connection. Incoming data MUST be parsed as WebSocket frames as defined in Section 5.2. If a control frame (Section 5.5) is received, the frame MUST be handled as defined by Section 5.5. Upon receiving a data frame (Section 5.6), the endpoint MUST note the /type/ of the data as defined by the opcode (frame-opcode) from Section 5.2. The \"Application data\" from this frame is defined as the /data/ of the message. If the frame comprises an unfragmented message (Section 5.4), it is said that _A WebSocket Message Has Been Received_ with type /type/ and data /data/. If the frame is part of a fragmented message, the \"Application data\" of the subsequent data frames is concatenated to form the /data/. When the last fragment is received as indicated by the FIN bit (frame-fin), it is said that _A WebSocket Message Has Been Received_ with data /data/ (comprised of the concatenation of the \"Application data\" of the fragments) and type /type/ (noted from the first frame of the fragmented message). Subsequent data frames MUST be interpreted as belonging to a new WebSocket message.",
      "ja": "WebSocketデータを受信するために、エンドポイントは基盤となるネットワーク接続をリッスンします。受信データは、セクション5.2で定義されているWebSocketフレームとして解析する必要があります。制御フレーム（セクション5.5）を受信した場合、フレームはセクション5.5の定義に従って処理する必要があります。データフレーム（セクション5.6）を受信すると、エンドポイントは、セクション5.2のオペコード（frame-opcode）で定義されたデータの/ type /に注意する必要があります。このフレームの「アプリケーションデータ」は、メッセージの/ data /として定義されます。フレームが断片化されていないメッセージで構成されている場合（セクション5.4）、タイプ/ type /およびデータ/ data /の_A WebSocketメッセージが受信されました_と言われます。フレームがフラグメント化されたメッセージの一部である場合、後続のデータフレームの「アプリケーションデータ」が連結されて、/ data /が形成されます。最後のフラグメントがFINビット（frame-fin）で示されるように受信されると、_WebSocketメッセージが受信されました_データ/ data /（フラグメントの「アプリケーションデータ」の連結で構成されます）およびタイプ/ type /（断片化されたメッセージの最初のフレームから書き留められます）。後続のデータフレームは、新しいWebSocketメッセージに属するものとして解釈される必要があります。"
    },
    {
      "indent": 3,
      "text": "Extensions (Section 9) MAY change the semantics of how data is read, specifically including what comprises a message boundary. Extensions, in addition to adding \"Extension data\" before the \"Application data\" in a payload, MAY also modify the \"Application data\" (such as by compressing it).",
      "ja": "拡張（セクション9）は、特にメッセージ境界を構成するものを含め、データの読み取り方法のセマンティクスを変更する場合があります。拡張機能では、ペイロードの「アプリケーションデータ」の前に「拡張データ」を追加するだけでなく、「アプリケーションデータ」を変更することもできます（圧縮など）。"
    },
    {
      "indent": 3,
      "text": "A server MUST remove masking for data frames received from a client as described in Section 5.3.",
      "ja": "セクション5.3で説明されているように、サーバーはクライアントから受信したデータフレームのマスキングを削除する必要があります。"
    },
    {
      "indent": 0,
      "text": "7. Closing the Connection",
      "section_title": true,
      "ja": "7. 接続を閉じる"
    },
    {
      "indent": 0,
      "text": "7.1. Definitions",
      "section_title": true,
      "ja": "7.1. 定義"
    },
    {
      "indent": 0,
      "text": "7.1.1. Close the WebSocket Connection",
      "section_title": true,
      "ja": "7.1.1. WebSocket接続を閉じる"
    },
    {
      "indent": 3,
      "text": "To _Close the WebSocket Connection_, an endpoint closes the underlying TCP connection. An endpoint SHOULD use a method that cleanly closes the TCP connection, as well as the TLS session, if applicable, discarding any trailing bytes that may have been received. An endpoint MAY close the connection via any means available when necessary, such as when under attack.",
      "ja": "_WebSocket接続を閉じる_ために、エンドポイントは基になるTCP接続を閉じます。エンドポイントは、TCP接続と、該当する場合はTLSセッションを完全に閉じるメソッドを使用して、受信された可能性のある後続のバイトを破棄する必要があります（SHOULD）。エンドポイントは、攻撃を受けているときなど、必要なときに利用可能な任意の手段で接続を閉じてもよい（MAY）。"
    },
    {
      "indent": 3,
      "text": "The underlying TCP connection, in most normal cases, SHOULD be closed first by the server, so that it holds the TIME_WAIT state and not the client (as this would prevent it from re-opening the connection for 2 maximum segment lifetimes (2MSL), while there is no corresponding server impact as a TIME_WAIT connection is immediately reopened upon a new SYN with a higher seq number). In abnormal cases (such as not having received a TCP Close from the server after a reasonable amount of time) a client MAY initiate the TCP Close. As such, when a server is instructed to _Close the WebSocket Connection_ it SHOULD initiate a TCP Close immediately, and when a client is instructed to do the same, it SHOULD wait for a TCP Close from the server.",
      "ja": "基礎となるTCP接続は、ほとんどの通常の場合、最初にサーバーによって閉じられる必要があります。これにより、クライアントではなくTIME_WAIT状態が保持されます（これにより、最大2つのセグメントライフタイム（2MSL）で接続を再度開くことができなくなるため、 TIME_WAIT接続は、より高いシーケンス番号を持つ新しいSYNですぐに再開されるため、対応するサーバーへの影響はありません。異常な場合（妥当な時間の後にサーバーからTCPクローズを受信しないなど）は、クライアントがTCPクローズを開始してもよい（MAY）。そのため、サーバーが_WebSocket接続を閉じるように指示された場合、サーバーはすぐにTCPクローズを開始する必要があり（SHOULD）、クライアントが同じことを行うように指示された場合、サーバーからのTCPクローズを待つ必要があります（SHOULD）。"
    },
    {
      "indent": 3,
      "text": "As an example of how to obtain a clean closure in C using Berkeley sockets, one would call shutdown() with SHUT_WR on the socket, call recv() until obtaining a return value of 0 indicating that the peer has also performed an orderly shutdown, and finally call close() on the socket.",
      "ja": "バークレーソケットを使用してCでクリーンなクロージャを取得する方法の例として、ソケットにSHUT_WRを指定してshutdown()を呼び出し、ピアが正常なシャットダウンを実行したことを示す0の戻り値を取得するまでrecv()を呼び出します。最後に、ソケットでclose()を呼び出します。"
    },
    {
      "indent": 0,
      "text": "7.1.2. Start the WebSocket Closing Handshake",
      "section_title": true,
      "ja": "7.1.2. WebSocketクローズハンドシェイクを開始する"
    },
    {
      "indent": 3,
      "text": "To _Start the WebSocket Closing Handshake_ with a status code (Section 7.4) /code/ and an optional close reason (Section 7.1.6) /reason/, an endpoint MUST send a Close control frame, as described in Section 5.5.1, whose status code is set to /code/ and whose close reason is set to /reason/. Once an endpoint has both sent and received a Close control frame, that endpoint SHOULD _Close the WebSocket Connection_ as defined in Section 7.1.1.",
      "ja": "ステータスコード（セクション7.4）/ code /とオプションのクローズ理由（セクション7.1.6）/ reason /を使用して_WebSocketクローズハンドシェイクを開始するには、セクション5.5.1で説明されているように、エンドポイントはクローズコントロールフレームを送信する必要があります。ステータスコードは/ code /に設定され、その終了理由は/ reason /に設定されます。エンドポイントがCloseコントロールフレームを送受信した後、セクション7.1.1で定義されているように、そのエンドポイントは_WebSocket接続を閉じる必要があります_。"
    },
    {
      "indent": 0,
      "text": "7.1.3. The WebSocket Closing Handshake is Started",
      "section_title": true,
      "ja": "7.1.3. WebSocketクローズハンドシェイクが開始されました"
    },
    {
      "indent": 3,
      "text": "Upon either sending or receiving a Close control frame, it is said that _The WebSocket Closing Handshake is Started_ and that the WebSocket connection is in the CLOSING state.",
      "ja": "Closeコントロールフレームを送信または受信すると、_WebSocketクローズハンドシェイクが開始され、WebSocket接続がCLOSING状態であると言われます。"
    },
    {
      "indent": 0,
      "text": "7.1.4. The WebSocket Connection is Closed",
      "section_title": true,
      "ja": "7.1.4. WebSocket接続が閉じています"
    },
    {
      "indent": 3,
      "text": "When the underlying TCP connection is closed, it is said that _The WebSocket Connection is Closed_ and that the WebSocket connection is in the CLOSED state. If the TCP connection was closed after the WebSocket closing handshake was completed, the WebSocket connection is said to have been closed _cleanly_.",
      "ja": "基になるTCP接続が閉じられると、_The WebSocket Connection is Closed_であり、WebSocket接続がCLOSED状態であると言われます。 WebSocketクローズハンドシェイクの完了後にTCP接続が閉じられた場合、WebSocket接続は_cleanly_閉じられたと言われます。"
    },
    {
      "indent": 3,
      "text": "If the WebSocket connection could not be established, it is also said that _The WebSocket Connection is Closed_, but not _cleanly_.",
      "ja": "WebSocket接続を確立できなかった場合も、_The WebSocket Connection is Closed_ではあるが、_cleanly_ではない、とも言われます。"
    },
    {
      "indent": 0,
      "text": "7.1.5. The WebSocket Connection Close Code",
      "section_title": true,
      "ja": "7.1.5. WebSocket接続終了コード"
    },
    {
      "indent": 3,
      "text": "As defined in Sections 5.5.1 and 7.4, a Close control frame may contain a status code indicating a reason for closure. A closing of the WebSocket connection may be initiated by either endpoint, potentially simultaneously. _The WebSocket Connection Close Code_ is defined as the status code (Section 7.4) contained in the first Close control frame received by the application implementing this protocol. If this Close control frame contains no status code, _The WebSocket Connection Close Code_ is considered to be 1005. If _The WebSocket Connection is Closed_ and no Close control frame was received by the endpoint (such as could occur if the underlying transport connection is lost), _The WebSocket Connection Close Code_ is considered to be 1006.",
      "ja": "セクション5.5.1および7.4で定義されているように、クローズコントロールフレームには、クローズの理由を示すステータスコードが含まれる場合があります。 WebSocket接続のクローズは、いずれかのエンドポイントによって、場合によっては同時に開始される可能性があります。 _WebSocket接続終了コード_は、このプロトコルを実装するアプリケーションが受信した最初のCloseコントロールフレームに含まれるステータスコード（セクション7.4）として定義されます。このCloseコントロールフレームにステータスコードが含まれていない場合、_WebSocket接続のクローズコード_は1005と見なされます。 、_WebSocket接続終了コード_は1006と見なされます。"
    },
    {
      "indent": 0,
      "text": " NOTE: Two endpoints may not agree on the value of _The WebSocket Connection Close Code_. As an example, if the remote endpoint sent a Close frame but the local application has not yet read the data containing the Close frame from its socket's receive buffer, and the local application independently decided to close the connection and send a Close frame, both endpoints will have sent and received a Close frame and will not send further Close frames. Each endpoint will see the status code sent by the other end as _The WebSocket Connection Close Code_. As such, it is possible that the two endpoints may not agree on the value of _The WebSocket Connection Close Code_ in the case that both endpoints _Start the WebSocket Closing Handshake_ independently and at roughly the same time.",
      "ja": "注：2つのエンドポイントが_The WebSocket Connection Close Code_の値に同意しない場合があります。例として、リモートエンドポイントがCloseフレームを送信したが、ローカルアプリケーションがそのソケットの受信バッファからCloseフレームを含むデータをまだ読み取っていない場合、ローカルアプリケーションが接続を閉じてCloseフレームを送信することを独自に決定した場合、両方のエンドポイントCloseフレームを送受信し、それ以上Closeフレームを送信しません。各エンドポイントは、もう一方の端から送信されたステータスコードを_The WebSocket Connection Close Code_として認識します。そのため、両方のエンドポイントが独立して、ほぼ同時に_WebSocketクローズハンドシェイクを開始した場合、2つのエンドポイントが_The WebSocket Connection Close Code_の値に一致しない可能性があります。"
    },
    {
      "indent": 0,
      "text": "7.1.6. The WebSocket Connection Close Reason",
      "section_title": true,
      "ja": "7.1.6. WebSocket接続終了の理由"
    },
    {
      "indent": 3,
      "text": "As defined in Sections 5.5.1 and 7.4, a Close control frame may contain a status code indicating a reason for closure, followed by UTF-8-encoded data, the interpretation of said data being left to the endpoints and not defined by this protocol. A closing of the WebSocket connection may be initiated by either endpoint, potentially simultaneously. _The WebSocket Connection Close Reason_ is defined as the UTF-8-encoded data following the status code (Section 7.4) contained in the first Close control frame received by the application implementing this protocol. If there is no such data in the Close control frame, _The WebSocket Connection Close Reason_ is the empty string.",
      "ja": "セクション5.5.1および7.4で定義されているように、Closeコントロールフレームには、閉鎖の理由を示すステータスコードと、それに続くUTF-8でエンコードされたデータが含まれている可能性があります。 。 WebSocket接続のクローズは、いずれかのエンドポイントによって、場合によっては同時に開始される可能性があります。 _WebSocket接続クローズの理由_は、このプロトコルを実装するアプリケーションが受信した最初のCloseコントロールフレームに含まれるステータスコード（セクション7.4）に続く、UTF-8でエンコードされたデータとして定義されます。 Closeコントロールフレームにそのようなデータがない場合、_The WebSocket Connection Close Reason_は空の文字列です。"
    },
    {
      "indent": 3,
      "text": "NOTE: Following the same logic as noted in Section 7.1.5, two endpoints may not agree on _The WebSocket Connection Close Reason_.",
      "ja": "注：セクション7.1.5と同じロジックに従って、2つのエンドポイントが_The WebSocket Connection Close Reason_に同意しない場合があります。"
    },
    {
      "indent": 0,
      "text": "7.1.7. Fail the WebSocket Connection",
      "section_title": true,
      "ja": "7.1.7. WebSocket接続を失敗させる"
    },
    {
      "indent": 3,
      "text": "Certain algorithms and specifications require an endpoint to _Fail the WebSocket Connection_. To do so, the client MUST _Close the WebSocket Connection_, and MAY report the problem to the user (which would be especially useful for developers) in an appropriate manner. Similarly, to do so, the server MUST _Close the WebSocket Connection_, and SHOULD log the problem.",
      "ja": "特定のアルゴリズムと仕様では、_WebSocket接続に失敗するためのエンドポイントが必要です。これを行うには、クライアントは_WebSocket接続を閉じる_必要があります。また、適切な方法で問題をユーザー（特に開発者に役立つ）に報告できます（MAY）。同様に、これを行うには、サーバーは_WebSocket接続を閉じる_必要があり、問題を記録する必要があります（SHOULD）。"
    },
    {
      "indent": 3,
      "text": "If _The WebSocket Connection is Established_ prior to the point where the endpoint is required to _Fail the WebSocket Connection_, the endpoint SHOULD send a Close frame with an appropriate status code (Section 7.4) before proceeding to _Close the WebSocket Connection_. An endpoint MAY omit sending a Close frame if it believes the other side is unlikely to be able to receive and process the Close frame, due to the nature of the error that led the WebSocket connection to fail in the first place. An endpoint MUST NOT continue to attempt to process data (including a responding Close frame) from the remote endpoint after being instructed to _Fail the WebSocket Connection_.",
      "ja": "エンドポイントが_WebSocket接続に失敗する必要があるポイントの前に_The WebSocket Connection is Established_がある場合、エンドポイントは、_Close the WebSocket Connection_に進む前に、適切なステータスコード（セクション7.4）でCloseフレームを送信する必要があります。エンドポイントは、WebSocket接続が最初に失敗する原因となったエラーの性質が原因で、反対側がCloseフレームを受信して​​処理する可能性が低いと考える場合、Closeフレームの送信を省略してもよい（MAY）。エンドポイントは、_WebSocket接続に失敗するように指示された後、リモートエンドポイントからのデータ（応答するCloseフレームを含む）の処理を継続して試みてはなりません（MUST NOT）。"
    },
    {
      "indent": 3,
      "text": "Except as indicated above or as specified by the application layer (e.g., a script using the WebSocket API), clients SHOULD NOT close the connection.",
      "ja": "上記またはアプリケーションレイヤー（WebSocket APIを使用するスクリプトなど）で指定されている場合を除き、クライアントは接続を閉じないでください。"
    },
    {
      "indent": 0,
      "text": "7.2. Abnormal Closures",
      "section_title": true,
      "ja": "7.2. 異常な閉鎖"
    },
    {
      "indent": 0,
      "text": "7.2.1. Client-Initiated Closure",
      "section_title": true,
      "ja": "7.2.1. クライアントが開始する閉鎖"
    },
    {
      "indent": 3,
      "text": "Certain algorithms, in particular during the opening handshake, require the client to _Fail the WebSocket Connection_. To do so, the client MUST _Fail the WebSocket Connection_ as defined in Section 7.1.7.",
      "ja": "特定のアルゴリズム、特にオープンハンドシェイク中は、クライアントが_WebSocket接続に失敗する_必要があります。そのためには、クライアントはセクション7.1.7で定義されているように_WebSocket接続に失敗する必要があります。"
    },
    {
      "indent": 3,
      "text": "If at any point the underlying transport layer connection is unexpectedly lost, the client MUST _Fail the WebSocket Connection_.",
      "ja": "いずれかの時点で、基になるトランスポート層接続が予期せず失われた場合、クライアントは_WebSocket接続に失敗する必要があります_。"
    },
    {
      "indent": 3,
      "text": "Except as indicated above or as specified by the application layer (e.g., a script using the WebSocket API), clients SHOULD NOT close the connection.",
      "ja": "上記またはアプリケーションレイヤー（WebSocket APIを使用するスクリプトなど）で指定されている場合を除き、クライアントは接続を閉じないでください。"
    },
    {
      "indent": 0,
      "text": "7.2.2. Server-Initiated Closure",
      "section_title": true,
      "ja": "7.2.2. サーバーが開始するクロージャー"
    },
    {
      "indent": 3,
      "text": "Certain algorithms require or recommend that the server _Abort the WebSocket Connection_ during the opening handshake. To do so, the server MUST simply _Close the WebSocket Connection_ (Section 7.1.1).",
      "ja": "特定のアルゴリズムでは、オープニングハンドシェイク中にサーバーが_WebSocket接続を中止する_ことが必要または推奨されます。そのためには、サーバーは単に_WebSocket接続を閉じる_（セクション7.1.1）必要があります。"
    },
    {
      "indent": 0,
      "text": "7.2.3. Recovering from Abnormal Closure",
      "section_title": true,
      "ja": "7.2.3. 異常な閉鎖からの回復"
    },
    {
      "indent": 3,
      "text": "Abnormal closures may be caused by any number of reasons. Such closures could be the result of a transient error, in which case reconnecting may lead to a good connection and a resumption of normal operations. Such closures may also be the result of a nontransient problem, in which case if each deployed client experiences an abnormal closure and immediately and persistently tries to reconnect, the server may experience what amounts to a denial-of-service attack by a large number of clients trying to reconnect. The end result of such a scenario could be that the service is unable to recover in a timely manner or recovery is made much more difficult.",
      "ja": "異常な閉鎖は、さまざまな理由で発生する可能性があります。このようなクロージャは一時的なエラーの結果である可能性があり、その場合、再接続すると正常な接続と通常の操作の再開につながる可能性があります。このようなクロージャは、一時的でない問題の結果である可能性もあります。その場合、デプロイされた各クライアントで異常なクロージャが発生し、すぐに持続的に再接続しようとすると、サーバーで大量のサービス拒否攻撃が発生する可能性があります。再接続を試みるクライアント。そのようなシナリオの最終結果は、サービスがタイムリーに回復できないか、回復がはるかに困難になる可能性があります。"
    },
    {
      "indent": 3,
      "text": "To prevent this, clients SHOULD use some form of backoff when trying to reconnect after abnormal closures as described in this section.",
      "ja": "これを防ぐために、クライアントは、このセクションで説明されているように、異常なクローズの後に再接続を試みるときに何らかの形式のバックオフを使用する必要があります（SHOULD）。"
    },
    {
      "indent": 3,
      "text": "The first reconnect attempt SHOULD be delayed by a random amount of time. The parameters by which this random delay is chosen are left to the client to decide; a value chosen randomly between 0 and 5 seconds is a reasonable initial delay though clients MAY choose a different interval from which to select a delay length based on implementation experience and particular application.",
      "ja": "最初の再接続試行は、ランダムな時間だけ遅延する必要があります。このランダムな遅延が選択されるパラメーターは、クライアントに決定を任せます。クライアントが実装経験と特定のアプリケーションに基づいて遅延の長さを選択する別の間隔を選択する場合がありますが、0〜5秒の間でランダムに選択された値は妥当な初期遅延です。"
    },
    {
      "indent": 3,
      "text": "Should the first reconnect attempt fail, subsequent reconnect attempts SHOULD be delayed by increasingly longer amounts of time, using a method such as truncated binary exponential backoff.",
      "ja": "最初の再接続の試行が失敗した場合、後続の再接続の試行は、切り捨てられたバイナリ指数バックオフなどの方法を使用して、ますます長い時間遅延する必要があります。"
    },
    {
      "indent": 0,
      "text": "7.3. Normal Closure of Connections",
      "section_title": true,
      "ja": "7.3. 接続の通常の閉鎖"
    },
    {
      "indent": 3,
      "text": "Servers MAY close the WebSocket connection whenever desired. Clients SHOULD NOT close the WebSocket connection arbitrarily. In either case, an endpoint initiates a closure by following the procedures to _Start the WebSocket Closing Handshake_ (Section 7.1.2).",
      "ja": "サーバーは、必要に応じていつでもWebSocket接続を閉じることができます。クライアントはWebSocket接続を勝手に閉じないでください。どちらの場合でも、エンドポイントは_WebSocketクローズハンドシェイクを開始する手順（セクション7.1.2）に従って、クロージャを開始します。"
    },
    {
      "indent": 0,
      "text": "7.4. Status Codes",
      "section_title": true,
      "ja": "7.4. ステータスコード"
    },
    {
      "indent": 3,
      "text": "When closing an established connection (e.g., when sending a Close frame, after the opening handshake has completed), an endpoint MAY indicate a reason for closure. The interpretation of this reason by an endpoint, and the action an endpoint should take given this reason, are left undefined by this specification. This specification defines a set of pre-defined status codes and specifies which ranges may be used by extensions, frameworks, and end applications. The status code and any associated textual message are optional components of a Close frame.",
      "ja": "確立された接続を閉じるとき（たとえば、開始ハンドシェイクが完了した後、Closeフレームを送信するとき）、エンドポイントは閉じた理由を示してもよい（MAY）。エンドポイントによるこの理由の解釈、およびこの理由でエンドポイントが実行する必要のあるアクションは、この仕様では定義されていません。この仕様は、事前定義されたステータスコードのセットを定義し、拡張機能、フレームワーク、およびエンドアプリケーションで使用できる範囲を指定します。ステータスコードと関連するテキストメッセージは、閉じるフレームのオプションコンポーネントです。"
    },
    {
      "indent": 0,
      "text": "7.4.1. Defined Status Codes",
      "section_title": true,
      "ja": "7.4.1. 定義されたステータスコード"
    },
    {
      "indent": 3,
      "text": "Endpoints MAY use the following pre-defined status codes when sending a Close frame.",
      "ja": "エンドポイントは、Closeフレームを送信するときに、次の事前定義されたステータスコードを使用できます。"
    },
    {
      "indent": 3,
      "text": "1000",
      "ja": "１０００"
    },
    {
      "indent": 6,
      "text": "1000 indicates a normal closure, meaning that the purpose for which the connection was established has been fulfilled.",
      "ja": "1000は通常の閉鎖を示します。つまり、接続が確立された目的が達成されたことを意味します。"
    },
    {
      "indent": 3,
      "text": "1001",
      "ja": "１００１"
    },
    {
      "indent": 6,
      "text": "1001 indicates that an endpoint is \"going away\", such as a server going down or a browser having navigated away from a page.",
      "ja": "1001は、サーバーがダウンしたり、ブラウザがページから移動したりするなど、エンドポイントが「離れる」ことを示します。"
    },
    {
      "indent": 3,
      "text": "1002",
      "ja": "１００２"
    },
    {
      "indent": 6,
      "text": "1002 indicates that an endpoint is terminating the connection due to a protocol error.",
      "ja": "1002は、プロトコルエラーが原因でエンドポイントが接続を終了していることを示します。"
    },
    {
      "indent": 3,
      "text": "1003",
      "ja": "１００３"
    },
    {
      "indent": 6,
      "text": "1003 indicates that an endpoint is terminating the connection because it has received a type of data it cannot accept (e.g., an endpoint that understands only text data MAY send this if it receives a binary message).",
      "ja": "1003は、エンドポイントが受け入れることができないタイプのデータを受信したために、エンドポイントが接続を終了していることを示します（たとえば、テキストデータのみを理解するエンドポイントは、バイナリメッセージを受信した場合にこれを送信できます）。"
    },
    {
      "indent": 3,
      "text": "1004",
      "ja": "１００４"
    },
    {
      "indent": 6,
      "text": "Reserved. The specific meaning might be defined in the future.",
      "ja": "予約済み。特定の意味は将来定義されるかもしれません。"
    },
    {
      "indent": 3,
      "text": "1005",
      "ja": "１００５"
    },
    {
      "indent": 6,
      "text": "1005 is a reserved value and MUST NOT be set as a status code in a Close control frame by an endpoint. It is designated for use in applications expecting a status code to indicate that no status code was actually present.",
      "ja": "1005は予約済みの値であり、エンドポイントによってCloseコントロールフレームのステータスコードとして設定してはなりません（MUST NOT）。これは、ステータスコードが実際に存在しないことを示すステータスコードを必要とするアプリケーションで使用するために指定されています。"
    },
    {
      "indent": 3,
      "text": "1006",
      "ja": "１００６"
    },
    {
      "indent": 6,
      "text": "1006 is a reserved value and MUST NOT be set as a status code in a Close control frame by an endpoint. It is designated for use in applications expecting a status code to indicate that the connection was closed abnormally, e.g., without sending or receiving a Close control frame.",
      "ja": "1006は予約済みの値であり、エンドポイントによってCloseコントロールフレームのステータスコードとして設定してはなりません（MUST NOT）。これは、たとえば、Closeコントロールフレームを送信または受信せずに、接続が異常に閉じられたことを示すステータスコードを期待するアプリケーションで使用するために指定されています。"
    },
    {
      "indent": 3,
      "text": "1007",
      "ja": "１００７"
    },
    {
      "indent": 6,
      "text": "1007 indicates that an endpoint is terminating the connection because it has received data within a message that was not consistent with the type of the message (e.g., non-UTF-8 [RFC3629] data within a text message).",
      "ja": "1007は、メッセージのタイプと一致しないメッセージ内のデータ（テキストメッセージ内の非UTF-8 [RFC3629]データなど）を受信したため、エンドポイントが接続を終了していることを示します。"
    },
    {
      "indent": 3,
      "text": "1008",
      "ja": "１００８"
    },
    {
      "indent": 6,
      "text": "1008 indicates that an endpoint is terminating the connection because it has received a message that violates its policy. This is a generic status code that can be returned when there is no other more suitable status code (e.g., 1003 or 1009) or if there is a need to hide specific details about the policy.",
      "ja": "1008は、ポリシーに違反するメッセージを受信したため、エンドポイントが接続を終了していることを示します。これは、他に適切なステータスコード（1003や1009など）がない場合、またはポリシーに関する特定の詳細を非表示にする必要がある場合に返される一般的なステータスコードです。"
    },
    {
      "indent": 3,
      "text": "1009",
      "ja": "１００９"
    },
    {
      "indent": 6,
      "text": "1009 indicates that an endpoint is terminating the connection because it has received a message that is too big for it to process.",
      "ja": "1009は、処理するには大きすぎるメッセージを受信したため、エンドポイントが接続を終了していることを示します。"
    },
    {
      "indent": 3,
      "text": "1010",
      "ja": "１０１０"
    },
    {
      "indent": 0,
      "text": " 1010 indicates that an endpoint (client) is terminating the connection because it has expected the server to negotiate one or more extension, but the server didn't return them in the response message of the WebSocket handshake. The list of extensions that are needed SHOULD appear in the /reason/ part of the Close frame. Note that this status code is not used by the server, because it can fail the WebSocket handshake instead.",
      "ja": "1010は、サーバーが1つ以上の拡張をネゴシエートすることを期待していたが、サーバーがWebSocketハンドシェイクの応答メッセージでそれらを返さなかったため、エンドポイント（クライアント）が接続を終了していることを示します。必要な拡張機能のリストは、閉じるフレームの/ reason /部分に表示する必要があります（SHOULD）。このステータスコードはWebSocketハンドシェイクに失敗する可能性があるため、サーバーでは使用されないことに注意してください。"
    },
    {
      "indent": 3,
      "text": "1011",
      "ja": "１０１１"
    },
    {
      "indent": 6,
      "text": "1011 indicates that a server is terminating the connection because it encountered an unexpected condition that prevented it from fulfilling the request.",
      "ja": "1011は、予期しない状況が発生したためにサーバーが接続を終了していることを示しています。"
    },
    {
      "indent": 3,
      "text": "1015",
      "ja": "１０１５"
    },
    {
      "indent": 6,
      "text": "1015 is a reserved value and MUST NOT be set as a status code in a Close control frame by an endpoint. It is designated for use in applications expecting a status code to indicate that the connection was closed due to a failure to perform a TLS handshake (e.g., the server certificate can't be verified).",
      "ja": "1015は予約済みの値であり、エンドポイントによってCloseコントロールフレームのステータスコードとして設定してはなりません（MUST NOT）。これは、TLSハンドシェイクの実行に失敗したために接続が閉じられたことを示すステータスコードを必要とするアプリケーションで使用するように指定されています（たとえば、サーバー証明書を確認できません）。"
    },
    {
      "indent": 0,
      "text": "7.4.2. Reserved Status Code Ranges",
      "section_title": true,
      "ja": "7.4.2. 予約済みステータスコードの範囲"
    },
    {
      "indent": 3,
      "text": "0-999",
      "ja": "０ー９９９"
    },
    {
      "indent": 6,
      "text": "Status codes in the range 0-999 are not used.",
      "ja": "0〜999の範囲のステータスコードは使用されません。"
    },
    {
      "indent": 3,
      "text": "1000-2999",
      "ja": "１０００ー２９９９"
    },
    {
      "indent": 6,
      "text": "Status codes in the range 1000-2999 are reserved for definition by this protocol, its future revisions, and extensions specified in a permanent and readily available public specification.",
      "ja": "1000〜2999の範囲のステータスコードは、このプロトコル、その将来のリビジョン、および永続的ですぐに利用できる公開仕様で指定されている拡張機能による定義のために予約されています。"
    },
    {
      "indent": 3,
      "text": "3000-3999",
      "ja": "３０００ー３９９９"
    },
    {
      "indent": 6,
      "text": "Status codes in the range 3000-3999 are reserved for use by libraries, frameworks, and applications. These status codes are registered directly with IANA. The interpretation of these codes is undefined by this protocol.",
      "ja": "3000〜3999の範囲のステータスコードは、ライブラリ、フレームワーク、およびアプリケーションで使用するために予約されています。これらのステータスコードはIANAに直接登録されます。これらのコードの解釈は、このプロトコルでは定義されていません。"
    },
    {
      "indent": 3,
      "text": "4000-4999",
      "ja": "４０００ー４９９９"
    },
    {
      "indent": 6,
      "text": "Status codes in the range 4000-4999 are reserved for private use and thus can't be registered. Such codes can be used by prior agreements between WebSocket applications. The interpretation of these codes is undefined by this protocol.",
      "ja": "4000〜4999の範囲のステータスコードは、個人使用のために予約されているため、登録できません。このようなコードは、WebSocketアプリケーション間の事前の合意で使用できます。これらのコードの解釈は、このプロトコルでは定義されていません。"
    },
    {
      "indent": 0,
      "text": "8. Error Handling",
      "section_title": true,
      "ja": "8. エラー処理"
    },
    {
      "indent": 0,
      "text": "8.1. Handling Errors in UTF-8-Encoded Data",
      "section_title": true,
      "ja": "8.1. UTF-8でエンコードされたデータのエラーの処理"
    },
    {
      "indent": 3,
      "text": "When an endpoint is to interpret a byte stream as UTF-8 but finds that the byte stream is not, in fact, a valid UTF-8 stream, that endpoint MUST _Fail the WebSocket Connection_. This rule applies both during the opening handshake and during subsequent data exchange.",
      "ja": "エンドポイントがバイトストリームをUTF-8として解釈する必要があるが、バイトストリームが実際には有効なUTF-8ストリームではない場合、そのエンドポイントはWebSocket接続に失敗する必要があります。このルールは、開始ハンドシェイクとその後のデータ交換の両方に適用されます。"
    },
    {
      "indent": 0,
      "text": "9. Extensions",
      "section_title": true,
      "ja": "9. 拡張"
    },
    {
      "indent": 3,
      "text": "WebSocket clients MAY request extensions to this specification, and WebSocket servers MAY accept some or all extensions requested by the client. A server MUST NOT respond with any extension not requested by the client. If extension parameters are included in negotiations between the client and the server, those parameters MUST be chosen in accordance with the specification of the extension to which the parameters apply.",
      "ja": "WebSocketクライアントはこの仕様の拡張を要求することができ、WebSocketサーバーはクライアントが要求する拡張の一部またはすべてを受け入れることができます（MAY）。サーバーは、クライアントから要求されていない拡張機能で応答してはなりません（MUST NOT）。拡張パラメーターがクライアントとサーバー間のネゴシエーションに含まれている場合、それらのパラメーターは、パラメーターが適用される拡張の仕様に従って選択する必要があります。"
    },
    {
      "indent": 0,
      "text": "9.1. Negotiating Extensions",
      "section_title": true,
      "ja": "9.1. 拡張の交渉"
    },
    {
      "indent": 3,
      "text": "A client requests extensions by including a |Sec-WebSocket-Extensions| header field, which follows the normal rules for HTTP header fields (see [RFC2616], Section 4.2) and the value of the header field is defined by the following ABNF [RFC2616]. Note that this section is using ABNF syntax/rules from [RFC2616], including the \"implied *LWS rule\". If a value is received by either the client or the server during negotiation that does not conform to the ABNF below, the recipient of such malformed data MUST immediately _Fail the WebSocket Connection_.",
      "ja": "| Sec-WebSocket-Extensions |を含めることにより、クライアントは拡張機能をリクエストしますHTTPヘッダーフィールド（[RFC2616]、セクション4.2を参照）の通常のルールに従い、ヘッダーフィールドの値は、次のABNF [RFC2616]によって定義されます。このセクションでは、「暗黙の* LWSルール」を含む、[RFC2616]のABNF構文/ルールを使用していることに注意してください。以下のABNFに準拠していない値がネゴシエーション中にクライアントまたはサーバーによって受信された場合、そのような不正なデータの受信者は直ちに_WebSocket接続に失敗する必要があります_。"
    },
    {
      "indent": 9,
      "text": "Sec-WebSocket-Extensions = extension-list\nextension-list = 1#extension\nextension = extension-token *( \";\" extension-param )\nextension-token = registered-token\nregistered-token = token\nextension-param = token [ \"=\" (token | quoted-string) ]\n    ;When using the quoted-string syntax variant, the value\n    ;after quoted-string unescaping MUST conform to the\n    ;'token' ABNF.",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "Note that like other HTTP header fields, this header field MAY be split or combined across multiple lines. Ergo, the following are equivalent:",
      "ja": "他のHTTPヘッダーフィールドと同様に、このヘッダーフィールドは複数の行に分割または結合される場合があります。エルゴ、以下は同等です："
    },
    {
      "indent": 9,
      "text": "Sec-WebSocket-Extensions: foo\nSec-WebSocket-Extensions: bar; baz=2",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "is exactly equivalent to",
      "ja": "完全に等しい"
    },
    {
      "indent": 9,
      "text": "Sec-WebSocket-Extensions: foo, bar; baz=2",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "Any extension-token used MUST be a registered token (see Section 11.4). The parameters supplied with any given extension MUST be defined for that extension. Note that the client is only offering to use any advertised extensions and MUST NOT use them unless the server indicates that it wishes to use the extension.",
      "ja": "使用される拡張トークンは、登録済みのトークンでなければなりません（セクション11.4を参照）。特定の拡張機能で提供されるパラメーターは、その拡張機能に対して定義する必要があります。クライアントはアドバタイズされた拡張機能の使用のみを提案しており、サーバーが拡張機能の使用を希望していることを示さない限り、それらを使用してはならないことに注意してください。"
    },
    {
      "indent": 3,
      "text": "Note that the order of extensions is significant. Any interactions between multiple extensions MAY be defined in the documents defining the extensions. In the absence of such definitions, the interpretation is that the header fields listed by the client in its request represent a preference of the header fields it wishes to use, with the first options listed being most preferable. The extensions listed by the server in response represent the extensions actually in use for the connection. Should the extensions modify the data and/or framing, the order of operations on the data should be assumed to be the same as the order in which the extensions are listed in the server's response in the opening handshake.",
      "ja": "拡張の順序は重要であることに注意してください。複数の拡張間の相互作用は、拡張を定義するドキュメントで定義される場合があります。そのような定義がない場合、解釈は、要求でクライアントによってリストされたヘッダーフィールドが、使用したいヘッダーフィールドの優先順位を表すとリストされた最初のオプションが最も好ましいと解釈されます。応答としてサーバーによってリストされる拡張機能は、接続に実際に使用されている拡張機能を表します。拡張機能がデータやフレーミングを変更する場合、データに対する操作の順序は、開始ハンドシェイクでのサーバーの応答に拡張機能がリストされている順序と同じであると想定する必要があります。"
    },
    {
      "indent": 3,
      "text": "For example, if there are two extensions \"foo\" and \"bar\" and if the header field |Sec-WebSocket-Extensions| sent by the server has the value \"foo, bar\", then operations on the data will be made as bar(foo(data)), be those changes to the data itself (such as compression) or changes to the framing that may \"stack\".",
      "ja": "たとえば、2つの拡張「foo」と「bar」があり、ヘッダーフィールドが| Sec-WebSocket-Extensions |である場合サーバーから送信された値が「foo、bar」の場合、データに対する操作はbar（foo（data））として行われ、データ自体への変更（圧縮など）、または「スタック\"。"
    },
    {
      "indent": 3,
      "text": "Non-normative examples of acceptable extension header fields (note that long lines are folded for readability):",
      "ja": "受け入れ可能な拡張ヘッダーフィールドの非規範的な例（読みやすいように長い行は折り返されています）："
    },
    {
      "indent": 9,
      "text": "Sec-WebSocket-Extensions: deflate-stream\nSec-WebSocket-Extensions: mux; max-channels=4; flow-control,\n deflate-stream\nSec-WebSocket-Extensions: private-extension",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": " A server accepts one or more extensions by including a |Sec-WebSocket-Extensions| header field containing one or more extensions that were requested by the client. The interpretation of any extension parameters, and what constitutes a valid response by a server to a requested set of parameters by a client, will be defined by each such extension.",
      "ja": "| Sec-WebSocket-Extensions |を含めることにより、サーバーは1つ以上の拡張を受け入れます。クライアントによって要求された1つ以上の拡張を含むヘッダーフィールド。拡張パラメーターの解釈、およびクライアントが要求したパラメーターのセットに対するサーバーからの有効な応答を構成するものは、そのような各拡張によって定義されます。"
    },
    {
      "indent": 0,
      "text": "9.2. Known Extensions",
      "section_title": true,
      "ja": "9.2. 既知の拡張"
    },
    {
      "indent": 3,
      "text": "Extensions provide a mechanism for implementations to opt-in to additional protocol features. This document doesn't define any extension, but implementations MAY use extensions defined separately.",
      "ja": "拡張機能は、実装が追加のプロトコル機能をオプトインするためのメカニズムを提供します。このドキュメントでは拡張機能を定義していませんが、実装では個別に定義された拡張機能を使用できます。"
    },
    {
      "indent": 0,
      "text": "10. Security Considerations",
      "section_title": true,
      "ja": "10. セキュリティに関する考慮事項"
    },
    {
      "indent": 3,
      "text": "This section describes some security considerations applicable to the WebSocket Protocol. Specific security considerations are described in subsections of this section.",
      "ja": "このセクションでは、WebSocketプロトコルに適用可能なセキュリティの考慮事項について説明します。特定のセキュリティに関する考慮事項は、このセクションのサブセクションで説明されています。"
    },
    {
      "indent": 0,
      "text": "10.1. Non-Browser Clients",
      "section_title": true,
      "ja": "10.1. 非ブラウザクライアント"
    },
    {
      "indent": 3,
      "text": "The WebSocket Protocol protects against malicious JavaScript running inside a trusted application such as a web browser, for example, by checking of the |Origin| header field (see below). See Section 1.6 for additional details. Such assumptions don't hold true in the case of a more-capable client.",
      "ja": "WebSocketプロトコルは、| Origin |のチェックなどにより、Webブラウザーなどの信頼できるアプリケーション内で実行される悪意のあるJavaScriptから保護します。ヘッダーフィールド（下記参照）。詳細については、セクション1.6を参照してください。このような仮定は、より能力のあるクライアントの場合には当てはまりません。"
    },
    {
      "indent": 3,
      "text": "While this protocol is intended to be used by scripts in web pages, it can also be used directly by hosts. Such hosts are acting on their own behalf and can therefore send fake |Origin| header fields, misleading the server. Servers should therefore be careful about assuming that they are talking directly to scripts from known origins and must consider that they might be accessed in unexpected ways. In particular, a server should not trust that any input is valid.",
      "ja": "このプロトコルはWebページのスクリプトで使用することを目的としていますが、ホストで直接使用することもできます。そのようなホストは自分自身に代わって行動しているため、偽の|送信元|を送信できます。ヘッダーフィールド、サーバーを誤解させる。したがって、サーバーは、既知のオリジンのスクリプトと直接通信していると想定する場合は注意が必要であり、予期しない方法でアクセスされる可能性があることを考慮する必要があります。特に、サーバーは入力が有効であることを信頼してはなりません。"
    },
    {
      "indent": 3,
      "text": "EXAMPLE: If the server uses input as part of SQL queries, all input text should be escaped before being passed to the SQL server, lest the server be susceptible to SQL injection.",
      "ja": "例：サーバーがSQLクエリの一部として入力を使用する場合、サーバーがSQLインジェクションの影響を受けないように、すべての入力テキストはSQLサーバーに渡される前にエスケープする必要があります。"
    },
    {
      "indent": 0,
      "text": "10.2. Origin Considerations",
      "section_title": true,
      "ja": "10.2. 起源に関する考慮事項"
    },
    {
      "indent": 3,
      "text": "Servers that are not intended to process input from any web page but only for certain sites SHOULD verify the |Origin| field is an origin they expect. If the origin indicated is unacceptable to the server, then it SHOULD respond to the WebSocket handshake with a reply containing HTTP 403 Forbidden status code.",
      "ja": "Webページからの入力を処理することを目的としていないが、特定のサイトのみを対象とするサーバーは、| Origin |を検証する必要があります。フィールドは、彼らが期待する起源です。示されたオリジンがサーバーに受け入れられない場合、HTTP 403 Forbiddenステータスコードを含む応答でWebSocketハンドシェイクに応答する必要があります（SHOULD）。"
    },
    {
      "indent": 0,
      "text": " The |Origin| header field protects from the attack cases when the untrusted party is typically the author of a JavaScript application that is executing in the context of the trusted client. The client itself can contact the server and, via the mechanism of the |Origin| header field, determine whether to extend those communication privileges to the JavaScript application. The intent is not to prevent non-browsers from establishing connections but rather to ensure that trusted browsers under the control of potentially malicious JavaScript cannot fake a WebSocket handshake.",
      "ja": "|起源|ヘッダーフィールドは、信頼できない当事者が通常、信頼できるクライアントのコンテキストで実行されているJavaScriptアプリケーションの作成者である場合の攻撃ケースから保護します。クライアント自体はサーバーにアクセスでき、| Origin |のメカニズムを介してヘッダーフィールドで、これらの通信権限をJavaScriptアプリケーションに拡張するかどうかを決定します。その目的は、ブラウザー以外のユーザーが接続を確立できないようにすることではなく、悪意のあるJavaScriptの制御下にある信頼できるブラウザーがWebSocketハンドシェイクを偽造できないようにすることです。"
    },
    {
      "indent": 0,
      "text": "10.3. Attacks On Infrastructure (Masking)",
      "section_title": true,
      "ja": "10.3. インフラストラクチャへの攻撃（マスキング）"
    },
    {
      "indent": 3,
      "text": "In addition to endpoints being the target of attacks via WebSockets, other parts of web infrastructure, such as proxies, may be the subject of an attack.",
      "ja": "エンドポイントがWebSocketを介した攻撃の標的であることに加えて、プロキシなどのWebインフラストラクチャの他の部分が攻撃の対象になる可能性があります。"
    },
    {
      "indent": 3,
      "text": "As this protocol was being developed, an experiment was conducted to demonstrate a class of attacks on proxies that led to the poisoning of caching proxies deployed in the wild [TALKING]. The general form of the attack was to establish a connection to a server under the \"attacker's\" control, perform an UPGRADE on the HTTP connection similar to what the WebSocket Protocol does to establish a connection, and subsequently send data over that UPGRADEd connection that looked like a GET request for a specific known resource (which in an attack would likely be something like a widely deployed script for tracking hits or a resource on an ad-serving network). The remote server would respond with something that looked like a response to the fake GET request, and this response would be cached by a nonzero percentage of deployed intermediaries, thus poisoning the cache. The net effect of this attack would be that if a user could be convinced to visit a website the attacker controlled, the attacker could potentially poison the cache for that user and other users behind the same cache and run malicious script on other origins, compromising the web security model.",
      "ja": "このプロトコルが開発されているときに、野生で展開されているキャッシングプロキシのポイズニングにつながるプロキシに対するクラスの攻撃を実証する実験が行われました[TALKING]。攻撃の一般的な形式は、「攻撃者」の制御下でサーバーへの接続を確立し、接続を確立するためにWebSocketプロトコルが行うのと同様にHTTP接続でUPGRADEを実行し、その後、そのUPGRADEされた接続を介してデータを送信しました。特定の既知のリソースに対するGETリクエストのようなものです（攻撃では、ヒットを追跡するために広く展開されているスクリプトや、広告配信ネットワーク上のリソースのようになります）。リモートサーバーは、偽のGET要求に対する応答のようなもので応答し、この応答は、配備された仲介者のゼロ以外のパーセンテージによってキャッシュされるため、キャッシュが汚染されます。この攻撃の正味の影響は、ユーザーが攻撃者が制御したWebサイトを訪問するように確信できた場合、攻撃者はそのユーザーと他のユーザーのキャッシュを同じキャッシュの背後で汚染し、他のオリジンで悪意のあるスクリプトを実行して、セキュリティを侵害する可能性があります。 Webセキュリティモデル。"
    },
    {
      "indent": 3,
      "text": "To avoid such attacks on deployed intermediaries, it is not sufficient to prefix application-supplied data with framing that is not compliant with HTTP, as it is not possible to exhaustively discover and test that each nonconformant intermediary does not skip such non-HTTP framing and act incorrectly on the frame payload. Thus, the defense adopted is to mask all data from the client to the server, so that the remote script (attacker) does not have control over how the data being sent appears on the wire and thus cannot construct a message that could be misinterpreted by an intermediary as an HTTP request.",
      "ja": "展開された仲介者へのこのような攻撃を回避するには、アプリケーションに提供されたデータにHTTPに準拠していないフレーミングをプレフィックスするだけでは不十分です。フレームペイロードに対して正しく動作しない。したがって、採用されている防御策は、クライアントからサーバーへのすべてのデータをマスクすることです。これにより、リモートスクリプト（攻撃者）は、送信されるデータがネットワーク上でどのように表示されるかを制御できず、メッセージが誤って解釈される可能性があります。 HTTPリクエストとしての仲介。"
    },
    {
      "indent": 0,
      "text": " Clients MUST choose a new masking key for each frame, using an algorithm that cannot be predicted by end applications that provide data. For example, each masking could be drawn from a cryptographically strong random number generator. If the same key is used or a decipherable pattern exists for how the next key is chosen, the attacker can send a message that, when masked, could appear to be an HTTP request (by taking the message the attacker wishes to see on the wire and masking it with the next masking key to be used, the masking key will effectively unmask the data when the client applies it).",
      "ja": "クライアントは、データを提供するエンドアプリケーションによって予測できないアルゴリズムを使用して、各フレームの新しいマスキングキーを選択する必要があります。たとえば、各マスキングは、暗号学的に強力な乱数ジェネレータから取得できます。同じキーが使用されている場合、または次のキーの選択方法に解読可能なパターンが存在する場合、攻撃者はマスクされている場合、HTTPリクエストのように見えるメッセージを送信できます（攻撃者がネットワーク上で見たいメッセージを取得することにより）使用する次のマスキングキーでマスキングすると、マスキングキーは、クライアントがデータを適用するときにデータのマスクを実質的に解除します。"
    },
    {
      "indent": 3,
      "text": "It is also necessary that once the transmission of a frame from a client has begun, the payload (application-supplied data) of that frame must not be capable of being modified by the application. Otherwise, an attacker could send a long frame where the initial data was a known value (such as all zeros), compute the masking key being used upon receipt of the first part of the data, and then modify the data that is yet to be sent in the frame to appear as an HTTP request when masked. (This is essentially the same problem described in the previous paragraph with using a known or predictable masking key.) If additional data is to be sent or data to be sent is somehow changed, that new or changed data must be sent in a new frame and thus with a new masking key. In short, once transmission of a frame begins, the contents must not be modifiable by the remote script (application).",
      "ja": "また、クライアントからのフレームの送信が開始されると、そのフレームのペイロード（アプリケーションが提供するデータ）がアプリケーションによって変更されないようにする必要があります。それ以外の場合、攻撃者は初期データが既知の値（すべてゼロなど）である長いフレームを送信し、データの最初の部分の受信時に使用されているマスキングキーを計算してから、まだ作成されていないデータを変更する可能性があります。フレームで送信され、マスクされたときにHTTPリクエストとして表示されます。 （これは基本的に、前の段落で説明した既知または予測可能なマスキングキーを使用した場合と同じ問題です。）追加のデータを送信する場合、または送信するデータを変更する場合は、新しいデータまたは変更したデータを新しいフレームで送信する必要があります。したがって、新しいマスキングキーを使用します。つまり、フレームの送信が開始されると、コンテンツはリモートスクリプト（アプリケーション）によって変更可能であってはなりません。"
    },
    {
      "indent": 3,
      "text": "The threat model being protected against is one in which the client sends data that appears to be an HTTP request. As such, the channel that needs to be masked is the data from the client to the server. The data from the server to the client can be made to look like a response, but to accomplish this request, the client must also be able to forge a request. As such, it was not deemed necessary to mask data in both directions (the data from the server to the client is not masked).",
      "ja": "保護対象の脅威モデルは、クライアントがHTTPリクエストのように見えるデータを送信する脅威モデルです。そのため、マスクする必要があるチャネルは、クライアントからサーバーへのデータです。サーバーからクライアントへのデータを応答のように見せることができますが、この要求を実行するには、クライアントも要求を偽造できる必要があります。そのため、双方向でデータをマスクする必要はないと考えられました（サーバーからクライアントへのデータはマスクされません）。"
    },
    {
      "indent": 3,
      "text": "Despite the protection provided by masking, non-compliant HTTP proxies will still be vulnerable to poisoning attacks of this type by clients and servers that do not apply masking.",
      "ja": "マスキングによる保護にもかかわらず、非準拠のHTTPプロキシは、マスキングを適用しないクライアントおよびサーバーによるこのタイプのポイズニング攻撃に対して依然として脆弱です。"
    },
    {
      "indent": 0,
      "text": "10.4. Implementation-Specific Limits",
      "section_title": true,
      "ja": "10.4. 実装固有の制限"
    },
    {
      "indent": 3,
      "text": "Implementations that have implementation- and/or platform-specific limitations regarding the frame size or total message size after reassembly from multiple frames MUST protect themselves against exceeding those limits. (For example, a malicious endpoint can try to exhaust its peer's memory or mount a denial-of-service attack by sending either a single big frame (e.g., of size 2**60) or by sending a long stream of small frames that are a part of a fragmented message.) Such an implementation SHOULD impose a limit on frame sizes and the total message size after reassembly from multiple frames.",
      "ja": "複数のフレームからの再構成後のフレームサイズまたはメッセージの合計サイズに関して、実装またはプラットフォーム固有の制限がある実装は、それらの制限を超えないように保護する必要があります。 （たとえば、悪意のあるエンドポイントは、単一の大きなフレーム（たとえば、サイズ2 ** 60）を送信するか、小さなフレームの長いストリームを送信することによって、ピアのメモリを使い果たしたり、サービス拒否攻撃を仕掛けたりすることができます。は断片化されたメッセージの一部です。）このような実装では、複数のフレームから再構成した後のフレームサイズと合計メッセージサイズに制限を課す必要があります（SHOULD）。"
    },
    {
      "indent": 0,
      "text": "10.5. WebSocket Client Authentication",
      "section_title": true,
      "ja": "10.5. WebSocketクライアント認証"
    },
    {
      "indent": 3,
      "text": "This protocol doesn't prescribe any particular way that servers can authenticate clients during the WebSocket handshake. The WebSocket server can use any client authentication mechanism available to a generic HTTP server, such as cookies, HTTP authentication, or TLS authentication.",
      "ja": "このプロトコルは、サーバーがWebSocketハンドシェイク中にクライアントを認証できる特定の方法を規定していません。 WebSocketサーバーは、Cookie、HTTP認証、TLS認証など、一般的なHTTPサーバーが使用できる任意のクライアント認証メカニズムを使用できます。"
    },
    {
      "indent": 0,
      "text": "10.6. Connection Confidentiality and Integrity",
      "section_title": true,
      "ja": "10.6. 接続の機密性と整合性"
    },
    {
      "indent": 3,
      "text": "Connection confidentiality and integrity is provided by running the WebSocket Protocol over TLS (wss URIs). WebSocket implementations MUST support TLS and SHOULD employ it when communicating with their peers.",
      "ja": "接続の機密性と整合性は、TLS（wss URI）を介してWebSocketプロトコルを実行することによって提供されます。 WebSocket実装はTLSをサポートしなければならず（MUST）、ピアと通信するときにTLSを使用する必要があります（SHOULD）。"
    },
    {
      "indent": 3,
      "text": "For connections using TLS, the amount of benefit provided by TLS depends greatly on the strength of the algorithms negotiated during the TLS handshake. For example, some TLS cipher mechanisms don't provide connection confidentiality. To achieve reasonable levels of protection, clients should use only Strong TLS algorithms. \"Web Security Context: User Interface Guidelines\" [W3C.REC-wsc-ui-20100812] discusses what constitutes Strong TLS algorithms. [RFC5246] provides additional guidance in Appendix A.5 and Appendix D.3.",
      "ja": "TLSを使用する接続の場合、TLSによって提供される利点の量は、TLSハンドシェイク中にネゴシエートされるアルゴリズムの強度に大きく依存します。たとえば、一部のTLS暗号化メカニズムは接続の機密性を提供しません。妥当なレベルの保護を実現するには、クライアントは強力なTLSアルゴリズムのみを使用する必要があります。 「Webセキュリティコンテキスト：ユーザーインターフェイスガイドライン」[W3C.REC-wsc-ui-20100812]では、強力なTLSアルゴリズムの構成要素について説明しています。 [RFC5246]は、付録A.5および付録D.3に追加のガイダンスを提供します。"
    },
    {
      "indent": 0,
      "text": "10.7. Handling of Invalid Data",
      "section_title": true,
      "ja": "10.7. 無効なデータの処理"
    },
    {
      "indent": 3,
      "text": "Incoming data MUST always be validated by both clients and servers. If, at any time, an endpoint is faced with data that it does not understand or that violates some criteria by which the endpoint determines safety of input, or when the endpoint sees an opening handshake that does not correspond to the values it is expecting (e.g., incorrect path or origin in the client request), the endpoint MAY drop the TCP connection. If the invalid data was received after a successful WebSocket handshake, the endpoint SHOULD send a Close frame with an appropriate status code (Section 7.4) before proceeding to _Close the WebSocket Connection_. Use of a Close frame with an appropriate status code can help in diagnosing the problem. If the invalid data is sent during the WebSocket handshake, the server SHOULD return an appropriate HTTP [RFC2616] status code.",
      "ja": "受信データは常にクライアントとサーバーの両方で検証される必要があります。いつでも、エンドポイントが理解できない、またはエンドポイントが入力の安全性を決定するいくつかの基準に違反するデータに直面している場合、またはエンドポイントが予期している値に対応しない開始ハンドシェイクを見つけた場合（たとえば、クライアントリクエストのパスまたはオリジンが正しくない場合）、エンドポイントはTCP接続をドロップする場合があります。 WebSocketハンドシェイクが成功した後に無効なデータが受信された場合、エンドポイントは、_WebSocket接続を閉じる_に進む前に、適切なステータスコード（セクション7.4）を含むCloseフレームを送信する必要があります（SHOULD）。適切なステータスコードを含むCloseフレームを使用すると、問題の診断に役立ちます。 WebSocketハンドシェイク中に無効なデータが送信された場合、サーバーは適切なHTTP [RFC2616]ステータスコードを返す必要があります（SHOULD）。"
    },
    {
      "indent": 0,
      "text": " A common class of security problems arises when sending text data using the wrong encoding. This protocol specifies that messages with a Text data type (as opposed to Binary or other types) contain UTF-8- encoded data. Although the length is still indicated and applications implementing this protocol should use the length to determine where the frame actually ends, sending data in an improper encoding may still break assumptions that applications built on top of this protocol may make, leading to anything from misinterpretation of data to loss of data or potential security bugs.",
      "ja": "間違ったエンコーディングを使用してテキストデータを送信すると、セキュリティ問題の一般的なクラスが発生します。このプロトコルは、（バイナリまたは他のタイプではなく）テキストデータタイプのメッセージにUTF-8でエンコードされたデータが含まれることを指定します。長さは引き続き示され、このプロトコルを実装するアプリケーションは長さを使用してフレームが実際に終了する場所を決定する必要がありますが、不適切なエンコーディングでデータを送信すると、このプロトコルの上に構築されたアプリケーションが行う可能性のある仮定が依然として破られ、誤解の原因となる可能性がありますデータ損失または潜在的なセキュリティバグ。"
    },
    {
      "indent": 0,
      "text": "10.8. Use of SHA-1 by the WebSocket Handshake",
      "section_title": true,
      "ja": "10.8. WebSocketハンドシェイクによるSHA-1の使用"
    },
    {
      "indent": 3,
      "text": "The WebSocket handshake described in this document doesn't depend on any security properties of SHA-1, such as collision resistance or resistance to the second pre-image attack (as described in [RFC4270]).",
      "ja": "このドキュメントで説明されているWebSocketハンドシェイクは、SHA-1のセキュリティプロパティ（衝突耐性や2番目のプリイメージ攻撃への耐性など）に依存していません（[RFC4270]で説明されています）。"
    },
    {
      "indent": 0,
      "text": "11. IANA Considerations",
      "section_title": true,
      "ja": "11. IANAに関する考慮事項"
    },
    {
      "indent": 0,
      "text": "11.1. Registration of New URI Schemes",
      "section_title": true,
      "ja": "11.1. 新しいURIスキームの登録"
    },
    {
      "indent": 0,
      "text": "11.1.1. Registration of \"ws\" Scheme",
      "section_title": true,
      "ja": "11.1.1. 「ws」スキームの登録"
    },
    {
      "indent": 3,
      "text": "A |ws| URI identifies a WebSocket server and resource name.",
      "ja": "A | ws | URIはWebSocketサーバーとリソース名を識別します。"
    },
    {
      "indent": 3,
      "text": "URI scheme name ws",
      "ja": "URIスキーム名ws"
    },
    {
      "indent": 3,
      "text": "Status Permanent",
      "ja": "ステータス永久"
    },
    {
      "indent": 3,
      "text": "URI scheme syntax Using the ABNF [RFC5234] syntax and ABNF terminals from the URI specification [RFC3986]:",
      "ja": "URIスキーム構文ABNF [RFC5234]構文とURI仕様[RFC3986]のABNF端子を使用："
    },
    {
      "indent": 11,
      "text": "\"ws:\" \"//\" authority path-abempty [ \"?\" query ]",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "The <path-abempty> and <query> [RFC3986] components form the resource name sent to the server to identify the kind of service desired. Other components have the meanings described in [RFC3986].",
      "ja": "<path-abempty>および<query> [RFC3986]コンポーネントは、サーバーに送信されるリソース名を形成して、必要なサービスの種類を識別します。他のコンポーネントは、[RFC3986]で説明されている意味を持っています。"
    },
    {
      "indent": 3,
      "text": "URI scheme semantics The only operation for this scheme is to open a connection using the WebSocket Protocol.",
      "ja": "URIスキームのセマンティクスこのスキームの唯一の操作は、WebSocketプロトコルを使用して接続を開くことです。"
    },
    {
      "indent": 3,
      "text": "Encoding considerations Characters in the host component that are excluded by the syntax defined above MUST be converted from Unicode to ASCII as specified in [RFC3987] or its replacement. For the purposes of scheme-based normalization, Internationalized Domain Name (IDN) forms of the host component and their conversions to punycode are considered equivalent (see Section 5.3.3 of [RFC3987]).",
      "ja": "エンコードに関する考慮事項上記で定義された構文によって除外されたホストコンポーネントの文字は、[RFC3987]またはその置換で指定されているように、UnicodeからASCIIに変換する必要があります。スキームに基づく正規化の目的で、ホストコンポーネントの国際化ドメイン名（IDN）形式とそれらのpunycodeへの変換は同等と見なされます（[RFC3987]のセクション5.3.3を参照）。"
    },
    {
      "indent": 6,
      "text": "Characters in other components that are excluded by the syntax defined above MUST be converted from Unicode to ASCII by first encoding the characters as UTF-8 and then replacing the corresponding bytes using their percent-encoded form as defined in the URI [RFC3986] and Internationalized Resource Identifier (IRI) [RFC3987] specifications.",
      "ja": "上記で定義された構文で除外されている他のコンポーネントの文字は、最初に文字をUTF-8としてエンコードし、次にURI [RFC3986]および国際化で定義されているパーセントエンコード形式を使用して対応するバイトを置き換えることにより、UnicodeからASCIIに変換する必要があります。リソース識別子（IRI）[RFC3987]仕様。"
    },
    {
      "indent": 3,
      "text": "Applications/protocols that use this URI scheme name WebSocket Protocol",
      "ja": "このURIスキーム名を使用するアプリケーション/プロトコルWebSocketプロトコル"
    },
    {
      "indent": 3,
      "text": "Interoperability considerations Use of WebSocket requires use of HTTP version 1.1 or higher.",
      "ja": "相互運用性に関する考慮事項WebSocketを使用するには、HTTPバージョン1.1以降を使用する必要があります。"
    },
    {
      "indent": 3,
      "text": "Security considerations See \"Security Considerations\" section.",
      "ja": "セキュリティに関する考慮事項「セキュリティに関する考慮事項」を参照してください。"
    },
    {
      "indent": 3,
      "text": "Contact HYBI WG <hybi@ietf.org>",
      "ja": "HYBI WG <hybi@ietf.org>に連絡する"
    },
    {
      "indent": 3,
      "text": "Author/Change controller\n   IETF <iesg@ietf.org>",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "References RFC 6455",
      "ja": "RFC 6455を参照"
    },
    {
      "indent": 0,
      "text": "11.1.2. Registration of \"wss\" Scheme",
      "section_title": true,
      "ja": "11.1.2. 「wss」スキームの登録"
    },
    {
      "indent": 3,
      "text": "A |wss| URI identifies a WebSocket server and resource name and indicates that traffic over that connection is to be protected via TLS (including standard benefits of TLS such as data confidentiality and integrity and endpoint authentication).",
      "ja": "A | wss | URIはWebSocketサーバーとリソース名を識別し、その接続上のトラフィックがTLSを介して保護されることを示します（データの機密性と整合性、エンドポイント認証などのTLSの標準的な利点を含みます）。"
    },
    {
      "indent": 3,
      "text": "URI scheme name wss",
      "ja": "URIスキーム名wss"
    },
    {
      "indent": 3,
      "text": "Status Permanent",
      "ja": "ステータス永久"
    },
    {
      "indent": 3,
      "text": "URI scheme syntax Using the ABNF [RFC5234] syntax and ABNF terminals from the URI specification [RFC3986]:",
      "ja": "URIスキーム構文ABNF [RFC5234]構文とURI仕様[RFC3986]のABNF端子を使用："
    },
    {
      "indent": 11,
      "text": "\"wss:\" \"//\" authority path-abempty [ \"?\" query ]",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "The <path-abempty> and <query> components form the resource name sent to the server to identify the kind of service desired. Other components have the meanings described in [RFC3986].",
      "ja": "<path-abempty>および<query>コンポーネントは、目的のサービスの種類を識別するためにサーバーに送信されるリソース名を形成します。他のコンポーネントは、[RFC3986]で説明されている意味を持っています。"
    },
    {
      "indent": 3,
      "text": "URI scheme semantics The only operation for this scheme is to open a connection using the WebSocket Protocol, encrypted using TLS.",
      "ja": "URIスキームのセマンティクスこのスキームの唯一の操作は、TLSを使用して暗号化されたWebSocketプロトコルを使用して接続を開くことです。"
    },
    {
      "indent": 3,
      "text": "Encoding considerations Characters in the host component that are excluded by the syntax defined above MUST be converted from Unicode to ASCII as specified in [RFC3987] or its replacement. For the purposes of scheme-based normalization IDN forms of the host component and their conversions to punycode are considered equivalent (see Section 5.3.3 of [RFC3987]).",
      "ja": "エンコードに関する考慮事項上記で定義された構文によって除外されたホストコンポーネントの文字は、[RFC3987]またはその置換で指定されているように、UnicodeからASCIIに変換する必要があります。ホストコンポーネントのスキームベースの正規化IDN形式とそれらのpunycodeへの変換は、同等と見なされます（[RFC3987]のセクション5.3.3を参照）。"
    },
    {
      "indent": 6,
      "text": "Characters in other components that are excluded by the syntax defined above MUST be converted from Unicode to ASCII by first encoding the characters as UTF-8 and then replacing the corresponding bytes using their percent-encoded form as defined in the URI [RFC3986] and IRI [RFC3987] specifications.",
      "ja": "上記で定義された構文で除外されている他のコンポーネントの文字は、最初に文字をUTF-8としてエンコードし、次にURI [RFC3986]およびIRIで定義されているパーセントエンコード形式を使用して対応するバイトを置き換えることにより、UnicodeからASCIIに変換する必要があります。 [RFC3987]仕様。"
    },
    {
      "indent": 3,
      "text": "Applications/protocols that use this URI scheme name WebSocket Protocol over TLS",
      "ja": "このURIスキーム名を使用するアプリケーション/プロトコルTLS経由のWebSocketプロトコル"
    },
    {
      "indent": 3,
      "text": "Interoperability considerations Use of WebSocket requires use of HTTP version 1.1 or higher.",
      "ja": "相互運用性に関する考慮事項WebSocketを使用するには、HTTPバージョン1.1以降を使用する必要があります。"
    },
    {
      "indent": 3,
      "text": "Security considerations See \"Security Considerations\" section.",
      "ja": "セキュリティに関する考慮事項「セキュリティに関する考慮事項」を参照してください。"
    },
    {
      "indent": 3,
      "text": "Contact HYBI WG <hybi@ietf.org>",
      "ja": "HYBI WG <hybi@ietf.org>に連絡する"
    },
    {
      "indent": 3,
      "text": "Author/Change controller\n   IETF <iesg@ietf.org>",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "References RFC 6455",
      "ja": "RFC 6455を参照"
    },
    {
      "indent": 0,
      "text": "11.2. Registration of the \"WebSocket\" HTTP Upgrade Keyword",
      "section_title": true,
      "ja": "11.2. 「WebSocket」HTTPアップグレードキーワードの登録"
    },
    {
      "indent": 3,
      "text": "This section defines a keyword registered in the HTTP Upgrade Tokens Registry as per RFC 2817 [RFC2817].",
      "ja": "このセクションでは、RFC 2817 [RFC2817]に従って、HTTPアップグレードトークンレジストリに登録されているキーワードを定義します。"
    },
    {
      "indent": 3,
      "text": "Name of token WebSocket",
      "ja": "トークンWebSocketの名前"
    },
    {
      "indent": 3,
      "text": "Author/Change controller\n   IETF <iesg@ietf.org>",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "Contact HYBI <hybi@ietf.org>",
      "ja": "HYBI <hybi@ietf.org>に連絡する"
    },
    {
      "indent": 3,
      "text": "References RFC 6455",
      "ja": "RFC 6455を参照"
    },
    {
      "indent": 0,
      "text": "11.3. Registration of New HTTP Header Fields",
      "section_title": true,
      "ja": "11.3. 新しいHTTPヘッダーフィールドの登録"
    },
    {
      "indent": 0,
      "text": "11.3.1. Sec-WebSocket-Key",
      "section_title": true,
      "ja": "11.3.1. Sec-WebSocket-Key"
    },
    {
      "indent": 3,
      "text": "This section describes a header field registered in the Permanent Message Header Field Names registry [RFC3864].",
      "ja": "このセクションでは、Permanent Message Header Field Namesレジストリ[RFC3864]に登録されているヘッダーフィールドについて説明します。"
    },
    {
      "indent": 3,
      "text": "Header field name Sec-WebSocket-Key",
      "ja": "ヘッダーフィールド名Sec-WebSocket-Key"
    },
    {
      "indent": 3,
      "text": "Applicable protocol http",
      "ja": "該当プロトコルhttp"
    },
    {
      "indent": 3,
      "text": "Status standard",
      "ja": "ステータス基準"
    },
    {
      "indent": 3,
      "text": "Author/Change controller IETF",
      "ja": "著者/変更コントローラーIETF"
    },
    {
      "indent": 3,
      "text": "Specification document(s) RFC 6455",
      "ja": "仕様書RFC 6455"
    },
    {
      "indent": 3,
      "text": "Related information This header field is only used for WebSocket opening handshake.",
      "ja": "関連情報このヘッダーフィールドは、WebSocketオープニングハンドシェイクにのみ使用されます。"
    },
    {
      "indent": 3,
      "text": "The |Sec-WebSocket-Key| header field is used in the WebSocket opening handshake. It is sent from the client to the server to provide part of the information used by the server to prove that it received a valid WebSocket opening handshake. This helps ensure that the server does not accept connections from non-WebSocket clients (e.g., HTTP clients) that are being abused to send data to unsuspecting WebSocket servers.",
      "ja": "| Sec-WebSocket-Key |ヘッダーフィールドは、WebSocketオープニングハンドシェイクで使用されます。クライアントからサーバーに送信され、サーバーが使用する情報の一部を提供して、有効なWebSocketオープンハンドシェイクを受信したことを証明します。これにより、不正なWebSocketサーバーにデータを送信するために悪用されている非WebSocketクライアント（HTTPクライアントなど）からの接続をサーバーが受け入れないようにすることができます。"
    },
    {
      "indent": 3,
      "text": "The |Sec-WebSocket-Key| header field MUST NOT appear more than once in an HTTP request.",
      "ja": "| Sec-WebSocket-Key |ヘッダーフィールドは、HTTPリクエストで複数回使用することはできません。"
    },
    {
      "indent": 0,
      "text": "11.3.2. Sec-WebSocket-Extensions",
      "section_title": true,
      "ja": "11.3.2. Sec-WebSocket-Extensions"
    },
    {
      "indent": 3,
      "text": "This section describes a header field for registration in the Permanent Message Header Field Names registry [RFC3864].",
      "ja": "このセクションでは、Permanent Message Header Field Namesレジストリ[RFC3864]に登録するためのヘッダーフィールドについて説明します。"
    },
    {
      "indent": 3,
      "text": "Header field name Sec-WebSocket-Extensions",
      "ja": "ヘッダーフィールド名Sec-WebSocket-Extensions"
    },
    {
      "indent": 3,
      "text": "Applicable protocol http",
      "ja": "該当プロトコルhttp"
    },
    {
      "indent": 3,
      "text": "Status standard",
      "ja": "ステータス基準"
    },
    {
      "indent": 3,
      "text": "Author/Change controller IETF",
      "ja": "著者/変更コントローラーIETF"
    },
    {
      "indent": 3,
      "text": "Specification document(s) RFC 6455",
      "ja": "仕様書RFC 6455"
    },
    {
      "indent": 3,
      "text": "Related information This header field is only used for WebSocket opening handshake.",
      "ja": "関連情報このヘッダーフィールドは、WebSocketオープニングハンドシェイクにのみ使用されます。"
    },
    {
      "indent": 3,
      "text": "The |Sec-WebSocket-Extensions| header field is used in the WebSocket opening handshake. It is initially sent from the client to the server, and then subsequently sent from the server to the client, to agree on a set of protocol-level extensions to use for the duration of the connection.",
      "ja": "| Sec-WebSocket-Extensions |ヘッダーフィールドは、WebSocketオープニングハンドシェイクで使用されます。これは、最初にクライアントからサーバーに送信され、次にサーバーからクライアントに送信されて、接続期間中に使用する一連のプロトコルレベルの拡張機能について合意します。"
    },
    {
      "indent": 3,
      "text": "The |Sec-WebSocket-Extensions| header field MAY appear multiple times in an HTTP request (which is logically the same as a single |Sec-WebSocket-Extensions| header field that contains all values. However, the |Sec-WebSocket-Extensions| header field MUST NOT appear more than once in an HTTP response.",
      "ja": "| Sec-WebSocket-Extensions |ヘッダーフィールドは、HTTPリクエストで複数回表示される場合があります（これは、すべての値を含む単一の| Sec-WebSocket-Extensions |ヘッダーフィールドと論理的に同じです。ただし、| Sec-WebSocket-Extensions |ヘッダーフィールドは、 HTTP応答で1回。"
    },
    {
      "indent": 0,
      "text": "11.3.3. Sec-WebSocket-Accept",
      "section_title": true,
      "ja": "11.3.3. Sec-WebSocket-Accept"
    },
    {
      "indent": 3,
      "text": "This section describes a header field registered in the Permanent Message Header Field Names registry [RFC3864].",
      "ja": "このセクションでは、Permanent Message Header Field Namesレジストリ[RFC3864]に登録されているヘッダーフィールドについて説明します。"
    },
    {
      "indent": 3,
      "text": "Header field name Sec-WebSocket-Accept",
      "ja": "ヘッダーフィールド名Sec-WebSocket-Accept"
    },
    {
      "indent": 3,
      "text": "Applicable protocol http",
      "ja": "該当プロトコルhttp"
    },
    {
      "indent": 3,
      "text": "Status standard",
      "ja": "ステータス基準"
    },
    {
      "indent": 3,
      "text": "Author/Change controller IETF",
      "ja": "著者/変更コントローラーIETF"
    },
    {
      "indent": 3,
      "text": "Specification document(s) RFC 6455",
      "ja": "仕様書RFC 6455"
    },
    {
      "indent": 3,
      "text": "Related information This header field is only used for the WebSocket opening handshake.",
      "ja": "関連情報このヘッダーフィールドは、WebSocketオープニングハンドシェイクにのみ使用されます。"
    },
    {
      "indent": 3,
      "text": "The |Sec-WebSocket-Accept| header field is used in the WebSocket opening handshake. It is sent from the server to the client to confirm that the server is willing to initiate the WebSocket connection.",
      "ja": "| Sec-WebSocket-Accept |ヘッダーフィールドは、WebSocketオープニングハンドシェイクで使用されます。サーバーからクライアントに送信され、サーバーがWebSocket接続を開始する意思があることを確認します。"
    },
    {
      "indent": 3,
      "text": "The |Sec-WebSocket-Accept| header MUST NOT appear more than once in an HTTP response.",
      "ja": "| Sec-WebSocket-Accept |ヘッダーは、HTTP応答に複数回出現してはなりません。"
    },
    {
      "indent": 0,
      "text": "11.3.4. Sec-WebSocket-Protocol",
      "section_title": true,
      "ja": "11.3.4. Sec-WebSocket-Protocol"
    },
    {
      "indent": 3,
      "text": "This section describes a header field registered in the Permanent Message Header Field Names registry [RFC3864].",
      "ja": "このセクションでは、Permanent Message Header Field Namesレジストリ[RFC3864]に登録されているヘッダーフィールドについて説明します。"
    },
    {
      "indent": 3,
      "text": "Header field name Sec-WebSocket-Protocol",
      "ja": "ヘッダーフィールド名Sec-WebSocket-Protocol"
    },
    {
      "indent": 3,
      "text": "Applicable protocol http",
      "ja": "該当プロトコルhttp"
    },
    {
      "indent": 3,
      "text": "Status standard",
      "ja": "ステータス基準"
    },
    {
      "indent": 3,
      "text": "Author/Change controller IETF",
      "ja": "著者/変更コントローラーIETF"
    },
    {
      "indent": 3,
      "text": "Specification document(s) RFC 6455",
      "ja": "仕様書RFC 6455"
    },
    {
      "indent": 3,
      "text": "Related information This header field is only used for the WebSocket opening handshake.",
      "ja": "関連情報このヘッダーフィールドは、WebSocketオープニングハンドシェイクにのみ使用されます。"
    },
    {
      "indent": 3,
      "text": "The |Sec-WebSocket-Protocol| header field is used in the WebSocket opening handshake. It is sent from the client to the server and back from the server to the client to confirm the subprotocol of the connection. This enables scripts to both select a subprotocol and be sure that the server agreed to serve that subprotocol.",
      "ja": "| Sec-WebSocket-Protocol |ヘッダーフィールドは、WebSocketオープニングハンドシェイクで使用されます。接続のサブプロトコルを確認するために、クライアントからサーバーに送信され、サーバーからクライアントに返されます。これにより、スクリプトはサブプロトコルを選択し、サーバーがそのサブプロトコルを提供することに同意したことを確認できます。"
    },
    {
      "indent": 3,
      "text": "The |Sec-WebSocket-Protocol| header field MAY appear multiple times in an HTTP request (which is logically the same as a single |Sec-WebSocket-Protocol| header field that contains all values). However, the |Sec-WebSocket-Protocol| header field MUST NOT appear more than once in an HTTP response.",
      "ja": "| Sec-WebSocket-Protocol |ヘッダーフィールドは、HTTPリクエストで複数回表示される場合があります（すべての値を含む単一の| Sec-WebSocket-Protocol |ヘッダーフィールドと論理的に同じです）。ただし、| Sec-WebSocket-Protocol |ヘッダーフィールドは、HTTP応答で複数回出現してはなりません。"
    },
    {
      "indent": 0,
      "text": "11.3.5. Sec-WebSocket-Version",
      "section_title": true,
      "ja": "11.3.5. Sec-WebSocket-Version"
    },
    {
      "indent": 3,
      "text": "This section describes a header field registered in the Permanent Message Header Field Names registry [RFC3864].",
      "ja": "このセクションでは、Permanent Message Header Field Namesレジストリ[RFC3864]に登録されているヘッダーフィールドについて説明します。"
    },
    {
      "indent": 3,
      "text": "Header field name Sec-WebSocket-Version",
      "ja": "ヘッダーフィールド名Sec-WebSocket-Version"
    },
    {
      "indent": 3,
      "text": "Applicable protocol http",
      "ja": "該当プロトコルhttp"
    },
    {
      "indent": 3,
      "text": "Status standard",
      "ja": "ステータス基準"
    },
    {
      "indent": 3,
      "text": "Author/Change controller IETF",
      "ja": "著者/変更コントローラーIETF"
    },
    {
      "indent": 3,
      "text": "Specification document(s) RFC 6455",
      "ja": "仕様書RFC 6455"
    },
    {
      "indent": 3,
      "text": "Related information This header field is only used for the WebSocket opening handshake.",
      "ja": "関連情報このヘッダーフィールドは、WebSocketオープニングハンドシェイクにのみ使用されます。"
    },
    {
      "indent": 3,
      "text": "The |Sec-WebSocket-Version| header field is used in the WebSocket opening handshake. It is sent from the client to the server to indicate the protocol version of the connection. This enables servers to correctly interpret the opening handshake and subsequent data being sent from the data, and close the connection if the server cannot interpret that data in a safe manner. The |Sec-WebSocket-Version| header field is also sent from the server to the client on WebSocket handshake error, when the version received from the client does not match a version understood by the server. In such a case, the header field includes the protocol version(s) supported by the server.",
      "ja": "| Sec-WebSocket-Version |ヘッダーフィールドは、WebSocketオープニングハンドシェイクで使用されます。クライアントからサーバーに送信され、接続のプロトコルバージョンを示します。これにより、サーバーはデータから送信される開始ハンドシェイクと後続のデータを正しく解釈し、サーバーがそのデータを安全な方法で解釈できない場合は接続を閉じることができます。 | Sec-WebSocket-Version |クライアントから受信したバージョンがサーバーによって認識されるバージョンと一致しない場合、WebSocketハンドシェイクエラー時にヘッダーフィールドもサーバーからクライアントに送信されます。このような場合、ヘッダーフィールドには、サーバーでサポートされているプロトコルバージョンが含まれます。"
    },
    {
      "indent": 3,
      "text": "Note that there is no expectation that higher version numbers are necessarily backward compatible with lower version numbers.",
      "ja": "高いバージョン番号が必ずしも低いバージョン番号と下位互換性があるとは期待されていないことに注意してください。"
    },
    {
      "indent": 3,
      "text": "The |Sec-WebSocket-Version| header field MAY appear multiple times in an HTTP response (which is logically the same as a single |Sec-WebSocket-Version| header field that contains all values). However, the |Sec-WebSocket-Version| header field MUST NOT appear more than once in an HTTP request.",
      "ja": "| Sec-WebSocket-Version |ヘッダーフィールドは、HTTP応答に複数回表示される場合があります（すべての値を含む単一の| Sec-WebSocket-Version |ヘッダーフィールドと論理的に同じです）。ただし、| Sec-WebSocket-Version |ヘッダーフィールドは、HTTPリクエストで複数回使用することはできません。"
    },
    {
      "indent": 0,
      "text": "11.4. WebSocket Extension Name Registry",
      "section_title": true,
      "ja": "11.4. WebSocket拡張名レジストリ"
    },
    {
      "indent": 3,
      "text": "This specification creates a new IANA registry for WebSocket Extension names to be used with the WebSocket Protocol in accordance with the principles set out in RFC 5226 [RFC5226].",
      "ja": "この仕様は、RFC 5226 [RFC5226]で規定されている原則に従って、WebSocketプロトコルで使用されるWebSocket拡張機能名の新しいIANAレジストリを作成します。"
    },
    {
      "indent": 3,
      "text": "As part of this registry, IANA maintains the following information:",
      "ja": "このレジストリの一部として、IANAは次の情報を保持しています。"
    },
    {
      "indent": 3,
      "text": "Extension Identifier The identifier of the extension, as will be used in the |Sec-WebSocket-Extensions| header field registered in Section 11.3.2 of this specification. The value must conform to the requirements for an extension-token as defined in Section 9.1 of this specification.",
      "ja": "拡張識別子| Sec-WebSocket-Extensions |で使用される拡張の識別子この仕様のセクション11.3.2に登録されているヘッダーフィールド。この値は、この仕様のセクション9.1で定義されている拡張トークンの要件に準拠している必要があります。"
    },
    {
      "indent": 3,
      "text": "Extension Common Name The name of the extension, as the extension is generally referred to.",
      "ja": "拡張機能の共通名拡張機能が一般的に参照されるため、拡張機能の名前。"
    },
    {
      "indent": 3,
      "text": "Extension Definition A reference to the document in which the extension being used with the WebSocket Protocol is defined.",
      "ja": "拡張定義WebSocketプロトコルで使用されている拡張が定義されているドキュメントへの参照。"
    },
    {
      "indent": 3,
      "text": "Known Incompatible Extensions A list of extension identifiers with which this extension is known to be incompatible.",
      "ja": "既知の互換性のない拡張機能この拡張機能に互換性がないことがわかっている拡張機能識別子のリスト。"
    },
    {
      "indent": 3,
      "text": "WebSocket Extension names are to be subject to the \"First Come First Served\" IANA registration policy [RFC5226].",
      "ja": "WebSocket拡張機能の名前は、「先着順」のIANA登録ポリシー[RFC5226]の対象となります。"
    },
    {
      "indent": 3,
      "text": "There are no initial values in this registry.",
      "ja": "このレジストリには初期値はありません。"
    },
    {
      "indent": 0,
      "text": "11.5. WebSocket Subprotocol Name Registry",
      "section_title": true,
      "ja": "11.5. WebSocketサブプロトコル名レジストリ"
    },
    {
      "indent": 3,
      "text": "This specification creates a new IANA registry for WebSocket Subprotocol names to be used with the WebSocket Protocol in accordance with the principles set out in RFC 5226 [RFC5226].",
      "ja": "この仕様は、RFC 5226 [RFC5226]に規定されている原則に従って、WebSocketプロトコルで使用されるWebSocketサブプロトコル名の新しいIANAレジストリを作成します。"
    },
    {
      "indent": 3,
      "text": "As part of this registry, IANA maintains the following information:",
      "ja": "このレジストリの一部として、IANAは次の情報を保持しています。"
    },
    {
      "indent": 3,
      "text": "Subprotocol Identifier The identifier of the subprotocol, as will be used in the |Sec-WebSocket-Protocol| header field registered in Section 11.3.4 of this specification. The value must conform to the requirements given in item 10 of Section 4.1 of this specification -- namely, the value must be a token as defined by RFC 2616 [RFC2616].",
      "ja": "|サブプロトコルID | Sec-WebSocket-Protocol |で使用されるサブプロトコルのIDこの仕様のセクション11.3.4に登録されているヘッダーフィールド。値は、この仕様のセクション4.1の項目10で指定された要件に準拠する必要があります。つまり、値はRFC 2616 [RFC2616]で定義されているトークンでなければなりません。"
    },
    {
      "indent": 3,
      "text": "Subprotocol Common Name The name of the subprotocol, as the subprotocol is generally referred to.",
      "ja": "サブプロトコルの共通名サブプロトコルは一般的に参照されるため、サブプロトコルの名前。"
    },
    {
      "indent": 3,
      "text": "Subprotocol Definition A reference to the document in which the subprotocol being used with the WebSocket Protocol is defined.",
      "ja": "サブプロトコル定義WebSocketプロトコルで使用されるサブプロトコルが定義されているドキュメントへの参照。"
    },
    {
      "indent": 3,
      "text": "WebSocket Subprotocol names are to be subject to the \"First Come First Served\" IANA registration policy [RFC5226].",
      "ja": "WebSocketサブプロトコル名は、「先着順」IANA登録ポリシー[RFC5226]の対象となります。"
    },
    {
      "indent": 0,
      "text": "11.6. WebSocket Version Number Registry",
      "section_title": true,
      "ja": "11.6. WebSocketバージョン番号レジストリ"
    },
    {
      "indent": 3,
      "text": "This specification creates a new IANA registry for WebSocket Version Numbers to be used with the WebSocket Protocol in accordance with the principles set out in RFC 5226 [RFC5226].",
      "ja": "この仕様は、RFC 5226 [RFC5226]で規定されている原則に従って、WebSocketプロトコルで使用されるWebSocketバージョン番号の新しいIANAレジストリを作成します。"
    },
    {
      "indent": 3,
      "text": "As part of this registry, IANA maintains the following information:",
      "ja": "このレジストリの一部として、IANAは次の情報を保持しています。"
    },
    {
      "indent": 3,
      "text": "Version Number The version number to be used in the |Sec-WebSocket-Version| is specified in Section 4.1 of this specification. The value must be a non-negative integer in the range between 0 and 255 (inclusive).",
      "ja": "バージョン番号| Sec-WebSocket-Version |で使用されるバージョン番号この仕様のセクション4.1で指定されています。値は0〜255の範囲の負でない整数である必要があります。"
    },
    {
      "indent": 3,
      "text": "Reference The RFC requesting a new version number or a draft name with version number (see below).",
      "ja": "参照新しいバージョン番号またはバージョン番号付きのドラフト名を要求するRFC（以下を参照）。"
    },
    {
      "indent": 3,
      "text": "Status Either \"Interim\" or \"Standard\". See below for description.",
      "ja": "ステータス「暫定」または「標準」のいずれか。説明については、以下を参照してください。"
    },
    {
      "indent": 3,
      "text": "A version number is designated as either \"Interim\" or \"Standard\".",
      "ja": "バージョン番号は、「暫定」または「標準」として指定されます。"
    },
    {
      "indent": 3,
      "text": "A \"Standard\" version number is documented in an RFC and used to identify a major, stable version of the WebSocket protocol, such as the version defined by this RFC. \"Standard\" version numbers are subject to the \"IETF Review\" IANA registration policy [RFC5226].",
      "ja": "「標準」バージョン番号はRFCに記載されており、このRFCで定義されているバージョンなど、WebSocketプロトコルのメジャーで安定したバージョンを識別するために使用されます。 「標準」バージョン番号は、「IETFレビュー」IANA登録ポリシー[RFC5226]の対象となります。"
    },
    {
      "indent": 3,
      "text": "An \"Interim\" version number is documented in an Internet-Draft and used to help implementors identify and interoperate with deployed versions of the WebSocket protocol, such as versions developed before the publication of this RFC. \"Interim\" version numbers are subject to the \"Expert Review\" IANA registration policy [RFC5226], with the chairs of the HYBI Working Group (or, if the working group closes, the Area Directors for the IETF Applications Area) being the initial Designated Experts.",
      "ja": "「暫定」バージョン番号はInternet-Draftに記載されており、このRFCの公開前に開発されたバージョンなど、WebSocketプロトコルのデプロイされたバージョンを実装者が識別して相互運用するのに役立ちます。 「暫定」バージョン番号は、「エキスパートレビュー」IANA登録ポリシー[RFC5226]の対象となり、HYBIワーキンググループの議長（または、ワーキンググループが閉会する場合は、IETFアプリケーションエリアのエリアディレクター）が最初に指定されます専門家。"
    },
    {
      "indent": 3,
      "text": "IANA has added initial values to the registry as follows.",
      "ja": "IANAは、次のようにレジストリに初期値を追加しました。"
    },
    {
      "indent": 3,
      "text": "+--------+-----------------------------------------+----------+\n|Version |                Reference                |  Status  |\n| Number |                                         |          |\n+--------+-----------------------------------------+----------+\n| 0      + draft-ietf-hybi-thewebsocketprotocol-00 | Interim  |\n+--------+-----------------------------------------+----------+\n| 1      + draft-ietf-hybi-thewebsocketprotocol-01 | Interim  |\n+--------+-----------------------------------------+----------+\n| 2      + draft-ietf-hybi-thewebsocketprotocol-02 | Interim  |\n+--------+-----------------------------------------+----------+\n| 3      + draft-ietf-hybi-thewebsocketprotocol-03 | Interim  |\n+--------+-----------------------------------------+----------+\n| 4      + draft-ietf-hybi-thewebsocketprotocol-04 | Interim  |\n+--------+-----------------------------------------+----------+\n| 5      + draft-ietf-hybi-thewebsocketprotocol-05 | Interim  |\n+--------+-----------------------------------------+----------+\n| 6      + draft-ietf-hybi-thewebsocketprotocol-06 | Interim  |\n+--------+-----------------------------------------+----------+\n| 7      + draft-ietf-hybi-thewebsocketprotocol-07 | Interim  |\n+--------+-----------------------------------------+----------+\n| 8      + draft-ietf-hybi-thewebsocketprotocol-08 | Interim  |\n+--------+-----------------------------------------+----------+\n| 9      +                Reserved                 |          |\n+--------+-----------------------------------------+----------+\n| 10     +                Reserved                 |          |\n+--------+-----------------------------------------+----------+\n| 11     +                Reserved                 |          |\n+--------+-----------------------------------------+----------+\n| 12     +                Reserved                 |          |\n+--------+-----------------------------------------+----------+\n| 13     +                RFC 6455                 | Standard |\n+--------+-----------------------------------------+----------+",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "11.7. WebSocket Close Code Number Registry",
      "section_title": true,
      "ja": "11.7. WebSocketクローズコード番号レジストリ"
    },
    {
      "indent": 3,
      "text": "This specification creates a new IANA registry for WebSocket Connection Close Code Numbers in accordance with the principles set out in RFC 5226 [RFC5226].",
      "ja": "この仕様は、RFC 5226 [RFC5226]で規定されている原則に従って、WebSocket接続クローズコード番号の新しいIANAレジストリを作成します。"
    },
    {
      "indent": 3,
      "text": "As part of this registry, IANA maintains the following information:",
      "ja": "このレジストリの一部として、IANAは次の情報を保持しています。"
    },
    {
      "indent": 3,
      "text": "Status Code The Status Code denotes a reason for a WebSocket connection closure as per Section 7.4 of this document. The status code is an integer number between 1000 and 4999 (inclusive).",
      "ja": "ステータスコードステータスコードは、このドキュメントのセクション7.4に従って、WebSocket接続が閉じられる理由を示します。ステータスコードは、1000〜4999の整数です。"
    },
    {
      "indent": 3,
      "text": "Meaning The meaning of the status code. Each status code has to have a unique meaning.",
      "ja": "意味ステータスコードの意味。各ステータスコードには固有の意味が必要です。"
    },
    {
      "indent": 3,
      "text": "Contact A contact for the entity reserving the status code.",
      "ja": "連絡先ステータスコードを予約するエンティティの連絡先。"
    },
    {
      "indent": 3,
      "text": "Reference The stable document requesting the status codes and defining their meaning. This is required for status codes in the range 1000-2999 and recommended for status codes in the range 3000-3999.",
      "ja": "参照ステータスコードを要求し、その意味を定義する安定したドキュメント。これは、1000〜2999の範囲のステータスコードに必要で、3000〜3999の範囲のステータスコードに推奨されます。"
    },
    {
      "indent": 3,
      "text": "WebSocket Close Code Numbers are subject to different registration requirements depending on their range. Requests for status codes for use by this protocol and its subsequent versions or extensions are subject to any one of the \"Standards Action\", \"Specification Required\" (which implies \"Designated Expert\"), or \"IESG Review\" IANA registration policies and should be granted in the range 1000-2999. Requests for status codes for use by libraries, frameworks, and applications are subject to the \"First Come First Served\" IANA registration policy and should be granted in the range 3000-3999. The range of status codes from 4000-4999 is designated for Private Use. Requests should indicate whether they are requesting status codes for use by the WebSocket Protocol (or a future version of the protocol), by extensions, or by libraries/frameworks/applications.",
      "ja": "WebSocketクローズコード番号は、その範囲に応じて異なる登録要件の対象となります。このプロトコルとその後続のバージョンまたは拡張機能で使用するステータスコードの要求は、「標準アクション」、「必要な仕様」（「指定エキスパート」を意味する）、または「IESGレビュー」IANA登録ポリシーのいずれかに従い、 1000〜2999の範囲で付与されます。ライブラリ、フレームワーク、およびアプリケーションで使用するステータスコードのリクエストには、「先着順」のIANA登録ポリシーが適用され、3000〜3999の範囲で付与する必要があります。 4000〜4999のステータスコードの範囲は、私的使用に指定されています。リクエストは、WebSocketプロトコル（またはプロトコルの将来のバージョン）、拡張機能、またはライブラリー/フレームワーク/アプリケーションによって使用されるステータスコードを要求しているかどうかを示す必要があります。"
    },
    {
      "indent": 3,
      "text": "IANA has added initial values to the registry as follows.",
      "ja": "IANAは、次のようにレジストリに初期値を追加しました。"
    },
    {
      "indent": 4,
      "text": " |Status Code | Meaning         | Contact       | Reference |\n-+------------+-----------------+---------------+-----------|\n | 1000       | Normal Closure  | hybi@ietf.org | RFC 6455  |\n-+------------+-----------------+---------------+-----------|\n | 1001       | Going Away      | hybi@ietf.org | RFC 6455  |\n-+------------+-----------------+---------------+-----------|\n | 1002       | Protocol error  | hybi@ietf.org | RFC 6455  |\n-+------------+-----------------+---------------+-----------|\n | 1003       | Unsupported Data| hybi@ietf.org | RFC 6455  |\n-+------------+-----------------+---------------+-----------|\n | 1004       | ---Reserved---- | hybi@ietf.org | RFC 6455  |\n-+------------+-----------------+---------------+-----------|\n | 1005       | No Status Rcvd  | hybi@ietf.org | RFC 6455  |\n-+------------+-----------------+---------------+-----------|\n | 1006       | Abnormal Closure| hybi@ietf.org | RFC 6455  |\n-+------------+-----------------+---------------+-----------|\n | 1007       | Invalid frame   | hybi@ietf.org | RFC 6455  |\n |            | payload data    |               |           |\n-+------------+-----------------+---------------+-----------|\n | 1008       | Policy Violation| hybi@ietf.org | RFC 6455  |\n-+------------+-----------------+---------------+-----------|\n | 1009       | Message Too Big | hybi@ietf.org | RFC 6455  |\n-+------------+-----------------+---------------+-----------|\n | 1010       | Mandatory Ext.  | hybi@ietf.org | RFC 6455  |\n-+------------+-----------------+---------------+-----------|\n | 1011       | Internal Server | hybi@ietf.org | RFC 6455  |\n |            | Error           |               |           |\n-+------------+-----------------+---------------+-----------|\n | 1015       | TLS handshake   | hybi@ietf.org | RFC 6455  |\n-+------------+-----------------+---------------+-----------|",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "11.8. WebSocket Opcode Registry",
      "section_title": true,
      "ja": "11.8. WebSocket Opcodeレジストリ"
    },
    {
      "indent": 3,
      "text": "This specification creates a new IANA registry for WebSocket Opcodes in accordance with the principles set out in RFC 5226 [RFC5226].",
      "ja": "この仕様は、RFC 5226 [RFC5226]で規定されている原則に従って、WebSocket Opcodeの新しいIANAレジストリを作成します。"
    },
    {
      "indent": 3,
      "text": "As part of this registry, IANA maintains the following information:",
      "ja": "このレジストリの一部として、IANAは次の情報を保持しています。"
    },
    {
      "indent": 3,
      "text": "Opcode The opcode denotes the frame type of the WebSocket frame, as defined in Section 5.2. The opcode is an integer number between 0 and 15, inclusive.",
      "ja": "オペコードオペコードは、セクション5.2で定義されているように、WebSocketフレームのフレームタイプを示します。オペコードは、0から15までの整数です。"
    },
    {
      "indent": 3,
      "text": "Meaning The meaning of the opcode value.",
      "ja": "意味オペコード値の意味。"
    },
    {
      "indent": 3,
      "text": "Reference The specification requesting the opcode.",
      "ja": "参照オペコードを要求する仕様。"
    },
    {
      "indent": 3,
      "text": "WebSocket Opcode numbers are subject to the \"Standards Action\" IANA registration policy [RFC5226].",
      "ja": "WebSocket Opcode番号は、「標準アクション」IANA登録ポリシー[RFC5226]の対象となります。"
    },
    {
      "indent": 3,
      "text": "IANA has added initial values to the registry as follows.",
      "ja": "IANAは、次のようにレジストリに初期値を追加しました。"
    },
    {
      "indent": 4,
      "text": " |Opcode  | Meaning                             | Reference |\n-+--------+-------------------------------------+-----------|\n | 0      | Continuation Frame                  | RFC 6455  |\n-+--------+-------------------------------------+-----------|\n | 1      | Text Frame                          | RFC 6455  |\n-+--------+-------------------------------------+-----------|\n | 2      | Binary Frame                        | RFC 6455  |\n-+--------+-------------------------------------+-----------|\n | 8      | Connection Close Frame              | RFC 6455  |\n-+--------+-------------------------------------+-----------|\n | 9      | Ping Frame                          | RFC 6455  |\n-+--------+-------------------------------------+-----------|\n | 10     | Pong Frame                          | RFC 6455  |\n-+--------+-------------------------------------+-----------|",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "11.9. WebSocket Framing Header Bits Registry",
      "section_title": true,
      "ja": "11.9. WebSocketフレーミングヘッダービットレジストリ"
    },
    {
      "indent": 3,
      "text": "This specification creates a new IANA registry for WebSocket Framing Header Bits in accordance with the principles set out in RFC 5226 [RFC5226]. This registry controls assignment of the bits marked RSV1, RSV2, and RSV3 in Section 5.2.",
      "ja": "この仕様は、RFC 5226 [RFC5226]で規定されている原則に従って、WebSocketフレーミングヘッダービット用の新しいIANAレジストリを作成します。このレジストリは、セクション5.2でRSV1、RSV2、およびRSV3とマークされたビットの割り当てを制御します。"
    },
    {
      "indent": 3,
      "text": "These bits are reserved for future versions or extensions of this specification.",
      "ja": "これらのビットは、この仕様の将来のバージョンまたは拡張のために予約されています。"
    },
    {
      "indent": 3,
      "text": "WebSocket Framing Header Bits assignments are subject to the \"Standards Action\" IANA registration policy [RFC5226].",
      "ja": "WebSocketフレーミングヘッダービットの割り当ては、「標準アクション」IANA登録ポリシー[RFC5226]に従います。"
    },
    {
      "indent": 0,
      "text": "12. Using the WebSocket Protocol from Other Specifications",
      "section_title": true,
      "ja": "12. 他の仕様のWebSocketプロトコルの使用"
    },
    {
      "indent": 3,
      "text": "The WebSocket Protocol is intended to be used by another specification to provide a generic mechanism for dynamic author-defined content, e.g., in a specification defining a scripted API.",
      "ja": "WebSocketプロトコルは、スクリプトAPIを定義する仕様など、動的な作成者定義コンテンツの一般的なメカニズムを提供するために別の仕様で使用されることを目的としています。"
    },
    {
      "indent": 3,
      "text": "Such a specification first needs to _Establish a WebSocket Connection_, providing that algorithm with:",
      "ja": "このような仕様では、最初に_WebSocket接続を確立する必要があります。"
    },
    {
      "indent": 3,
      "text": "o The destination, consisting of a /host/ and a /port/.",
      "ja": "o / host /と/ port /で構成される宛先。"
    },
    {
      "indent": 3,
      "text": "o A /resource name/, which allows for multiple services to be identified at one host and port.",
      "ja": "o /リソース名/。これにより、1つのホストとポートで複数のサービスを識別できます。"
    },
    {
      "indent": 3,
      "text": "o A /secure/ flag, which is true if the connection is to be encrypted and false otherwise.",
      "ja": "o / secure /フラグ。接続を暗号化する場合はtrue、それ以外の場合はfalse。"
    },
    {
      "indent": 3,
      "text": "o An ASCII serialization of an origin [RFC6454] that is being made responsible for the connection.",
      "ja": "o 接続を担当するオリジン[RFC6454]のASCIIシリアル化。"
    },
    {
      "indent": 3,
      "text": "o Optionally, a string identifying a protocol that is to be layered over the WebSocket connection.",
      "ja": "o オプションで、WebSocket接続を介して階層化されるプロトコルを識別する文字列。"
    },
    {
      "indent": 3,
      "text": "The /host/, /port/, /resource name/, and /secure/ flag are usually obtained from a URI using the steps to parse a WebSocket URI's components. These steps fail if the URI does not specify a WebSocket.",
      "ja": "/ host /、/ port /、/ resource name /、および/ secure /フラグは通常、WebSocket URIのコンポーネントを解析する手順を使用して、URIから取得されます。 URIがWebSocketを指定していない場合、これらの手順は失敗します。"
    },
    {
      "indent": 3,
      "text": "If at any time the connection is to be closed, then the specification needs to use the _Close the WebSocket Connection_ algorithm (Section 7.1.1).",
      "ja": "いつでも接続を閉じる場合、仕様では_Close the WebSocket Connection_アルゴリズムを使用する必要があります（セクション7.1.1）。"
    },
    {
      "indent": 3,
      "text": "Section 7.1.4 defines when _The WebSocket Connection is Closed_.",
      "ja": "セクション7.1.4は、_The WebSocket Connection is Closed_を定義します。"
    },
    {
      "indent": 3,
      "text": "While a connection is open, the specification will need to handle the cases when _A WebSocket Message Has Been Received_ (Section 6.2).",
      "ja": "接続が開いている間、仕様はWebSocketメッセージが受信された場合（セクション6.2）のケースを処理する必要があります。"
    },
    {
      "indent": 3,
      "text": "To send some data /data/ to an open connection, the specification needs to _Send a WebSocket Message_ (Section 6.1).",
      "ja": "開いている接続にデータ/ data /を送信するには、仕様で_WebSocketメッセージを送信する必要があります（セクション6.1）。"
    },
    {
      "indent": 0,
      "text": "13. Acknowledgements",
      "section_title": true,
      "ja": "13. 謝辞"
    },
    {
      "indent": 3,
      "text": "Special thanks are due to Ian Hickson, who was the original author and editor of this protocol. The initial design of this specification benefitted from the participation of many people in the WHATWG and WHATWG mailing list. Contributions to that specification are not tracked by section, but a list of all who contributed to that specification is given in the WHATWG HTML specification at http://whatwg.org/html5.",
      "ja": "このプロトコルの最初の作成者および編集者であるIan Hicksonに特に感謝します。この仕様の最初の設計は、WHATWGおよびWHATWGメーリングリストへの多くの人々の参加から利益を得ました。その仕様への貢献はセクションごとに追跡されませんが、その仕様に貢献したすべてのリストは、http：//whatwg.org/html5のWHATWG HTML仕様に記載されています。"
    },
    {
      "indent": 3,
      "text": "Special thanks also to John Tamplin for providing a significant amount of text for the \"Data Framing\" section of this specification.",
      "ja": "この仕様の「データフレーミング」セクションに大量のテキストを提供してくれたJohn Tamplinにも特に感謝します。"
    },
    {
      "indent": 3,
      "text": "Special thanks also to Adam Barth for providing a significant amount of text and background research for the \"Data Masking\" section of this specification.",
      "ja": "この仕様の「データマスキング」セクションに大量のテキストと背景の研究を提供してくれたAdam Barthにも感謝します。"
    },
    {
      "indent": 3,
      "text": "Special thanks to Lisa Dusseault for the Apps Area review (and for helping to start this work), Richard Barnes for the Gen-Art review, and Magnus Westerlund for the Transport Area Review. Special thanks to HYBI WG past and present WG chairs who tirelessly worked behind the scene to move this work toward completion: Joe Hildebrand, Salvatore Loreto, and Gabriel Montenegro. And last but not least, special thank you to the responsible Area Director Peter Saint-Andre.",
      "ja": "Apps Areaレビュー（およびこの作業の開始を支援してくれた）のLisa Dusseault、Gen-ArtレビューのRichard Barnes、およびTransport Area ReviewのMagnus Westerlundに特に感謝します。 HYBI WGの過去と現在のWG議長、Joe Hildebrand、Salvatore Loreto、Gabriel Montenegroがこの作業を完了に向けて尽力してくれたことに感謝します。そして最後に、責任あるエリアディレクターのピーターサンタンドレに感謝します。"
    },
    {
      "indent": 3,
      "text": "Thank you to the following people who participated in discussions on the HYBI WG mailing list and contributed ideas and/or provided detailed reviews (the list is likely to be incomplete): Greg Wilkins, John Tamplin, Willy Tarreau, Maciej Stachowiak, Jamie Lokier, Scott Ferguson, Bjoern Hoehrmann, Julian Reschke, Dave Cridland, Andy Green, Eric Rescorla, Inaki Baz Castillo, Martin Thomson, Roberto Peon, Patrick McManus, Zhong Yu, Bruce Atherton, Takeshi Yoshino, Martin J. Duerst, James Graham, Simon Pieters, Roy T. Fielding, Mykyta Yevstifeyev, Len Holgate, Paul Colomiets, Piotr Kulaga, Brian Raymor, Jan Koehler, Joonas Lehtolahti, Sylvain Hellegouarch, Stephen Farrell, Sean Turner, Pete Resnick, Peter Thorson, Joe Mason, John Fallows, and Alexander Philippou. Note that people listed above didn't necessarily endorse the end result of this work.",
      "ja": "HYBI WGメーリングリストでのディスカッションに参加し、アイデアを提供したり、詳細なレビューを提供した（リストは不完全である可能性が高い）次の人々に感謝します。GregWilkins、John Tamplin、Willy Tarreau、Maciej Stachowiak、Jamie Lokier、スコットファーガソン、Bjoern Hoehrmann、Julian Reschke、Dave Cridland、Andy Green、Eric Rescorla、Inaki Baz Castillo、Martin Thomson、Roberto Peon、Patrick McManus、Zhong Yu、Bruce Atherton、Takeshi Yoshino、Martin J. Duerst、James Graham、Simon Pieters 、Roy T. Fielding、Mykyta Yevstifeyev、Len Holgate、Paul Colomiets、Piotr Kulaga、Brian Raymor、Jan Koehler、Joonas Lehtolahti、Sylvain Hellegouarch、Stephen Farrell、Sean Turner、Pete Resnick、Peter Thorson、Joe Mason、John Fallows、Alexander Philippou。上記の人々は、この作業の最終結果を必ずしも承認したわけではないことに注意してください。"
    },
    {
      "indent": 0,
      "text": "14. References",
      "section_title": true,
      "ja": "14. 参考文献"
    },
    {
      "indent": 0,
      "text": "14.1. Normative References",
      "section_title": true,
      "ja": "14.1. 引用文献"
    },
    {
      "indent": 3,
      "text": "[ANSI.X3-4.1986] American National Standards Institute, \"Coded Character Set - 7-bit American Standard Code for Information Interchange\", ANSI X3.4, 1986.",
      "ja": "[ANSI.X3-4.1986] American National Standards Institute、「Coded Character Set-7-bit American Standard Code for Information Interchange」、ANSI X3.4、1986。"
    },
    {
      "indent": 3,
      "text": "[FIPS.180-3] National Institute of Standards and Technology, \"Secure Hash Standard\", FIPS PUB 180-3, October 2008, <http://csrc.nist.gov/publications/fips/fips180-3/ fips180-3_final.pdf>.",
      "ja": "[FIPS.180-3]米国国立標準技術研究所、「Secure Hash Standard」、FIPS PUB 180-3、2008年10月、<http://csrc.nist.gov/publications/fips/fips180-3/ fips180- 3_final.pdf>。"
    },
    {
      "indent": 3,
      "text": "[RFC1928] Leech, M., Ganis, M., Lee, Y., Kuris, R., Koblas, D., and L. Jones, \"SOCKS Protocol Version 5\", RFC 1928, March 1996.",
      "ja": "[RFC1928] Leech、M.、Ganis、M.、Lee、Y.、Kuris、R.、Koblas、D。、およびL. Jones、「SO​​CKS Protocol Version 5」、RFC 1928、1996年3月。"
    },
    {
      "indent": 3,
      "text": "[RFC2119] Bradner, S., \"Key words for use in RFCs to Indicate Requirement Levels\", BCP 14, RFC 2119, March 1997.",
      "ja": "[RFC2119] Bradner、S。、「要件レベルを示すためにRFCで使用するキーワード」、BCP 14、RFC 2119、1997年3月。"
    },
    {
      "indent": 3,
      "text": "[RFC2616] Fielding, R., Gettys, J., Mogul, J., Frystyk, H., Masinter, L., Leach, P., and T. Berners-Lee, \"Hypertext Transfer Protocol -- HTTP/1.1\", RFC 2616, June 1999.",
      "ja": "[RFC2616] Fielding、R.、Gettys、J.、Mogul、J.、Frystyk、H.、Masinter、L.、Leach、P。、およびT. Berners-Lee、「ハイパーテキスト転送プロトコル-HTTP / 1.1」 、RFC 2616、1999年6月。"
    },
    {
      "indent": 3,
      "text": "[RFC2817] Khare, R. and S. Lawrence, \"Upgrading to TLS Within HTTP/1.1\", RFC 2817, May 2000.",
      "ja": "[RFC2817] Khare、R。およびS. Lawrence、「HTTP / 1.1内のTLSへのアップグレード」、RFC 2817、2000年5月。"
    },
    {
      "indent": 3,
      "text": "[RFC2818] Rescorla, E., \"HTTP Over TLS\", RFC 2818, May 2000.",
      "ja": "[RFC2818] Rescorla、E。、「HTTP over TLS」、RFC 2818、2000年5月。"
    },
    {
      "indent": 3,
      "text": "[RFC3629] Yergeau, F., \"UTF-8, a transformation format of ISO 10646\", STD 63, RFC 3629, November 2003.",
      "ja": "[RFC3629] Yergeau、F。、「UTF-8、ISO 10646の変換フォーマット」、STD 63、RFC 3629、2003年11月。"
    },
    {
      "indent": 3,
      "text": "[RFC3864] Klyne, G., Nottingham, M., and J. Mogul, \"Registration Procedures for Message Header Fields\", BCP 90, RFC 3864, September 2004.",
      "ja": "[RFC3864]クライン、G。、ノッティンガム、M。、およびJ.モーグル、「メッセージヘッダーフィールドの登録手順」、BCP 90、RFC 3864、2004年9月。"
    },
    {
      "indent": 3,
      "text": "[RFC3986] Berners-Lee, T., Fielding, R., and L. Masinter, \"Uniform Resource Identifier (URI): Generic Syntax\", STD 66, RFC 3986, January 2005.",
      "ja": "[RFC3986] Berners-Lee、T.、Fielding、R。、およびL. Masinter、「Uniform Resource Identifier（URI）：Generic Syntax」、STD 66、RFC 3986、2005年1月。"
    },
    {
      "indent": 3,
      "text": "[RFC3987] Duerst, M. and M. Suignard, \"Internationalized Resource Identifiers (IRIs)\", RFC 3987, January 2005.",
      "ja": "[RFC3987] Duerst、M。およびM. Suignard、「Internationalized Resource Identifiers（IRIs）」、RFC 3987、2005年1月。"
    },
    {
      "indent": 3,
      "text": "[RFC4086] Eastlake, D., Schiller, J., and S. Crocker, \"Randomness Requirements for Security\", BCP 106, RFC 4086, June 2005.",
      "ja": "[RFC4086] Eastlake、D.、Schiller、J。、およびS. Crocker、「Randomness Requirements for Security」、BCP 106、RFC 4086、2005年6月。"
    },
    {
      "indent": 3,
      "text": "[RFC4648] Josefsson, S., \"The Base16, Base32, and Base64 Data Encodings\", RFC 4648, October 2006.",
      "ja": "[RFC4648] Josefsson、S。、「The Base16、Base32、およびBase64データエンコーディング」、RFC 4648、2006年10月。"
    },
    {
      "indent": 3,
      "text": "[RFC5226] Narten, T. and H. Alvestrand, \"Guidelines for Writing an IANA Considerations Section in RFCs\", BCP 26, RFC 5226, May 2008.",
      "ja": "[RFC5226] Narten、T。およびH. Alvestrand、「RFCでIANAの考慮事項セクションを作成するためのガイドライン」、BCP 26、RFC 5226、2008年5月。"
    },
    {
      "indent": 3,
      "text": "[RFC5234] Crocker, D. and P. Overell, \"Augmented BNF for Syntax Specifications: ABNF\", STD 68, RFC 5234, January 2008.",
      "ja": "[RFC5234] Crocker、D。およびP. Overell、「構文仕様の拡張BNF：ABNF」、STD 68、RFC 5234、2008年1月。"
    },
    {
      "indent": 3,
      "text": "[RFC5246] Dierks, T. and E. Rescorla, \"The Transport Layer Security (TLS) Protocol Version 1.2\", RFC 5246, August 2008.",
      "ja": "[RFC5246] Dierks、T。およびE. Rescorla、「The Transport Layer Security（TLS）Protocol Version 1.2」、RFC 5246、2008年8月。"
    },
    {
      "indent": 3,
      "text": "[RFC6066] Eastlake, D., \"Transport Layer Security (TLS) Extensions: Extension Definitions\", RFC 6066, January 2011.",
      "ja": "[RFC6066] Eastlake、D。、「Transport Layer Security（TLS）Extensions：Extension Definitions」、RFC 6066、2011年1月。"
    },
    {
      "indent": 3,
      "text": "[RFC6454] Barth, A., \"The Web Origin Concept\", RFC 6454, December 2011.",
      "ja": "[RFC6454]バース、A。、「The Web Origin Concept」、RFC 6454、2011年12月。"
    },
    {
      "indent": 0,
      "text": "14.2. Informative References",
      "section_title": true,
      "ja": "14.2. 参考引用"
    },
    {
      "indent": 3,
      "text": "[RFC4122] Leach, P., Mealling, M., and R. Salz, \"A Universally Unique IDentifier (UUID) URN Namespace\", RFC 4122, July 2005.",
      "ja": "[RFC4122] Leach、P.、Mealling、M。、およびR. Salz、「Universally Unique IDentifier（UUID）URN Namespace」、RFC 4122、2005年7月"
    },
    {
      "indent": 3,
      "text": "[RFC4270] Hoffman, P. and B. Schneier, \"Attacks on Cryptographic Hashes in Internet Protocols\", RFC 4270, November 2005.",
      "ja": "[RFC4270] Hoffman、P。およびB. Schneier、「インターネットプロトコルにおける暗号化ハッシュへの攻撃」、RFC 4270、2005年11月。"
    },
    {
      "indent": 3,
      "text": "[RFC5321] Klensin, J., \"Simple Mail Transfer Protocol\", RFC 5321, October 2008.",
      "ja": "[RFC5321] Klensin、J。、「Simple Mail Transfer Protocol」、RFC 5321、2008年10月。"
    },
    {
      "indent": 3,
      "text": "[RFC6202] Loreto, S., Saint-Andre, P., Salsano, S., and G. Wilkins, \"Known Issues and Best Practices for the Use of Long Polling and Streaming in Bidirectional HTTP\", RFC 6202, April 2011.",
      "ja": "[RFC6202] Loreto、S.、Saint-Andre、P.、Salsano、S。、およびG. Wilkins、「双方向HTTPでのロングポーリングとストリーミングの使用に関する既知の問題とベストプラクティス」、RFC 6202、2011年4月。"
    },
    {
      "indent": 3,
      "text": "[RFC6265] Barth, A., \"HTTP State Management Mechanism\", RFC 6265, April 2011.",
      "ja": "[RFC6265]バース、A。、「HTTP状態管理メカニズム」、RFC 6265、2011年4月。"
    },
    {
      "indent": 3,
      "text": "[TALKING] Huang, L-S., Chen, E., Barth, A., Rescorla, E., and C. Jackson, \"Talking to Yourself for Fun and Profit\", 2010, <http://w2spconf.com/2011/papers/websocket.pdf>.",
      "ja": "[TALKING] Huang、LS。、Chen、E.、Barth、A.、Rescorla、E.、and C. Jackson、 \"Talking Yourself to Yourself for Fun and Profit\"、2010、<http://w2spconf.com/2011 /papers/websocket.pdf>。"
    },
    {
      "indent": 3,
      "text": "[W3C.REC-wsc-ui-20100812] Roessler, T. and A. Saldhana, \"Web Security Context: User Interface Guidelines\", World Wide Web Consortium Recommendation REC-wsc-ui-20100812, August 2010, <http://www.w3.org/TR/2010/REC-wsc-ui-20100812/>.",
      "ja": "[W3C.REC-wsc-ui-20100812] Roessler、T。およびA. Saldhana、「Web Security Context：User Interface Guidelines」、World Wide Web Consortium Recommendation REC-wsc-ui-20100812、2010年8月、<http：/ /www.w3.org/TR/2010/REC-wsc-ui-20100812/>。"
    },
    {
      "indent": 14,
      "text": "Latest version available at <http://www.w3.org/TR/wsc-ui/>.",
      "ja": "<http://www.w3.org/TR/wsc-ui/>で入手可能な最新バージョン。"
    },
    {
      "indent": 3,
      "text": "[WSAPI] Hickson, I., \"The WebSocket API\", W3C Working Draft WD-websockets-20110929, September 2011, <http://www.w3.org/TR/2011/WD-websockets-20110929/>.",
      "ja": "[WSAPI] Hickson、I.、 \"The WebSocket API\"、W3C Working Draft WD-websockets-20110929、2011年9月、<http://www.w3.org/TR/2011/WD-websockets-20110929/>。"
    },
    {
      "indent": 14,
      "text": "Latest version available at <http://www.w3.org/TR/websockets/>.",
      "ja": "<http://www.w3.org/TR/websockets/>で入手可能な最新バージョン。"
    },
    {
      "indent": 3,
      "text": "[XMLHttpRequest] van Kesteren, A., Ed., \"XMLHttpRequest\", W3C Candidate Recommendation CR-XMLHttpRequest-20100803, August 2010, <http://www.w3.org/TR/2010/CR-XMLHttpRequest-20100803/>.",
      "ja": "[XMLHttpRequest] van Kesteren、A.、Ed。、 \"XMLHttpRequest\"、W3C Candidate Recommendation CR-XMLHttpRequest-20100803、August 2010、<http://www.w3.org/TR/2010/CR-XMLHttpRequest-20100803/> 。"
    },
    {
      "indent": 14,
      "text": "Latest version available at <http://www.w3.org/TR/XMLHttpRequest/>.",
      "ja": "<http://www.w3.org/TR/XMLHttpRequest/>で入手可能な最新バージョン。"
    },
    {
      "indent": 0,
      "text": "Authors' Addresses",
      "ja": "著者のアドレス"
    },
    {
      "indent": 3,
      "text": "Ian Fette Google, Inc.",
      "ja": "Ian Fette Google、Inc."
    },
    {
      "indent": 3,
      "text": "EMail: ifette+ietf@google.com\nURI:   http://www.ianfette.com/",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "Alexey Melnikov Isode Ltd. 5 Castle Business Village 36 Station Road Hampton, Middlesex TW12 2BX UK",
      "ja": "Alexey Melnikov Isode Ltd. 5 Castle Business Village 36 Station Road Hampton、Middlesex TW12 2BX UK"
    },
    {
      "indent": 3,
      "text": "EMail: Alexey.Melnikov@isode.com",
      "raw": true,
      "ja": ""
    }
  ]
}