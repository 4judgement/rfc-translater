{
  "title": {
    "text": "RFC 2460 - Internet Protocol, Version 6 (IPv6) Specification",
    "ja": "RFC 2460 - インターネットプロトコル、バージョン6（IPv6）仕様"
  },
  "number": 2460,
  "created_at": "2020-08-15 09:30:52.951248+09:00",
  "updated_by": "",
  "contents": [
    {
      "indent": 0,
      "text": "Network Working Group                                         S. Deering\nRequest for Comments: 2460                                         Cisco\nObsoletes: 1883                                                R. Hinden\nCategory: Standards Track                                          Nokia\n                                                           December 1998",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 18,
      "text": "Internet Protocol, Version 6 (IPv6) Specification",
      "ja": "インターネットプロトコル、バージョン6（IPv6）仕様"
    },
    {
      "indent": 0,
      "text": "Status of this Memo",
      "ja": "本文書の状態"
    },
    {
      "indent": 3,
      "text": "This document specifies an Internet standards track protocol for the Internet community, and requests discussion and suggestions for improvements. Please refer to the current edition of the \"Internet Official Protocol Standards\" (STD 1) for the standardization state and status of this protocol. Distribution of this memo is unlimited.",
      "ja": "このドキュメントは、インターネットコミュニティのインターネット標準トラックプロトコルを指定し、改善のための議論と提案を要求します。このプロトコルの標準化状態とステータスについては、「インターネット公式プロトコル標準」（STD 1）の最新版を参照してください。このメモの配布は無制限です。"
    },
    {
      "indent": 0,
      "text": "Copyright Notice",
      "ja": "著作権表示"
    },
    {
      "indent": 3,
      "text": "Copyright (C) The Internet Society (1998). All Rights Reserved.",
      "ja": "Copyright（C）The Internet Society（1998）。全著作権所有。"
    },
    {
      "indent": 0,
      "text": "Abstract",
      "ja": "概要"
    },
    {
      "indent": 3,
      "text": "This document specifies version 6 of the Internet Protocol (IPv6), also sometimes referred to as IP Next Generation or IPng.",
      "ja": "このドキュメントでは、インターネットプロトコル（IPv6）のバージョン6を指定します。これは、IP Next GenerationまたはIPngとも呼ばれます。"
    },
    {
      "indent": 0,
      "text": "Table of Contents",
      "ja": "目次"
    },
    {
      "indent": 3,
      "text": "1. Introduction..................................................2\n2. Terminology...................................................3\n3. IPv6 Header Format............................................4\n4. IPv6 Extension Headers........................................6\n    4.1 Extension Header Order...................................7\n    4.2 Options..................................................9\n    4.3 Hop-by-Hop Options Header...............................11\n    4.4 Routing Header..........................................12\n    4.5 Fragment Header.........................................18\n    4.6 Destination Options Header..............................23\n    4.7 No Next Header..........................................24\n5. Packet Size Issues...........................................24\n6. Flow Labels..................................................25\n7. Traffic Classes..............................................25\n8. Upper-Layer Protocol Issues..................................27\n    8.1 Upper-Layer Checksums...................................27\n    8.2 Maximum Packet Lifetime.................................28\n    8.3 Maximum Upper-Layer Payload Size........................28\n    8.4 Responding to Packets Carrying Routing Headers..........29",
      "raw": true,
      "toc": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "Appendix A. Semantics and Usage of the Flow Label Field.........30\nAppendix B. Formatting Guidelines for Options...................32\nSecurity Considerations.........................................35\nAcknowledgments.................................................35\nAuthors' Addresses..............................................35\nReferences......................................................35\nChanges Since RFC-1883..........................................36\nFull Copyright Statement........................................39",
      "raw": true,
      "toc": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "1. Introduction",
      "section_title": true,
      "ja": "1. はじめに"
    },
    {
      "indent": 3,
      "text": "IP version 6 (IPv6) is a new version of the Internet Protocol, designed as the successor to IP version 4 (IPv4) [RFC-791]. The changes from IPv4 to IPv6 fall primarily into the following categories:",
      "ja": "IPバージョン6（IPv6）は、IPバージョン4（IPv4）[RFC-791]の後継として設計されたインターネットプロトコルの新しいバージョンです。 IPv4からIPv6への変更は、主に次のカテゴリに分類されます。"
    },
    {
      "indent": 6,
      "text": "o Expanded Addressing Capabilities",
      "ja": "o アドレッシング機能の拡張"
    },
    {
      "indent": 9,
      "text": "IPv6 increases the IP address size from 32 bits to 128 bits, to support more levels of addressing hierarchy, a much greater number of addressable nodes, and simpler auto-configuration of addresses. The scalability of multicast routing is improved by adding a \"scope\" field to multicast addresses. And a new type of address called an \"anycast address\" is defined, used to send a packet to any one of a group of nodes.",
      "ja": "IPv6は、IPアドレスのサイズを32ビットから128ビットに増やし、より多くのレベルのアドレス階層、より多くのアドレス可能なノード、およびアドレスのより簡単な自動構成をサポートします。マルチキャストアドレスに「スコープ」フィールドを追加することにより、マルチキャストルーティングのスケーラビリティが向上します。また、「エニーキャストアドレス」と呼ばれる新しいタイプのアドレスが定義され、ノードのグループのいずれかにパケットを送信するために使用されます。"
    },
    {
      "indent": 6,
      "text": "o Header Format Simplification",
      "ja": "o ヘッダー形式の簡略化"
    },
    {
      "indent": 9,
      "text": "Some IPv4 header fields have been dropped or made optional, to reduce the common-case processing cost of packet handling and to limit the bandwidth cost of the IPv6 header.",
      "ja": "パケット処理の一般的なケースの処理コストを削減し、IPv6ヘッダーの帯域幅コストを制限するために、一部のIPv4ヘッダーフィールドは削除またはオプションになっています。"
    },
    {
      "indent": 6,
      "text": "o Improved Support for Extensions and Options",
      "ja": "o 拡張機能とオプションのサポートの向上"
    },
    {
      "indent": 9,
      "text": "Changes in the way IP header options are encoded allows for more efficient forwarding, less stringent limits on the length of options, and greater flexibility for introducing new options in the future.",
      "ja": "IPヘッダーオプションのエンコード方法の変更により、転送の効率が向上し、オプションの長さに対する制限が緩和され、将来的に新しいオプションを導入する際の柔軟性が高まります。"
    },
    {
      "indent": 6,
      "text": "o Flow Labeling Capability",
      "ja": "o フローのラベル付け機能"
    },
    {
      "indent": 9,
      "text": "A new capability is added to enable the labeling of packets belonging to particular traffic \"flows\" for which the sender requests special handling, such as non-default quality of service or \"real-time\" service.",
      "ja": "新しい機能が追加され、送信者がデフォルト以外のサービス品質や「リアルタイム」サービスなどの特別な処理を要求する特定のトラフィック「フロー」に属するパケットのラベル付けが可能になります。"
    },
    {
      "indent": 6,
      "text": "o Authentication and Privacy Capabilities",
      "ja": "o 認証およびプライバシー機能"
    },
    {
      "indent": 9,
      "text": "Extensions to support authentication, data integrity, and (optional) data confidentiality are specified for IPv6.",
      "ja": "IPv6では、認証、データ整合性、および（オプションの）データ機密性をサポートする拡張機能が指定されています。"
    },
    {
      "indent": 3,
      "text": "This document specifies the basic IPv6 header and the initially-defined IPv6 extension headers and options. It also discusses packet size issues, the semantics of flow labels and traffic classes, and the effects of IPv6 on upper-layer protocols. The format and semantics of IPv6 addresses are specified separately in [ADDRARCH]. The IPv6 version of ICMP, which all IPv6 implementations are required to include, is specified in [ICMPv6].",
      "ja": "このドキュメントでは、基本的なIPv6ヘッダーと、最初に定義されたIPv6拡張ヘッダーとオプションを指定します。また、パケットサイズの問題、フローラベルとトラフィッククラスのセマンティクス、および上位層プロトコルに対するIPv6の影響についても説明します。 IPv6アドレスの形式とセマンティクスは、[ADDRARCH]で個別に指定されています。すべてのIPv6実装に含める必要があるICMPのIPv6バージョンは、[ICMPv6]で指定されています。"
    },
    {
      "indent": 0,
      "text": "2. Terminology",
      "section_title": true,
      "ja": "2. 用語"
    },
    {
      "indent": 3,
      "text": "node - a device that implements IPv6.",
      "ja": "ノード-IPv6を実装するデバイス。"
    },
    {
      "indent": 3,
      "text": "router - a node that forwards IPv6 packets not explicitly addressed to itself. [See Note below].",
      "ja": "ルーター-明示的にアドレス指定されていないIPv6パケットを転送するノード。 [下の注を参照]。"
    },
    {
      "indent": 3,
      "text": "host - any node that is not a router. [See Note below].",
      "ja": "ホスト-ルーターではないノード。 [下の注を参照]。"
    },
    {
      "indent": 3,
      "text": "upper layer - a protocol layer immediately above IPv6. Examples are transport protocols such as TCP and UDP, control protocols such as ICMP, routing protocols such as OSPF, and internet or lower-layer protocols being \"tunneled\" over (i.e., encapsulated in) IPv6 such as IPX, AppleTalk, or IPv6 itself.",
      "ja": "上位層-IPv6のすぐ上のプロトコル層。例としては、TCPやUDPなどのトランスポートプロトコル、ICMPなどの制御プロトコル、OSPFなどのルーティングプロトコル、IPX、AppleTalk、IPv6自体などのIPv6で「トンネリング」される（つまりカプセル化される）インターネットまたは下位層プロトコルがあります。 。"
    },
    {
      "indent": 3,
      "text": "link - a communication facility or medium over which nodes can communicate at the link layer, i.e., the layer immediately below IPv6. Examples are Ethernets (simple or bridged); PPP links; X.25, Frame Relay, or ATM networks; and internet (or higher) layer \"tunnels\", such as tunnels over IPv4 or IPv6 itself.",
      "ja": "リンク-ノードがリンク層、つまりIPv6のすぐ下の層で通信できる通信機能または媒体。例はイーサネット（シンプルまたはブリッジ）です。 PPPリンク。 X.25、フレームリレー、またはATMネットワーク。 IPv4またはIPv6自体のトンネルなどのインターネット（またはそれ以上の）層の「トンネル」。"
    },
    {
      "indent": 3,
      "text": "neighbors - nodes attached to the same link.",
      "ja": "ネイバー-同じリンクに接続されているノード。"
    },
    {
      "indent": 3,
      "text": "interface - a node's attachment to a link.",
      "ja": "インターフェース-リンクへのノードのアタッチメント。"
    },
    {
      "indent": 3,
      "text": "address - an IPv6-layer identifier for an interface or a set of interfaces.",
      "ja": "address-インターフェースまたはインターフェースのセットのIPv6レイヤー識別子。"
    },
    {
      "indent": 3,
      "text": "packet - an IPv6 header plus payload.",
      "ja": "パケット-IPv6ヘッダーとペイロード。"
    },
    {
      "indent": 3,
      "text": "link MTU - the maximum transmission unit, i.e., maximum packet size in octets, that can be conveyed over a link.",
      "ja": "リンクMTU-リンクを介して伝送できる最大伝送単位、つまりオクテット単位の最大パケットサイズ。"
    },
    {
      "indent": 3,
      "text": "path MTU - the minimum link MTU of all the links in a path between a source node and a destination node.",
      "ja": "パスMTU-ソースノードと宛先ノード間のパス内のすべてのリンクの最小リンクMTU。"
    },
    {
      "indent": 3,
      "text": "Note: it is possible, though unusual, for a device with multiple interfaces to be configured to forward non-self-destined packets arriving from some set (fewer than all) of its interfaces, and to discard non-self-destined packets arriving from its other interfaces. Such a device must obey the protocol requirements for routers when receiving packets from, and interacting with neighbors over, the former (forwarding) interfaces. It must obey the protocol requirements for hosts when receiving packets from, and interacting with neighbors over, the latter (non-forwarding) interfaces.",
      "ja": "注：異常ではありますが、複数のインターフェースを備えたデバイスが、そのインターフェースのいくつかのセット（すべてではない）から到着する非自己宛てのパケットを転送し、から到着する非自己宛てのパケットを破棄するように構成されている可能性がありますその他のインターフェース。このようなデバイスは、以前の（転送）インターフェイスからパケットを受信し、以前の（転送）インターフェイスを介してネイバーと対話するときに、ルーターのプロトコル要件に従う必要があります。後者の（非転送）インターフェースからパケットを受信し、そのインターフェースを介してネイバーと対話する場合、ホストのプロトコル要件に従う必要があります。"
    },
    {
      "indent": 0,
      "text": "3. IPv6 Header Format",
      "section_title": true,
      "ja": "3. IPv6ヘッダー形式"
    },
    {
      "indent": 3,
      "text": "+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|Version| Traffic Class |           Flow Label                  |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|         Payload Length        |  Next Header  |   Hop Limit   |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                                                               |\n+                                                               +\n|                                                               |\n+                         Source Address                        +\n|                                                               |\n+                                                               +\n|                                                               |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                                                               |\n+                                                               +\n|                                                               |\n+                      Destination Address                      +\n|                                                               |\n+                                                               +\n|                                                               |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "Version 4-bit Internet Protocol version number = 6.",
      "ja": "バージョン4ビットのインターネットプロトコルバージョン番号= 6。"
    },
    {
      "indent": 3,
      "text": "Traffic Class 8-bit traffic class field. See section 7.",
      "ja": "トラフィッククラス8ビットトラフィッククラスフィールド。セクション7を参照してください。"
    },
    {
      "indent": 3,
      "text": "Flow Label 20-bit flow label. See section 6.",
      "ja": "フローラベル20ビットのフローラベル。セクション6を参照してください。"
    },
    {
      "indent": 3,
      "text": "Payload Length 16-bit unsigned integer. Length of the IPv6 payload, i.e., the rest of the packet following this IPv6 header, in octets. (Note that any extension headers [section 4] present are considered part of the payload, i.e., included in the length count.)",
      "ja": "ペイロード長16ビット符号なし整数。 IPv6ペイロードの長さ、つまり、このIPv6ヘッダーに続くパケットの残りの部分（オクテット単位）。 （存在するすべての拡張ヘッダー[セクション4]はペイロードの一部と見なされることに注意してください。つまり、長さのカウントに含まれます。）"
    },
    {
      "indent": 3,
      "text": "Next Header 8-bit selector. Identifies the type of header immediately following the IPv6 header. Uses the same values as the IPv4 Protocol field [RFC-1700 et seq.].",
      "ja": "次のヘッダー8ビットセレクター。 IPv6ヘッダーの直後に続くヘッダーのタイプを識別します。 IPv4プロトコルフィールドと同じ値を使用します[RFC-1700 et seq。]。"
    },
    {
      "indent": 3,
      "text": "Hop Limit 8-bit unsigned integer. Decremented by 1 by each node that forwards the packet. The packet is discarded if Hop Limit is decremented to zero.",
      "ja": "ホップ制限8ビットの符号なし整数。パケットを転送するノードごとに1ずつ減少します。ホップ制限がゼロにデクリメントされると、パケットは破棄されます。"
    },
    {
      "indent": 3,
      "text": "Source Address 128-bit address of the originator of the packet. See [ADDRARCH].",
      "ja": "送信元アドレスパケットの発信元の128ビットアドレス。 [ADDRARCH]を参照してください。"
    },
    {
      "indent": 3,
      "text": "Destination Address 128-bit address of the intended recipient of the packet (possibly not the ultimate recipient, if a Routing header is present). See [ADDRARCH] and section 4.4.",
      "ja": "宛先アドレスパケットの目的の受信者の128ビットアドレス（ルーティングヘッダーが存在する場合、最終的な受信者ではない可能性があります）。 [ADDRARCH]とセクション4.4を参照してください。"
    },
    {
      "indent": 0,
      "text": "4. IPv6 Extension Headers",
      "section_title": true,
      "ja": "4. IPv6拡張ヘッダー"
    },
    {
      "indent": 3,
      "text": "In IPv6, optional internet-layer information is encoded in separate headers that may be placed between the IPv6 header and the upper-layer header in a packet. There are a small number of such extension headers, each identified by a distinct Next Header value. As illustrated in these examples, an IPv6 packet may carry zero, one, or more extension headers, each identified by the Next Header field of the preceding header:",
      "ja": "IPv6では、オプションのインターネット層情報は、IPv6ヘッダーとパケットの上位層ヘッダーの間に配置できる個別のヘッダーにエンコードされます。少数のそのような拡張ヘッダーがあり、それぞれが別個の次ヘッダー値によって識別されます。これらの例に示されているように、IPv6パケットは0、1、またはそれ以上の拡張ヘッダーを運ぶことができ、それぞれが前のヘッダーの次のヘッダーフィールドによって識別されます。"
    },
    {
      "indent": 3,
      "text": "+---------------+------------------------\n|  IPv6 header  | TCP header + data\n|               |\n| Next Header = |\n|      TCP      |\n+---------------+------------------------",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "+---------------+----------------+------------------------\n|  IPv6 header  | Routing header | TCP header + data\n|               |                |\n| Next Header = |  Next Header = |\n|    Routing    |      TCP       |\n+---------------+----------------+------------------------",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "+---------------+----------------+-----------------+-----------------\n|  IPv6 header  | Routing header | Fragment header | fragment of TCP\n|               |                |                 |  header + data\n| Next Header = |  Next Header = |  Next Header =  |\n|    Routing    |    Fragment    |       TCP       |\n+---------------+----------------+-----------------+-----------------",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "With one exception, extension headers are not examined or processed by any node along a packet's delivery path, until the packet reaches the node (or each of the set of nodes, in the case of multicast) identified in the Destination Address field of the IPv6 header. There, normal demultiplexing on the Next Header field of the IPv6 header invokes the module to process the first extension header, or the upper-layer header if no extension header is present. The contents and semantics of each extension header determine whether or not to proceed to the next header. Therefore, extension headers must be processed strictly in the order they appear in the packet; a receiver must not, for example, scan through a packet looking for a particular kind of extension header and process that header prior to processing all preceding ones.",
      "ja": "1つの例外を除いて、拡張ヘッダーは、パケットがIPv6の宛先アドレスフィールドで識別されるノード（またはマルチキャストの場合はノードの各セット）に到達するまで、パケットの配信パスに沿ったノードによって検査または処理されません。ヘッダ。そこでは、IPv6ヘッダーのNext Headerフィールドでの通常の逆多重化により、最初の拡張ヘッダー、または拡張ヘッダーが存在しない場合は上位層ヘッダーを処理するモジュールが呼び出されます。各拡張ヘッダーの内容とセマンティクスにより、次のヘッダーに進むかどうかが決まります。したがって、拡張ヘッダーは、パケットに表示される順序で厳密に処理する必要があります。たとえば、受信者はパケットをスキャンして特定の種類の拡張ヘッダーを探し、そのヘッダーを処理してから、先行するすべての拡張ヘッダーを処理することはできません。"
    },
    {
      "indent": 3,
      "text": "The exception referred to in the preceding paragraph is the Hop-by-Hop Options header, which carries information that must be examined and processed by every node along a packet's delivery path, including the source and destination nodes. The Hop-by-Hop Options header, when present, must immediately follow the IPv6 header. Its presence is indicated by the value zero in the Next Header field of the IPv6 header.",
      "ja": "前の段落で言及した例外は、ホップバイホップオプションヘッダーです。このヘッダーには、送信元ノードと宛先ノードを含む、パケットの配信パスに沿ったすべてのノードで検査および処理する必要がある情報が含まれています。ホップバイホップオプションヘッダーは、存在する場合、IPv6ヘッダーの直後に続く必要があります。その存在は、IPv6ヘッダーの次のヘッダーフィールドの値0で示されます。"
    },
    {
      "indent": 3,
      "text": "If, as a result of processing a header, a node is required to proceed to the next header but the Next Header value in the current header is unrecognized by the node, it should discard the packet and send an ICMP Parameter Problem message to the source of the packet, with an ICMP Code value of 1 (\"unrecognized Next Header type encountered\") and the ICMP Pointer field containing the offset of the unrecognized value within the original packet. The same action should be taken if a node encounters a Next Header value of zero in any header other than an IPv6 header.",
      "ja": "ヘッダーを処理した結果、ノードが次のヘッダーに進む必要があるが、現在のヘッダーの次のヘッダー値がノードによって認識されない場合、パケットを破棄し、ソースにICMPパラメータ問題メッセージを送信する必要があります。パケットのICMPコード値1（「認識されない次のヘッダータイプが検出されました」）と、元のパケット内の認識されない値のオフセットを含むICMPポインターフィールド。ノードがIPv6ヘッダー以外のヘッダーでゼロの次ヘッダー値を検出した場合も、同じアクションを実行する必要があります。"
    },
    {
      "indent": 3,
      "text": "Each extension header is an integer multiple of 8 octets long, in order to retain 8-octet alignment for subsequent headers. Multi-octet fields within each extension header are aligned on their natural boundaries, i.e., fields of width n octets are placed at an integer multiple of n octets from the start of the header, for n = 1, 2, 4, or 8.",
      "ja": "各拡張ヘッダーは、8オクテットの長さの整数倍で、後続のヘッダーの8オクテットアライメントを保持します。各拡張ヘッダー内のマルチオクテットフィールドは、それらの自然な境界に揃えられます。つまり、幅nオクテットのフィールドは、ヘッダーの先頭からnオクテットの整数倍に配置されます（n = 1、2、4、または8）。"
    },
    {
      "indent": 3,
      "text": "A full implementation of IPv6 includes implementation of the following extension headers:",
      "ja": "IPv6の完全な実装には、次の拡張ヘッダーの実装が含まれます。"
    },
    {
      "indent": 11,
      "text": "Hop-by-Hop Options Routing (Type 0) Fragment Destination Options Authentication Encapsulating Security Payload",
      "ja": "ホップバイホップオプションルーティング（タイプ0）フラグメント宛先オプション認証カプセル化セキュリティペイロード"
    },
    {
      "indent": 3,
      "text": "The first four are specified in this document; the last two are specified in [RFC-2402] and [RFC-2406], respectively.",
      "ja": "最初の4つはこのドキュメントで指定されています。最後の2つは、それぞれ[RFC-2402]および[RFC-2406]で指定されています。"
    },
    {
      "indent": 0,
      "text": "4.1 Extension Header Order",
      "section_title": true,
      "ja": "4.1 拡張ヘッダーの順序"
    },
    {
      "indent": 3,
      "text": "When more than one extension header is used in the same packet, it is recommended that those headers appear in the following order:",
      "ja": "同じパケットで複数の拡張ヘッダーが使用されている場合、それらのヘッダーを次の順序で表示することをお勧めします。"
    },
    {
      "indent": 11,
      "text": "IPv6 header Hop-by-Hop Options header Destination Options header (note 1) Routing header Fragment header Authentication header (note 2) Encapsulating Security Payload header (note 2) Destination Options header (note 3) upper-layer header",
      "ja": "IPv6ヘッダーホップバイホップオプションヘッダー宛先オプションヘッダー（注1）ルーティングヘッダーフラグメントヘッダー認証ヘッダー（注2）カプセル化セキュリティペイロードヘッダー（注2）宛先オプションヘッダー（注3）上位層ヘッダー"
    },
    {
      "indent": 11,
      "text": "note 1: for options to be processed by the first destination that appears in the IPv6 Destination Address field plus subsequent destinations listed in the Routing header.",
      "ja": "注1：IPv6宛先アドレスフィールドに表示される最初の宛先とルーティングヘッダーにリストされている後続の宛先によって処理されるオプションの場合。"
    },
    {
      "indent": 11,
      "text": "note 2: additional recommendations regarding the relative order of the Authentication and Encapsulating Security Payload headers are given in [RFC-2406].",
      "ja": "注2：認証およびカプセル化セキュリティペイロードヘッダーの相対的な順序に関する追加の推奨事項は、[RFC-2406]で提供されています。"
    },
    {
      "indent": 11,
      "text": "note 3: for options to be processed only by the final destination of the packet.",
      "ja": "注3：パケットの最終宛先によってのみ処理されるオプションの場合。"
    },
    {
      "indent": 3,
      "text": "Each extension header should occur at most once, except for the Destination Options header which should occur at most twice (once before a Routing header and once before the upper-layer header).",
      "ja": "各拡張ヘッダーは、最大2回発生する必要がある宛先オプションヘッダーを除いて、最大1回発生する必要があります（ルーティングヘッダーの前に1回、上位層ヘッダーの前に1回）。"
    },
    {
      "indent": 3,
      "text": "If the upper-layer header is another IPv6 header (in the case of IPv6 being tunneled over or encapsulated in IPv6), it may be followed by its own extension headers, which are separately subject to the same ordering recommendations.",
      "ja": "上位層ヘッダーが別のIPv6ヘッダーである場合（IPv6がトンネリングまたはIPv6でカプセル化されている場合）、その後に独自の拡張ヘッダーが続く場合があります。これらのヘッダーは、同じ順序で推奨されます。"
    },
    {
      "indent": 3,
      "text": "If and when other extension headers are defined, their ordering constraints relative to the above listed headers must be specified.",
      "ja": "他の拡張ヘッダーが定義されている場合は、上記のヘッダーに関連する順序の制約を指定する必要があります。"
    },
    {
      "indent": 3,
      "text": "IPv6 nodes must accept and attempt to process extension headers in any order and occurring any number of times in the same packet, except for the Hop-by-Hop Options header which is restricted to appear immediately after an IPv6 header only. Nonetheless, it is strongly advised that sources of IPv6 packets adhere to the above recommended order until and unless subsequent specifications revise that recommendation.",
      "ja": "IPv6ノードは、IPv6ヘッダーの直後にのみ表示されるように制限されているホップバイホップオプションヘッダーを除き、同じパケットで任意の順序で何回でも拡張ヘッダーを受け入れて処理する必要があります。それでも、IPv6パケットのソースは、以降の仕様でその推奨事項が改訂されるまで、また推奨されない限り、上記の推奨順序に従うことを強くお勧めします。"
    },
    {
      "indent": 0,
      "text": "4.2 Options",
      "section_title": true,
      "ja": "4.2 オプション"
    },
    {
      "indent": 3,
      "text": "Two of the currently-defined extension headers -- the Hop-by-Hop Options header and the Destination Options header -- carry a variable number of type-length-value (TLV) encoded \"options\", of the following format:",
      "ja": "現在定義されている2つの拡張ヘッダー（ホップバイホップオプションヘッダーと宛先オプションヘッダー）には、次の形式の可変長のType-Length-Value（TLV）でエンコードされた「オプション」が含まれています。"
    },
    {
      "indent": 6,
      "text": "+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+- - - - - - - - -\n|  Option Type  |  Opt Data Len |  Option Data\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+- - - - - - - - -",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 6,
      "text": "Option Type 8-bit identifier of the type of option.",
      "ja": "Option Typeオプションのタイプの8ビットの識別子。"
    },
    {
      "indent": 6,
      "text": "Opt Data Len 8-bit unsigned integer. Length of the Option Data field of this option, in octets.",
      "ja": "Opt Data Len 8ビット符号なし整数。このオプションのオプションデータフィールドの長さ（オクテット単位）。"
    },
    {
      "indent": 6,
      "text": "Option Data Variable-length field. Option-Type-specific data.",
      "ja": "オプションデータ可変長フィールド。オプションタイプ固有のデータ。"
    },
    {
      "indent": 3,
      "text": "The sequence of options within a header must be processed strictly in the order they appear in the header; a receiver must not, for example, scan through the header looking for a particular kind of option and process that option prior to processing all preceding ones.",
      "ja": "ヘッダー内のオプションのシーケンスは、ヘッダーに表示される順序で厳密に処理する必要があります。たとえば、受信者はヘッダーをスキャンして特定の種類のオプションを探し、そのオプションを処理してから、前のオプションをすべて処理してはなりません。"
    },
    {
      "indent": 3,
      "text": "The Option Type identifiers are internally encoded such that their highest-order two bits specify the action that must be taken if the processing IPv6 node does not recognize the Option Type:",
      "ja": "オプションタイプ識別子は内部でエンコードされているため、処理中のIPv6ノードがオプションタイプを認識しない場合に実行する必要があるアクションは、最上位の2ビットで指定されます。"
    },
    {
      "indent": 6,
      "text": "00 - skip over this option and continue processing the header.",
      "ja": "00-このオプションをスキップして、ヘッダーの処理を続行します。"
    },
    {
      "indent": 6,
      "text": "01 - discard the packet.",
      "ja": "01-パケットを破棄します。"
    },
    {
      "indent": 6,
      "text": "10 - discard the packet and, regardless of whether or not the packet's Destination Address was a multicast address, send an ICMP Parameter Problem, Code 2, message to the packet's Source Address, pointing to the unrecognized Option Type.",
      "ja": "10-パケットを破棄し、パケットの宛先アドレスがマルチキャストアドレスであったかどうかに関係なく、ICMPパラメータ問題、コード2、メッセージをパケットの送信元アドレスに送信し、認識されないオプションタイプを示します。"
    },
    {
      "indent": 6,
      "text": "11 - discard the packet and, only if the packet's Destination Address was not a multicast address, send an ICMP Parameter Problem, Code 2, message to the packet's Source Address, pointing to the unrecognized Option Type.",
      "ja": "11-パケットを破棄し、パケットの宛先アドレスがマルチキャストアドレスでない場合にのみ、認識されないオプションタイプを指すICMPパラメータ問題、コード2メッセージをパケットの送信元アドレスに送信します。"
    },
    {
      "indent": 3,
      "text": "The third-highest-order bit of the Option Type specifies whether or not the Option Data of that option can change en-route to the packet's final destination. When an Authentication header is present in the packet, for any option whose data may change en-route, its entire Option Data field must be treated as zero-valued octets when computing or verifying the packet's authenticating value.",
      "ja": "オプションタイプの3番目に上位のビットは、そのオプションのオプションデータが途中でパケットの最終宛先に変更できるかどうかを指定します。パケットに認証ヘッダーが存在する場合、途中でデータが変更される可能性のあるオプションについては、パケットの認証値を計算または検証するときに、そのオプションデータフィールド全体をゼロ値のオクテットとして扱う必要があります。"
    },
    {
      "indent": 6,
      "text": "0 - Option Data does not change en-route",
      "ja": "0-オプションデータは途中で変更されません"
    },
    {
      "indent": 6,
      "text": "1 - Option Data may change en-route",
      "ja": "1-オプションデータは途中で変更される場合があります"
    },
    {
      "indent": 3,
      "text": "The three high-order bits described above are to be treated as part of the Option Type, not independent of the Option Type. That is, a particular option is identified by a full 8-bit Option Type, not just the low-order 5 bits of an Option Type.",
      "ja": "上記の上位3ビットは、オプションタイプとは関係なく、オプションタイプの一部として扱われます。つまり、特定のオプションは、オプションタイプの下位5ビットだけでなく、完全な8ビットオプションタイプによって識別されます。"
    },
    {
      "indent": 3,
      "text": "The same Option Type numbering space is used for both the Hop-by-Hop Options header and the Destination Options header. However, the specification of a particular option may restrict its use to only one of those two headers.",
      "ja": "ホップバイホップオプションヘッダーと宛先オプションヘッダーの両方に同じオプションタイプ番号スペースが使用されます。ただし、特定のオプションを指定すると、その使用がこれら2つのヘッダーの1つだけに制限される場合があります。"
    },
    {
      "indent": 3,
      "text": "Individual options may have specific alignment requirements, to ensure that multi-octet values within Option Data fields fall on natural boundaries. The alignment requirement of an option is specified using the notation xn+y, meaning the Option Type must appear at an integer multiple of x octets from the start of the header, plus y octets. For example:",
      "ja": "個々のオプションには、オプションデータフィールド内のマルチオクテット値が自然な境界に収まるように、特定の配置要件がある場合があります。オプションの配置要件は、表記xn + yを使用して指定されます。つまり、オプションタイプは、ヘッダーの先頭からxオクテットの整数倍とyオクテットに出現する必要があります。例えば："
    },
    {
      "indent": 6,
      "text": "2n means any 2-octet offset from the start of the header. 8n+2 means any 8-octet offset from the start of the header, plus 2 octets.",
      "ja": "2nは、ヘッダーの先頭からの2オクテットオフセットを意味します。 8n + 2は、ヘッダーの先頭からの8オクテットオフセットに2オクテットを加えたものを意味します。"
    },
    {
      "indent": 3,
      "text": "There are two padding options which are used when necessary to align subsequent options and to pad out the containing header to a multiple of 8 octets in length. These padding options must be recognized by all IPv6 implementations:",
      "ja": "2つのパディングオプションがあり、必要に応じて後続のオプションを調整し、含まれるヘッダーを8オクテットの倍数の長さにパディングします。これらのパディングオプションは、すべてのIPv6実装で認識される必要があります。"
    },
    {
      "indent": 3,
      "text": "Pad1 option (alignment requirement: none)",
      "ja": "Pad1オプション（配置要件：なし）"
    },
    {
      "indent": 6,
      "text": "+-+-+-+-+-+-+-+-+\n|       0       |\n+-+-+-+-+-+-+-+-+",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 6,
      "text": "NOTE! the format of the Pad1 option is a special case -- it does not have length and value fields.",
      "ja": "注意！ Pad1オプションのフォーマットは特殊なケースです-長さフィールドと値フィールドはありません。"
    },
    {
      "indent": 6,
      "text": "The Pad1 option is used to insert one octet of padding into the Options area of a header. If more than one octet of padding is required, the PadN option, described next, should be used, rather than multiple Pad1 options.",
      "ja": "Pad1オプションは、ヘッダーのオプション領域に1オクテットのパディングを挿入するために使用されます。複数のオクテットのパディングが必要な場合は、複数のPad1オプションではなく、次に説明するPadNオプションを使用する必要があります。"
    },
    {
      "indent": 3,
      "text": "PadN option (alignment requirement: none)",
      "ja": "PadNオプション（配置要件：なし）"
    },
    {
      "indent": 6,
      "text": "+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+- - - - - - - - -\n|       1       |  Opt Data Len |  Option Data\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+- - - - - - - - -",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 6,
      "text": "The PadN option is used to insert two or more octets of padding into the Options area of a header. For N octets of padding, the Opt Data Len field contains the value N-2, and the Option Data consists of N-2 zero-valued octets.",
      "ja": "PadNオプションは、ヘッダーのオプション領域に2オクテット以上のパディングを挿入するために使用されます。 Nオクテットのパディングの場合、Opt Data Lenフィールドには値N-2が含まれ、Option DataにはN-2のゼロ値オクテットが含まれます。"
    },
    {
      "indent": 3,
      "text": "Appendix B contains formatting guidelines for designing new options.",
      "ja": "付録Bには、新しいオプションを設計するためのフォーマットガイドラインが含まれています。"
    },
    {
      "indent": 0,
      "text": "4.3 Hop-by-Hop Options Header",
      "section_title": true,
      "ja": "4.3 ホップバイホップオプションヘッダー"
    },
    {
      "indent": 3,
      "text": "The Hop-by-Hop Options header is used to carry optional information that must be examined by every node along a packet's delivery path. The Hop-by-Hop Options header is identified by a Next Header value of 0 in the IPv6 header, and has the following format:",
      "ja": "ホップバイホップオプションヘッダーは、パケットの配信パスに沿ったすべてのノードが検査する必要があるオプション情報を運ぶために使用されます。ホップバイホップオプションヘッダーは、IPv6ヘッダーの0の次ヘッダー値によって識別され、次の形式になります。"
    },
    {
      "indent": 4,
      "text": "+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|  Next Header  |  Hdr Ext Len  |                               |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                               +\n|                                                               |\n.                                                               .\n.                            Options                            .\n.                                                               .\n|                                                               |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "Next Header 8-bit selector. Identifies the type of header immediately following the Hop-by-Hop Options header. Uses the same values as the IPv4 Protocol field [RFC-1700 et seq.].",
      "ja": "次のヘッダー8ビットセレクター。ホップバイホップオプションヘッダーの直後のヘッダーのタイプを識別します。 IPv4プロトコルフィールドと同じ値を使用します[RFC-1700 et seq。]。"
    },
    {
      "indent": 3,
      "text": "Hdr Ext Len 8-bit unsigned integer. Length of the Hop-by-Hop Options header in 8-octet units, not including the first 8 octets.",
      "ja": "Hdr Ext Len 8ビット符号なし整数。最初の8オクテットを含まない、8オクテット単位のホップバイホップオプションヘッダーの長さ。"
    },
    {
      "indent": 3,
      "text": "Options Variable-length field, of length such that the complete Hop-by-Hop Options header is an integer multiple of 8 octets long. Contains one or more TLV-encoded options, as described in section 4.2.",
      "ja": "オプション可変長フィールド。完全なホップバイホップオプションヘッダーが8オクテットの整数倍になるような長さ。セクション4.2で説明されているように、1つ以上のTLVエンコードオプションが含まれています。"
    },
    {
      "indent": 3,
      "text": "The only hop-by-hop options defined in this document are the Pad1 and PadN options specified in section 4.2.",
      "ja": "このドキュメントで定義されているホップバイホップオプションは、セクション4.2で指定されているPad1およびPadNオプションのみです。"
    },
    {
      "indent": 0,
      "text": "4.4 Routing Header",
      "section_title": true,
      "ja": "4.4 ルーティングヘッダー"
    },
    {
      "indent": 3,
      "text": "The Routing header is used by an IPv6 source to list one or more intermediate nodes to be \"visited\" on the way to a packet's destination. This function is very similar to IPv4's Loose Source and Record Route option. The Routing header is identified by a Next Header value of 43 in the immediately preceding header, and has the following format:",
      "ja": "ルーティングヘッダーは、IPv6送信元がパケットの宛先への途中で「訪問」する1つ以上の中間ノードをリストするために使用されます。この機能は、IPv4のルーズソースおよびレコードルートオプションとよく似ています。ルーティングヘッダーは、直前のヘッダーの43の次のヘッダー値によって識別され、次の形式になります。"
    },
    {
      "indent": 4,
      "text": "+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|  Next Header  |  Hdr Ext Len  |  Routing Type | Segments Left |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                                                               |\n.                                                               .\n.                       type-specific data                      .\n.                                                               .\n|                                                               |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "Next Header 8-bit selector. Identifies the type of header immediately following the Routing header. Uses the same values as the IPv4 Protocol field [RFC-1700 et seq.].",
      "ja": "次のヘッダー8ビットセレクター。 Routingヘッダーの直後のヘッダーのタイプを識別します。 IPv4プロトコルフィールドと同じ値を使用します[RFC-1700 et seq。]。"
    },
    {
      "indent": 3,
      "text": "Hdr Ext Len 8-bit unsigned integer. Length of the Routing header in 8-octet units, not including the first 8 octets.",
      "ja": "Hdr Ext Len 8ビット符号なし整数。最初の8オクテットを含まない、8オクテット単位のルーティングヘッダーの長さ。"
    },
    {
      "indent": 3,
      "text": "Routing Type 8-bit identifier of a particular Routing header variant.",
      "ja": "ルーティングタイプ特定のルーティングヘッダーバリアントの8ビット識別子。"
    },
    {
      "indent": 3,
      "text": "Segments Left 8-bit unsigned integer. Number of route segments remaining, i.e., number of explicitly listed intermediate nodes still to be visited before reaching the final destination.",
      "ja": "セグメント左8ビット符号なし整数。残りのルートセグメントの数、つまり明示的にリストされた中間ノードの数で、最終的な宛先に到達する前にまだ訪問されます。"
    },
    {
      "indent": 3,
      "text": "type-specific data Variable-length field, of format determined by the Routing Type, and of length such that the complete Routing header is an integer multiple of 8 octets long.",
      "ja": "タイプ固有のデータ可変長フィールド。ルーティングタイプによって決定される形式で、完全なルーティングヘッダーが8オクテットの整数倍になるような長さです。"
    },
    {
      "indent": 3,
      "text": "If, while processing a received packet, a node encounters a Routing header with an unrecognized Routing Type value, the required behavior of the node depends on the value of the Segments Left field, as follows:",
      "ja": "受信したパケットの処理中に、ノードが認識されないルーティングタイプの値を持つルーティングヘッダーを検出した場合、ノードの必要な動作は、次のようにセグメントの左フィールドの値によって異なります。"
    },
    {
      "indent": 6,
      "text": "If Segments Left is zero, the node must ignore the Routing header and proceed to process the next header in the packet, whose type is identified by the Next Header field in the Routing header.",
      "ja": "残りセグメントがゼロの場合、ノードはルーティングヘッダーを無視し、パケット内の次のヘッダーの処理に進む必要があります。そのタイプはルーティングヘッダーの次のヘッダーフィールドで識別されます。"
    },
    {
      "indent": 6,
      "text": "If Segments Left is non-zero, the node must discard the packet and send an ICMP Parameter Problem, Code 0, message to the packet's Source Address, pointing to the unrecognized Routing Type.",
      "ja": "残りセグメントがゼロ以外の場合、ノードはパケットを破棄し、ICMPパラメータ問題、コード0、メッセージをパケットの送信元アドレスに送信して、認識されないルーティングタイプを指す必要があります。"
    },
    {
      "indent": 3,
      "text": "If, after processing a Routing header of a received packet, an intermediate node determines that the packet is to be forwarded onto a link whose link MTU is less than the size of the packet, the node must discard the packet and send an ICMP Packet Too Big message to the packet's Source Address.",
      "ja": "受信したパケットのルーティングヘッダーを処理した後、リンクMTUがパケットのサイズよりも小さいリンクにパケットを転送する必要があると中間ノードが判断した場合、ノードはパケットを破棄してICMPパケットを送信する必要があります。パケットの送信元アドレスへの大きなメッセージ。"
    },
    {
      "indent": 3,
      "text": "The Type 0 Routing header has the following format:",
      "ja": "タイプ0ルーティングヘッダーの形式は次のとおりです。"
    },
    {
      "indent": 4,
      "text": "+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|  Next Header  |  Hdr Ext Len  | Routing Type=0| Segments Left |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                            Reserved                           |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                                                               |\n+                                                               +\n|                                                               |\n+                           Address[1]                          +\n|                                                               |\n+                                                               +\n|                                                               |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                                                               |\n+                                                               +\n|                                                               |\n+                           Address[2]                          +\n|                                                               |\n+                                                               +\n|                                                               |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n.                               .                               .\n.                               .                               .\n.                               .                               .\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                                                               |\n+                                                               +\n|                                                               |\n+                           Address[n]                          +\n|                                                               |\n+                                                               +\n|                                                               |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "Next Header 8-bit selector. Identifies the type of header immediately following the Routing header. Uses the same values as the IPv4 Protocol field [RFC-1700 et seq.].",
      "ja": "次のヘッダー8ビットセレクター。 Routingヘッダーの直後のヘッダーのタイプを識別します。 IPv4プロトコルフィールドと同じ値を使用します[RFC-1700 et seq。]。"
    },
    {
      "indent": 3,
      "text": "Hdr Ext Len 8-bit unsigned integer. Length of the Routing header in 8-octet units, not including the first 8 octets. For the Type 0 Routing header, Hdr Ext Len is equal to two times the number of addresses in the header.",
      "ja": "Hdr Ext Len 8ビット符号なし整数。最初の8オクテットを含まない、8オクテット単位のルーティングヘッダーの長さ。タイプ0ルーティングヘッダーの場合、Hdr Ext Lenはヘッダー内のアドレス数の2倍です。"
    },
    {
      "indent": 3,
      "text": "Routing Type 0.",
      "ja": "ルーティングタイプ0。"
    },
    {
      "indent": 3,
      "text": "Segments Left 8-bit unsigned integer. Number of route segments remaining, i.e., number of explicitly listed intermediate nodes still to be visited before reaching the final destination.",
      "ja": "セグメント左8ビット符号なし整数。残りのルートセグメントの数、つまり明示的にリストされた中間ノードの数で、最終的な宛先に到達する前にまだ訪問されます。"
    },
    {
      "indent": 3,
      "text": "Reserved 32-bit reserved field. Initialized to zero for transmission; ignored on reception.",
      "ja": "予約済み32ビット予約フィールド。送信用にゼロに初期化されました。受信時には無視されます。"
    },
    {
      "indent": 3,
      "text": "Address[1..n] Vector of 128-bit addresses, numbered 1 to n.",
      "ja": "Address [1..n] 1〜nの番号が付けられた128ビットアドレスのベクトル。"
    },
    {
      "indent": 3,
      "text": "Multicast addresses must not appear in a Routing header of Type 0, or in the IPv6 Destination Address field of a packet carrying a Routing header of Type 0.",
      "ja": "マルチキャストアドレスは、タイプ0のルーティングヘッダー、またはタイプ0のルーティングヘッダーを伝送するパケットのIPv6宛先アドレスフィールドに表示されてはなりません。"
    },
    {
      "indent": 3,
      "text": "A Routing header is not examined or processed until it reaches the\nnode identified in the Destination Address field of the IPv6 header.\nIn that node, dispatching on the Next Header field of the immediately\npreceding header causes the Routing header module to be invoked,\nwhich, in the case of Routing Type 0, performs the following\nalgorithm: if Segments Left = 0 {\n   proceed to process the next header in the packet, whose type is\n   identified by the Next Header field in the Routing header\n}\nelse if Hdr Ext Len is odd {\n      send an ICMP Parameter Problem, Code 0, message to the Source\n      Address, pointing to the Hdr Ext Len field, and discard the\n      packet\n}\nelse {\n   compute n, the number of addresses in the Routing header, by\n   dividing Hdr Ext Len by 2",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 6,
      "text": "if Segments Left is greater than n {\n   send an ICMP Parameter Problem, Code 0, message to the Source\n   Address, pointing to the Segments Left field, and discard the\n   packet\n}\nelse {\n   decrement Segments Left by 1;\n   compute i, the index of the next address to be visited in\n   the address vector, by subtracting Segments Left from n",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 9,
      "text": "if Address [i] or the IPv6 Destination Address is multicast {\n   discard the packet\n}\nelse {\n   swap the IPv6 Destination Address and Address[i]",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 12,
      "text": "if the IPv6 Hop Limit is less than or equal to 1 {\n   send an ICMP Time Exceeded -- Hop Limit Exceeded in\n   Transit message to the Source Address and discard the\n   packet\n}\nelse {\n   decrement the Hop Limit by 1",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "            resubmit the packet to the IPv6 module for transmission\n            to the new destination\n         }\n      }\n   }\n} As an example of the effects of the above algorithm, consider the\ncase of a source node S sending a packet to destination node D, using\na Routing header to cause the packet to be routed via intermediate\nnodes I1, I2, and I3.  The values of the relevant IPv6 header and\nRouting header fields on each segment of the delivery path would be\nas follows:",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "As the packet travels from S to I1:",
      "ja": "パケットがSからI1に移動するとき："
    },
    {
      "indent": 8,
      "text": "Source Address = S                  Hdr Ext Len = 6\nDestination Address = I1            Segments Left = 3\n                                    Address[1] = I2\n                                    Address[2] = I3\n                                    Address[3] = D",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "As the packet travels from I1 to I2:",
      "ja": "パケットがI1からI2に移動するとき："
    },
    {
      "indent": 8,
      "text": "Source Address = S                  Hdr Ext Len = 6\nDestination Address = I2            Segments Left = 2\n                                    Address[1] = I1\n                                    Address[2] = I3\n                                    Address[3] = D",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "As the packet travels from I2 to I3:",
      "ja": "パケットがI2からI3に移動するとき："
    },
    {
      "indent": 8,
      "text": "Source Address = S                  Hdr Ext Len = 6\nDestination Address = I3            Segments Left = 1\n                                    Address[1] = I1\n                                    Address[2] = I2\n                                    Address[3] = D",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "As the packet travels from I3 to D:",
      "ja": "パケットがI3からDに移動するとき："
    },
    {
      "indent": 8,
      "text": "Source Address = S                  Hdr Ext Len = 6\nDestination Address = D             Segments Left = 0\n                                    Address[1] = I1\n                                    Address[2] = I2\n                                    Address[3] = I3",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "4.5 Fragment Header",
      "section_title": true,
      "ja": "4.5 フラグメントヘッダー"
    },
    {
      "indent": 3,
      "text": "The Fragment header is used by an IPv6 source to send a packet larger than would fit in the path MTU to its destination. (Note: unlike IPv4, fragmentation in IPv6 is performed only by source nodes, not by routers along a packet's delivery path -- see section 5.) The Fragment header is identified by a Next Header value of 44 in the immediately preceding header, and has the following format:",
      "ja": "フラグメントヘッダーは、パスMTUに収まるよりも大きいパケットを宛先に送信するためにIPv6送信元によって使用されます。 （注：IPv4とは異なり、IPv6のフラグメンテーションは、パケットの配信パスに沿ったルーターではなく、ソースノードによってのみ実行されます。セクション5を参照してください。）フラグメントヘッダーは、直前のヘッダーのNext Header値44によって識別されます。次の形式があります。"
    },
    {
      "indent": 3,
      "text": "+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|  Next Header  |   Reserved    |      Fragment Offset    |Res|M|\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                         Identification                        |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "Next Header 8-bit selector. Identifies the initial header type of the Fragmentable Part of the original packet (defined below). Uses the same values as the IPv4 Protocol field [RFC-1700 et seq.].",
      "ja": "次のヘッダー8ビットセレクター。元のパケットのフラグメント可能部分の初期ヘッダータイプを識別します（以下で定義）。 IPv4プロトコルフィールドと同じ値を使用します[RFC-1700 et seq。]。"
    },
    {
      "indent": 3,
      "text": "Reserved 8-bit reserved field. Initialized to zero for transmission; ignored on reception.",
      "ja": "予約済み8ビット予約フィールド。送信用にゼロに初期化されました。受信時には無視されます。"
    },
    {
      "indent": 3,
      "text": "Fragment Offset 13-bit unsigned integer. The offset, in 8-octet units, of the data following this header, relative to the start of the Fragmentable Part of the original packet.",
      "ja": "フラグメントオフセット13ビットの符号なし整数。元のパケットのフラグメント可能部分の開始を基準にした、このヘッダーに続くデータの8オクテット単位のオフセット。"
    },
    {
      "indent": 3,
      "text": "Res 2-bit reserved field. Initialized to zero for transmission; ignored on reception.",
      "ja": "Res 2ビット予約フィールド。送信用にゼロに初期化されました。受信時には無視されます。"
    },
    {
      "indent": 3,
      "text": "M flag 1 = more fragments; 0 = last fragment.",
      "ja": "Mフラグ1 =その他のフラグメント。 0 =最後のフラグメント。"
    },
    {
      "indent": 3,
      "text": "Identification 32 bits. See description below.",
      "ja": "識別32ビット。以下の説明を参照してください。"
    },
    {
      "indent": 3,
      "text": "In order to send a packet that is too large to fit in the MTU of the path to its destination, a source node may divide the packet into fragments and send each fragment as a separate packet, to be reassembled at the receiver.",
      "ja": "宛先へのパスのMTUに収まらないほど大きいパケットを送信するために、送信元ノードはパケットをフラグメントに分割し、各フラグメントを個別のパケットとして送信して、受信側で再構成する場合があります。"
    },
    {
      "indent": 3,
      "text": "For every packet that is to be fragmented, the source node generates an Identification value. The Identification must be different than that of any other fragmented packet sent recently* with the same Source Address and Destination Address. If a Routing header is present, the Destination Address of concern is that of the final destination.",
      "ja": "フラグメント化されるパケットごとに、ソースノードは識別値を生成します。識別は、同じ送信元アドレスと宛先アドレスで最近送信された他のフラグメント化されたパケット*とは異なる必要があります。ルーティングヘッダーが存在する場合、問題の宛先アドレスは最終宛先のアドレスです。"
    },
    {
      "indent": 6,
      "text": "* \"recently\" means within the maximum likely lifetime of a packet, including transit time from source to destination and time spent awaiting reassembly with other fragments of the same packet. However, it is not required that a source node know the maximum packet lifetime. Rather, it is assumed that the requirement can be met by maintaining the Identification value as a simple, 32- bit, \"wrap-around\" counter, incremented each time a packet must be fragmented. It is an implementation choice whether to maintain a single counter for the node or multiple counters, e.g., one for each of the node's possible source addresses, or one for each active (source address, destination address) combination.",
      "ja": "* 「最近」とは、送信元から宛先への通過時間や、同じパケットの他のフラグメントとの再構成を待つために費やされた時間を含む、パケットの最大可能寿命内を意味します。ただし、送信元ノードが最大パケットライフタイムを知っている必要はありません。むしろ、要件は、パケットをフラグメント化する必要があるたびに増加する、単純な32ビットの「ラップアラウンド」カウンターとして識別値を維持することで満たすことができると想定されています。ノードの単一のカウンターを維持するか、複数のカウンターを維持するか（たとえば、ノードの可能なソースアドレスごとに1つ、またはアクティブ（ソースアドレス、宛先アドレス）の組み合わせごとに1つ）を実装するかどうかは、実装の選択です。"
    },
    {
      "indent": 3,
      "text": "The initial, large, unfragmented packet is referred to as the \"original packet\", and it is considered to consist of two parts, as illustrated:",
      "ja": "最初の大きな断片化されていないパケットは「元のパケット」と呼ばれ、図のように2つの部分で構成されていると見なされます。"
    },
    {
      "indent": 3,
      "text": "original packet:",
      "ja": "元のパケット："
    },
    {
      "indent": 3,
      "text": "+------------------+----------------------//-----------------------+\n|  Unfragmentable  |                 Fragmentable                  |\n|       Part       |                     Part                      |\n+------------------+----------------------//-----------------------+",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 6,
      "text": "The Unfragmentable Part consists of the IPv6 header plus any extension headers that must be processed by nodes en route to the destination, that is, all headers up to and including the Routing header if present, else the Hop-by-Hop Options header if present, else no extension headers.",
      "ja": "Unfragmentable Partは、IPv6ヘッダーと、宛先への途中のノードで処理する必要のある拡張ヘッダー、つまり、存在する場合はルーティングヘッダーまでのすべてのヘッダー、および存在する場合はホップバイホップオプションヘッダーで構成されます。 、それ以外の拡張ヘッダーはありません。"
    },
    {
      "indent": 6,
      "text": "The Fragmentable Part consists of the rest of the packet, that is, any extension headers that need be processed only by the final destination node(s), plus the upper-layer header and data.",
      "ja": "フラグメント化可能部分は、パケットの残りの部分、つまり最終的な宛先ノードのみで処理する必要があるすべての拡張ヘッダーと、上位層ヘッダーおよびデータで構成されます。"
    },
    {
      "indent": 3,
      "text": "The Fragmentable Part of the original packet is divided into fragments, each, except possibly the last (\"rightmost\") one, being an integer multiple of 8 octets long. The fragments are transmitted in separate \"fragment packets\" as illustrated:",
      "ja": "元のパケットのフラグメント可能部分は、フラグメントに分割されます。フラグメントは、最後の（「最も右側の」）フラグメントを除いて、8オクテットの整数倍の長さです。フラグメントは、次のように別々の「フラグメントパケット」で送信されます。"
    },
    {
      "indent": 3,
      "text": "original packet:",
      "ja": "元のパケット："
    },
    {
      "indent": 3,
      "text": "+------------------+--------------+--------------+--//--+----------+\n|  Unfragmentable  |    first     |    second    |      |   last   |\n|       Part       |   fragment   |   fragment   | .... | fragment |\n+------------------+--------------+--------------+--//--+----------+ fragment packets:",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "+------------------+--------+--------------+\n|  Unfragmentable  |Fragment|    first     |\n|       Part       | Header |   fragment   |\n+------------------+--------+--------------+",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "+------------------+--------+--------------+\n|  Unfragmentable  |Fragment|    second    |\n|       Part       | Header |   fragment   |\n+------------------+--------+--------------+\n                      o\n                      o\n                      o\n+------------------+--------+----------+\n|  Unfragmentable  |Fragment|   last   |\n|       Part       | Header | fragment |\n+------------------+--------+----------+",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "Each fragment packet is composed of:",
      "ja": "各フラグメントパケットは次のもので構成されます。"
    },
    {
      "indent": 6,
      "text": "(1) The Unfragmentable Part of the original packet, with the Payload Length of the original IPv6 header changed to contain the length of this fragment packet only (excluding the length of the IPv6 header itself), and the Next Header field of the last header of the Unfragmentable Part changed to 44.",
      "ja": "（1）元のIPv6ヘッダーのペイロード長がこのフラグメントパケットの長さ（IPv6ヘッダー自体の長さを除く）のみを含むように変更された元のパケットのフラグメント化できない部分、および最後のヘッダーの次のヘッダーフィールドUnfragmentable Partの44が変更されました。"
    },
    {
      "indent": 6,
      "text": "(2) A Fragment header containing:",
      "ja": "（2）以下を含むフラグメントヘッダー："
    },
    {
      "indent": 15,
      "text": "The Next Header value that identifies the first header of the Fragmentable Part of the original packet.",
      "ja": "元のパケットのフラグメント可能部分の最初のヘッダーを識別する次のヘッダー値。"
    },
    {
      "indent": 15,
      "text": "A Fragment Offset containing the offset of the fragment, in 8-octet units, relative to the start of the Fragmentable Part of the original packet. The Fragment Offset of the first (\"leftmost\") fragment is 0.",
      "ja": "元のパケットのフラグメント可能部分の開始を基準とした、8オクテット単位のフラグメントのオフセットを含むフラグメントオフセット。最初（「左端」）のフラグメントのフラグメントオフセットは0です。"
    },
    {
      "indent": 15,
      "text": "An M flag value of 0 if the fragment is the last (\"rightmost\") one, else an M flag value of 1.",
      "ja": "フラグメントが最後（右端）の場合、Mフラグ値は0、それ以外の場合、Mフラグ値は1。"
    },
    {
      "indent": 15,
      "text": "The Identification value generated for the original packet.",
      "ja": "元のパケットに対して生成された識別値。"
    },
    {
      "indent": 6,
      "text": "(3) The fragment itself.",
      "ja": "（3）フラグメント自体。"
    },
    {
      "indent": 3,
      "text": "The lengths of the fragments must be chosen such that the resulting fragment packets fit within the MTU of the path to the packets' destination(s).",
      "ja": "フラグメントの長さは、結果のフラグメントパケットがパケットの宛先へのパスのMTU内に収まるように選択する必要があります。"
    },
    {
      "indent": 3,
      "text": "At the destination, fragment packets are reassembled into their original, unfragmented form, as illustrated:",
      "ja": "宛先では、図に示すように、フラグメントパケットが元のフラグメント化されていない形式に再構成されます。"
    },
    {
      "indent": 3,
      "text": "reassembled original packet:",
      "ja": "元のパケットを再構成："
    },
    {
      "indent": 3,
      "text": "+------------------+----------------------//------------------------+\n|  Unfragmentable  |                 Fragmentable                   |\n|       Part       |                     Part                       |\n+------------------+----------------------//------------------------+",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "The following rules govern reassembly:",
      "ja": "次のルールが再構成を管理します。"
    },
    {
      "indent": 6,
      "text": "An original packet is reassembled only from fragment packets that have the same Source Address, Destination Address, and Fragment Identification.",
      "ja": "元のパケットは、同じ送信元アドレス、宛先アドレス、およびフラグメント識別を持つフラグメントパケットからのみ再構成されます。"
    },
    {
      "indent": 6,
      "text": "The Unfragmentable Part of the reassembled packet consists of all headers up to, but not including, the Fragment header of the first fragment packet (that is, the packet whose Fragment Offset is zero), with the following two changes:",
      "ja": "再構成されたパケットのフラグメント化できない部分は、最初のフラグメントパケット（つまり、フラグメントオフセットがゼロのパケット）のフラグメントヘッダーまでのすべてのヘッダーで構成されますが、次の2つの変更点があります。"
    },
    {
      "indent": 9,
      "text": "The Next Header field of the last header of the Unfragmentable Part is obtained from the Next Header field of the first fragment's Fragment header.",
      "ja": "Unfragmentable Partの最後のヘッダーのNext Headerフィールドは、最初のフラグメントのFragmentヘッダーのNext Headerフィールドから取得されます。"
    },
    {
      "indent": 9,
      "text": "The Payload Length of the reassembled packet is computed from the length of the Unfragmentable Part and the length and offset of the last fragment. For example, a formula for computing the Payload Length of the reassembled original packet is:",
      "ja": "再構成されたパケットのペイロード長は、フラグメント化できない部分の長さと最後のフラグメントの長さとオフセットから計算されます。たとえば、再構成された元のパケットのペイロード長を計算する式は次のとおりです。"
    },
    {
      "indent": 11,
      "text": "PL.orig = PL.first - FL.first - 8 + (8 * FO.last) + FL.last",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 11,
      "text": "where PL.orig = Payload Length field of reassembled packet. PL.first = Payload Length field of first fragment packet. FL.first = length of fragment following Fragment header of first fragment packet. FO.last = Fragment Offset field of Fragment header of last fragment packet. FL.last = length of fragment following Fragment header of last fragment packet.",
      "ja": "PL.orig =再構成されたパケットのペイロード長フィールド。 PL.first =最初のフラグメントパケットのペイロード長フィールド。 FL.first =最初のフラグメントパケットのフラグメントヘッダーに続くフラグメントの長さ。 FO.last =最後のフラグメントパケットのフラグメントヘッダーのフラグメントオフセットフィールド。 FL.last =最後のフラグメントパケットのフラグメントヘッダーに続くフラグメントの長さ。"
    },
    {
      "indent": 6,
      "text": "The Fragmentable Part of the reassembled packet is constructed from the fragments following the Fragment headers in each of the fragment packets. The length of each fragment is computed by subtracting from the packet's Payload Length the length of the headers between the IPv6 header and fragment itself; its relative position in Fragmentable Part is computed from its Fragment Offset value.",
      "ja": "再構成されたパケットのフラグメント可能部分は、各フラグメントパケットのフラグメントヘッダーに続くフラグメントから構築されます。各フラグメントの長さは、パケットのペイロード長からIPv6ヘッダーとフラグメント自体の間のヘッダーの長さを引くことによって計算されます。フラグメント可能パーツ内の相対位置は、フラグメントオフセット値から計算されます。"
    },
    {
      "indent": 6,
      "text": "The Fragment header is not present in the final, reassembled packet.",
      "ja": "フラグメントヘッダーは、最終的な再構成されたパケットには存在しません。"
    },
    {
      "indent": 3,
      "text": "The following error conditions may arise when reassembling fragmented packets:",
      "ja": "フラグメント化されたパケットを再アセンブルすると、次のエラー状態が発生する可能性があります。"
    },
    {
      "indent": 6,
      "text": "If insufficient fragments are received to complete reassembly of a packet within 60 seconds of the reception of the first-arriving fragment of that packet, reassembly of that packet must be abandoned and all the fragments that have been received for that packet must be discarded. If the first fragment (i.e., the one with a Fragment Offset of zero) has been received, an ICMP Time Exceeded -- Fragment Reassembly Time Exceeded message should be sent to the source of that fragment.",
      "ja": "そのパケットの最初に到着したフラグメントを受信して​​から60秒以内にパケットの再構成を完了するのに不十分なフラグメントを受信した場合、そのパケットの再構成を破棄し、そのパケットについて受信したすべてのフラグメントを破棄する必要があります。最初のフラグメント（つまり、フラグメントオフセットがゼロのフラグメント）が受信された場合、ICMP Time Exceeded-Fragment Reassembly Time Exceededメッセージをそのフラグメントのソースに送信する必要があります。"
    },
    {
      "indent": 6,
      "text": "If the length of a fragment, as derived from the fragment packet's Payload Length field, is not a multiple of 8 octets and the M flag of that fragment is 1, then that fragment must be discarded and an ICMP Parameter Problem, Code 0, message should be sent to the source of the fragment, pointing to the Payload Length field of the fragment packet.",
      "ja": "フラグメントパケットのペイロード長フィールドから導出されるフラグメントの長さが8オクテットの倍数ではなく、そのフラグメントのMフラグが1の場合、そのフラグメントは破棄され、ICMPパラメータの問題、コード0、メッセージフラグメントパケットのペイロード長フィールドを指すフラグメントの送信元に送信する必要があります。"
    },
    {
      "indent": 6,
      "text": "If the length and offset of a fragment are such that the Payload Length of the packet reassembled from that fragment would exceed 65,535 octets, then that fragment must be discarded and an ICMP Parameter Problem, Code 0, message should be sent to the source of the fragment, pointing to the Fragment Offset field of the fragment packet.",
      "ja": "フラグメントの長さとオフセットが、そのフラグメントから再構成されたパケットのペイロード長が65,535オクテットを超えるようなものである場合、そのフラグメントは破棄する必要があり、ICMPパラメータの問題、コード0のメッセージを送信元に送信する必要があります。フラグメント、フラグメントパケットのフラグメントオフセットフィールドを指します。"
    },
    {
      "indent": 3,
      "text": "The following conditions are not expected to occur, but are not considered errors if they do:",
      "ja": "次の条件は発生するとは想定されていませんが、発生してもエラーとは見なされません。"
    },
    {
      "indent": 6,
      "text": "The number and content of the headers preceding the Fragment header of different fragments of the same original packet may differ. Whatever headers are present, preceding the Fragment header in each fragment packet, are processed when the packets arrive, prior to queueing the fragments for reassembly. Only those headers in the Offset zero fragment packet are retained in the reassembled packet.",
      "ja": "同じ元のパケットの異なるフラグメントのフラグメントヘッダーに先行するヘッダーの数と内容は異なる場合があります。各フラグメントパケットのフラグメントヘッダーの前にあるヘッダーが存在する場合は、パケットが到着したときに、フラグメントをキューに再配置する前に処理されます。オフセットゼロフラグメントパケットのヘッダーのみが、再構成されたパケットに保持されます。"
    },
    {
      "indent": 6,
      "text": "The Next Header values in the Fragment headers of different fragments of the same original packet may differ. Only the value from the Offset zero fragment packet is used for reassembly.",
      "ja": "同じ元のパケットの異なるフラグメントのフラグメントヘッダーの次のヘッダー値は異なる場合があります。オフセットゼロフラグメントパケットからの値のみが再構成に使用されます。"
    },
    {
      "indent": 0,
      "text": "4.6 Destination Options Header",
      "section_title": true,
      "ja": "4.6 宛先オプションヘッダー"
    },
    {
      "indent": 3,
      "text": "The Destination Options header is used to carry optional information that need be examined only by a packet's destination node(s). The Destination Options header is identified by a Next Header value of 60 in the immediately preceding header, and has the following format:",
      "ja": "Destination Optionsヘッダーは、パケットの宛先ノードだけが検査する必要があるオプション情報を運ぶために使用されます。 Destination Optionsヘッダーは、直前のヘッダーの60のNext Header値によって識別され、次の形式になります。"
    },
    {
      "indent": 4,
      "text": "+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|  Next Header  |  Hdr Ext Len  |                               |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                               +\n|                                                               |\n.                                                               .\n.                            Options                            .\n.                                                               .\n|                                                               |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "Next Header 8-bit selector. Identifies the type of header immediately following the Destination Options header. Uses the same values as the IPv4 Protocol field [RFC-1700 et seq.].",
      "ja": "次のヘッダー8ビットセレクター。 Destination Optionsヘッダーの直後のヘッダーのタイプを識別します。 IPv4プロトコルフィールドと同じ値を使用します[RFC-1700 et seq。]。"
    },
    {
      "indent": 3,
      "text": "Hdr Ext Len 8-bit unsigned integer. Length of the Destination Options header in 8-octet units, not including the first 8 octets.",
      "ja": "Hdr Ext Len 8ビット符号なし整数。最初の8オクテットを含まない、8オクテット単位の宛先オプションヘッダーの長さ。"
    },
    {
      "indent": 3,
      "text": "Options Variable-length field, of length such that the complete Destination Options header is an integer multiple of 8 octets long. Contains one or more TLV-encoded options, as described in section 4.2.",
      "ja": "Options可変長フィールド。完全なDestination Optionsヘッダーが8オクテットの整数倍になるような長さです。セクション4.2で説明されているように、1つ以上のTLVエンコードオプションが含まれています。"
    },
    {
      "indent": 3,
      "text": "The only destination options defined in this document are the Pad1 and PadN options specified in section 4.2.",
      "ja": "このドキュメントで定義されている唯一の宛先オプションは、セクション4.2で指定されたPad1およびPadNオプションです。"
    },
    {
      "indent": 3,
      "text": "Note that there are two possible ways to encode optional destination information in an IPv6 packet: either as an option in the Destination Options header, or as a separate extension header. The Fragment header and the Authentication header are examples of the latter approach. Which approach can be used depends on what action is desired of a destination node that does not understand the optional information:",
      "ja": "IPv6パケットのオプションの宛先情報をエンコードする方法は2つあることに注意してください。宛先オプションヘッダーのオプションとして、または個別の拡張ヘッダーとして。 FragmentヘッダーとAuthenticationヘッダーは、後者のアプローチの例です。どちらのアプローチを使用できるかは、オプションの情報を理解していない宛先ノードに必要なアクションによって異なります。"
    },
    {
      "indent": 6,
      "text": "o If the desired action is for the destination node to discard the packet and, only if the packet's Destination Address is not a multicast address, send an ICMP Unrecognized Type message to the packet's Source Address, then the information may be encoded either as a separate header or as an option in the Destination Options header whose Option Type has the value 11 in its highest-order two bits. The choice may depend on such factors as which takes fewer octets, or which yields better alignment or more efficient parsing.",
      "ja": "o 宛先ノードがパケットを破棄することが目的のアクションであり、パケットの宛先アドレスがマルチキャストアドレスでない場合のみ、ICMP Unrecognized Typeメッセージをパケットの送信元アドレスに送信します。情報は、個別のヘッダーとしてエンコードされる場合があります。または、Destination Optionsヘッダーのオプションとして、Option Typeの値が最上位の2ビットで11である。どちらを選択するかは、オクテットの数が少ないか、アライメントが優れているか、解析の効率が良いかなどの要因によって異なります。"
    },
    {
      "indent": 6,
      "text": "o If any other action is desired, the information must be encoded as an option in the Destination Options header whose Option Type has the value 00, 01, or 10 in its highest-order two bits, specifying the desired action (see section 4.2).",
      "ja": "o 他のアクションが必要な場合、情報は、目的のアクションを指定して、最上位の2ビットがオプションタイプの値00、01、または10である宛先オプションヘッダーのオプションとしてエンコードする必要があります（セクション4.2を参照）。"
    },
    {
      "indent": 0,
      "text": "4.7 No Next Header",
      "section_title": true,
      "ja": "4.7 次のヘッダーなし"
    },
    {
      "indent": 3,
      "text": "The value 59 in the Next Header field of an IPv6 header or any extension header indicates that there is nothing following that header. If the Payload Length field of the IPv6 header indicates the presence of octets past the end of a header whose Next Header field contains 59, those octets must be ignored, and passed on unchanged if the packet is forwarded.",
      "ja": "IPv6ヘッダーまたは任意の拡張ヘッダーの次のヘッダーフィールドの値59は、そのヘッダーの後に何もないことを示します。 IPv6ヘッダーのペイロード長フィールドが、次のヘッダーフィールドに59が含まれるヘッダーの終わりを過ぎたオクテットの存在を示す場合、それらのオクテットは無視され、パケットが転送される場合は変更されずに渡されます。"
    },
    {
      "indent": 0,
      "text": "5. Packet Size Issues",
      "section_title": true,
      "ja": "5. パケットサイズの問題"
    },
    {
      "indent": 3,
      "text": "IPv6 requires that every link in the internet have an MTU of 1280 octets or greater. On any link that cannot convey a 1280-octet packet in one piece, link-specific fragmentation and reassembly must be provided at a layer below IPv6.",
      "ja": "IPv6では、インターネット内のすべてのリンクのMTUが1280オクテット以上である必要があります。 1280オクテットのパケットを1つにまとめて伝送できないリンクでは、リンク固有のフラグメンテーションと再構成をIPv6の下のレイヤーで提供する必要があります。"
    },
    {
      "indent": 3,
      "text": "Links that have a configurable MTU (for example, PPP links [RFC-1661]) must be configured to have an MTU of at least 1280 octets; it is recommended that they be configured with an MTU of 1500 octets or greater, to accommodate possible encapsulations (i.e., tunneling) without incurring IPv6-layer fragmentation.",
      "ja": "構成可能なMTUを持つリンク（たとえば、PPPリンク[RFC-1661]）は、少なくとも1280オクテットのMTUを持つように構成する必要があります。 IPv6レイヤーの断片化を招くことなくカプセル化（つまり、トンネリング）に対応できるように、1500オクテット以上のMTUで構成することをお勧めします。"
    },
    {
      "indent": 3,
      "text": "From each link to which a node is directly attached, the node must be able to accept packets as large as that link's MTU.",
      "ja": "ノードが直接接続されている各リンクから、ノードはそのリンクのMTUと同じ大きさのパケットを受け入れることができる必要があります。"
    },
    {
      "indent": 3,
      "text": "It is strongly recommended that IPv6 nodes implement Path MTU Discovery [RFC-1981], in order to discover and take advantage of path MTUs greater than 1280 octets. However, a minimal IPv6 implementation (e.g., in a boot ROM) may simply restrict itself to sending packets no larger than 1280 octets, and omit implementation of Path MTU Discovery.",
      "ja": "1280オクテットを超えるパスMTUを検出して利用するために、IPv6ノードがパスMTUディスカバリ[RFC-1981]を実装することを強くお勧めします。ただし、最小限のIPv6実装（たとえば、ブートROM内）は、それ自体を1280オクテット以下のパケットの送信に制限し、パスMTU検出の実装を省略します。"
    },
    {
      "indent": 3,
      "text": "In order to send a packet larger than a path's MTU, a node may use the IPv6 Fragment header to fragment the packet at the source and have it reassembled at the destination(s). However, the use of such fragmentation is discouraged in any application that is able to adjust its packets to fit the measured path MTU (i.e., down to 1280 octets).",
      "ja": "パスのMTUよりも大きいパケットを送信するために、ノードはIPv6フラグメントヘッダーを使用して送信元でパケットをフラグメント化し、宛先で再構成することができます。ただし、そのような断片化の使用は、測定されたパスMTU（つまり、最低1280オクテット）に合わせてパケットを調整できるアプリケーションでは推奨されません。"
    },
    {
      "indent": 3,
      "text": "A node must be able to accept a fragmented packet that, after reassembly, is as large as 1500 octets. A node is permitted to accept fragmented packets that reassemble to more than 1500 octets. An upper-layer protocol or application that depends on IPv6 fragmentation to send packets larger than the MTU of a path should not send packets larger than 1500 octets unless it has assurance that the destination is capable of reassembling packets of that larger size.",
      "ja": "ノードは、再構成後、1500オクテットにもなる断片化されたパケットを受け入れることができる必要があります。ノードは、1500オクテット以上に再構成される断片化されたパケットを受け入れることが許可されています。 IPv6フラグメンテーションに依存してパスのMTUより大きいパケットを送信する上位層プロトコルまたはアプリケーションは、宛先がそのより大きなサイズのパケットを再構成できることが保証されていない限り、1500オクテットを超えるパケットを送信しないでください。"
    },
    {
      "indent": 3,
      "text": "In response to an IPv6 packet that is sent to an IPv4 destination (i.e., a packet that undergoes translation from IPv6 to IPv4), the originating IPv6 node may receive an ICMP Packet Too Big message reporting a Next-Hop MTU less than 1280. In that case, the IPv6 node is not required to reduce the size of subsequent packets to less than 1280, but must include a Fragment header in those packets so that the IPv6-to-IPv4 translating router can obtain a suitable Identification value to use in resulting IPv4 fragments. Note that this means the payload may have to be reduced to 1232 octets (1280 minus 40 for the IPv6 header and 8 for the Fragment header), and smaller still if additional extension headers are used.",
      "ja": "IPv4宛先に送信されるIPv6パケット（つまり、IPv6からIPv4に変換されるパケット）に応答して、発信元のIPv6ノードは、1280未満のネクストホップMTUを報告するICMPパケットが大きすぎるメッセージを受信する場合があります。その場合、IPv6ノードは後続のパケットのサイズを1280未満に縮小する必要はありませんが、IPv6からIPv4への変換ルーターが適切な識別値を取得して結果として使用できるように、これらのパケットにフラグメントヘッダーを含める必要がありますIPv4フラグメント。これは、ペイロードを1232オクテット（IPv6ヘッダーの場合は1280マイナス40、フラグメントヘッダーの場合は8を差し引いたもの）に減らし、追加の拡張ヘッダーを使用する場合はさらに小さくする必要がある場合があることに注意してください。"
    },
    {
      "indent": 0,
      "text": "6. Flow Labels",
      "section_title": true,
      "ja": "6. フローラベル"
    },
    {
      "indent": 3,
      "text": "The 20-bit Flow Label field in the IPv6 header may be used by a source to label sequences of packets for which it requests special handling by the IPv6 routers, such as non-default quality of service or \"real-time\" service. This aspect of IPv6 is, at the time of writing, still experimental and subject to change as the requirements for flow support in the Internet become clearer. Hosts or routers that do not support the functions of the Flow Label field are required to set the field to zero when originating a packet, pass the field on unchanged when forwarding a packet, and ignore the field when receiving a packet.",
      "ja": "ソースは、IPv6ヘッダーの20ビットフローラベルフィールドを使用して、デフォルト以外のサービス品質や「リアルタイム」サービスなど、IPv6ルーターによる特別な処理を要求する一連のパケットにラベルを付けることができます。 IPv6のこの側面は、執筆時点ではまだ実験段階であり、インターネットでのフローサポートの要件が明らかになるにつれて変更される可能性があります。フローラベルフィールドの機能をサポートしないホストまたはルーターは、パケットの発信時にフィールドをゼロに設定し、パケットを転送するときにフィールドを変更せずに渡し、パケットを受信するときにフィールドを無視する必要があります。"
    },
    {
      "indent": 3,
      "text": "Appendix A describes the current intended semantics and usage of the Flow Label field.",
      "ja": "付録Aでは、現在意図されている意味とフローラベルフィールドの使用法について説明します。"
    },
    {
      "indent": 0,
      "text": "7. Traffic Classes",
      "section_title": true,
      "ja": "7. トラフィッククラス"
    },
    {
      "indent": 3,
      "text": "The 8-bit Traffic Class field in the IPv6 header is available for use by originating nodes and/or forwarding routers to identify and distinguish between different classes or priorities of IPv6 packets. At the point in time at which this specification is being written, there are a number of experiments underway in the use of the IPv4 Type of Service and/or Precedence bits to provide various forms of \"differentiated service\" for IP packets, other than through the use of explicit flow set-up. The Traffic Class field in the IPv6 header is intended to allow similar functionality to be supported in IPv6.",
      "ja": "IPv6ヘッダーの8ビットトラフィッククラスフィールドは、IPv6パケットの異なるクラスまたは優先順位を識別および区別するために、発信ノードまたは転送ルーター、あるいはその両方で使用できます。この仕様が書かれている時点で、IPv4 Type of ServiceやPrecedenceビットを使用して、IPパケットにさまざまな形式の「差別化サービス」を提供するために、明示的なフロー設定の使用。 IPv6ヘッダーのトラフィッククラスフィールドは、IPv6で同様の機能をサポートできるようにすることを目的としています。"
    },
    {
      "indent": 3,
      "text": "It is hoped that those experiments will eventually lead to agreement on what sorts of traffic classifications are most useful for IP packets. Detailed definitions of the syntax and semantics of all or some of the IPv6 Traffic Class bits, whether experimental or intended for eventual standardization, are to be provided in separate documents.",
      "ja": "これらの実験が最終的に、IPパケットにどのような種類のトラフィック分類が最も役立つかについて合意に至ることが期待されます。 IPv6トラフィッククラスビットのすべてまたは一部の構文とセマンティクスの詳細な定義は、実験的なものか、最終的な標準化を意図したものかにかかわらず、個別のドキュメントで提供されます。"
    },
    {
      "indent": 3,
      "text": "The following general requirements apply to the Traffic Class field:",
      "ja": "次の一般的な要件が[トラフィッククラス]フィールドに適用されます。"
    },
    {
      "indent": 6,
      "text": "o The service interface to the IPv6 service within a node must provide a means for an upper-layer protocol to supply the value of the Traffic Class bits in packets originated by that upper-layer protocol. The default value must be zero for all 8 bits.",
      "ja": "o ノード内のIPv6サービスへのサービスインターフェイスは、上位層プロトコルが発信したパケットのトラフィッククラスビットの値を上位層プロトコルに提供する手段を提供する必要があります。デフォルト値は、8ビットすべてについてゼロでなければなりません。"
    },
    {
      "indent": 6,
      "text": "o Nodes that support a specific (experimental or eventual standard) use of some or all of the Traffic Class bits are permitted to change the value of those bits in packets that they originate, forward, or receive, as required for that specific use. Nodes should ignore and leave unchanged any bits of the Traffic Class field for which they do not support a specific use.",
      "ja": "o トラフィッククラスビットの一部またはすべての特定の（実験的または最終的な標準の）使用をサポートするノードは、特定の使用の必要に応じて、発信、転送、または受信するパケット内のこれらのビットの値を変更できます。ノードは、特定の用途をサポートしないトラフィッククラスフィールドのビットを無視し、変更しないでおく必要があります。"
    },
    {
      "indent": 6,
      "text": "o An upper-layer protocol must not assume that the value of the Traffic Class bits in a received packet are the same as the value sent by the packet's source.",
      "ja": "o 上位層プロトコルは、受信したパケットのトラフィッククラスビットの値が、パケットの送信元から送信された値と同じであると想定してはなりません。"
    },
    {
      "indent": 0,
      "text": "8. Upper-Layer Protocol Issues",
      "section_title": true,
      "ja": "8. 上位層プロトコルの問題"
    },
    {
      "indent": 0,
      "text": "8.1 Upper-Layer Checksums",
      "section_title": true,
      "ja": "8.1 上位層のチェックサム"
    },
    {
      "indent": 3,
      "text": "Any transport or other upper-layer protocol that includes the addresses from the IP header in its checksum computation must be modified for use over IPv6, to include the 128-bit IPv6 addresses instead of 32-bit IPv4 addresses. In particular, the following illustration shows the TCP and UDP \"pseudo-header\" for IPv6:",
      "ja": "チェックサム計算にIPヘッダーからのアドレスを含むトランスポートまたはその他の上位層プロトコルは、32ビットIPv4アドレスの代わりに128ビットIPv6アドレスを含めるように、IPv6で使用できるように変更する必要があります。特に、次の図は、IPv6のTCPおよびUDPの「疑似ヘッダー」を示しています。"
    },
    {
      "indent": 3,
      "text": "+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                                                               |\n+                                                               +\n|                                                               |\n+                         Source Address                        +\n|                                                               |\n+                                                               +\n|                                                               |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                                                               |\n+                                                               +\n|                                                               |\n+                      Destination Address                      +\n|                                                               |\n+                                                               +\n|                                                               |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                   Upper-Layer Packet Length                   |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                      zero                     |  Next Header  |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 6,
      "text": "o If the IPv6 packet contains a Routing header, the Destination Address used in the pseudo-header is that of the final destination. At the originating node, that address will be in the last element of the Routing header; at the recipient(s), that address will be in the Destination Address field of the IPv6 header.",
      "ja": "o IPv6パケットにルーティングヘッダーが含まれている場合、疑似ヘッダーで使用される宛先アドレスは、最終宛先のアドレスです。発信ノードでは、そのアドレスはルーティングヘッダーの最後の要素に含まれます。受信者では、そのアドレスはIPv6ヘッダーの宛先アドレスフィールドにあります。"
    },
    {
      "indent": 6,
      "text": "o The Next Header value in the pseudo-header identifies the upper-layer protocol (e.g., 6 for TCP, or 17 for UDP). It will differ from the Next Header value in the IPv6 header if there are extension headers between the IPv6 header and the upper-layer header.",
      "ja": "o 疑似ヘッダーの次のヘッダー値は、上位層プロトコルを識別します（たとえば、TCPの場合は6、UDPの場合は17）。 IPv6ヘッダーと上位層ヘッダーの間に拡張ヘッダーがある場合、IPv6ヘッダーの次のヘッダー値とは異なります。"
    },
    {
      "indent": 6,
      "text": "o The Upper-Layer Packet Length in the pseudo-header is the length of the upper-layer header and data (e.g., TCP header plus TCP data). Some upper-layer protocols carry their own length information (e.g., the Length field in the UDP header); for such protocols, that is the length used in the pseudo-header. Other protocols (such as TCP) do not carry their own length information, in which case the length used in the pseudo-header is the Payload Length from the IPv6 header, minus the length of any extension headers present between the IPv6 header and the upper-layer header.",
      "ja": "o 疑似ヘッダーの上位層パケット長は、上位層ヘッダーとデータ（TCPヘッダーとTCPデータなど）の長さです。一部の上位層プロトコルは、独自の長さ情報（たとえば、UDPヘッダーのLengthフィールド）を伝送します。そのようなプロトコルの場合、それは疑似ヘッダーで使用される長さです。他のプロトコル（TCPなど）は独自の長さ情報を運びません。その場合、疑似ヘッダーで使用される長さは、IPv6ヘッダーからのペイロード長から、IPv6ヘッダーと上位ヘッダーの間にある拡張ヘッダーの長さを引いたものです。層ヘッダー。"
    },
    {
      "indent": 6,
      "text": "o Unlike IPv4, when UDP packets are originated by an IPv6 node, the UDP checksum is not optional. That is, whenever originating a UDP packet, an IPv6 node must compute a UDP checksum over the packet and the pseudo-header, and, if that computation yields a result of zero, it must be changed to hex FFFF for placement in the UDP header. IPv6 receivers must discard UDP packets containing a zero checksum, and should log the error.",
      "ja": "o IPv4とは異なり、UDPパケットがIPv6ノードによって発信された場合、UDPチェックサムはオプションではありません。つまり、UDPパケットを発信するときは常に、IPv6ノードはパケットと疑似ヘッダーに対してUDPチェックサムを計算する必要があり、その計算結果がゼロの場合、UDPヘッダーに配置するために16進FFFFに変更する必要があります。 。 IPv6レシーバーは、ゼロのチェックサムを含むUDPパケットを破棄し、エラーをログに記録する必要があります。"
    },
    {
      "indent": 3,
      "text": "The IPv6 version of ICMP [ICMPv6] includes the above pseudo-header in its checksum computation; this is a change from the IPv4 version of ICMP, which does not include a pseudo-header in its checksum. The reason for the change is to protect ICMP from misdelivery or corruption of those fields of the IPv6 header on which it depends, which, unlike IPv4, are not covered by an internet-layer checksum. The Next Header field in the pseudo-header for ICMP contains the value 58, which identifies the IPv6 version of ICMP.",
      "ja": "ICMPのIPv6バージョン[ICMPv6]では、チェックサムの計算に上記の疑似ヘッダーが含まれています。これは、ICMPのIPv4バージョンからの変更で、チェックサムに疑似ヘッダーが含まれていません。この変更の理由は、ICMPが依存するIPv6ヘッダーのフィールドの誤配信または破損からICMPを保護するためです。これは、IPv4とは異なり、インターネット層のチェックサムではカバーされません。 ICMPの疑似ヘッダーの次のヘッダーフィールドには、ICMPのIPv6バージョンを識別する値58が含まれています。"
    },
    {
      "indent": 0,
      "text": "8.2 Maximum Packet Lifetime",
      "section_title": true,
      "ja": "8.2 最大パケット寿命"
    },
    {
      "indent": 3,
      "text": "Unlike IPv4, IPv6 nodes are not required to enforce maximum packet lifetime. That is the reason the IPv4 \"Time to Live\" field was renamed \"Hop Limit\" in IPv6. In practice, very few, if any, IPv4 implementations conform to the requirement that they limit packet lifetime, so this is not a change in practice. Any upper-layer protocol that relies on the internet layer (whether IPv4 or IPv6) to limit packet lifetime ought to be upgraded to provide its own mechanisms for detecting and discarding obsolete packets.",
      "ja": "IPv4とは異なり、IPv6ノードは最大のパケットライフタイムを強制する必要はありません。これが、IPv6でIPv4の「Time to Live」フィールドの名前が「Hop Limit」に変更された理由です。実際には、IPv4の実装がパケットの有効期間を制限するという要件に準拠している場合はほとんどありません。したがって、これは実際の変更ではありません。パケットの存続期間を制限するためにインターネット層（IPv4またはIPv6のいずれか）に依存する上位層プロトコルは、古いパケットを検出して破棄する独自のメカニズムを提供するようにアップグレードする必要があります。"
    },
    {
      "indent": 0,
      "text": "8.3 Maximum Upper-Layer Payload Size",
      "section_title": true,
      "ja": "8.3 上位層ペイロードの最大サイズ"
    },
    {
      "indent": 3,
      "text": "When computing the maximum payload size available for upper-layer data, an upper-layer protocol must take into account the larger size of the IPv6 header relative to the IPv4 header. For example, in IPv4, TCP's MSS option is computed as the maximum packet size (a default value or a value learned through Path MTU Discovery) minus 40 octets (20 octets for the minimum-length IPv4 header and 20 octets for the minimum-length TCP header). When using TCP over IPv6, the MSS must be computed as the maximum packet size minus 60 octets, because the minimum-length IPv6 header (i.e., an IPv6 header with no extension headers) is 20 octets longer than a minimum-length IPv4 header.",
      "ja": "上位層のデータに使用できる最大ペイロードサイズを計算する場合、上位層のプロトコルでは、IPv4ヘッダーに比べてIPv6ヘッダーのサイズが大きいことを考慮する必要があります。たとえば、IPv4では、TCPのMSSオプションは、最大パケットサイズ（デフォルト値またはPath MTU Discoveryを通じて学習した値）から40オクテット（最小長のIPv4ヘッダーには20オクテット、最小長には20オクテット）を引いて計算されます。 TCPヘッダー）。 TCP over IPv6を使用する場合、最小長のIPv6ヘッダー（つまり、拡張ヘッダーのないIPv6ヘッダー）は最小長のIPv4ヘッダーよりも20オクテット長いため、MSSは最大パケットサイズから60オクテットを引いたものとして計算する必要があります。"
    },
    {
      "indent": 0,
      "text": "8.4 Responding to Packets Carrying Routing Headers",
      "section_title": true,
      "ja": "8.4 ルーティングヘッダーを運ぶパケットへの応答"
    },
    {
      "indent": 3,
      "text": "When an upper-layer protocol sends one or more packets in response to a received packet that included a Routing header, the response packet(s) must not include a Routing header that was automatically derived by \"reversing\" the received Routing header UNLESS the integrity and authenticity of the received Source Address and Routing header have been verified (e.g., via the use of an Authentication header in the received packet). In other words, only the following kinds of packets are permitted in response to a received packet bearing a Routing header:",
      "ja": "上位層プロトコルがルーティングヘッダーを含む受信パケットに応答して1つまたは複数のパケットを送信する場合、整合性がない限り、応答パケットには、受信したルーティングヘッダーを「逆転」することによって自動的に生成されたルーティングヘッダーを含めないでください。受信したソースアドレスとルーティングヘッダーの信頼性が確認されている（たとえば、受信したパケットの認証ヘッダーを使用して）。つまり、ルーティングヘッダーが付いた受信パケットに応じて、次の種類のパケットのみが許可されます。"
    },
    {
      "indent": 6,
      "text": "o Response packets that do not carry Routing headers.",
      "ja": "o ルーティングヘッダーを伝送しない応答パケット。"
    },
    {
      "indent": 6,
      "text": "o Response packets that carry Routing headers that were NOT derived by reversing the Routing header of the received packet (for example, a Routing header supplied by local configuration).",
      "ja": "o 受信したパケットのルーティングヘッダーを逆にしても生成されなかったルーティングヘッダーを運ぶ応答パケット（たとえば、ローカル構成によって提供されるルーティングヘッダー）。"
    },
    {
      "indent": 6,
      "text": "o Response packets that carry Routing headers that were derived by reversing the Routing header of the received packet IF AND ONLY IF the integrity and authenticity of the Source Address and Routing header from the received packet have been verified by the responder.",
      "ja": "o 受信したパケットの送信元アドレスとルーティングヘッダーの整合性と信頼性がレスポンダによって検証された場合に限り、受信したパケットのルーティングヘッダーを逆にすることによって派生したルーティングヘッダーを含む応答パケット。"
    },
    {
      "indent": 0,
      "text": "Appendix A. Semantics and Usage of the Flow Label Field",
      "section_title": true,
      "ja": "付録A.フローラベルフィールドのセマンティクスと使用法"
    },
    {
      "indent": 3,
      "text": "A flow is a sequence of packets sent from a particular source to a particular (unicast or multicast) destination for which the source desires special handling by the intervening routers. The nature of that special handling might be conveyed to the routers by a control protocol, such as a resource reservation protocol, or by information within the flow's packets themselves, e.g., in a hop-by-hop option. The details of such control protocols or options are beyond the scope of this document.",
      "ja": "フローは、特定のソースから特定の（ユニキャストまたはマルチキャスト）宛先に送信される一連のパケットで、ソースは、介在するルーターによる特別な処理を必要とします。その特別な処理の性質は、リソース予約プロトコルなどの制御プロトコルによって、またはホップバイホップオプションなどのフローのパケット自体内の情報によってルータに伝えられる可能性があります。そのような制御プロトコルまたはオプションの詳細は、このドキュメントの範囲を超えています。"
    },
    {
      "indent": 3,
      "text": "There may be multiple active flows from a source to a destination, as well as traffic that is not associated with any flow. A flow is uniquely identified by the combination of a source address and a non-zero flow label. Packets that do not belong to a flow carry a flow label of zero.",
      "ja": "送信元から宛先への複数のアクティブフロー、およびどのフローにも関連付けられていないトラフィックが存在する可能性があります。フローは、送信元アドレスとゼロ以外のフローラベルの組み合わせによって一意に識別されます。フローに属さないパケットには、ゼロのフローラベルが付けられます。"
    },
    {
      "indent": 3,
      "text": "A flow label is assigned to a flow by the flow's source node. New flow labels must be chosen (pseudo-)randomly and uniformly from the range 1 to FFFFF hex. The purpose of the random allocation is to make any set of bits within the Flow Label field suitable for use as a hash key by routers, for looking up the state associated with the flow.",
      "ja": "フローラベルは、フローのソースノードによってフローに割り当てられます。新しいフローラベルは、1からFFFFFの16進数の範囲から（疑似）ランダムかつ均一に選択する必要があります。ランダムな割り当ての目的は、フローに関連付けられた状態を検索するために、フローラベルフィールド内のビットのセットをルーターによるハッシュキーとして使用するのに適したものにすることです。"
    },
    {
      "indent": 3,
      "text": "All packets belonging to the same flow must be sent with the same source address, destination address, and flow label. If any of those packets includes a Hop-by-Hop Options header, then they all must be originated with the same Hop-by-Hop Options header contents (excluding the Next Header field of the Hop-by-Hop Options header). If any of those packets includes a Routing header, then they all must be originated with the same contents in all extension headers up to and including the Routing header (excluding the Next Header field in the Routing header). The routers or destinations are permitted, but not required, to verify that these conditions are satisfied. If a violation is detected, it should be reported to the source by an ICMP Parameter Problem message, Code 0, pointing to the high-order octet of the Flow Label field (i.e., offset 1 within the IPv6 packet).",
      "ja": "同じフローに属するすべてのパケットは、同じ送信元アドレス、宛先アドレス、およびフローラベルで送信する必要があります。これらのパケットのいずれかにホップバイホップオプションヘッダーが含まれている場合、すべてのパケットは同じホップバイホップオプションヘッダーの内容（ホップバイホップオプションヘッダーの次のヘッダーフィールドを除く）で発信される必要があります。これらのパケットのいずれかにルーティングヘッダーが含まれている場合、それらはすべて、ルーティングヘッダーまでのすべての拡張ヘッダー（ルーティングヘッダーの次のヘッダーフィールドを除く）と同じ内容で発信される必要があります。これらの条件が満たされていることを確認するために、ルーターまたは宛先は許可されますが、必須ではありません。違反が検出された場合は、フローラベルフィールドの高次オクテット（つまり、IPv6パケット内のオフセット1）を指すICMPパラメータ問題メッセージ、コード0によってソースに報告する必要があります。"
    },
    {
      "indent": 3,
      "text": "The maximum lifetime of any flow-handling state established along a flow's path must be specified as part of the description of the state-establishment mechanism, e.g., the resource reservation protocol or the flow-setup hop-by-hop option. A source must not re-use a flow label for a new flow within the maximum lifetime of any flow-handling state that might have been established for the prior use of that flow label.",
      "ja": "フローのパスに沿って確立されたフロー処理状態の最大ライフタイムは、状態確立メカニズムの説明の一部として指定する必要があります。たとえば、リソース予約プロトコルやフロー設定のホップバイホップオプションなどです。ソースは、そのフローラベルの以前の使用に対して確立された可能性のあるフロー処理状態の最大存続期間内に、新しいフローのフローラベルを再利用してはなりません。"
    },
    {
      "indent": 3,
      "text": "When a node stops and restarts (e.g., as a result of a \"crash\"), it must be careful not to use a flow label that it might have used for an earlier flow whose lifetime may not have expired yet. This may be accomplished by recording flow label usage on stable storage so that it can be remembered across crashes, or by refraining from using any flow labels until the maximum lifetime of any possible previously established flows has expired. If the minimum time for rebooting the node is known, that time can be deducted from the necessary waiting period before starting to allocate flow labels.",
      "ja": "ノードが停止して再起動するとき（たとえば、「クラッシュ」の結果として）、ライフタイムがまだ期限切れになっていない可能性がある以前のフローに使用した可能性があるフローラベルを使用しないように注意する必要があります。これは、安定したストレージでフローラベルの使用状況を記録してクラッシュ全体で記憶できるようにするか、以前に確立された可能性のあるフローの最大寿命が切れるまでフローラベルを使用しないようにすることで実現できます。ノードを再起動するための最小時間がわかっている場合、フローラベルの割り当てを開始する前に、その時間を必要な待機期間から差し引くことができます。"
    },
    {
      "indent": 3,
      "text": "There is no requirement that all, or even most, packets belong to flows, i.e., carry non-zero flow labels. This observation is placed here to remind protocol designers and implementors not to assume otherwise. For example, it would be unwise to design a router whose performance would be adequate only if most packets belonged to flows, or to design a header compression scheme that only worked on packets that belonged to flows.",
      "ja": "すべてまたはほとんどのパケットがフローに属する、つまりゼロ以外のフローラベルを運ぶという要件はありません。この観察結果は、プロトコル設計者と実装者に別のことを想定しないように促すためにここに配置されています。たとえば、ほとんどのパケットがフローに属している場合にのみ十分なパフォーマンスが得られるルーターを設計したり、フローに属しているパケットでのみ機能するヘッダー圧縮スキームを設計したりすることは賢明ではありません。"
    },
    {
      "indent": 0,
      "text": "Appendix B. Formatting Guidelines for Options",
      "section_title": true,
      "ja": "付録B.オプションのフォーマットガイドライン"
    },
    {
      "indent": 3,
      "text": "This appendix gives some advice on how to lay out the fields when designing new options to be used in the Hop-by-Hop Options header or the Destination Options header, as described in section 4.2. These guidelines are based on the following assumptions:",
      "ja": "この付録では、セクション4.2で説明されているように、Hop-by-Hop OptionsヘッダーまたはDestination Optionsヘッダーで使用される新しいオプションを設計するときにフィールドをレイアウトする方法についていくつかのアドバイスを提供します。これらのガイドラインは、次の前提に基づいています。"
    },
    {
      "indent": 6,
      "text": "o One desirable feature is that any multi-octet fields within the Option Data area of an option be aligned on their natural boundaries, i.e., fields of width n octets should be placed at an integer multiple of n octets from the start of the Hop-by-Hop or Destination Options header, for n = 1, 2, 4, or 8.",
      "ja": "o 望ましい機能の1つは、オプションのオプションデータ領域内のすべてのマルチオクテットフィールドを自然境界に揃えることです。つまり、幅nオクテットのフィールドは、ホップバイの開始からnオクテットの整数倍に配置する必要があります。 -HopまたはDestination Optionsヘッダー、n = 1、2、4、または8。"
    },
    {
      "indent": 6,
      "text": "o Another desirable feature is that the Hop-by-Hop or Destination Options header take up as little space as possible, subject to the requirement that the header be an integer multiple of 8 octets long.",
      "ja": "o もう1つの望ましい機能は、ヘッダーが8オクテットの長さの整数倍であるという要件に従って、ホップバイホップまたは宛先オプションヘッダーが占めるスペースが可能な限り少ないことです。"
    },
    {
      "indent": 6,
      "text": "o It may be assumed that, when either of the option-bearing headers are present, they carry a very small number of options, usually only one.",
      "ja": "o オプション付きヘッダーのいずれかが存在する場合、それらは非常に少数のオプション、通常は1つだけを運ぶと想定できます。"
    },
    {
      "indent": 3,
      "text": "These assumptions suggest the following approach to laying out the fields of an option: order the fields from smallest to largest, with no interior padding, then derive the alignment requirement for the entire option based on the alignment requirement of the largest field (up to a maximum alignment of 8 octets). This approach is illustrated in the following examples:",
      "ja": "これらの仮定は、オプションのフィールドをレイアウトする次のアプローチを提案します：内部パディングなしでフィールドを最小から最大に並べ、次に最大フィールドの配置要件に基づいてオプション全体の配置要件を導き出します（最大で最大8オクテット）。このアプローチを次の例に示します。"
    },
    {
      "indent": 3,
      "text": "Example 1",
      "ja": "例1"
    },
    {
      "indent": 3,
      "text": "If an option X required two data fields, one of length 8 octets and one of length 4 octets, it would be laid out as follows:",
      "ja": "オプションXに2つのデータフィールド（長さ8オクテットと長さ4オクテットの1つ）が必要な場合、次のようにレイアウトされます。"
    },
    {
      "indent": 3,
      "text": "                                +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n                                | Option Type=X |Opt Data Len=12|\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                         4-octet field                         |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                                                               |\n+                         8-octet field                         +\n|                                                               |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ Its alignment requirement is 8n+2, to ensure that the 8-octet field\nstarts at a multiple-of-8 offset from the start of the enclosing\nheader.  A complete Hop-by-Hop or Destination Options header\ncontaining this one option would look as follows:",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|  Next Header  | Hdr Ext Len=1 | Option Type=X |Opt Data Len=12|\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                         4-octet field                         |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                                                               |\n+                         8-octet field                         +\n|                                                               |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "Example 2",
      "ja": "例2"
    },
    {
      "indent": 3,
      "text": "If an option Y required three data fields, one of length 4 octets, one of length 2 octets, and one of length 1 octet, it would be laid out as follows:",
      "ja": "オプションYに、長さ4オクテット、長さ2オクテット、長さ1オクテットの3つのデータフィールドが必要な場合、次のようにレイアウトされます。"
    },
    {
      "indent": 3,
      "text": "                                                +-+-+-+-+-+-+-+-+\n                                                | Option Type=Y |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|Opt Data Len=7 | 1-octet field |         2-octet field         |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                         4-octet field                         |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "Its alignment requirement is 4n+3, to ensure that the 4-octet field starts at a multiple-of-4 offset from the start of the enclosing header. A complete Hop-by-Hop or Destination Options header containing this one option would look as follows:",
      "ja": "そのアラインメント要件は4n + 3であり、4オクテットフィールドが、囲んでいるヘッダーの先頭から4の倍数のオフセットで開始することを保証します。この1つのオプションを含む完全なホップバイホップまたは宛先オプションヘッダーは、次のようになります。"
    },
    {
      "indent": 3,
      "text": "+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|  Next Header  | Hdr Ext Len=1 | Pad1 Option=0 | Option Type=Y |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|Opt Data Len=7 | 1-octet field |         2-octet field         |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                         4-octet field                         |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n| PadN Option=1 |Opt Data Len=2 |       0       |       0       |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ Example 3",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "A Hop-by-Hop or Destination Options header containing both options X and Y from Examples 1 and 2 would have one of the two following formats, depending on which option appeared first:",
      "ja": "例1と2のオプションXとYの両方を含むホップバイホップまたは宛先オプションヘッダーは、最初に表示されたオプションに応じて、次の2つの形式のいずれかになります。"
    },
    {
      "indent": 3,
      "text": "+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|  Next Header  | Hdr Ext Len=3 | Option Type=X |Opt Data Len=12|\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                         4-octet field                         |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                                                               |\n+                         8-octet field                         +\n|                                                               |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n| PadN Option=1 |Opt Data Len=1 |       0       | Option Type=Y |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|Opt Data Len=7 | 1-octet field |         2-octet field         |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                         4-octet field                         |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n| PadN Option=1 |Opt Data Len=2 |       0       |       0       |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|  Next Header  | Hdr Ext Len=3 | Pad1 Option=0 | Option Type=Y |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|Opt Data Len=7 | 1-octet field |         2-octet field         |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                         4-octet field                         |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n| PadN Option=1 |Opt Data Len=4 |       0       |       0       |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|       0       |       0       | Option Type=X |Opt Data Len=12|\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                         4-octet field                         |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                                                               |\n+                         8-octet field                         +\n|                                                               |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "Security Considerations",
      "ja": "セキュリティに関する考慮事項"
    },
    {
      "indent": 3,
      "text": "The security features of IPv6 are described in the Security Architecture for the Internet Protocol [RFC-2401].",
      "ja": "IPv6のセキュリティ機能は、インターネットプロトコルのセキュリティアーキテクチャ[RFC-2401]で説明されています。"
    },
    {
      "indent": 0,
      "text": "Acknowledgments",
      "ja": "謝辞"
    },
    {
      "indent": 3,
      "text": "The authors gratefully acknowledge the many helpful suggestions of the members of the IPng working group, the End-to-End Protocols research group, and the Internet Community At Large.",
      "ja": "著者は、IPngワーキンググループ、End-to-End Protocols研究グループ、およびインターネットコミュニティ全体のメンバーの多くの役立つ提案に感謝の意を表します。"
    },
    {
      "indent": 0,
      "text": "Authors' Addresses",
      "ja": "著者のアドレス"
    },
    {
      "indent": 3,
      "text": "Stephen E. Deering Cisco Systems, Inc. 170 West Tasman Drive San Jose, CA 95134-1706 USA",
      "ja": "Stephen E. Deering Cisco Systems、Inc. 170 West Tasman Drive San Jose、CA 95134-1706 USA"
    },
    {
      "indent": 3,
      "text": "Phone: +1 408 527 8213\nFax:   +1 408 527 8254\nEMail: deering@cisco.com",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "Robert M. Hinden Nokia 232 Java Drive Sunnyvale, CA 94089 USA",
      "ja": "ロバート・M Hindon Nokia 232 Java Drive Sunnyvale、CA 94089彼"
    },
    {
      "indent": 3,
      "text": "Phone: +1 408 990-2004\nFax:   +1 408 743-5677\nEMail: hinden@iprg.nokia.com",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "References",
      "ja": "参考文献"
    },
    {
      "indent": 3,
      "text": "[RFC-2401] Kent, S. and R. Atkinson, \"Security Architecture for the Internet Protocol\", RFC 2401, November 1998.",
      "ja": "[RFC-2401]ケント、S。、およびR.アトキンソン、「インターネットプロトコルのセキュリティアーキテクチャ」、RFC 2401、1998年11月。"
    },
    {
      "indent": 3,
      "text": "[RFC-2402] Kent, S. and R. Atkinson, \"IP Authentication Header\", RFC 2402, November 1998.",
      "ja": "[RFC-2402]ケント、S。、およびR.アトキンソン、「IP認証ヘッダー」、RFC 2402、1998年11月。"
    },
    {
      "indent": 3,
      "text": "[RFC-2406] Kent, S. and R. Atkinson, \"IP Encapsulating Security Protocol (ESP)\", RFC 2406, November 1998.",
      "ja": "[RFC-2406]ケント、S。、およびR.アトキンソン、「IPカプセル化セキュリティプロトコル（ESP）」、RFC 2406、1998年11月。"
    },
    {
      "indent": 3,
      "text": "[ICMPv6] Conta, A. and S. Deering, \"ICMP for the Internet Protocol Version 6 (IPv6)\", RFC 2463, December 1998.",
      "ja": "[ICMPv6] Conta、A。およびS. Deering、「ICMP for the Internet Protocol Version 6（IPv6）」、RFC 2463、1998年12月。"
    },
    {
      "indent": 3,
      "text": "[ADDRARCH] Hinden, R. and S. Deering, \"IP Version 6 Addressing Architecture\", RFC 2373, July 1998.",
      "ja": "[ADDRARCH] Hinden、R。およびS. Deering、「IPバージョン6アドレッシングアーキテクチャ」、RFC 2373、1998年7月。"
    },
    {
      "indent": 3,
      "text": "[RFC-1981] McCann, J., Mogul, J. and S. Deering, \"Path MTU Discovery for IP version 6\", RFC 1981, August 1996.",
      "ja": "[RFC-1981]マッキャンJ.、モーグルJ.、S。ディアリング、「IPバージョン6のパスMTUディスカバリー」、RFC 1981、1996年8月。"
    },
    {
      "indent": 3,
      "text": "[RFC-791] Postel, J., \"Internet Protocol\", STD 5, RFC 791, September 1981.",
      "ja": "[RFC-791] Postel、J。、「インターネットプロトコル」、STD 5、RFC 791、1981年9月。"
    },
    {
      "indent": 3,
      "text": "[RFC-1700]   Reynolds, J. and J. Postel, \"Assigned Numbers\", STD 2,\n             RFC 1700, October 1994.  See also:\n             http://www.iana.org/numbers.html",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "[RFC-1661] Simpson, W., \"The Point-to-Point Protocol (PPP)\", STD 51, RFC 1661, July 1994.",
      "ja": "[RFC-1661]シンプソン、W。、「ポイントツーポイントプロトコル（PPP）」、STD 51、RFC 1661、1994年7月。"
    },
    {
      "indent": 0,
      "text": "CHANGES SINCE RFC-1883",
      "ja": "RFC-1883以降の変更"
    },
    {
      "indent": 3,
      "text": "This memo has the following changes from RFC-1883. Numbers identify the Internet-Draft version in which the change was made.",
      "ja": "このメモには、RFC-1883からの次の変更点があります。番号は、変更が行われたインターネットドラフトバージョンを示します。"
    },
    {
      "indent": 4,
      "text": "02) Removed all references to jumbograms and the Jumbo Payload option (moved to a separate document).",
      "ja": "02）ジャンボグラムとジャンボペイロードオプションへの参照をすべて削除しました（別のドキュメントに移動）。"
    },
    {
      "indent": 4,
      "text": "02) Moved most of Flow Label description from section 6 to (new) Appendix A.",
      "ja": "02）フローラベルの説明のほとんどをセクション6から（新規）付録Aに移動しました。"
    },
    {
      "indent": 4,
      "text": "02) In Flow Label description, now in Appendix A, corrected maximum Flow Label value from FFFFFF to FFFFF (i.e., one less \"F\") due to reduction of size of Flow Label field from 24 bits to 20 bits.",
      "ja": "02）フローラベルの説明で、現在付録Aで、フローラベルフィールドのサイズが24ビットから20ビットに縮小されたため、フローラベルの最大値をFFFFFFからFFFFF（つまり「F」が1つ少ない）に修正しました。"
    },
    {
      "indent": 4,
      "text": "02) Renumbered (relettered?) the previous Appendix A to be Appendix B.",
      "ja": "02）以前の付録Aの番号を付け直した（再表示しましたか？）付録Bになりました。"
    },
    {
      "indent": 4,
      "text": "02) Changed the wording of the Security Considerations section to avoid dependency loop between this spec and the IPsec specs.",
      "ja": "02）この仕様とIPsec仕様の間の依存ループを回避するために、「セキュリティの考慮事項」セクションの表現を変更しました。"
    },
    {
      "indent": 4,
      "text": "02) Updated R. Hinden's email address and company affiliation.",
      "ja": "02）R. Hindenのメールアドレスと所属を更新しました。"
    },
    {
      "indent": 8,
      "text": "--------------------------------------------------------",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 4,
      "text": "01) In section 3, changed field name \"Class\" to \"Traffic Class\" and increased its size from 4 to 8 bits. Decreased size of Flow Label field from 24 to 20 bits to compensate for increase in Traffic Class field.",
      "ja": "01）セクション3で、フィールド名を「クラス」から「トラフィッククラス」に変更し、そのサイズを4ビットから8ビットに増やしました。トラフィッククラスフィールドの増加を補うために、フローラベルフィールドのサイズを24ビットから20ビットに減らしました。"
    },
    {
      "indent": 4,
      "text": "01) In section 4.1, restored the order of the Authentication Header and the ESP header, which were mistakenly swapped in the 00 version of this memo.",
      "ja": "01）セクション4.1で、このメモの00バージョンで誤って入れ替えられた認証ヘッダーとESPヘッダーの順序を復元しました。"
    },
    {
      "indent": 4,
      "text": "01) In section 4.4, deleted the Strict/Loose Bit Map field and the strict routing functionality from the Type 0 Routing header, and removed the restriction on number of addresses that may be carried in the Type 0 Routing header (was limited to 23 addresses, because of the size of the strict/loose bit map).",
      "ja": "01）セクション4.4で、Type 0ルーティングヘッダーからStrict / Looseビットマップフィールドとstrictルーティング機能を削除し、Type 0ルーティングヘッダーで搬送できるアドレス数の制限を削除しました（23アドレスに制限されていました） 、厳密/緩いビットマップのサイズのため）。"
    },
    {
      "indent": 4,
      "text": "01) In section 5, changed the minimum IPv6 MTU from 576 to 1280 octets, and added a recommendation that links with configurable MTU (e.g., PPP links) be configured to have an MTU of at least 1500 octets.",
      "ja": "01）セクション5で、IPv6の最小MTUを576オクテットから1280オクテットに変更し、設定可能なMTUを持つリンク（PPPリンクなど）が少なくとも1500オクテットのMTUを持つように設定するという推奨を追加しました。"
    },
    {
      "indent": 4,
      "text": "01) In section 5, deleted the requirement that a node must not send fragmented packets that reassemble to more than 1500 octets without knowledge of the destination reassembly buffer size, and replaced it with a recommendation that upper-layer protocols or applications should not do that.",
      "ja": "01）セクション5で、宛先の再構成バッファーサイズを認識せずにノードが1500オクテットを超えて再構成する断片化されたパケットを送信してはならないという要件を削除し、上位層のプロトコルまたはアプリケーションがそれを行わないようにするという推奨に置き換えました。"
    },
    {
      "indent": 4,
      "text": "01) Replaced reference to the IPv4 Path MTU Discovery spec (RFC-1191) with reference to the IPv6 Path MTU Discovery spec (RFC-1981), and deleted the Notes at the end of section 5 regarding Path MTU Discovery, since those details are now covered by RFC-1981.",
      "ja": "01）IPv4パスMTU発見仕様（RFC-1191）への参照をIPv6パスMTU発見仕様（RFC-1981）への参照に置き換え、セクション5の最後にあるパスMTU発見に関する注記を削除しました。現在RFC-1981でカバーされています。"
    },
    {
      "indent": 4,
      "text": "01) In section 6, deleted specification of \"opportunistic\" flow set-up, and removed all references to the 6-second maximum lifetime for opportunistically established flow state.",
      "ja": "01）セクション6で、「日和見的」フロー設定の指定を削除し、日和見的に確立されたフロー状態の6秒の最大ライフタイムへのすべての参照を削除しました。"
    },
    {
      "indent": 4,
      "text": "01) In section 7, deleted the provisional description of the internal structure and semantics of the Traffic Class field, and specified that such descriptions be provided in separate documents.",
      "ja": "01）セクション7で、トラフィッククラスフィールドの内部構造とセマンティクスの暫定的な説明を削除し、そのような説明が別のドキュメントで提供されるように指定しました。"
    },
    {
      "indent": 8,
      "text": "--------------------------------------------------------",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 4,
      "text": "00) In section 4, corrected the Code value to indicate \"unrecognized Next Header type encountered\" in an ICMP Parameter Problem message (changed from 2 to 1).",
      "ja": "00）セクション4で、ICMPパラメータ問題メッセージ（2から1に変更）で「認識できない次のヘッダータイプが検出されました」を示すようにコード値を修正しました"
    },
    {
      "indent": 4,
      "text": "00) In the description of the Payload Length field in section 3, and of the Jumbo Payload Length field in section 4.3, made it clearer that extension headers are included in the payload length count.",
      "ja": "00）セクション3のペイロード長フィールドとセクション4.3のジャンボペイロード長フィールドの説明で、ペイロード長カウントに拡張ヘッダーが含まれていることが明確になりました。"
    },
    {
      "indent": 4,
      "text": "00) In section 4.1, swapped the order of the Authentication header and the ESP header. (NOTE: this was a mistake, and the change was undone in version 01.)",
      "ja": "00）セクション4.1で、認証ヘッダーとESPヘッダーの順序を入れ替えました。 （注：これは誤りであり、変更はバージョン01で元に戻されました。）"
    },
    {
      "indent": 4,
      "text": "00) In section 4.2, made it clearer that options are identified by the full 8-bit Option Type, not by the low-order 5 bits of an Option Type. Also specified that the same Option Type numbering space is used for both Hop-by-Hop Options and Destination Options headers.",
      "ja": "00）セクション4.2で、オプションタイプの下位5ビットではなく、完全な8ビットオプションタイプによってオプションが識別されることが明確になりました。また、ホップバイホップオプションヘッダーと宛先オプションヘッダーの両方に同じオプションタイプ番号スペースが使用されるように指定しました。"
    },
    {
      "indent": 4,
      "text": "00) In section 4.4, added a sentence requiring that nodes processing a Routing header must send an ICMP Packet Too Big message in response to a packet that is too big to fit in the next hop link (rather than, say, performing fragmentation).",
      "ja": "00）セクション4.4に、ルーティングヘッダーを処理するノードが、次のホップリンクに収まらない（たとえば、フラグメンテーションを実行するのではなく）パケットに応答して、ICMPパケットが大きすぎるメッセージを送信する必要があることを要求する文を追加しました。"
    },
    {
      "indent": 4,
      "text": "00) Changed the name of the IPv6 Priority field to \"Class\", and replaced the previous description of Priority in section 7 with a description of the Class field. Also, excluded this field from the set of fields that must remain the same for all packets in the same flow, as specified in section 6.",
      "ja": "00）IPv6優先度フィールドの名前を「クラス」に変更し、セクション7の優先度に関する以前の説明をクラスフィールドの説明に置き換えました。また、セクション6で指定されているように、このフィールドは、同じフロー内のすべてのパケットで同じでなければならないフィールドのセットから除外されました。"
    },
    {
      "indent": 4,
      "text": "00) In the pseudo-header in section 8.1, changed the name of the \"Payload Length\" field to \"Upper-Layer Packet Length\". Also clarified that, in the case of protocols that carry their own length info (like non-jumbogram UDP), it is the upper-layer-derived length, not the IP-layer-derived length, that is used in the pseudo-header.",
      "ja": "00）セクション8.1の疑似ヘッダーで、「ペイロード長」フィールドの名前を「上位パケット長」に変更しました。独自の長さ情報（非ジャンボグラムUDPなど）を運ぶプロトコルの場合、疑似ヘッダーで使用されるのは、IP層から派生した長さではなく、上位層から派生した長さであることも明らかにしました。 。"
    },
    {
      "indent": 4,
      "text": "00) Added section 8.4, specifying that upper-layer protocols, when responding to a received packet that carried a Routing header, must not include the reverse of the Routing header in the response packet(s) unless the received Routing header was authenticated.",
      "ja": "00）セクション8.4を追加し、ルーティングヘッダーを伝送する受信パケットに応答するときに、受信したルーティングヘッダーが認証されない限り、ルーティングヘッダーの逆を応答パケットに含めてはならないことを指定します。"
    },
    {
      "indent": 4,
      "text": "00) Fixed some typos and grammatical errors.",
      "ja": "00）いくつかのタイプミスと文法エラーを修正しました。"
    },
    {
      "indent": 4,
      "text": "00) Authors' contact info updated.",
      "ja": "00）著者の連絡先情報を更新しました。"
    },
    {
      "indent": 8,
      "text": "--------------------------------------------------------",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "Full Copyright Statement",
      "ja": "完全な著作権表示"
    },
    {
      "indent": 3,
      "text": "Copyright (C) The Internet Society (1998). All Rights Reserved.",
      "ja": "Copyright（C）The Internet Society（1998）。全著作権所有。"
    },
    {
      "indent": 3,
      "text": "This document and translations of it may be copied and furnished to others, and derivative works that comment on or otherwise explain it or assist in its implementation may be prepared, copied, published and distributed, in whole or in part, without restriction of any kind, provided that the above copyright notice and this paragraph are included on all such copies and derivative works. However, this document itself may not be modified in any way, such as by removing the copyright notice or references to the Internet Society or other Internet organizations, except as needed for the purpose of developing Internet standards in which case the procedures for copyrights defined in the Internet Standards process must be followed, or as required to translate it into languages other than English.",
      "ja": "このドキュメントとその翻訳はコピーして他のユーザーに提供することができ、コメントまたはその他の方法で説明したり、その実装を支援する二次的著作物は、いかなる種類の制限なしに、全体または一部を準備、コピー、公開、および配布することができます。 、ただし、上記の著作権表示とこの段落は、そのようなすべてのコピーと派生物に含まれています。ただし、このドキュメント自体は、著作権に関する通知を削除したり、インターネットソサエティや他のインターネット組織への参照を削除したりするなど、いかなる方法でも変更できません。ただし、インターネット標準を開発する目的で必要な場合は除きます。インターネット標準のプロセスに従うか、または必要に応じて、それを英語以外の言語に翻訳する必要があります。"
    },
    {
      "indent": 3,
      "text": "The limited permissions granted above are perpetual and will not be revoked by the Internet Society or its successors or assigns.",
      "ja": "上記で付与された制限付きのアクセス許可は永続的であり、インターネットソサエティまたはその後継者または譲受人によって取り消されることはありません。"
    },
    {
      "indent": 3,
      "text": "This document and the information contained herein is provided on an \"AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING TASK FORCE DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE INFORMATION HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.",
      "ja": "このドキュメントとここに含まれる情報は「現状有姿」で提供され、インターネット社会およびインターネット技術タスクフォースは、明示または黙示を問わず、ここに記載されている情報の使用が保証するものに限定されないいかなる保証も含め、一切の保証を否認します。商品性または特定の目的への適合性に関する権利または黙示の保証を侵害すること。"
    }
  ]
}