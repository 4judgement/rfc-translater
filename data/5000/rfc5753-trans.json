{
  "title": {
    "text": "RFC 5753 - Use of Elliptic Curve Cryptography (ECC) Algorithms in Cryptographic Message Syntax (CMS)",
    "ja": "RFC 5753 - 暗号メッセージ構文（CMS）での楕円曲線暗号（ECC）アルゴリズムの使用"
  },
  "number": 5753,
  "created_at": "2020-08-22 19:02:44.305814+09:00",
  "updated_by": "",
  "contents": [
    {
      "indent": 0,
      "text": "Internet Engineering Task Force (IETF)                         S. Turner\nRequest for Comments: 5753                                          IECA\nObsoletes: 3278                                                 D. Brown\nCategory: Informational                                         Certicom\nISSN: 2070-1721                                             January 2010",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 10,
      "text": "Use of Elliptic Curve Cryptography (ECC) Algorithms in Cryptographic Message Syntax (CMS)",
      "ja": "暗号メッセージ構文（CMS）での楕円曲線暗号（ECC）アルゴリズムの使用"
    },
    {
      "indent": 0,
      "text": "Abstract",
      "ja": "概要"
    },
    {
      "indent": 3,
      "text": "This document describes how to use Elliptic Curve Cryptography (ECC) public key algorithms in the Cryptographic Message Syntax (CMS). The ECC algorithms support the creation of digital signatures and the exchange of keys to encrypt or authenticate content. The definition of the algorithm processing is based on the NIST FIPS 186-3 for digital signature, NIST SP800-56A and SEC1 for key agreement, RFC 3370 and RFC 3565 for key wrap and content encryption, NIST FIPS 180-3 for message digest, SEC1 for key derivation, and RFC 2104 and RFC 4231 for message authentication code standards. This document obsoletes RFC 3278.",
      "ja": "このドキュメントでは、暗号メッセージ構文（CMS）で楕円曲線暗号（ECC）公開鍵アルゴリズムを使用する方法について説明します。 ECCアルゴリズムは、デジタル署名の作成とコンテンツの暗号化または認証のための鍵の交換をサポートしています。アルゴリズム処理の定義は、デジタル署名用のNIST FIPS 186-3、キー合意用のNIST SP800-56AおよびSEC1、キーラップおよびコンテンツ暗号化用のRFC 3370およびRFC 3565、メッセージダイジェスト用のNIST FIPS 180-3に基づいています。鍵の導出にはSEC1、メッセージ認証コード標準にはRFC 2104およびRFC 4231。このドキュメントはRFC 3278を廃止します。"
    },
    {
      "indent": 0,
      "text": "Status of This Memo",
      "ja": "本文書の状態"
    },
    {
      "indent": 3,
      "text": "This document is not an Internet Standards Track specification; it is published for informational purposes.",
      "ja": "このドキュメントはInternet Standards Trackの仕様ではありません。情報提供を目的として公開されています。"
    },
    {
      "indent": 3,
      "text": "This document is a product of the Internet Engineering Task Force (IETF). It represents the consensus of the IETF community. It has received public review and has been approved for publication by the Internet Engineering Steering Group (IESG). Not all documents approved by the IESG are a candidate for any level of Internet Standard; see Section 2 of RFC 5741.",
      "ja": "このドキュメントは、IETF（Internet Engineering Task Force）の製品です。これは、IETFコミュニティのコンセンサスを表しています。公開レビューを受け、インターネットエンジニアリングステアリンググループ（IESG）による公開が承認されました。 IESGによって承認されたすべてのドキュメントが、あらゆるレベルのインターネット標準の候補になるわけではありません。 RFC 5741のセクション2をご覧ください。"
    },
    {
      "indent": 3,
      "text": "Information about the current status of this document, any errata, and how to provide feedback on it may be obtained at http://www.rfc-editor.org/info/rfc5753.",
      "ja": "このドキュメントの現在のステータス、エラッタ、およびフィードバックの提供方法に関する情報は、http：//www.rfc-editor.org/info/rfc5753で入手できます。"
    },
    {
      "indent": 0,
      "text": "Copyright Notice",
      "ja": "著作権表示"
    },
    {
      "indent": 3,
      "text": "Copyright (c) 2010 IETF Trust and the persons identified as the document authors. All rights reserved.",
      "ja": "Copyright（c）2010 IETF Trustおよびドキュメントの作成者として識別された人物。全著作権所有。"
    },
    {
      "indent": 0,
      "text": " This document is subject to BCP 78 and the IETF Trust's Legal Provisions Relating to IETF Documents (http://trustee.ietf.org/license-info) in effect on the date of publication of this document. Please review these documents carefully, as they describe your rights and restrictions with respect to this document. Code Components extracted from this document must include Simplified BSD License text as described in Section 4.e of the Trust Legal Provisions and are provided without warranty as described in the Simplified BSD License.",
      "ja": "この文書は、BCP 78およびこの文書の発行日に有効なIETF文書に関するIETFトラストの法的規定（http://trustee.ietf.org/license-info）の対象となります。これらのドキュメントは、このドキュメントに関するあなたの権利と制限を説明しているため、注意深く確認してください。このドキュメントから抽出されたコードコンポーネントには、Trust Legal Provisionsのセクション4.eに記載されているSimplified BSD Licenseのテキストが含まれている必要があり、Simplified BSD Licenseに記載されているように保証なしで提供されます。"
    },
    {
      "indent": 3,
      "text": "This document may contain material from IETF Documents or IETF Contributions published or made publicly available before November 10, 2008. The person(s) controlling the copyright in some of this material may not have granted the IETF Trust the right to allow modifications of such material outside the IETF Standards Process. Without obtaining an adequate license from the person(s) controlling the copyright in such materials, this document may not be modified outside the IETF Standards Process, and derivative works of it may not be created outside the IETF Standards Process, except to format it for publication as an RFC or to translate it into languages other than English.",
      "ja": "このドキュメントには、2008年11月10日より前に公開または公開されたIETFドキュメントまたはIETFコントリビューションの素材が含まれている場合があります。この素材の一部で著作権を管理している人が、IETFトラストにそのような素材の変更を許可する権利を付与していない可能性がありますIETF標準プロセス外。このような資料の著作権を管理する人から適切なライセンスを取得せずに、このドキュメントをIETF標準プロセス外で変更したり、その派生物をIETF標準プロセス外で作成したりすることはできません。 RFCとして、またはそれを英語以外の言語に翻訳するための出版物。"
    },
    {
      "indent": 0,
      "text": "Table of Contents",
      "ja": "目次"
    },
    {
      "indent": 3,
      "text": "1. Introduction ....................................................3\n   1.1. Requirements Terminology ...................................3\n2. SignedData Using ECC ............................................3\n   2.1. SignedData Using ECDSA .....................................4\n3. EnvelopedData Using ECC Algorithms ..............................5\n   3.1. EnvelopedData Using (ephemeral-static) ECDH ................5\n   3.2. EnvelopedData Using 1-Pass ECMQV ...........................8\n4. AuthenticatedData and AuthEnvelopedData Using ECC ..............11\n   4.1. AuthenticatedData Using 1-Pass ECMQV ......................11\n   4.2. AuthEnvelopedData Using 1-Pass ECMQV ......................12\n5. Certificates Using ECC .........................................13\n6. SMIMECapabilities Attribute and ECC ............................13\n7. ASN.1 Syntax ...................................................21\n   7.1. Algorithm Identifiers .....................................21\n   7.2. Other Syntax ..............................................24\n8. Recommended Algorithms and Elliptic Curves .....................26\n9. Security Considerations ........................................28\n10. IANA Considerations ...........................................33\n11. References ....................................................33\n   11.1. Normative References .....................................33\n   11.2. Informative References ...................................35\nAppendix A.  ASN.1 Modules.........................................37\n   A.1.  1988 ASN.1 Module.........................................37\n   A.2.  2004 ASN.1 Module.........................................45\nAppendix B. Changes since RFC 3278.................................59\nAcknowledgements...................................................61",
      "raw": true,
      "toc": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "1. Introduction",
      "section_title": true,
      "ja": "1. はじめに"
    },
    {
      "indent": 3,
      "text": "The Cryptographic Message Syntax (CMS) is cryptographic algorithm independent. This specification defines a profile for the use of Elliptic Curve Cryptography (ECC) public key algorithms in the CMS. The ECC algorithms are incorporated into the following CMS content types:",
      "ja": "暗号化メッセージ構文（CMS）は、暗号化アルゴリズムに依存しません。この仕様は、CMSで楕円曲線暗号（ECC）公開鍵アルゴリズムを使用するためのプロファイルを定義しています。 ECCアルゴリズムは、次のCMSコンテンツタイプに組み込まれています。"
    },
    {
      "indent": 3,
      "text": "- 'SignedData' to support ECC-based digital signature methods (ECDSA) to sign content;",
      "ja": "- コンテンツに署名するためのECCベースのデジタル署名方式（ECDSA）をサポートする「SignedData」。"
    },
    {
      "indent": 3,
      "text": "- 'EnvelopedData' to support ECC-based public key agreement methods (ECDH and ECMQV) to generate pairwise key-encryption keys to encrypt content-encryption keys used for content encryption;",
      "ja": "- コンテンツの暗号化に使用されるコンテンツ暗号化キーを暗号化するためのペアワイズキー暗号化キーを生成するためのECCベースの公開キー合意方法（ECDHおよびECMQV）をサポートする 'EnvelopedData'。"
    },
    {
      "indent": 3,
      "text": "- 'AuthenticatedData' to support ECC-based public key agreement methods (ECMQV) to generate pairwise key-encryption keys to encrypt message-authentication keys used for content authentication and integrity; and",
      "ja": "- コンテンツ認証と整合性に使用されるメッセージ認証キーを暗号化するペアワイズキー暗号化キーを生成するためのECCベースの公開キー合意方法（ECMQV）をサポートする「AuthenticatedData」。そして"
    },
    {
      "indent": 3,
      "text": "- 'AuthEnvelopedData' to support ECC-based public key agreement methods (ECMQV) to generate pairwise key-encryption keys to encrypt message-authentication and content-encryption keys used for content authentication, integrity, and encryption.",
      "ja": "- 「AuthEnvelopedData」は、ECCベースの公開鍵合意方式（ECMQV）をサポートして、コンテンツ認証、整合性、および暗号化に使用されるメッセージ認証およびコンテンツ暗号化キーを暗号化するためのペアワイズキー暗号化キーを生成します。"
    },
    {
      "indent": 3,
      "text": "Certification of EC public keys is also described to provide public key distribution in support of the specified techniques.",
      "ja": "特定の技術をサポートする公開鍵の配布を提供するために、EC公開鍵の認証についても説明します。"
    },
    {
      "indent": 3,
      "text": "The document will obsolete [CMS-ECC]. The technical changes performed since RFC 3278 are detailed in Appendix B.",
      "ja": "このドキュメントは廃止されます[CMS-ECC]。 RFC 3278以降に行われた技術的な変更の詳細は、付録Bにあります。"
    },
    {
      "indent": 0,
      "text": "1.1. Requirements Terminology",
      "section_title": true,
      "ja": "1.1. 要件の用語"
    },
    {
      "indent": 3,
      "text": "The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as described in [MUST].",
      "ja": "このドキュメントのキーワード「MUST」、「MUST NOT」、「REQUIRED」、「SHALL」、「SHALL NOT」、「SHOULD」、「SHOULD NOT」、「RECOMMENDED」、「MAY」、および「OPTIONAL」は、 [MUST]の説明に従って解釈されます。"
    },
    {
      "indent": 0,
      "text": "2. SignedData Using ECC",
      "section_title": true,
      "ja": "2. ECCを使用したSignedData"
    },
    {
      "indent": 3,
      "text": "This section describes how to use ECC algorithms with the CMS SignedData format to sign data.",
      "ja": "このセクションでは、CMS SignedData形式でECCアルゴリズムを使用してデータに署名する方法について説明します。"
    },
    {
      "indent": 0,
      "text": "2.1. SignedData Using ECDSA",
      "section_title": true,
      "ja": "2.1. ECDSAを使用したSignedData"
    },
    {
      "indent": 3,
      "text": "This section describes how to use the Elliptic Curve Digital Signature Algorithm (ECDSA) with SignedData. ECDSA is specified in [FIPS186-3]. The method is the elliptic curve analog of the Digital Signature Algorithm (DSA) [FIPS186-3]. ECDSA is used with the Secure Hash Algorithm (SHA) [FIPS180-3].",
      "ja": "このセクションでは、SignedDataで楕円曲線デジタル署名アルゴリズム（ECDSA）を使用する方法について説明します。 ECDSAは[FIPS186-3]で指定されています。この方法は、デジタル署名アルゴリズム（DSA）[FIPS186-3]の楕円曲線アナログです。 ECDSAは、Secure Hash Algorithm（SHA）[FIPS180-3]で使用されます。"
    },
    {
      "indent": 3,
      "text": "In an implementation that uses ECDSA with CMS SignedData, the following techniques and formats MUST be used.",
      "ja": "CMS SignedDataでECDSAを使用する実装では、次の手法と形式を使用する必要があります。"
    },
    {
      "indent": 0,
      "text": "2.1.1. Fields of the SignedData",
      "section_title": true,
      "ja": "2.1.1. SignedDataのフィールド"
    },
    {
      "indent": 3,
      "text": "When using ECDSA with SignedData, the fields of SignerInfo are as in [CMS], but with the following restrictions:",
      "ja": "SignedDataでECDSAを使用する場合、SignerInfoのフィールドは[CMS]と同じですが、次の制限があります。"
    },
    {
      "indent": 3,
      "text": "- digestAlgorithm MUST contain the algorithm identifier of the hash algorithm (see Section 7.1.1), which MUST be one of the following: id-sha1, id-sha224, id-sha256, id-sha384, or id-sha512.",
      "ja": "- digestAlgorithmには、ハッシュアルゴリズムのアルゴリズム識別子（セクション7.1.1を参照）を含める必要があります。これは、id-sha1、id-sha224、id-sha256、id-sha384、またはid-sha512のいずれかでなければなりません。"
    },
    {
      "indent": 3,
      "text": "- signatureAlgorithm contains the signature algorithm identifier (see Section 7.1.3): ecdsa-with-SHA1, ecdsa-with-SHA224, ecdsa-with-SHA256, ecdsa-with-SHA384, or ecdsa-with-SHA512. The hash algorithm identified in the name of the signature algorithm MUST be the same as the digestAlgorithm (e.g., digestAlgorithm is id-sha256 therefore signatureAlgorithm is ecdsa-with-SHA256).",
      "ja": "- signatureAlgorithmには、署名アルゴリズム識別子（セクション7.1.3を参照）が含まれています：ecdsa-with-SHA1、ecdsa-with-SHA224、ecdsa-with-SHA256、ecdsa-with-SHA384、またはecdsa-with-SHA512。署名アルゴリズムの名前で識別されるハッシュアルゴリズムは、digestAlgorithmと同じである必要があります（たとえば、digestAlgorithmはid-sha256であるため、signatureAlgorithmはecdsa-with-SHA256です）。"
    },
    {
      "indent": 3,
      "text": "- signature MUST contain the DER encoding (as an octet string) of a value of the ASN.1 type ECDSA-Sig-Value (see Section 7.2).",
      "ja": "- 署名には、ASN.1タイプECDSA-Sig-Valueの値のDERエンコーディング（オクテット文字列として）を含める必要があります（セクション7.2を参照）。"
    },
    {
      "indent": 3,
      "text": "When using ECDSA, the SignedData certificates field MAY include the certificate(s) for the EC public key(s) used in the generation of the ECDSA signatures in SignedData. ECC certificates are discussed in Section 5.",
      "ja": "ECDSAを使用する場合、SignedData証明書フィールドには、SignedDataでのECDSA署名の生成に使用されるEC公開鍵の証明書が含まれる場合があります。 ECC証明書については、セクション5で説明します。"
    },
    {
      "indent": 0,
      "text": "2.1.2. Actions of the Sending Agent",
      "section_title": true,
      "ja": "2.1.2. 送信エージェントのアクション"
    },
    {
      "indent": 3,
      "text": "When using ECDSA with SignedData, the sending agent uses the message digest calculation process and signature generation process for SignedData that are specified in [CMS]. To sign data, the sending agent uses the signature method specified in [FIPS186-3].",
      "ja": "ECDSAをSignedDataと共に使用する場合、送信エージェントは、[CMS]で指定されているSignedDataのメッセージダイジェスト計算プロセスと署名生成プロセスを使用します。データに署名するために、送信エージェントは[FIPS186-3]で指定された署名方法を使用します。"
    },
    {
      "indent": 3,
      "text": "The sending agent encodes the resulting signature using the ECDSA-Sig-Value syntax (see Section 7.2) and places it in the SignerInfo signature field.",
      "ja": "送信エージェントは、ECDSA-Sig-Value構文（セクション7.2を参照）を使用して結果の署名をエンコードし、SignerInfo署名フィールドに配置します。"
    },
    {
      "indent": 0,
      "text": "2.1.3. Actions of the Receiving Agent",
      "section_title": true,
      "ja": "2.1.3. 受取人の行動"
    },
    {
      "indent": 3,
      "text": "When using ECDSA with SignedData, the receiving agent uses the message digest calculation process and signature verification process for SignedData that are specified in [CMS]. To verify SignedData, the receiving agent uses the signature verification method specified in [FIPS186-3].",
      "ja": "SignedDataでECDSAを使用する場合、受信エージェントは、[CMS]で指定されているSignedDataのメッセージダイジェスト計算プロセスと署名検証プロセスを使用します。 SignedDataを検証するために、受信エージェントは[FIPS186-3]で指定された署名検証方法を使用します。"
    },
    {
      "indent": 3,
      "text": "In order to verify the signature, the receiving agent retrieves the integers r and s from the SignerInfo signature field of the received message.",
      "ja": "署名を検証するために、受信エージェントは整数rおよびsを受信メッセージのSignerInfo署名フィールドから取得します。"
    },
    {
      "indent": 0,
      "text": "3. EnvelopedData Using ECC Algorithms",
      "section_title": true,
      "ja": "3. ECCアルゴリズムを使用したEnvelopedData"
    },
    {
      "indent": 3,
      "text": "This section describes how to use ECC algorithms with the CMS EnvelopedData format.",
      "ja": "このセクションでは、CMS EnvelopedData形式でECCアルゴリズムを使用する方法について説明します。"
    },
    {
      "indent": 3,
      "text": "This document does not specify the static-static ECDH, method C(0,2, ECC CDH) from [SP800-56A]. Static-static ECDH is analogous to static-static DH, which is specified in [CMS-ALG]. Ephemeral-static ECDH and 1-Pass ECMQV were specified because they provide better security due to the originator's ephemeral contribution to the key agreement scheme.",
      "ja": "このドキュメントでは、[SP800-56A]の静的-静的ECDH、メソッドC（0,2、ECC CDH）を指定していません。静的静的ECDHは、[CMS-ALG]で指定されている静的静的DHに類似しています。一時的な静的ECDHと1パスECMQVが指定されたのは、鍵合意スキームに対する発信者の一時的な貢献により、セキュリティが向上するためです。"
    },
    {
      "indent": 0,
      "text": "3.1. EnvelopedData Using (ephemeral-static) ECDH",
      "section_title": true,
      "ja": "3.1. EnpheopedData Using（ephemeral-static）ECDH"
    },
    {
      "indent": 3,
      "text": "This section describes how to use the ephemeral-static Elliptic Curve Diffie-Hellman (ECDH) key agreement algorithm with EnvelopedData. This algorithm has two variations:",
      "ja": "このセクションでは、EnvelopedDataで一時的楕円曲線Diffie-Hellman（ECDH）鍵合意アルゴリズムを使用する方法について説明します。このアルゴリズムには2つのバリエーションがあります。"
    },
    {
      "indent": 3,
      "text": "- 'Standard' ECDH, described as the 'Elliptic Curve Diffie-Hellman Scheme' with the 'Elliptic Curve Diffie-Hellman Primitive' in [SEC1], and",
      "ja": "- [SEC1]で「楕円曲線Diffie-Hellmanプリミティブ」を使用した「楕円曲線Diffie-Hellmanスキーム」として記述されている「標準」ECDH、および"
    },
    {
      "indent": 3,
      "text": "- 'Co-factor' ECDH, described as the 'One-Pass Diffie-Hellman scheme' (method C(1, 1, ECC CDH)) in [SP800-56A].",
      "ja": "- [補因子] ECDH。[SP800-56A]で「ワンパスディフィーヘルマン方式」（方法C（1、1、ECC CDH））と記述されています。"
    },
    {
      "indent": 3,
      "text": "Both variations of ephemeral-static ECDH are elliptic curve analogs of the ephemeral-static Diffie-Hellman key agreement algorithm specified jointly in the documents [CMS-ALG] and [CMS-DH].",
      "ja": "エフェメラルスタティックECDHの両方のバリエーションは、ドキュメント[CMS-ALG]および[CMS-DH]で共同で指定されたエフェメラルスタティックDiffie-Hellman鍵合意アルゴリズムの楕円曲線類似物です。"
    },
    {
      "indent": 3,
      "text": "If an implementation uses ECDH with CMS EnvelopedData, then the following techniques and formats MUST be used.",
      "ja": "実装がCMS EnvelopedDataでECDHを使用する場合、次の手法と形式を使用する必要があります。"
    },
    {
      "indent": 3,
      "text": "The fields of EnvelopedData are as in [CMS]; as ECDH is a key agreement algorithm, the RecipientInfo kari choice is used.",
      "ja": "EnvelopedDataのフィールドは[CMS]と同じです。 ECDHは鍵合意アルゴリズムであるため、RecipientInfo kariの選択が使用されます。"
    },
    {
      "indent": 0,
      "text": "3.1.1. Fields of KeyAgreeRecipientInfo",
      "section_title": true,
      "ja": "3.1.1. KeyAgreeRecipientInfoのフィールド"
    },
    {
      "indent": 3,
      "text": "When using ephemeral-static ECDH with EnvelopedData, the fields of KeyAgreeRecipientInfo are as follows:",
      "ja": "EnvelopedDataでephemeral-static ECDHを使用する場合、KeyAgreeRecipientInfoのフィールドは次のとおりです。"
    },
    {
      "indent": 3,
      "text": "- version MUST be 3.",
      "ja": "- バージョンは3でなければなりません。"
    },
    {
      "indent": 3,
      "text": "- originator MUST be the alternative originatorKey. The originatorKey algorithm field MUST contain the id-ecPublicKey object identifier (see Section 7.1.2). The parameters associated with id-ecPublicKey MUST be absent, ECParameters, or NULL. The parameters associated with id-ecPublicKey SHOULD be absent or ECParameters, and NULL is allowed to support legacy implementations. The previous version of this document required NULL to be present. If the parameters are ECParameters, then they MUST be namedCurve. The originatorKey publicKey field MUST contain the DER encoding of the value of the ASN.1 type ECPoint (see Section 7.2), which represents the sending agent's ephemeral EC public key. The ECPoint in uncompressed form MUST be supported.",
      "ja": "- originatorは代替originatorKeyである必要があります。 originatorKeyアルゴリズムフィールドには、id-ecPublicKeyオブジェクト識別子を含める必要があります（セクション7.1.2を参照）。 id-ecPublicKeyに関連付けられているパラメーターは、存在しない、ECParameters、またはNULLでなければなりません。 id-ecPublicKeyに関連付けられているパラメーターは存在しないか、またはECParametersである必要があり（SHOULD）、NULLはレガシー実装をサポートすることが許可されています。このドキュメントの以前のバージョンでは、存在するためにNULLが必要でした。パラメータがECParametersの場合、それらはnamedCurveでなければなりません。 originatorKey publicKeyフィールドには、送信エージェントの一時的なEC公開鍵を表す、ASN.1タイプECPoint（セクション7.2を参照）の値のDERエンコードを含める必要があります。非圧縮形式のECPointをサポートする必要があります。"
    },
    {
      "indent": 3,
      "text": "- ukm MAY be present or absent. However, message originators SHOULD include the ukm. As specified in RFC 3852 [CMS], implementations MUST support ukm message recipient processing, so interoperability is not a concern if the ukm is present or absent. The ukm is placed in the entityUInfo field of the ECC-CMS-SharedInfo structure. When present, the ukm is used to ensure that a different key-encryption key is generated, even when the ephemeral private key is improperly used more than once, by using the ECC-CMS-SharedInfo as an input to the key derivation function (see Section 7.2).",
      "ja": "- ukmがあってもなくてもかまいません。ただし、メッセージの発信者にはukmを含める必要があります（SHOULD）。 RFC 3852 [CMS]で指定されているように、実装はukmメッセージの受信者処理をサポートする必要があるため、ukmが存在する場合も存在しない場合も相互運用性は問題になりません。 ukmは、ECC-CMS-SharedInfo構造のentityUInfoフィールドに配置されます。存在する場合、ukmは、エフェメラル秘密鍵が2回以上不適切に使用されている場合でも、ECC-CMS-SharedInfoを鍵導出関数への入力として使用することにより、異なる鍵暗号鍵が生成されることを保証するために使用されます（参照セクション7.2）。"
    },
    {
      "indent": 3,
      "text": "- keyEncryptionAlgorithm MUST contain the object identifier of the key-encryption algorithm, which in this case is a key agreement algorithm (see Section 7.1.4). The parameters field contains KeyWrapAlgorithm. The KeyWrapAlgorithm is the algorithm identifier that indicates the symmetric encryption algorithm used to encrypt the content-encryption key (CEK) with the key-encryption key (KEK) and any associated parameters (see Section 7.1.5). Algorithm requirements are found in Section 8.",
      "ja": "- keyEncryptionAlgorithmには、キー暗号化アルゴリズムのオブジェクト識別子が含まれている必要があります。この場合、これはキー合意アルゴリズムです（セクション7.1.4を参照）。パラメータフィールドにはKeyWrapAlgorithmが含まれます。 KeyWrapAlgorithmは、コンテンツ暗号化キー（CEK）をキー暗号化キー（KEK）と関連パラメータで暗号化するために使用される対称暗号化アルゴリズムを示すアルゴリズム識別子です（セクション7.1.5を参照）。アルゴリズム要件はセクション8にあります。"
    },
    {
      "indent": 3,
      "text": "- recipientEncryptedKeys contains an identifier and an encrypted key for each recipient. The RecipientEncryptedKey KeyAgreeRecipientIdentifier MUST contain either the issuerAndSerialNumber identifying the recipient's certificate or the RecipientKeyIdentifier containing the subject key identifier from the recipient's certificate. In both cases, the recipient's certificate contains the recipient's static ECDH public key.",
      "ja": "- recipientEncryptedKeysには、各受信者の識別子と暗号化されたキーが含まれています。 RecipientEncryptedKey KeyAgreeRecipientIdentifierには、受信者の証明書を識別するissuerAndSerialNumberまたは受信者の証明書のサブジェクトキー識別子を含むRecipientKeyIdentifierのいずれかが含まれている必要があります。どちらの場合も、受信者の証明書には、受信者の静的ECDH公開鍵が含まれています。"
    },
    {
      "indent": 6,
      "text": "RecipientEncryptedKey EncryptedKey MUST contain the content-encryption key encrypted with the ephemeral-static, ECDH-generated pairwise key-encryption key using the algorithm specified by the KeyWrapAlgorithm.",
      "ja": "RecipientEncryptedKey EncryptedKeyには、KeyWrapAlgorithmで指定されたアルゴリズムを使用して、一時的でECDHによって生成されたペアワイズキー暗号化キーで暗号化されたコンテンツ暗号化キーを含める必要があります。"
    },
    {
      "indent": 0,
      "text": "3.1.2. Actions of the Sending Agent",
      "section_title": true,
      "ja": "3.1.2. 送信エージェントのアクション"
    },
    {
      "indent": 3,
      "text": "When using ephemeral-static ECDH with EnvelopedData, the sending agent first obtains the recipient's EC public key and domain parameters (e.g., from the recipient's certificate). The sending agent then performs one of the two ECDH variations mentioned above:",
      "ja": "EnvelopedDataでephemeral-static ECDHを使用する場合、送信エージェントは最初に受信者のEC公開鍵とドメインパラメータを（たとえば、受信者の証明書から）取得します。次に、送信エージェントは上記の2つのECDHバリエーションの1つを実行します。"
    },
    {
      "indent": 3,
      "text": "- If the value of keyEncryptionAlgorithm indicates the use of 'standard' Diffie-Hellman, then the sending agent performs the 'Elliptic Curve Diffie-Hellman Scheme' with the 'Elliptic Curve Diffie-Hellman Primitive' in [SEC1].",
      "ja": "- keyEncryptionAlgorithmの値が「標準」のDiffie-Hellmanの使用を示している場合、送信エージェントは[SEC1]の「Elliptic Curve Diffie-Hellman Primitive」で「Elliptic Curve Diffie-Hellman Scheme」を実行します。"
    },
    {
      "indent": 3,
      "text": "- If the value of keyEncryptionAlgorithm indicates the use of 'co-factor' Diffie-Hellman, then the sending agent performs the 'One-Pass Diffie-Hellman scheme' (method C(1, 1, ECC CDH)) in [SP800-56A].",
      "ja": "- keyEncryptionAlgorithmの値が「補因子」Diffie-Hellmanの使用を示す場合、送信エージェントは[SP800-56Aの「ワンパスDiffie-Hellmanスキーム」（方法C（1、1、ECC CDH））を実行します]。"
    },
    {
      "indent": 3,
      "text": "In both of these cases, the sending agent uses the KDF defined in Section 3.6.1 of [SEC1] with the hash algorithm identified by the value of keyEncryptionAlgorithm. As a result, the sending agent obtains:",
      "ja": "これらのどちらの場合でも、送信エージェントは、[SEC1]のセクション3.6.1で定義されているKDFと、keyEncryptionAlgorithmの値で識別されるハッシュアルゴリズムを使用します。その結果、送信エージェントは次のものを取得します。"
    },
    {
      "indent": 3,
      "text": "- an ephemeral public key, which is represented as a value of the type ECPoint (see Section 7.2), encapsulated in a bit string and placed in the KeyAgreeRecipientInfo originator originatorKey publicKey field, and",
      "ja": "- ECPointタイプ（7.2を参照）の値として表され、ビット文字列にカプセル化され、KeyAgreeRecipientInfo originator originatorKey publicKeyフィールドに配置された一時公開鍵"
    },
    {
      "indent": 3,
      "text": "- a shared secret bit string \"K\", which is used as the pairwise key-encryption key for that recipient, as specified in [CMS].",
      "ja": "- [CMS]で指定されている、その受信者のペアワイズキー暗号化キーとして使用される共有秘密ビット文字列 \"K\"。"
    },
    {
      "indent": 3,
      "text": "In a single message, if there are multiple layers for a recipient, then the ephemeral public key can be reused by the originator for that recipient in each of the different layers.",
      "ja": "単一のメッセージで、受信者に複数の層がある場合、一時的な公開鍵は、異なる層のそれぞれでその受信者の発信者が再利用できます。"
    },
    {
      "indent": 0,
      "text": "3.1.3. Actions of the Receiving Agent",
      "section_title": true,
      "ja": "3.1.3. 受取人の行動"
    },
    {
      "indent": 3,
      "text": "When using ephemeral-static ECDH with EnvelopedData, the receiving agent determines the bit string \"SharedInfo\", which is the DER encoding of ECC-CMS-SharedInfo (see Section 7.2), and the integer \"keydatalen\" from the key size, in bits, of the KeyWrapAlgorithm. The receiving agent retrieves the ephemeral EC public key from the bit string KeyAgreeRecipientInfo originator, with a value of the type ECPoint (see Section 7.2) encapsulated as a bit string, and if",
      "ja": "EnvelopedDataでephemeral-static ECDHを使用する場合、受信エージェントは、ECC-CMS-SharedInfo（セクション7.2を参照）のDERエンコードであるビット文字列「SharedInfo」と、キーサイズからの整数「keydatalen」をビット単位で決定します、KeyWrapAlgorithmの。受信エージェントは、ビット文字列KeyAgreeRecipientInfoオリジネーターから、ECPointタイプ（7.2節を参照）の値をビット文字列としてカプセル化して、エフェメラルEC公開鍵を取得します。"
    },
    {
      "indent": 3,
      "text": "present, originally supplied additional user key material from the ukm field. The receiving agent then performs one of the two ECDH variations mentioned above:",
      "ja": "現在、ukmフィールドから追加のユーザーキーマテリアルが提供されています。次に、受信エージェントは、上記の2つのECDHバリエーションの1つを実行します。"
    },
    {
      "indent": 3,
      "text": "- If the value of keyEncryptionAlgorithm indicates the use of 'standard' Diffie-Hellman, then the receiving agent performs the 'Elliptic Curve Diffie-Hellman Scheme' with the 'Elliptic Curve Diffie-Hellman Primitive' in [SEC1].",
      "ja": "- keyEncryptionAlgorithmの値が「標準」のDiffie-Hellmanの使用を示している場合、受信エージェントは、[SEC1]の「Elliptic Curve Diffie-Hellman Primitive」を使用して「Elliptic Curve Diffie-Hellmanスキーム」を実行します。"
    },
    {
      "indent": 3,
      "text": "- If the value of keyEncryptionAlgorithm indicates the use of 'co-factor' Diffie-Hellman, then the receiving agent performs the 'One-Pass Diffie-Hellman scheme' (method C(1, 1, ECC CDH)) in [SP800-56A].",
      "ja": "- keyEncryptionAlgorithmの値が「補因子」Diffie-Hellmanの使用を示している場合、受信側エージェントは[SP800-56Aの「ワンパスDiffie-Hellmanスキーム」（方法C（1、1、ECC CDH））を実行します]。"
    },
    {
      "indent": 3,
      "text": "In both of these cases, the receiving agent uses the KDF defined in Section 3.6.1 of [SEC1] with the hash algorithm identified by the value of keyEncryptionAlgorithm. As a result, the receiving agent obtains a shared secret bit string \"K\", which is used as the pairwise key-encryption key to unwrap the CEK.",
      "ja": "これらのどちらの場合でも、受信エージェントは、[SEC1]のセクション3.6.1で定義されているKDFと、keyEncryptionAlgorithmの値で識別されるハッシュアルゴリズムを使用します。その結果、受信エージェントは共有秘密ビットストリング「K」を取得します。これは、ペアワイズキー暗号化キーとして使用され、CEKをアンラップします。"
    },
    {
      "indent": 0,
      "text": "3.2. EnvelopedData Using 1-Pass ECMQV",
      "section_title": true,
      "ja": "3.2. 1パスECMQVを使用したEnvelopedData"
    },
    {
      "indent": 3,
      "text": "This section describes how to use the 1-Pass Elliptic Curve Menezes-Qu-Vanstone (ECMQV) key agreement algorithm with EnvelopedData, method C(1, 2, ECC MQV) from [SP800-56A]. Like the KEA algorithm [CMS-KEA], 1-Pass ECMQV uses three key pairs: an ephemeral key pair, a static key pair of the sending agent, and a static key pair of the receiving agent. Using an algorithm with the sender static key pair allows for knowledge of the message creator; this means that authentication can, in some circumstances, be obtained for AuthEnvelopedData and AuthenticatedData. This means that 1-Pass ECMQV can be a common algorithm for EnvelopedData, AuthenticatedData, and AuthEnvelopedData, while ECDH can only be used in EnvelopedData.",
      "ja": "このセクションでは、[SP800-56A]の1パス楕円曲線Menezes-Qu-Vanstone（ECMQV）鍵合意アルゴリズムをEnvelopedData、メソッドC（1、2、ECC MQV）で使用する方法について説明します。 KEAアルゴリズム[CMS-KEA]と同様に、1-Pass ECMQVは3つのキーペアを使用します。それは、短期キーペア、送信エージェントの静的キーペア、および受信エージェントの静的キーペアです。送信者の静的キーペアでアルゴリズムを使用すると、メッセージ作成者を知ることができます。これは、状況によっては、AuthEnvelopedDataおよびAuthenticatedDataの認証を取得できることを意味します。つまり、1パスECMQVはEnvelopedData、AuthenticatedData、およびAuthEnvelopedDataの共通アルゴリズムになり、ECDHはEnvelopedDataでのみ使用できます。"
    },
    {
      "indent": 3,
      "text": "If an implementation uses 1-Pass ECMQV with CMS EnvelopedData, then the following techniques and formats MUST be used.",
      "ja": "実装がCMS EnvelopedDataで1パスECMQVを使用する場合は、次の手法と形式を使用する必要があります。"
    },
    {
      "indent": 3,
      "text": "The fields of EnvelopedData are as in [CMS]; as 1-Pass ECMQV is a key agreement algorithm, the RecipientInfo kari choice is used. When using 1-Pass ECMQV, the EnvelopedData originatorInfo field MAY include the certificate(s) for the EC public key(s) used in the formation of the pairwise key. ECC certificates are discussed in Section 5.",
      "ja": "EnvelopedDataのフィールドは[CMS]と同じです。 1パスECMQVは主要な合意アルゴリズムであるため、RecipientInfo kariの選択が使用されます。 1パスECMQVを使用する場合、EnvelopedData originatorInfoフィールドには、ペアワイズキーの形成に使用されるEC公開キーの証明書を含めることができます（MAY）。 ECC証明書については、セクション5で説明します。"
    },
    {
      "indent": 0,
      "text": "3.2.1. Fields of KeyAgreeRecipientInfo",
      "section_title": true,
      "ja": "3.2.1. KeyAgreeRecipientInfoのフィールド"
    },
    {
      "indent": 3,
      "text": "When using 1-Pass ECMQV with EnvelopedData, the fields of KeyAgreeRecipientInfo are as follows:",
      "ja": "EnvelopedDataで1パスECMQVを使用する場合、KeyAgreeRecipientInfoのフィールドは次のとおりです。"
    },
    {
      "indent": 3,
      "text": "- version MUST be 3.",
      "ja": "- バージョンは3でなければなりません。"
    },
    {
      "indent": 3,
      "text": "- originator identifies the static EC public key of the sender. It SHOULD be one of the alternatives, issuerAndSerialNumber or subjectKeyIdentifier, and point to one of the sending agent's certificates.",
      "ja": "- 発信者は、送信者の静的EC公開鍵を識別します。これは、issuerAndSerialNumberまたはsubjectKeyIdentifierのいずれかであり、送信エージェントの証明書の1つを指す必要があります（SHOULD）。"
    },
    {
      "indent": 3,
      "text": "- ukm MUST be present. The ukm field is an octet string that MUST contain the DER encoding of the type MQVuserKeyingMaterial (see Section 7.2). The MQVuserKeyingMaterial ephemeralPublicKey algorithm field MUST contain the id-ecPublicKey object identifier (see Section 7.1.2). The parameters associated with id-ecPublicKey MUST be absent, ECParameters, or NULL. The parameters associated with id-ecPublicKey SHOULD be absent or ECParameters, as NULL is allowed to support legacy implementations. The previous version of this document required NULL to be present. If the parameters are ECParameters, then they MUST be namedCurve. The MQVuserKeyingMaterial ephemeralPublicKey publicKey field MUST contain the DER encoding of the ASN.1 type ECPoint (see Section 7.2) representing the sending agent's ephemeral EC public key. The MQVuserKeyingMaterial addedukm field, if present, contains additional user keying material from the sending agent.",
      "ja": "- ukmが存在する必要があります。 ukmフィールドは、MQVuserKeyingMaterialタイプのDERエンコーディングを含む必要があるオクテット文字列です（セクション7.2を参照）。 MQVuserKeyingMaterial ephemeralPublicKeyアルゴリズムフィールドには、id-ecPublicKeyオブジェクト識別子が含まれている必要があります（セクション7.1.2を参照）。 id-ecPublicKeyに関連付けられているパラメーターは、存在しない、ECParameters、またはNULLでなければなりません。 NULLはレガシー実装をサポートすることが許可されているため、id-ecPublicKeyに関連付けられているパラメーターは存在しないか、またはECParametersである必要があります（SHOULD）。このドキュメントの以前のバージョンでは、存在するためにNULLが必要でした。パラメータがECParametersの場合、それらはnamedCurveでなければなりません。 MQVuserKeyingMaterial ephemeralPublicKey publicKeyフィールドには、送信エージェントの一時的なEC公開鍵を表すASN.1タイプECPoint（セクション7.2を参照）のDERエンコードが含まれている必要があります。 MQVuserKeyingMaterial addedukmフィールド（存在する場合）には、送信エージェントからの追加のユーザーキー情報が含まれます。"
    },
    {
      "indent": 3,
      "text": "- keyEncryptionAlgorithm MUST contain the object identifier of the key-encryption algorithm, which in this case is a key agreement algorithm (see Section 7.1.4). The parameters field contains KeyWrapAlgorithm. The KeyWrapAlgorithm indicates the symmetric encryption algorithm used to encrypt the CEK with the KEK generated using the 1-Pass ECMQV algorithm and any associated parameters (see Section 7.1.5). Algorithm requirements are found in Section 8.",
      "ja": "- keyEncryptionAlgorithmには、キー暗号化アルゴリズムのオブジェクト識別子が含まれている必要があります。この場合、これはキー合意アルゴリズムです（セクション7.1.4を参照）。パラメータフィールドにはKeyWrapAlgorithmが含まれます。 KeyWrapAlgorithmは、1パスECMQVアルゴリズムと関連パラメータを使用して生成されたKEKでCEKを暗号化するために使用される対称暗号化アルゴリズムを示します（セクション7.1.5を参照）。アルゴリズム要件はセクション8にあります。"
    },
    {
      "indent": 3,
      "text": "- recipientEncryptedKeys contains an identifier and an encrypted key for each recipient. The RecipientEncryptedKey KeyAgreeRecipientIdentifier MUST contain either the issuerAndSerialNumber identifying the recipient's certificate or the RecipientKeyIdentifier containing the subject key identifier from the recipient's certificate. In both cases, the recipient's certificate contains the recipient's static ECMQV public key. RecipientEncryptedKey EncryptedKey MUST contain the content-encryption key encrypted with the 1-Pass ECMQV-generated pairwise key-encryption key using the algorithm specified by the KeyWrapAlgorithm.",
      "ja": "- recipientEncryptedKeysには、各受信者の識別子と暗号化されたキーが含まれています。 RecipientEncryptedKey KeyAgreeRecipientIdentifierには、受信者の証明書を識別するissuerAndSerialNumberまたは受信者の証明書のサブジェクトキー識別子を含むRecipientKeyIdentifierのいずれかが含まれている必要があります。どちらの場合も、受信者の証明書には、受信者の静的ECMQV公開鍵が含まれています。 RecipientEncryptedKey EncryptedKeyには、KeyWrapAlgorithmで指定されたアルゴリズムを使用して、1パスECMQVで生成されたペアワイズキー暗号化キーで暗号化されたコンテンツ暗号化キーを含める必要があります。"
    },
    {
      "indent": 0,
      "text": "3.2.2. Actions of the Sending Agent",
      "section_title": true,
      "ja": "3.2.2. 送信エージェントのアクション"
    },
    {
      "indent": 3,
      "text": "When using 1-Pass ECMQV with EnvelopedData, the sending agent first obtains the recipient's EC public key and domain parameters (e.g., from the recipient's certificate), and checks that the domain parameters are the same as the sender's domain parameters. The sending agent then determines an integer \"keydatalen\", which is the KeyWrapAlgorithm symmetric key size in bits, and also a bit string \"SharedInfo\", which is the DER encoding of ECC-CMS-SharedInfo (see Section 7.2). The sending agent then performs the key deployment and key agreement operations of the Elliptic Curve MQV Scheme specified in [SP800-56A], but uses the KDF defined in Section 3.6.1 of [SEC1]. As a result, the sending agent obtains:",
      "ja": "EnvelopedDataで1パスECMQVを使用する場合、送信エージェントは最初に受信者のEC公開鍵とドメインパラメーターを（たとえば、受信者の証明書から）取得し、ドメインパラメーターが送信者のドメインパラメーターと同じであることを確認します。次に、送信エージェントは、KeyWrapAlgorithm対称キーのサイズ（ビット単位）である整数「keydatalen」と、ECC-CMS-SharedInfoのDERエンコードであるビット文字列「SharedInfo」を決定します（セクション7.2を参照）。次に、送信エージェントは、[SP800-56A]で指定されている楕円曲線MQVスキームのキー展開およびキー合意操作を実行しますが、[SEC1]のセクション3.6.1で定義されているKDFを使用します。その結果、送信エージェントは次のものを取得します。"
    },
    {
      "indent": 3,
      "text": "- an ephemeral public key, which is represented as a value of type ECPoint (see Section 7.2), encapsulated in a bit string, placed in an MQVuserKeyingMaterial ephemeralPublicKey publicKey field (see Section 7.2), and",
      "ja": "- ビット列にカプセル化され、MQVuserKeyingMaterial ephemeralPublicKey publicKeyフィールド（7.2を参照）に配置された、ECPointタイプ（7.2を参照）の値として表される一時的な公開鍵、および"
    },
    {
      "indent": 3,
      "text": "- a shared secret bit string \"K\", which is used as the pairwise key-encryption key for that recipient, as specified in [CMS].",
      "ja": "- [CMS]で指定されている、その受信者のペアワイズキー暗号化キーとして使用される共有秘密ビット文字列 \"K\"。"
    },
    {
      "indent": 3,
      "text": "In a single message, if there are multiple layers for a recipient, then the ephemeral public key can be reused by the originator for that recipient in each of the different layers.",
      "ja": "単一のメッセージで、受信者に複数の層がある場合、一時的な公開鍵は、異なる層のそれぞれでその受信者の発信者が再利用できます。"
    },
    {
      "indent": 0,
      "text": "3.2.3. Actions of the Receiving Agent",
      "section_title": true,
      "ja": "3.2.3. 受取人の行動"
    },
    {
      "indent": 3,
      "text": "When using 1-Pass ECMQV with EnvelopedData, the receiving agent determines the bit string \"SharedInfo\", which is the DER encoding of ECC-CMS-SharedInfo (see Section 7.2), and the integer \"keydatalen\" from the key size, in bits, of the KeyWrapAlgorithm. The receiving agent then retrieves the static and ephemeral EC public keys of the originator, from the originator and ukm fields as described in Section 3.2.1, and its static EC public key identified in the rid field and checks that the originator's domain parameters are the same as the recipient's domain parameters. The receiving agent then performs the key agreement operation of the Elliptic Curve MQV Scheme [SP800-56A], but uses the KDF defined in Section 3.6.1 of [SEC1]. As a result, the receiving agent obtains a shared secret bit string \"K\", which is used as the pairwise key-encryption key to unwrap the CEK.",
      "ja": "EnvelopedDataで1パスECMQVを使用する場合、受信エージェントは、ECC-CMS-SharedInfo（セクション7.2を参照）のDERエンコードであるビット文字列「SharedInfo」と、キーサイズからの整数「keydatalen」をビット単位で決定します、KeyWrapAlgorithmの。次に、受信エージェントは、3.2.1項で説明されているように、発信者とukmフィールドから発信者の静的およびエフェメラルEC公開鍵を取得し、ridフィールドで識別された静的EC公開鍵を取得して、発信者のドメインパラメータが受信者のドメインパラメータと同じです。次に、受信エージェントは、楕円曲線MQVスキーム[SP800-56A]の鍵合意操作を実行しますが、[SEC1]のセクション3.6.1で定義されたKDFを使用します。その結果、受信エージェントは共有秘密ビットストリング「K」を取得します。これは、ペアワイズキー暗号化キーとして使用され、CEKをアンラップします。"
    },
    {
      "indent": 0,
      "text": "4. AuthenticatedData and AuthEnvelopedData Using ECC",
      "section_title": true,
      "ja": "4. ECCを使用したAuthenticatedDataおよびAuthEnvelopedData"
    },
    {
      "indent": 3,
      "text": "This section describes how to use ECC algorithms with the CMS AuthenticatedData format. AuthenticatedData lacks non-repudiation, and so in some instances is preferable to SignedData. (For example, the sending agent might not want the message to be authenticated when forwarded.)",
      "ja": "このセクションでは、CMS AuthenticatedData形式でECCアルゴリズムを使用する方法について説明します。 AuthenticatedDataは否認防止を欠いているため、場合によってはSignedDataよりも望ましいです。 （たとえば、送信エージェントは転送時にメッセージの認証を望まない場合があります。）"
    },
    {
      "indent": 3,
      "text": "This section also describes how to use ECC algorithms with the CMS AuthEnvelopedData format [CMS-AUTHENV]. AuthEnvelopedData supports authentication and encryption, and in some instances is preferable to signing and then encrypting data.",
      "ja": "このセクションでは、CMS AuthEnvelopedData形式[CMS-AUTHENV]でECCアルゴリズムを使用する方法についても説明します。 AuthEnvelopedDataは認証と暗号化をサポートしており、場合によってはデータに署名してから暗号化するよりも適切です。"
    },
    {
      "indent": 3,
      "text": "For both AuthenticatedData and AuthEnvelopedData, data origin authentication with 1-Pass ECMQV can only be provided when there is one and only one recipient. When there are multiple recipients, an attack is possible where one recipient modifies the content without other recipients noticing [BON]. A sending agent who is concerned with such an attack SHOULD use a separate AuthenticatedData or AuthEnvelopedData for each recipient.",
      "ja": "AuthenticatedDataとAuthEnvelopedDataの両方で、1パスECMQVによるデータ発信元認証は、受信者が1人だけの場合にのみ提供できます。複数の受信者がいる場合、1人の受信者が[BON]に気付かずにコンテンツを変更する攻撃が可能です。このような攻撃に関与する送信エージェントは、受信者ごとに個別のAuthenticatedDataまたはAuthEnvelopedDataを使用する必要があります（SHOULD）。"
    },
    {
      "indent": 3,
      "text": "Using an algorithm with the sender static key pair allows for knowledge of the message creator; this means that authentication can, in some circumstances, be obtained for AuthEnvelopedData and AuthenticatedData. This means that 1-Pass ECMQV can be a common algorithm for EnvelopedData, AuthenticatedData, and AuthEnvelopedData while ECDH can only be used in EnvelopedData.",
      "ja": "送信者の静的キーペアでアルゴリズムを使用すると、メッセージ作成者を知ることができます。これは、状況によっては、AuthEnvelopedDataおよびAuthenticatedDataの認証を取得できることを意味します。つまり、1パスECMQVはEnvelopedData、AuthenticatedData、およびAuthEnvelopedDataの共通アルゴリズムになり、ECDHはEnvelopedDataでのみ使用できます。"
    },
    {
      "indent": 0,
      "text": "4.1. AuthenticatedData Using 1-Pass ECMQV",
      "section_title": true,
      "ja": "4.1. 1パスECMQVを使用したAuthenticatedData"
    },
    {
      "indent": 3,
      "text": "This section describes how to use the 1-Pass ECMQV key agreement algorithm with AuthenticatedData. ECMQV is method C(1, 2, ECC MQV) from [SP800-56A].",
      "ja": "このセクションでは、AuthenticatedDataで1パスECMQV鍵合意アルゴリズムを使用する方法について説明します。 ECMQVは、[SP800-56A]のメソッドC（1、2、ECC MQV）です。"
    },
    {
      "indent": 3,
      "text": "When using ECMQV with AuthenticatedData, the fields of AuthenticatedData are as in [CMS], but with the following restrictions:",
      "ja": "AuthenticatedDataでECMQVを使用する場合、AuthenticatedDataのフィールドは[CMS]と同じですが、次の制限があります。"
    },
    {
      "indent": 3,
      "text": "- macAlgorithm MUST contain the algorithm identifier of the message authentication code (MAC) algorithm (see Section 7.1.7), which MUST be one of the following: hmac-SHA1, id-hmacWITHSHA224, id-hmacWITHSHA256, id-hmacWITHSHA384, or id-hmacWITHSHA512.",
      "ja": "- macAlgorithmには、メッセージ認証コード（MAC）アルゴリズム（セクション7.1.7を参照）のアルゴリズム識別子を含める必要があります。これは、hmac-SHA1、id-hmacWITHSHA224、id-hmacWITHSHA256、id-hmacWITHSHA384、またはid- hmacWITHSHA512。"
    },
    {
      "indent": 3,
      "text": "- digestAlgorithm MUST contain the algorithm identifier of the hash algorithm (see Section 7.1.1), which MUST be one of the following: id-sha1, id-sha224, id-sha256, id-sha384, or id-sha512.",
      "ja": "- digestAlgorithmには、ハッシュアルゴリズムのアルゴリズム識別子（セクション7.1.1を参照）を含める必要があります。これは、id-sha1、id-sha224、id-sha256、id-sha384、またはid-sha512のいずれかでなければなりません。"
    },
    {
      "indent": 3,
      "text": "As 1-Pass ECMQV is a key agreement algorithm, the RecipientInfo kari choice is used in the AuthenticatedData. When using 1-Pass ECMQV, the AuthenticatedData originatorInfo field MAY include the certificate(s) for the EC public key(s) used in the formation of the pairwise key. ECC certificates are discussed in Section 5.",
      "ja": "1パスECMQVは主要な合意アルゴリズムであるため、AuthenticatedDataではRecipientInfo kariの選択が使用されます。 1パスECMQVを使用する場合、AuthenticatedData originatorInfoフィールドには、ペアワイズキーの形成に使用されるEC公開キーの証明書を含めることができます（MAY）。 ECC証明書については、セクション5で説明します。"
    },
    {
      "indent": 0,
      "text": "4.1.1. Fields of the KeyAgreeRecipientInfo",
      "section_title": true,
      "ja": "4.1.1. KeyAgreeRecipientInfoのフィールド"
    },
    {
      "indent": 3,
      "text": "The AuthenticatedData KeyAgreeRecipientInfo fields are used in the same manner as the fields for the corresponding EnvelopedData KeyAgreeRecipientInfo fields of Section 3.2.1 of this document.",
      "ja": "AuthenticatedData KeyAgreeRecipientInfoフィールドは、このドキュメントのセクション3.2.1の対応するEnvelopedData KeyAgreeRecipientInfoフィールドのフィールドと同じ方法で使用されます。"
    },
    {
      "indent": 0,
      "text": "4.1.2. Actions of the Sending Agent",
      "section_title": true,
      "ja": "4.1.2. 送信エージェントのアクション"
    },
    {
      "indent": 3,
      "text": "The sending agent uses the same actions as for EnvelopedData with 1-Pass ECMQV, as specified in Section 3.2.2 of this document.",
      "ja": "送信エージェントは、このドキュメントのセクション3.2.2で指定されている、1パスECMQVを使用したEnvelopedDataの場合と同じアクションを使用します。"
    },
    {
      "indent": 3,
      "text": "In a single message, if there are multiple layers for a recipient, then the ephemeral public key can be reused by the originator for that recipient in each of the different layers.",
      "ja": "単一のメッセージで、受信者に複数の層がある場合、一時的な公開鍵は、異なる層のそれぞれでその受信者の発信者が再利用できます。"
    },
    {
      "indent": 0,
      "text": "4.1.3. Actions of the Receiving Agent",
      "section_title": true,
      "ja": "4.1.3. 受取人の行動"
    },
    {
      "indent": 3,
      "text": "The receiving agent uses the same actions as for EnvelopedData with 1-Pass ECMQV, as specified in Section 3.2.3 of this document.",
      "ja": "受信エージェントは、このドキュメントのセクション3.2.3で指定されているように、1パスECMQVを使用したEnvelopedDataと同じアクションを使用します。"
    },
    {
      "indent": 0,
      "text": "4.2. AuthEnvelopedData Using 1-Pass ECMQV",
      "section_title": true,
      "ja": "4.2. 1パスECMQVを使用したAuthEnvelopedData"
    },
    {
      "indent": 3,
      "text": "This section describes how to use the 1-Pass ECMQV key agreement algorithm with AuthEnvelopedData. ECMQV is method C(1, 2, ECC MQV) from [SP800-56A].",
      "ja": "このセクションでは、AuthEnvelopedDataで1パスECMQV鍵合意アルゴリズムを使用する方法について説明します。 ECMQVは、[SP800-56A]のメソッドC（1、2、ECC MQV）です。"
    },
    {
      "indent": 3,
      "text": "When using ECMQV with AuthEnvelopedData, the fields of AuthEnvelopedData are as in [CMS-AUTHENV].",
      "ja": "AuthEnvelopedDataでECMQVを使用する場合、AuthEnvelopedDataのフィールドは[CMS-AUTHENV]のようになります。"
    },
    {
      "indent": 3,
      "text": "As 1-Pass ECMQV is a key agreement algorithm, the RecipientInfo kari choice is used. When using 1-Pass ECMQV, the AuthEnvelopedData originatorInfo field MAY include the certificate(s) for the EC public key used in the formation of the pairwise key. ECC certificates are discussed in Section 5.",
      "ja": "1パスECMQVは主要な合意アルゴリズムであるため、RecipientInfo kariの選択が使用されます。 1パスECMQVを使用する場合、AuthEnvelopedData originatorInfoフィールドには、ペアワイズキーの形成に使用されるEC公開キーの証明書を含めることができます（MAY）。 ECC証明書については、セクション5で説明します。"
    },
    {
      "indent": 0,
      "text": "4.2.1. Fields of the KeyAgreeRecipientInfo",
      "section_title": true,
      "ja": "4.2.1. KeyAgreeRecipientInfoのフィールド"
    },
    {
      "indent": 3,
      "text": "The AuthEnvelopedData KeyAgreeRecipientInfo fields are used in the same manner as the fields for the corresponding EnvelopedData KeyAgreeRecipientInfo fields of Section 3.2.1 of this document.",
      "ja": "AuthEnvelopedData KeyAgreeRecipientInfoフィールドは、このドキュメントのセクション3.2.1の対応するEnvelopedData KeyAgreeRecipientInfoフィールドのフィールドと同じ方法で使用されます。"
    },
    {
      "indent": 0,
      "text": "4.2.2. Actions of the Sending Agent",
      "section_title": true,
      "ja": "4.2.2. 送信エージェントのアクション"
    },
    {
      "indent": 3,
      "text": "The sending agent uses the same actions as for EnvelopedData with 1-Pass ECMQV, as specified in Section 3.2.2 of this document.",
      "ja": "送信エージェントは、このドキュメントのセクション3.2.2で指定されている、1パスECMQVを使用したEnvelopedDataの場合と同じアクションを使用します。"
    },
    {
      "indent": 3,
      "text": "In a single message, if there are multiple layers for a recipient, then the ephemeral public key can be reused by the originator for that recipient in each of the different layers.",
      "ja": "単一のメッセージで、受信者に複数の層がある場合、一時的な公開鍵は、異なる層のそれぞれでその受信者の発信者が再利用できます。"
    },
    {
      "indent": 0,
      "text": "4.2.3. Actions of the Receiving Agent",
      "section_title": true,
      "ja": "4.2.3. 受取人の行動"
    },
    {
      "indent": 3,
      "text": "The receiving agent uses the same actions as for EnvelopedData with 1-Pass ECMQV, as specified in Section 3.2.3 of this document.",
      "ja": "受信エージェントは、このドキュメントのセクション3.2.3で指定されているように、1パスECMQVを使用したEnvelopedDataと同じアクションを使用します。"
    },
    {
      "indent": 0,
      "text": "5. Certificates Using ECC",
      "section_title": true,
      "ja": "5. ECCを使用した証明書"
    },
    {
      "indent": 3,
      "text": "Internet X.509 certificates [PKI] can be used in conjunction with this specification to distribute agents' public keys. The use of ECC algorithms and keys within X.509 certificates is specified in [PKI-ALG].",
      "ja": "インターネットX.509証明書[PKI]をこの仕様と共に使用して、エージェントの公開鍵を配布できます。 X.509証明書内でのECCアルゴリズムとキーの使用は、[PKI-ALG]で指定されています。"
    },
    {
      "indent": 0,
      "text": "6. SMIMECapabilities Attribute and ECC",
      "section_title": true,
      "ja": "6. SMIMECapabilities属性とECC"
    },
    {
      "indent": 3,
      "text": "A sending agent MAY announce to receiving agents that it supports one or more of the ECC algorithms specified in this document by using the SMIMECapabilities signed attribute [MSG] in either a signed message or a certificate [CERTCAP].",
      "ja": "送信エージェントは、署名付きメッセージまたは証明書[CERTCAP]のSMIMECapabilities署名属性[MSG]を使用して、このドキュメントで指定された1つ以上のECCアルゴリズムをサポートすることを受信エージェントに通知してもよい（MAY）。"
    },
    {
      "indent": 3,
      "text": "The SMIMECapabilities attribute value indicates support for one of the ECDSA signature algorithms in a SEQUENCE with the capabilityID field containing the object identifier ecdsa-with-SHA1 with NULL parameters and ecdsa-with-SHA* (where * is 224, 256, 384, or 512) with absent parameters. The DER encodings are:",
      "ja": "SMIMECapabilities属性値は、NULLのパラメーターを持つオブジェクト識別子ecdsa-with-SHA1とecdsa-with-SHA *（*は224、256、384、または512）パラメータがありません。 DERエンコーディングは次のとおりです。"
    },
    {
      "indent": 6,
      "text": "ecdsa-with-SHA1: 30 0b 06 07 2a 86 48 ce 3d 04 01 05 00",
      "ja": "ecdsa-with-SHA1：30 0b 06 07 2a 86 48 ce 3d 04 01 05 00"
    },
    {
      "indent": 6,
      "text": "ecdsa-with-SHA224: 30 0a 06 08 2a 86 48 ce 3d 04 03 01",
      "ja": "ecdsa-with-SHA224：30 0a 06 08 2a 86 48 ce 3d 04 03 01"
    },
    {
      "indent": 6,
      "text": "ecdsa-with-SHA256: 30 0a 06 08 2a 86 48 ce 3d 04 03 02",
      "ja": "ecdsa-with-SHA256：30 0a 06 08 2a 86 48 ce 3d 04 03 02"
    },
    {
      "indent": 6,
      "text": "ecdsa-with-SHA384: 30 0a 06 08 2a 86 48 ce 3d 04 03 03",
      "ja": "ecdsa-with-SHA384：30 0a 06 08 2a 86 48 ce 3d 04 03 03"
    },
    {
      "indent": 6,
      "text": "ecdsa-with-SHA512: 30 0a 06 08 2a 86 48 ce 3d 04 03 04",
      "ja": "ecdsa-with-SHA512：30 0a 06 08 2a 86 48 ce 3d 04 03 04"
    },
    {
      "indent": 3,
      "text": "NOTE: The SMIMECapabilities attribute indicates that parameters for ECDSA with SHA-1 are NULL; however, the parameters are absent when used to generate a digital signature.",
      "ja": "注：SMIMECapabilities属性は、SHA-1を使用するECDSAのパラメーターがNULLであることを示します。ただし、デジタル署名の生成に使用する場合、パラメーターはありません。"
    },
    {
      "indent": 3,
      "text": "The SMIMECapabilities attribute value indicates support for",
      "ja": "SMIMECapabilities属性値は、"
    },
    {
      "indent": 6,
      "text": "a) the standard ECDH key agreement algorithm, b) the cofactor ECDH key agreement algorithm, or c) the 1-Pass ECMQV key agreement algorithm and",
      "ja": "a) 標準ECDH鍵合意アルゴリズム、b）補因子ECDH鍵合意アルゴリズム、またはc）1パスECMQV鍵合意アルゴリズム"
    },
    {
      "indent": 3,
      "text": "is a SEQUENCE with the capabilityID field containing the object identifier",
      "ja": "オブジェクトIDを含むcapabilityIDフィールドを持つシーケンスです"
    },
    {
      "indent": 6,
      "text": "a) dhSinglePass-stdDH-sha*kdf-scheme, b) dhSinglePass-cofactorDH-sha*kdf-scheme, or c) mqvSinglePass-sha*kdf-scheme",
      "ja": "a) dhSinglePass-stdDH-sha * kdf-scheme、b）dhSinglePass-cofactorDH-sha * kdf-scheme、またはc）mqvSinglePass-sha * kdf-scheme"
    },
    {
      "indent": 3,
      "text": "respectively (where * is 1, 224, 256, 384, or 512) with the parameters present. The parameters indicate the supported key-encryption algorithm with the KeyWrapAlgorithm algorithm identifier.",
      "ja": "それぞれ（ここで*は1、224、256、384、または512）パラメータを指定してパラメータは、KeyWrapAlgorithmアルゴリズム識別子を使用して、サポートされている鍵暗号化アルゴリズムを示します。"
    },
    {
      "indent": 3,
      "text": "The DER encodings that indicate capabilities are as follows (KA is key agreement, KDF is key derivation function, and Wrap is key wrap algorithm):",
      "ja": "機能を示すDERエンコーディングは次のとおりです（KAは鍵の一致、KDFは鍵の導出関数、Wrapは鍵のラップアルゴリズムです）。"
    },
    {
      "indent": 6,
      "text": "KA=ECDH standard KDF=SHA-1 Wrap=Triple-DES",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 8,
      "text": "30 1c 06 09 2b 81 05 10 86 48 3f 00 02 30 0f 06 0b 2a 86 48 86 f7 0d 01 09 10 03 06 05 00",
      "ja": "30 1c 06 09 2b 81 05 10 86 48 3f 00 02 30 0f 06 0b 2a 86 48 86 f7 0d 01 09 10 03 06 05 00"
    },
    {
      "indent": 6,
      "text": "KA=ECDH standard KDF=SHA-224 Wrap=Triple-DES",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 8,
      "text": "30 17 06 06 2b 81 04 01 0B 00 30 0d 06 0b 2a 86 48 86 f7 0d 01 09 10 03 06",
      "ja": "30 17 06 06 2b 81 04 01 0B 00 30 0d 06 0b 2a 86 48 86 f7 0d 01 09 10 03 06"
    },
    {
      "indent": 6,
      "text": "KA=ECDH standard KDF=SHA-256 Wrap=Triple-DES",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 8,
      "text": "30 17 06 06 2b 81 04 01 0B 01 30 0d 06 0b 2a 86 48 86 f7 0d 01 09 10 03 06",
      "ja": "30 17 06 06 2b 81 04 01 0B 01 30 0d 06 0b 2a 86 48 86 f7 0d 01 09 10 03 06"
    },
    {
      "indent": 6,
      "text": "KA=ECDH standard KDF=SHA-384 Wrap=Triple-DES",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 8,
      "text": "30 17 06 06 2b 81 04 01 0B 02 30 0d 06 0b 2a 86 48 86 f7 0d 01 09 10 03 06",
      "ja": "30 17 06 06 2b 81 04 01 0B 02 30 0d 06 0b 2a 86 48 86 f7 0d 01 09 10 03 06"
    },
    {
      "indent": 6,
      "text": "KA=ECDH standard KDF=SHA-512 Wrap=Triple-DES",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 8,
      "text": "30 17 06 06 2b 81 04 01 0B 03 30 0d 06 0b 2a 86 48 86 f7 0d 01 09 10 03 06",
      "ja": "30 17 06 06 2b 81 04 01 0B 03 30 0d 06 0b 2a 86 48 86 f7 0d 01 09 10 03 06"
    },
    {
      "indent": 6,
      "text": "KA=ECDH standard KDF=SHA-1 Wrap=AES-128",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 8,
      "text": "30 18 06 09 2b 81 05 10 86 48 3f 00 02 30 0b 06 09 60 86 48 01 65 03 04 01 05",
      "ja": "30 18 06 09 2b 81 05 10 86 48 3f 00 02 30 0b 06 09 60 86 48 01 65 03 04 01 05"
    },
    {
      "indent": 6,
      "text": "KA=ECDH standard KDF=SHA-224 Wrap=AES-128",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 8,
      "text": "30 15 06 06 2b 81 04 01 0B 00 30 0b 06 09 60 86 48 01 65 03 04 01 05",
      "ja": "30 15 06 06 2b 81 04 01 0B 00 30 0b 06 09 60 86 48 01 65 03 04 01 05"
    },
    {
      "indent": 6,
      "text": "KA=ECDH standard KDF=SHA-256 Wrap=AES-128",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 8,
      "text": "30 15 06 06 2b 81 04 01 0B 01 30 0b 06 09 60 86 48 01 65 03 04 01 05",
      "ja": "30 15 06 06 2b 81 04 01 0B 01 30 0b 06 09 60 86 48 01 65 03 04 01 05"
    },
    {
      "indent": 6,
      "text": "KA=ECDH standard KDF=SHA-384 Wrap=AES-128",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 8,
      "text": "30 15 06 06 2b 81 04 01 0B 02 30 0b 06 09 60 86 48 01 65 03 04 01 05",
      "ja": "30 15 06 06 2b 81 04 01 0B 02 30 0b 06 09 60 86 48 01 65 03 04 01 05"
    },
    {
      "indent": 6,
      "text": "KA=ECDH standard KDF=SHA-512 Wrap=AES-128",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 8,
      "text": "30 15 06 06 2b 81 04 01 0B 03 30 0b 06 09 60 86 48 01 65 03 04 01 05",
      "ja": "30 15 06 06 2b 81 04 01 0B 03 30 0b 06 09 60 86 48 01 65 03 04 01 05"
    },
    {
      "indent": 6,
      "text": "KA=ECDH standard KDF=SHA-1 Wrap=AES-192",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 8,
      "text": "30 18 06 09 2b 81 05 10 86 48 3f 00 02 30 0b 06 09 60 86 48 01 65 03 04 01 19",
      "ja": "30 18 06 09 2b 81 05 10 86 48 3f 00 02 30 0b 06 09 60 86 48 01 65 03 04 01 19"
    },
    {
      "indent": 6,
      "text": "KA=ECDH standard KDF=SHA-224 Wrap=AES-192",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 8,
      "text": "30 15 06 06 2b 81 04 01 0B 00 30 0b 06 09 60 86 48 01 65 03 04 01 19",
      "ja": "30 15 06 06 2b 81 04 01 0B 00 30 0b 06 09 60 86 48 01 65 03 04 01 19"
    },
    {
      "indent": 6,
      "text": "KA=ECDH standard KDF=SHA-256 Wrap=AES-192",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 8,
      "text": "30 15 06 06 2b 81 04 01 0B 01 30 0b 06 09 60 86 48 01 65 03 04 01 19",
      "ja": "30 15 06 06 2b 81 04 01 0B 01 30 0b 06 09 60 86 48 01 65 03 04 01 19"
    },
    {
      "indent": 6,
      "text": "KA=ECDH standard KDF=SHA-384 Wrap=AES-192",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 8,
      "text": "30 15 06 06 2b 81 04 01 0B 02 30 0b 06 09 60 86 48 01 65 03 04 01 19",
      "ja": "30 15 06 06 2b 81 04 01 0B 02 30 0b 06 09 60 86 48 01 65 03 04 01 19"
    },
    {
      "indent": 6,
      "text": "KA=ECDH standard KDF=SHA-512 Wrap=AES-192",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 8,
      "text": "30 15 06 06 2b 81 04 01 0B 03 30 0b 06 09 60 86 48 01 65 03 04 01 19",
      "ja": "30 15 06 06 2b 81 04 01 0B 03 30 0b 06 09 60 86 48 01 65 03 04 01 19"
    },
    {
      "indent": 6,
      "text": "KA=ECDH standard KDF=SHA-1 Wrap=AES-256",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 8,
      "text": "30 18 06 09 2b 81 05 10 86 48 3f 00 02 30 0b 06 09 60 86 48 01 65 03 04 01 2D",
      "ja": "30 18 06 09 2b 81 05 10 86 48 3f 00 02 30 0b 06 09 60 86 48 01 65 03 04 01 2D"
    },
    {
      "indent": 6,
      "text": "KA=ECDH standard KDF=SHA-224 Wrap=AES-256",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 8,
      "text": "30 15 06 06 2b 81 04 01 0B 00 30 0b 06 09 60 86 48 01 65 03 04 01 2D",
      "ja": "30 15 06 06 2b 81 04 01 0B 00 30 0b 06 09 60 86 48 01 65 03 04 01 2D"
    },
    {
      "indent": 6,
      "text": "KA=ECDH standard KDF=SHA-256 Wrap=AES-256",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 8,
      "text": "30 15 06 06 2b 81 04 01 0B 01 30 0b 06 09 60 86 48 01 65 03 04 01 2D",
      "ja": "30 15 06 06 2b 81 04 01 0B 01 30 0b 06 09 60 86 48 01 65 03 04 01 2D"
    },
    {
      "indent": 6,
      "text": "KA=ECDH standard KDF=SHA-384 Wrap=AES-256",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 8,
      "text": "30 15 06 06 2b 81 04 01 0B 02 30 0b 06 09 60 86 48 01 65 03 04 01 2D 05 00",
      "ja": "30 15 06 06 2b 81 04 01 0B 02 30 0b 06 09 60 86 48 01 65 03 04 01 2D 05 00"
    },
    {
      "indent": 6,
      "text": "KA=ECDH standard KDF=SHA-512 Wrap=AES-256",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 8,
      "text": "30 15 06 06 2b 81 04 01 0B 03 30 0b 06 09 60 86 48 01 65 03 04 01 2D",
      "ja": "30 15 06 06 2b 81 04 01 0B 03 30 0b 06 09 60 86 48 01 65 03 04 01 2D"
    },
    {
      "indent": 6,
      "text": "KA=ECDH cofactor KDF=SHA-1 Wrap=Triple-DES",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 8,
      "text": "30 1c 06 09 2b 81 05 10 86 48 3f 00 03 30 0f 06 0b 2a 86 48 86 f7 0d 01 09 10 03 06 05 00",
      "ja": "30 1c 06 09 2b 81 05 10 86 48 3f 00 03 30 0f 06 0b 2a 86 48 86 f7 0d 01 09 10 03 06 05 00"
    },
    {
      "indent": 6,
      "text": "KA=ECDH cofactor KDF=SHA-224 Wrap=Triple-DES",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 8,
      "text": "30 17 06 06 2b 81 04 01 0E 00 30 0d 06 0b 2a 86 48 86 f7 0d 01 09 10 03 06",
      "ja": "30 17 06 06 2b 81 04 01 0E 00 30 0d 06 0b 2a 86 48 86 f7 0d 01 09 10 03 06"
    },
    {
      "indent": 6,
      "text": "KA=ECDH cofactor KDF=SHA-256 Wrap=Triple-DES",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 8,
      "text": "30 17 06 06 2b 81 04 01 0E 01 30 0d 06 0b 2a 86 48 86 f7 0d 01 09 10 03 06",
      "ja": "30 17 06 06 2b 81 04 01 0E 01 30 0d 06 0b 2a 86 48 86 f7 0d 01 09 10 03 06"
    },
    {
      "indent": 6,
      "text": "KA=ECDH cofactor KDF=SHA-384 Wrap=Triple-DES",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 8,
      "text": "30 17 06 06 2b 81 04 01 0E 02 30 0d 06 0b 2a 86 48 86 f7 0d 01 09 10 03 06",
      "ja": "30 17 06 06 2b 81 04 01 0E 02 30 0d 06 0b 2a 86 48 86 f7 0d 01 09 10 03 06"
    },
    {
      "indent": 6,
      "text": "KA=ECDH cofactor KDF=SHA-512 Wrap=Triple-DES",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 8,
      "text": "30 17 06 06 2b 81 04 01 0E 03 30 0d 06 0b 2a 86 48 86 f7 0d 01 09 10 03 06",
      "ja": "30 17 06 06 2b 81 04 01 0E 03 30 0d 06 0b 2a 86 48 86 f7 0d 01 09 10 03 06"
    },
    {
      "indent": 6,
      "text": "KA=ECDH cofactor KDF=SHA-1 Wrap=AES-128",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 8,
      "text": "30 18 06 09 2b 81 05 10 86 48 3f 00 03 30 0b 06 09 60 86 48 01 65 03 04 01 05",
      "ja": "30 18 06 09 2b 81 05 10 86 48 3f 00 03 30 0b 06 09 60 86 48 01 65 03 04 01 05"
    },
    {
      "indent": 6,
      "text": "KA=ECDH cofactor KDF=SHA-224 Wrap=AES-128",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 8,
      "text": "30 15 06 06 2b 81 04 01 0E 00 30 0b 06 09 60 86 48 01 65 03 04 01 05",
      "ja": "30 15 06 06 2b 81 04 01 0E 00 30 0b 06 09 60 86 48 01 65 03 04 01 05"
    },
    {
      "indent": 6,
      "text": "KA=ECDH cofactor KDF=SHA-256 Wrap=AES-128",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 8,
      "text": "30 15 06 06 2b 81 04 01 0E 01 30 0b 06 09 60 86 48 01 65 03 04 01 05",
      "ja": "30 15 06 06 2b 81 04 01 0E 01 30 0b 06 09 60 86 48 01 65 03 04 01 05"
    },
    {
      "indent": 6,
      "text": "KA=ECDH cofactor KDF=SHA-384 Wrap=AES-128",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 8,
      "text": "30 15 06 06 2b 81 04 01 0E 02 30 0b 06 09 60 86 48 01 65 03 04 01 05",
      "ja": "30 15 06 06 2b 81 04 01 0E 02 30 0b 06 09 60 86 48 01 65 03 04 01 05"
    },
    {
      "indent": 6,
      "text": "KA=ECDH cofactor KDF=SHA-512 Wrap=AES-128",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 8,
      "text": "30 17 06 06 2b 81 04 01 0E 03 30 0b 06 09 60 86 48 01 65 03 04 01 05",
      "ja": "30 17 06 06 2b 81 04 01 0E 03 30 0b 06 09 60 86 48 01 65 03 04 01 05"
    },
    {
      "indent": 6,
      "text": "KA=ECDH cofactor KDF=SHA-1 Wrap=AES-192",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 8,
      "text": "30 18 06 09 2b 81 05 10 86 48 3f 00 03 30 0b 06 09 60 86 48 01 65 03 04 01 19",
      "ja": "30 18 06 09 2b 81 05 10 86 48 3f 00 03 30 0b 06 09 60 86 48 01 65 03 04 01 19"
    },
    {
      "indent": 6,
      "text": "KA=ECDH cofactor KDF=SHA-224 Wrap=AES-192",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 8,
      "text": "30 15 06 06 2b 81 04 01 0E 00 30 0b 06 09 60 86 48 01 65 03 04 01 19",
      "ja": "30 15 06 06 2b 81 04 01 0E 00 30 0b 06 09 60 86 48 01 65 03 04 01 19"
    },
    {
      "indent": 6,
      "text": "KA=ECDH cofactor KDF=SHA-256 Wrap=AES-192",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 8,
      "text": "30 15 06 06 2b 81 04 01 0E 01 30 0b 06 09 60 86 48 01 65 03 04 01 19",
      "ja": "30 15 06 06 2b 81 04 01 0E 01 30 0b 06 09 60 86 48 01 65 03 04 01 19"
    },
    {
      "indent": 6,
      "text": "KA=ECDH cofactor KDF=SHA-384 Wrap=AES-192",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 8,
      "text": "30 15 06 06 2b 81 04 01 0E 02 30 0b 06 09 60 86 48 01 65 03 04 01 19",
      "ja": "30 15 06 06 2b 81 04 01 0E 02 30 0b 06 09 60 86 48 01 65 03 04 01 19"
    },
    {
      "indent": 6,
      "text": "KA=ECDH cofactor KDF=SHA-512 Wrap=AES-192",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 8,
      "text": "30 15 06 06 2b 81 04 01 0E 03 30 0b 06 09 60 86 48 01 65 03 04 01 19",
      "ja": "30 15 06 06 2b 81 04 01 0E 03 30 0b 06 09 60 86 48 01 65 03 04 01 19"
    },
    {
      "indent": 6,
      "text": "KA=ECDH cofactor KDF=SHA-1 Wrap=AES-256",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 8,
      "text": "30 15 06 09 2b 81 05 10 86 48 3f 00 03 30 0b 06 09 60 86 48 01 65 03 04 01 2D",
      "ja": "30 15 06 09 2b 81 05 10 86 48 3f 00 03 30 0b 06 09 60 86 48 01 65 03 04 01 2D"
    },
    {
      "indent": 6,
      "text": "KA=ECDH cofactor KDF=SHA-224 Wrap=AES-256",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 8,
      "text": "30 15 06 06 2b 81 04 01 0E 00 30 0b 06 09 60 86 48 01 65 03 04 01 2D",
      "ja": "30 15 06 06 2b 81 04 01 0E 00 30 0b 06 09 60 86 48 01 65 03 04 01 2D"
    },
    {
      "indent": 6,
      "text": "KA=ECDH cofactor KDF=SHA-256 Wrap=AES-256",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 8,
      "text": "30 15 06 06 2b 81 04 01 0E 01 30 0b 06 09 60 86 48 01 65 03 04 01 2D",
      "ja": "30 15 06 06 2b 81 04 01 0E 01 30 0b 06 09 60 86 48 01 65 03 04 01 2D"
    },
    {
      "indent": 6,
      "text": "KA=ECDH cofactor KDF=SHA-384 Wrap=AES-256",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 8,
      "text": "30 15 06 06 2b 81 04 01 0E 02 30 0b 06 09 60 86 48 01 65 03 04 01 2D",
      "ja": "30 15 06 06 2b 81 04 01 0E 02 30 0b 06 09 60 86 48 01 65 03 04 01 2D"
    },
    {
      "indent": 6,
      "text": "KA=ECDH cofactor KDF=SHA-512 Wrap=AES-256",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 8,
      "text": "30 15 06 06 2b 81 04 01 0E 03 30 0b 06 09 60 86 48 01 65 03 04 01 2D",
      "ja": "30 15 06 06 2b 81 04 01 0E 03 30 0b 06 09 60 86 48 01 65 03 04 01 2D"
    },
    {
      "indent": 6,
      "text": "KA=ECMQV 1-Pass KDF=SHA-1 Wrap=Triple-DES",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 8,
      "text": "30 1c 06 09 2b 81 05 10 86 48 3f 00 10 30 0f 06 0b 2a 86 48 86 f7 0d 01 09 10 03 06 05 00",
      "ja": "30 1c 06 09 2b 81 05 10 86 48 3f 00 10 30 0f 06 0b 2a 86 48 86 f7 0d 01 09 10 03 06 05 00"
    },
    {
      "indent": 6,
      "text": "KA=ECMQV 1-Pass KDF=SHA-224 Wrap=Triple-DES",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 8,
      "text": "30 17 06 06 2b 81 04 01 0F 00 30 0d 06 0b 2a 86 48 86 f7 0d 01 09 10 03 06",
      "ja": "30 17 06 06 2b 81 04 01 0F 00 30 0d 06 0b 2a 86 48 86 f7 0d 01 09 10 03 06"
    },
    {
      "indent": 6,
      "text": "KA=ECMQV 1-Pass KDF=SHA-256 Wrap=Triple-DES",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 8,
      "text": "30 17 06 06 2b 81 04 01 0F 01 30 0d 06 0b 2a 86 48 86 f7 0d 01 09 10 03 06",
      "ja": "30 17 06 06 2b 81 04 01 0F 01 30 0d 06 0b 2a 86 48 86 f7 0d 01 09 10 03 06"
    },
    {
      "indent": 6,
      "text": "KA=ECMQV 1-Pass KDF=SHA-384 Wrap=Triple-DES",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 8,
      "text": "30 17 06 06 2b 81 04 01 0F 02 30 0d 06 0b 2a 86 48 86 f7 0d 01 09 10 03 06",
      "ja": "30 17 06 06 2b 81 04 01 0F 02 30 0d 06 0b 2a 86 48 86 f7 0d 01 09 10 03 06"
    },
    {
      "indent": 6,
      "text": "KA=ECMQV 1-Pass KDF=SHA-512 Wrap=Triple-DES",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 8,
      "text": "30 17 06 06 2b 81 04 01 0F 03 30 0d 06 0b 2a 86 48 86 f7 0d 01 09 10 03 06",
      "ja": "30 17 06 06 2b 81 04 01 0F 03 30 0d 06 0b 2a 86 48 86 f7 0d 01 09 10 03 06"
    },
    {
      "indent": 6,
      "text": "KA=ECMQV 1-Pass KDF=SHA-1 Wrap=AES-128",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 8,
      "text": "30 18 06 09 2b 81 05 10 86 48 3f 00 10 30 0b 06 09 60 86 48 01 65 03 04 01 05",
      "ja": "30 18 06 09 2b 81 05 10 86 48 3f 00 10 30 0b 06 09 60 86 48 01 65 03 04 01 05"
    },
    {
      "indent": 6,
      "text": "KA=ECMQV 1-Pass KDF=SHA-224 Wrap=AES-128",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 8,
      "text": "30 15 06 06 2b 81 04 01 0F 00 30 0b 06 09 60 86 48 01 65 03 04 01 05",
      "ja": "30 15 06 06 2b 81 04 01 0F 00 30 0b 06 09 60 86 48 01 65 03 04 01 05"
    },
    {
      "indent": 6,
      "text": "KA=ECMQV 1-Pass KDF=SHA-256 Wrap=AES-128",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 8,
      "text": "30 15 06 06 2b 81 04 01 0F 01 30 0b 06 09 60 86 48 01 65 03 04 01 05",
      "ja": "30 15 06 06 2b 81 04 01 0F 01 30 0b 06 09 60 86 48 01 65 03 04 01 05"
    },
    {
      "indent": 6,
      "text": "KA=ECMQV 1-Pass KDF=SHA-384 Wrap=AES-128",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 8,
      "text": "30 15 06 06 2b 81 04 01 0F 02 30 0b 06 09 60 86 48 01 65 03 04 01 05",
      "ja": "30 15 06 06 2b 81 04 01 0F 02 30 0b 06 09 60 86 48 01 65 03 04 01 05"
    },
    {
      "indent": 6,
      "text": "KA=ECMQV 1-Pass KDF=SHA-512 Wrap=AES-128",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 8,
      "text": "30 15 06 06 2b 81 04 01 0F 03 30 0b 06 09 60 86 48 01 65 03 04 01 05",
      "ja": "30 15 06 06 2b 81 04 01 0F 03 30 0b 06 09 60 86 48 01 65 03 04 01 05"
    },
    {
      "indent": 6,
      "text": "KA=ECMQV 1-Pass KDF=SHA-1 Wrap=AES-192",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 8,
      "text": "30 18 06 09 2b 81 05 10 86 48 3f 00 10 30 0b 06 09 60 86 48 01 65 03 04 01 19",
      "ja": "30 18 06 09 2b 81 05 10 86 48 3f 00 10 30 0b 06 09 60 86 48 01 65 03 04 01 19"
    },
    {
      "indent": 6,
      "text": "KA=ECMQV 1-Pass KDF=SHA-224 Wrap=AES-192",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 8,
      "text": "30 15 06 06 2b 81 04 01 0F 00 30 0b 06 09 60 86 48 01 65 03 04 01 19",
      "ja": "30 15 06 06 2b 81 04 01 0F 00 30 0b 06 09 60 86 48 01 65 03 04 01 19"
    },
    {
      "indent": 6,
      "text": "KA=ECMQV 1-Pass KDF=SHA-256 Wrap=AES-192",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 8,
      "text": "30 15 06 06 2b 81 04 01 0F 01 30 0b 06 09 60 86 48 01 65 03 04 01 19",
      "ja": "30 15 06 06 2b 81 04 01 0F 01 30 0b 06 09 60 86 48 01 65 03 04 01 19"
    },
    {
      "indent": 6,
      "text": "KA=ECMQV 1-Pass KDF=SHA-384 Wrap=AES-192",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 8,
      "text": "30 15 06 06 2b 81 04 01 0F 02 30 0b 06 09 60 86 48 01 65 03 04 01 19",
      "ja": "30 15 06 06 2b 81 04 01 0F 02 30 0b 06 09 60 86 48 01 65 03 04 01 19"
    },
    {
      "indent": 6,
      "text": "KA=ECMQV 1-Pass KDF=SHA-512 Wrap=AES-192",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 8,
      "text": "30 15 06 06 2b 81 04 01 0F 03 30 0b 06 09 60 86 48 01 65 03 04 01 19",
      "ja": "30 15 06 06 2b 81 04 01 0F 03 30 0b 06 09 60 86 48 01 65 03 04 01 19"
    },
    {
      "indent": 6,
      "text": "KA=ECMQV 1-Pass KDF=SHA-1 Wrap=AES-256",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 8,
      "text": "30 18 06 09 2b 81 05 10 86 48 3f 00 10 30 0b 06 09 60 86 48 01 65 03 04 01 2D",
      "ja": "30 18 06 09 2b 81 05 10 86 48 3f 00 10 30 0b 06 09 60 86 48 01 65 03 04 01 2D"
    },
    {
      "indent": 6,
      "text": "KA=ECMQV 1-Pass KDF=SHA-224 Wrap=AES-256",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 8,
      "text": "30 15 06 06 2b 81 04 01 0F 00 30 0b 06 09 60 86 48 01 65 03 04 01 2D",
      "ja": "30 15 06 06 2b 81 04 01 0F 00 30 0b 06 09 60 86 48 01 65 03 04 01 2D"
    },
    {
      "indent": 6,
      "text": "KA=ECMQV 1-Pass KDF=SHA-256 Wrap=AES-256",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 8,
      "text": "30 15 06 06 2b 81 04 01 0F 01 30 0b 06 09 60 86 48 01 65 03 04 01 2D",
      "ja": "30 15 06 06 2b 81 04 01 0F 01 30 0b 06 09 60 86 48 01 65 03 04 01 2D"
    },
    {
      "indent": 6,
      "text": "KA=ECMQV 1-Pass KDF=SHA-384 Wrap=AES-256",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 8,
      "text": "30 15 06 06 2b 81 04 01 0F 02 30 0b 06 09 60 86 48 01 65 03 04 01 2D",
      "ja": "30 15 06 06 2b 81 04 01 0F 02 30 0b 06 09 60 86 48 01 65 03 04 01 2D"
    },
    {
      "indent": 6,
      "text": "KA=ECMQV 1-Pass KDF=SHA-512 Wrap=AES-256",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 8,
      "text": "30 15 06 06 2b 81 04 01 0F 03 30 0b 06 09 60 86 48 01 65 03 04 01 2D",
      "ja": "30 15 06 06 2b 81 04 01 0F 03 30 0b 06 09 60 86 48 01 65 03 04 01 2D"
    },
    {
      "indent": 3,
      "text": "NOTE: The S/MIME Capabilities for the supported AES content-encryption key sizes are defined in [CMS-AES].",
      "ja": "注：サポートされているAESコンテンツ暗号化キーサイズのS / MIME機能は、[CMS-AES]で定義されています。"
    },
    {
      "indent": 3,
      "text": "NOTE: The S/MIME Capabilities for the supported MAC algorithms are defined in [CMS-ASN].",
      "ja": "注：サポートされているMACアルゴリズムのS / MIME機能は、[CMS-ASN]で定義されています。"
    },
    {
      "indent": 0,
      "text": "7. ASN.1 Syntax",
      "section_title": true,
      "ja": "7. ASN.1構文"
    },
    {
      "indent": 3,
      "text": "The ASN.1 syntax [X.680], [X.681], [X.682], [X.683] used in this document is gathered in this section for reference purposes.",
      "ja": "このドキュメントで使用されているASN.1構文[X.680]、[X.681]、[X.682]、[X.683]は、参照用にこのセクションにまとめられています。"
    },
    {
      "indent": 0,
      "text": "7.1. Algorithm Identifiers",
      "section_title": true,
      "ja": "7.1. アルゴリズム識別子"
    },
    {
      "indent": 3,
      "text": "This section provides the object identifiers for the algorithms used in this document along with any associated parameters.",
      "ja": "このセクションでは、このドキュメントで使用されているアルゴリズムのオブジェクト識別子と、関連するパラメータを提供します。"
    },
    {
      "indent": 0,
      "text": "7.1.1. Digest Algorithms",
      "section_title": true,
      "ja": "7.1.1. ダイジェストアルゴリズム"
    },
    {
      "indent": 3,
      "text": "Digest algorithm object identifiers are used in the SignedData digestAlgorithms and digestAlgorithm fields and the AuthenticatedData digestAlgorithm field. The digest algorithms used in this document are SHA-1, SHA-224, SHA-256, SHA-384, and SHA-512. The object identifiers and parameters associated with these algorithms are found in [CMS-ALG] and [CMS-SHA2].",
      "ja": "ダイジェストアルゴリズムのオブジェクト識別子は、SignedData digestAlgorithmsおよびdigestAlgorithmフィールドとAuthenticatedData digestAlgorithmフィールドで使用されます。このドキュメントで使用されているダイジェストアルゴリズムは、SHA-1、SHA-224、SHA-256、SHA-384、SHA-512です。これらのアルゴリズムに関連するオブジェクト識別子とパラメーターは、[CMS-ALG]と[CMS-SHA2]にあります。"
    },
    {
      "indent": 0,
      "text": "7.1.2. Originator Public Key",
      "section_title": true,
      "ja": "7.1.2. オリジネーター公開鍵"
    },
    {
      "indent": 3,
      "text": "The KeyAgreeRecipientInfo originator field uses the following object identifier to indicate an elliptic curve public key:",
      "ja": "KeyAgreeRecipientInfoオリジネーターフィールドは、次のオブジェクト識別子を使用して楕円曲線公開鍵を示します。"
    },
    {
      "indent": 6,
      "text": "id-ecPublicKey OBJECT IDENTIFIER ::= {\n  ansi-x9-62 keyType(2) 1 }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "where",
      "ja": "ただし"
    },
    {
      "indent": 6,
      "text": "ansi-x9-62 OBJECT IDENTIFIER ::= {\n  iso(1) member-body(2) us(840) 10045 }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": " When the object identifier id-ecPublicKey is used here with an algorithm identifier, the associated parameters MUST be either absent or ECParameters. Implementations MUST accept id-ecPublicKey with absent and ECParameters parameters. If ECParameters is present, its value MUST match the recipient's ECParameters. Implementations SHOULD generate absent parameters for the id-ecPublicKey object identifier in the KeyAgreeRecipientInfo originator field.",
      "ja": "オブジェクト識別子id-ecPublicKeyがここでアルゴリズム識別子と共に使用される場合、関連するパラメーターは存在しないかECParametersでなければなりません。実装では、パラメーターがないECParametersでid-ecPublicKeyを受け入れる必要があります。 ECParametersが存在する場合、その値は受信者のECParametersと一致する必要があります。実装では、KeyAgreeRecipientInfoオリジネーターフィールドにid-ecPublicKeyオブジェクト識別子のパラメーターがないことを生成する必要があります（SHOULD）。"
    },
    {
      "indent": 3,
      "text": "[CMS-ECC] indicated the parameters were NULL. Support for this legacy form is OPTIONAL.",
      "ja": "[CMS-ECC]は、パラメーターがNULLであることを示しました。このレガシーフォームのサポートはオプションです。"
    },
    {
      "indent": 0,
      "text": "7.1.3. Signature Algorithms",
      "section_title": true,
      "ja": "7.1.3. 署名アルゴリズム"
    },
    {
      "indent": 3,
      "text": "Signature algorithm identifiers are used in the SignedData signatureAlgorithm and signature fields. The signature algorithms used in this document are ECDSA with SHA-1, ECDSA with SHA-224, ECDSA with SHA-256, ECDSA with SHA-384, and ECDSA with SHA-512. The object identifiers and parameters associated with these algorithms are found in [PKI-ALG].",
      "ja": "署名アルゴリズム識別子は、SignedDataのsignatureAlgorithmおよび署名フィールドで使用されます。このドキュメントで使用されている署名アルゴリズムは、SHA-1を備えたECDSA、SHA-224を備えたECDSA、SHA-256を備えたECDSA、SHA-384を備えたECDSA、およびSHA-512を備えたECDSAです。これらのアルゴリズムに関連するオブジェクト識別子とパラメータは、[PKI-ALG]にあります。"
    },
    {
      "indent": 3,
      "text": "[CMS-ECC] indicated the parameters were NULL. Support for this legacy form is OPTIONAL.",
      "ja": "[CMS-ECC]は、パラメーターがNULLであることを示しました。このレガシーフォームのサポートはオプションです。"
    },
    {
      "indent": 0,
      "text": "7.1.4. Key Agreement Algorithms",
      "section_title": true,
      "ja": "7.1.4. 鍵合意アルゴリズム"
    },
    {
      "indent": 3,
      "text": "Key agreement algorithms are used in EnvelopedData, AuthenticatedData, and AuthEnvelopedData in the KeyAgreeRecipientInfo keyEncryptionAlgorithm field. The following object identifiers indicate the key agreement algorithms used in this document [SP800-56A], [SEC1]:",
      "ja": "鍵合意アルゴリズムは、KeyAgreeRecipientInfo keyEncryptionAlgorithmフィールドのEnvelopedData、AuthenticatedData、およびAuthEnvelopedDataで使用されます。次のオブジェクト識別子は、このドキュメントで使用される鍵合意アルゴリズムを示しています[SP800-56A]、[SEC1]："
    },
    {
      "indent": 6,
      "text": "dhSinglePass-stdDH-sha1kdf-scheme OBJECT IDENTIFIER ::= {\n  x9-63-scheme 2 }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 6,
      "text": "dhSinglePass-stdDH-sha224kdf-scheme OBJECT IDENTIFIER ::= {\n  secg-scheme 11 0 }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 6,
      "text": "dhSinglePass-stdDH-sha256kdf-scheme OBJECT IDENTIFIER ::= {\n  secg-scheme 11 1 }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 6,
      "text": "dhSinglePass-stdDH-sha384kdf-scheme OBJECT IDENTIFIER ::= {\n  secg-scheme 11 2 }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 6,
      "text": "dhSinglePass-stdDH-sha512kdf-scheme OBJECT IDENTIFIER ::= {\n  secg-scheme 11 3 }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 6,
      "text": "dhSinglePass-cofactorDH-sha1kdf-scheme OBJECT IDENTIFIER ::= {\n  x9-63-scheme 3 }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 6,
      "text": "dhSinglePass-cofactorDH-sha224kdf-scheme OBJECT IDENTIFIER ::= {\n  secg-scheme 14 0 }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 6,
      "text": "dhSinglePass-cofactorDH-sha256kdf-scheme OBJECT IDENTIFIER ::= {\n  secg-scheme 14 1 }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 6,
      "text": "dhSinglePass-cofactorDH-sha384kdf-scheme OBJECT IDENTIFIER ::= {\n  secg-scheme 14 2 }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 6,
      "text": "dhSinglePass-cofactorDH-sha512kdf-scheme OBJECT IDENTIFIER ::= {\n  secg-scheme 14 3 }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 6,
      "text": "mqvSinglePass-sha1kdf-scheme OBJECT IDENTIFIER ::= {\n  x9-63-scheme 16 }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 6,
      "text": "mqvSinglePass-sha224kdf-scheme OBJECT IDENTIFIER ::= {\n  secg-scheme 15 0 }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 6,
      "text": "mqvSinglePass-sha256kdf-scheme OBJECT IDENTIFIER ::= {\n  secg-scheme 15 1 }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 6,
      "text": "mqvSinglePass-sha384kdf-scheme OBJECT IDENTIFIER ::= {\n  secg-scheme 15 2 }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 6,
      "text": "mqvSinglePass-sha512kdf-scheme OBJECT IDENTIFIER ::= {\n  secg-scheme 15 3 }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "where",
      "ja": "ただし"
    },
    {
      "indent": 6,
      "text": "x9-63-scheme OBJECT IDENTIFIER ::= {\n  iso(1) identified-organization(3) tc68(133) country(16)\n  x9(840) x9-63(63) schemes(0) }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "and",
      "ja": "そして"
    },
    {
      "indent": 6,
      "text": "secg-scheme OBJECT IDENTIFIER ::= {\n  iso(1) identified-organization(3) certicom(132) schemes(1) }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "When the object identifiers are used here within an algorithm identifier, the associated parameters field contains KeyWrapAlgorithm to indicate the key wrap algorithm and any associated parameters.",
      "ja": "ここでオブジェクト識別子がアルゴリズム識別子内で使用される場合、関連するパラメーターフィールドには、キーラップアルゴリズムと関連するパラメーターを示すKeyWrapAlgorithmが含まれます。"
    },
    {
      "indent": 0,
      "text": "7.1.5. Key Wrap Algorithms",
      "section_title": true,
      "ja": "7.1.5. キーラップアルゴリズム"
    },
    {
      "indent": 3,
      "text": "Key wrap algorithms are used as part of the parameters in the key agreement algorithm. The key wrap algorithms used in this document are Triple-DES, AES-128, AES-192, and AES-256. The object identifiers and parameters for these algorithms are found in [CMS-ALG] and [CMS-AES].",
      "ja": "鍵ラップアルゴリズムは、鍵合意アルゴリズムのパラメーターの一部として使用されます。このドキュメントで使用されているキーラップアルゴリズムは、Triple-DES、AES-128、AES-192、およびAES-256です。これらのアルゴリズムのオブジェクト識別子とパラメーターは、[CMS-ALG]と[CMS-AES]にあります。"
    },
    {
      "indent": 0,
      "text": "7.1.6. Content Encryption Algorithms",
      "section_title": true,
      "ja": "7.1.6. コンテンツ暗号化アルゴリズム"
    },
    {
      "indent": 3,
      "text": "Content encryption algorithms are used in EnvelopedData and AuthEnvelopedData in the EncryptedContentInfo contentEncryptionAlgorithm field. The content encryption algorithms used with EnvelopedData in this document are 3-Key Triple DES in CBC mode, AES-128 in CBC mode, AES-192 in CBC mode, and AES-256 in CBC mode. The object identifiers and parameters associated with these algorithms are found in [CMS-ALG] and [CMS-AES]. The content encryption algorithms used with AuthEnvelopedData in this document are AES-128 in CCM mode, AES-192 in CCM mode, AES-256 in CCM mode, AES-128 in GCM mode, AES-192 in GCM mode, and AES-256 in GCM mode. The object identifiers and parameters associated with these algorithms are found in [CMS-AESCG].",
      "ja": "コンテンツ暗号化アルゴリズムは、EncryptedContentInfo contentEncryptionAlgorithmフィールドのEnvelopedDataおよびAuthEnvelopedDataで使用されます。このドキュメントのEnvelopedDataで使用されるコンテンツ暗号化アルゴリズムは、CBCモードの3-Key Triple DES、CBCモードのAES-128、CBCモードのAES-192、およびCBCモードのAES-256です。これらのアルゴリズムに関連するオブジェクト識別子とパラメータは、[CMS-ALG]と[CMS-AES]にあります。このドキュメントのAuthEnvelopedDataで使用されるコンテンツ暗号化アルゴリズムは、CCMモードのAES-128、CCMモードのAES-192、CCMモードのAES-256、GCMモードのAES-128、GCMモードのAES-192、およびAES-256です。 GCMモード。これらのアルゴリズムに関連するオブジェクト識別子とパラメータは、[CMS-AESCG]にあります。"
    },
    {
      "indent": 0,
      "text": "7.1.7. Message Authentication Code Algorithms",
      "section_title": true,
      "ja": "7.1.7. メッセージ認証コードアルゴリズム"
    },
    {
      "indent": 3,
      "text": "Message authentication code algorithms are used in AuthenticatedData in the macAlgorithm field. The message authentication code algorithms used in this document are HMAC with SHA-1, HMAC with SHA-224, HMAC with SHA-256, HMAC with SHA-384, and HMAC with SHA-512. The object identifiers and parameters associated with these algorithms are found in [CMS-ALG] and [HMAC-SHA2].",
      "ja": "メッセージ認証コードアルゴリズムは、macAlgorithmフィールドのAuthenticatedDataで使用されます。このドキュメントで使用されているメッセージ認証コードアルゴリズムは、SHA-1を備えたHMAC、SHA-224を備えたHMAC、SHA-256を備えたHMAC、SHA-384を備えたHMAC、およびSHA-512を備えたHMACです。これらのアルゴリズムに関連するオブジェクト識別子とパラメーターは、[CMS-ALG]と[HMAC-SHA2]にあります。"
    },
    {
      "indent": 3,
      "text": "NOTE: [HMAC-SHA2] defines the object identifiers for HMAC with SHA-224, HMAC with SHA-256, HMAC with SHA-384, and HMAC with SHA-512, but there is no ASN.1 module from which to import these object identifiers. Therefore, the object identifiers for these algorithms are included in the ASN.1 modules defined in Appendix A.",
      "ja": "注：[HMAC-SHA2]は、SHA-224を使用するHMAC、SHA-256を使用するHMAC、SHA-384を使用するHMAC、およびSHA-512を使用するHMACのオブジェクト識別子を定義しますが、これらをインポートするASN.1モジュールはありませんオブジェクト識別子。したがって、これらのアルゴリズムのオブジェクト識別子は、付録Aで定義されているASN.1モジュールに含まれています。"
    },
    {
      "indent": 0,
      "text": "7.1.8. Key Derivation Algorithm",
      "section_title": true,
      "ja": "7.1.8. 鍵導出アルゴリズム"
    },
    {
      "indent": 3,
      "text": "The KDF used in this document is as specified in Section 3.6.1 of [SEC1]. The hash algorithm is identified in the key agreement algorithm. For example, dhSinglePass-stdDH-sha256kdf-scheme uses the KDF from [SEC1] but uses SHA-256 instead of SHA-1.",
      "ja": "このドキュメントで使用されているKDFは、[SEC1]のセクション3.6.1で指定されています。ハッシュアルゴリズムは、鍵合意アルゴリズムで識別されます。たとえば、dhSinglePass-stdDH-sha256kdf-schemeは[SEC1]のKDFを使用しますが、SHA-1の代わりにSHA-256を使用します。"
    },
    {
      "indent": 0,
      "text": "7.2. Other Syntax",
      "section_title": true,
      "ja": "7.2. その他の構文"
    },
    {
      "indent": 3,
      "text": "The following additional syntax is used here.",
      "ja": "ここでは、次の追加構文が使用されます。"
    },
    {
      "indent": 3,
      "text": "When using ECDSA with SignedData, ECDSA signatures are encoded using the type:",
      "ja": "ECDSAをSignedDataと共に使用する場合、ECDSA署名は次のタイプを使用してエンコードされます。"
    },
    {
      "indent": 6,
      "text": "ECDSA-Sig-Value ::= SEQUENCE {\n  r INTEGER,\n  s INTEGER }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "ECDSA-Sig-Value is specified in [PKI-ALG]. Within CMS, ECDSA-Sig-Value is DER-encoded and placed within a signature field of SignedData.",
      "ja": "ECDSA-Sig-Valueは[PKI-ALG]で指定されます。 CMS内では、ECDSA-Sig-ValueはDERエンコードされ、SignedDataの署名フィールド内に配置されます。"
    },
    {
      "indent": 3,
      "text": "When using ECDH and ECMQV with EnvelopedData, AuthenticatedData, and AuthEnvelopedData, ephemeral and static public keys are encoded using the type ECPoint. Implementations MUST support uncompressed keys, MAY support compressed keys, and MUST NOT support hybrid keys.",
      "ja": "ECDHおよびECMQVをEnvelopedData、AuthenticatedData、およびAuthEnvelopedDataと共に使用する場合、一時および静的公開鍵は、タイプECPointを使用してエンコードされます。実装は非圧縮キーをサポートする必要があり、圧縮キーをサポートする場合があります（MAY）。ハイブリッドキーをサポートしてはなりません（MUST NOT）。"
    },
    {
      "indent": 6,
      "text": "ECPoint ::= OCTET STRING",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "When using ECMQV with EnvelopedData, AuthenticatedData, and AuthEnvelopedData, the sending agent's ephemeral public key and additional keying material are encoded using the type:",
      "ja": "ECMQVをEnvelopedData、AuthenticatedData、AuthEnvelopedDataと一緒に使用する場合、送信エージェントの一時的な公開鍵と追加の鍵情報は、次のタイプを使用してエンコードされます。"
    },
    {
      "indent": 6,
      "text": "MQVuserKeyingMaterial ::= SEQUENCE {\n  ephemeralPublicKey      OriginatorPublicKey,\n  addedukm            [0] EXPLICIT UserKeyingMaterial OPTIONAL  }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "The ECPoint syntax is used to represent the ephemeral public key and is placed in the ephemeralPublicKey publicKey field. The additional user keying material is placed in the addedukm field. Then the MQVuserKeyingMaterial value is DER-encoded and placed within the ukm field of EnvelopedData, AuthenticatedData, or AuthEnvelopedData.",
      "ja": "ECPoint構文は、一時的な公開鍵を表すために使用され、ephemeralPublicKey publicKeyフィールドに配置されます。追加のユーザーキーイングマテリアルは、adddedkmフィールドに配置されます。次に、MQVuserKeyingMaterial値がDERエンコードされ、EnvelopedData、AuthenticatedData、またはAuthEnvelopedDataのukmフィールド内に配置されます。"
    },
    {
      "indent": 3,
      "text": "When using ECDH or ECMQV with EnvelopedData, AuthenticatedData, or AuthEnvelopedData, the key-encryption keys are derived by using the type:",
      "ja": "EnvelopedData、AuthenticatedData、またはAuthEnvelopedDataでECDHまたはECMQVを使用する場合、キー暗号化キーは次のタイプを使用して導出されます。"
    },
    {
      "indent": 6,
      "text": "ECC-CMS-SharedInfo ::= SEQUENCE {\n  keyInfo         AlgorithmIdentifier,\n  entityUInfo [0] EXPLICIT OCTET STRING OPTIONAL,\n  suppPubInfo [2] EXPLICIT OCTET STRING  }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "The fields of ECC-CMS-SharedInfo are as follows:",
      "ja": "ECC-CMS-SharedInfoのフィールドは次のとおりです。"
    },
    {
      "indent": 6,
      "text": "keyInfo contains the object identifier of the key-encryption algorithm (used to wrap the CEK) and associated parameters. In this specification, 3DES wrap has NULL parameters while the AES wraps have absent parameters.",
      "ja": "keyInfoには、（CEKをラップするために使用される）鍵暗号化アルゴリズムのオブジェクトIDと関連パラメーターが含まれています。この仕様では、3DESラップにはNULLパラメータがありますが、AESラップにはパラメータがありません。"
    },
    {
      "indent": 6,
      "text": "entityUInfo optionally contains additional keying material supplied by the sending agent. When used with ECDH and CMS, the entityUInfo field contains the octet string ukm. When used with ECMQV and CMS, the entityUInfo contains the octet string addedukm (encoded in MQVuserKeyingMaterial).",
      "ja": "entityUInfoには、送信エージェントから提供された追加のキー情報がオプションで含まれています。 ECDHおよびCMSで使用する場合、entityUInfoフィールドにはオクテット文字列ukmが含まれます。 ECMQVおよびCMSで使用する場合、entityUInfoにはオクテット文字列addedukm（MQVuserKeyingMaterialでエンコード）が含まれます。"
    },
    {
      "indent": 6,
      "text": "suppPubInfo contains the length of the generated KEK, in bits, represented as a 32-bit number, as in [CMS-DH] and [CMS-AES]. (For example, for AES-256 it would be 00 00 01 00.)",
      "ja": "suppPubInfoには、[CMS-DH]や[CMS-AES]のように、生成されたKEKの長さが32ビットの数値で表されたビット単位で含まれています。 （たとえば、AES-256の場合は00 00 01 00になります。）"
    },
    {
      "indent": 3,
      "text": "Within CMS, ECC-CMS-SharedInfo is DER-encoded and used as input to the key derivation function, as specified in Section 3.6.1 of [SEC1].",
      "ja": "[SEC1]のセクション3.6.1で指定されているように、CMS内では、ECC-CMS-SharedInfoがDERエンコードされ、鍵導出関数への入力として使用されます。"
    },
    {
      "indent": 3,
      "text": "NOTE: ECC-CMS-SharedInfo differs from the OtherInfo specified in [CMS-DH]. Here, a counter value is not included in the keyInfo field because the key derivation function specified in Section 3.6.1 of [SEC1] ensures that sufficient keying data is provided.",
      "ja": "注：ECC-CMS-SharedInfoは、[CMS-DH]で指定されたOtherInfoとは異なります。ここでは、[SEC1]のセクション3.6.1で指定された鍵導出関数が十分な鍵データが提供されることを保証するため、カウンター値はkeyInfoフィールドに含まれていません。"
    },
    {
      "indent": 0,
      "text": "8. Recommended Algorithms and Elliptic Curves",
      "section_title": true,
      "ja": "8. 推奨アルゴリズムと楕円曲線"
    },
    {
      "indent": 3,
      "text": "It is RECOMMENDED that implementations of this specification support SignedData and EnvelopedData. Support for AuthenticatedData and AuthEnvelopedData is OPTIONAL.",
      "ja": "この仕様の実装がSignedDataとEnvelopedDataをサポートすることをお勧めします。 AuthenticatedDataおよびAuthEnvelopedDataのサポートはオプションです。"
    },
    {
      "indent": 3,
      "text": "In order to encourage interoperability, implementations SHOULD use the elliptic curve domain parameters specified by [PKI-ALG].",
      "ja": "相互運用性を促進するために、実装は[PKI-ALG]で指定された楕円曲線ドメインパラメータを使用する必要があります（SHOULD）。"
    },
    {
      "indent": 3,
      "text": "Implementations that support SignedData with ECDSA:",
      "ja": "ECDSAでSignedDataをサポートする実装："
    },
    {
      "indent": 6,
      "text": "- MUST support ECDSA with SHA-256; and",
      "ja": "- SHA-256でECDSAをサポートする必要があります。そして"
    },
    {
      "indent": 6,
      "text": "- MAY support ECDSA with SHA-1, ECDSA with SHA-224, ECDSA with SHA-384, and ECDSA with SHA-512; other digital signature algorithms MAY also be supported.",
      "ja": "- SHA-1を備えたECDSA、SHA-224を備えたECDSA、SHA-384を備えたECDSA、およびSHA-512を備えたECDSAをサポートする場合があります。他のデジタル署名アルゴリズムもサポートされるかもしれません。"
    },
    {
      "indent": 3,
      "text": "When using ECDSA, to promote interoperability it is RECOMMENDED that the P-192, P-224, and P-256 curves be used with SHA-256; the P-384 curve be used with SHA-384; and the P-521 curve be used with SHA-512.",
      "ja": "ECDSAを使用する場合、相互運用性を促進するために、P-192、P-224、およびP-25​​6曲線をSHA-256とともに使用することをお勧めします。 P-384曲線はSHA-384で使用されます。 P-521カーブはSHA-512で使用できます。"
    },
    {
      "indent": 3,
      "text": "If EnvelopedData is supported, then ephemeral-static ECDH standard primitive MUST be supported. Support for ephemeral-static ECDH co-factor is OPTIONAL, and support for 1-Pass ECMQV is also OPTIONAL.",
      "ja": "If EnvelopedData is supported, then ephemeral-static ECDH standard primitive MUST be supported. Support for ephemeral-static ECDH co-factor is OPTIONAL, and support for 1-Pass ECMQV is also OPTIONAL."
    },
    {
      "indent": 3,
      "text": "Implementations that support EnvelopedData with the ephemeral-static ECDH standard primitive:",
      "ja": "一時的な静的ECDH標準プリミティブでEnvelopedDataをサポートする実装："
    },
    {
      "indent": 6,
      "text": "- MUST support the dhSinglePass-stdDH-sha256kdf-scheme key agreement algorithm, the id-aes128-wrap key wrap algorithm, and the id-aes128-cbc content encryption algorithm; and",
      "ja": "- dhSinglePass-stdDH-sha256kdf-scheme鍵合意アルゴリズム、id-aes128-wrap鍵ラップアルゴリズム、およびid-aes128-cbcコンテンツ暗号化アルゴリズムをサポートする必要があります。そして"
    },
    {
      "indent": 6,
      "text": "- MAY support the dhSinglePass-stdDH-sha1kdf-scheme, dhSinglePass-stdDH-sha224kdf-scheme, dhSinglePass-stdDH-sha384kdf-scheme, and dhSinglePass-stdDH-sha512kdf-scheme key agreement algorithms; the id-alg-CMS3DESwrap, id-aes192-wrap, and id-aes256-wrap key wrap algorithms; and the des-ede3-cbc, id-aes192-cbc, and id-aes256-cbc content encryption algorithms; other algorithms MAY also be supported.",
      "ja": "- dhSinglePass-stdDH-sha1kdf-scheme、dhSinglePass-stdDH-sha224kdf-scheme、dhSinglePass-stdDH-sha384kdf-scheme、およびdhSinglePass-stdDH-sha512kdf-scheme鍵合意アルゴリズムをサポートする場合があります。 id-alg-CMS3DESwrap、id-aes192-wrap、id-aes256-wrapキーラップアルゴリズム。そして、des-ede3-cbc、id-aes192-cbc、id-aes256-cbcコンテンツ暗号化アルゴリズム。他のアルゴリズムもサポートされるかもしれません。"
    },
    {
      "indent": 3,
      "text": "Implementations that support EnvelopedData with the ephemeral-static ECDH cofactor primitive:",
      "ja": "短期的なECDH補因子プリミティブでEnvelopedDataをサポートする実装："
    },
    {
      "indent": 6,
      "text": "- MUST support the dhSinglePass-cofactorDH-sha256kdf-scheme key agreement algorithm, the id-aes128-wrap key wrap algorithm, and the id-aes128-cbc content encryption algorithm; and",
      "ja": "- dhSinglePass-cofactorDH-sha256kdf-scheme鍵合意アルゴリズム、id-aes128-wrap鍵ラップアルゴリズム、およびid-aes128-cbcコンテンツ暗号化アルゴリズムをサポートする必要があります。そして"
    },
    {
      "indent": 6,
      "text": "- MAY support the dhSinglePass-cofactorDH-sha1kdf-scheme, dhSinglePass-cofactorDH-sha224kdf-scheme, dhSinglePass-cofactorDH-sha384kdf-scheme, and dhSinglePass-cofactorDH-sha512kdf-scheme key agreement; the id-alg-CMS3DESwrap, id-aes192-wrap, and id-aes256-wrap key wrap algorithms; and the des-ede3-cbc, id-aes192-cbc, and id-aes256-cbc content encryption algorithms; other algorithms MAY also be supported.",
      "ja": "- dhSinglePass-cofactorDH-sha1kdf-scheme、dhSinglePass-cofactorDH-sha224kdf-scheme、dhSinglePass-cofactorDH-sha384kdf-scheme、およびdhSinglePass-cofactorDH-sha512kdf-schemeキーアグリーメントをサポートする場合があります。 id-alg-CMS3DESwrap、id-aes192-wrap、id-aes256-wrapキーラップアルゴリズム。そして、des-ede3-cbc、id-aes192-cbc、id-aes256-cbcコンテンツ暗号化アルゴリズム。他のアルゴリズムもサポートされるかもしれません。"
    },
    {
      "indent": 3,
      "text": "Implementations that support EnvelopedData with 1-Pass ECMQV:",
      "ja": "1パスECMQVでEnvelopedDataをサポートする実装："
    },
    {
      "indent": 6,
      "text": "- MUST support the mqvSinglePass-sha256kdf-scheme key agreement algorithm, the id-aes128-wrap key wrap algorithm, and the id-aes128-cbc content encryption algorithm; and",
      "ja": "- mqvSinglePass-sha256kdf-scheme鍵合意アルゴリズム、id-aes128-wrap鍵ラップアルゴリズム、およびid-aes128-cbcコンテンツ暗号化アルゴリズムをサポートする必要があります。そして"
    },
    {
      "indent": 6,
      "text": "- MAY support the mqvSinglePass-sha1kdf-scheme, mqvSinglePass-sha224kdf-scheme, mqvSinglePass-sha384kdf-scheme, and mqvSinglePass-sha512kdf-scheme key agreement algorithms; the id-alg-CMS3DESwrap, id-aes192-wrap, and id-aes256-wrap key wrap algorithms; and the des-ede3-cbc, id-aes192-cbc, and id-aes256-cbc content encryption algorithms; other algorithms MAY also be supported.",
      "ja": "- mqvSinglePass-sha1kdf-scheme、mqvSinglePass-sha224kdf-scheme、mqvSinglePass-sha384kdf-scheme、およびmqvSinglePass-sha512kdf-scheme鍵合意アルゴリズムをサポートする場合があります。 id-alg-CMS3DESwrap、id-aes192-wrap、id-aes256-wrapキーラップアルゴリズム。そして、des-ede3-cbc、id-aes192-cbc、id-aes256-cbcコンテンツ暗号化アルゴリズム。他のアルゴリズムもサポートされるかもしれません。"
    },
    {
      "indent": 3,
      "text": "Implementations that support AuthenticatedData with 1-Pass ECMQV:",
      "ja": "1パスECMQVでAuthenticatedDataをサポートする実装："
    },
    {
      "indent": 6,
      "text": "- MUST support the mqvSinglePass-sha256kdf-scheme key agreement, the id-aes128-wrap key wrap, the id-sha256 message digest, and id-hmacWithSHA256 message authentication code algorithms; and",
      "ja": "- mqvSinglePass-sha256kdf-schemeキー合意、id-aes128-wrapキーラップ、id-sha256メッセージダイジェスト、およびid-hmacWithSHA256メッセージ認証コードアルゴリズムをサポートする必要があります。そして"
    },
    {
      "indent": 0,
      "text": " - MAY support the mqvSinglePass-sha1kdf-scheme, mqvSinglePass-sha224kdf-scheme, mqvSinglePass-sha384kdf-scheme, mqvSinglePass-sha512kdf-scheme key agreement algorithms; the id-alg-CMS3DESwrap, id-aes192-wrap, and id-aes256-wrap key wrap algorithms; the id-sha1, id-sha224, id-sha384, and id-sha512, message digest algorithms; and the hmac-SHA1, id-hmacWithSHA224, id-hmacWithSHA384, and id-hmacWithSHA512 message authentication code algorithms; other algorithms MAY also be supported.",
      "ja": "-mqvSinglePass-sha1kdf-scheme、mqvSinglePass-sha224kdf-scheme、mqvSinglePass-sha384kdf-scheme、mqvSinglePass-sha512kdf-scheme鍵合意アルゴリズムをサポートする場合があります。 id-alg-CMS3DESwrap、id-aes192-wrap、id-aes256-wrapキーラップアルゴリズム。 id-sha1、id-sha224、id-sha384、id-sha512、メッセージダイジェストアルゴリズム。そして、hmac-SHA1、id-hmacWithSHA224、id-hmacWithSHA384、id-hmacWithSHA512メッセージ認証コードアルゴリズム。他のアルゴリズムもサポートされるかもしれません。"
    },
    {
      "indent": 3,
      "text": "Implementations that support AuthEnvelopedData with 1-Pass ECMQV:",
      "ja": "Implementations that support AuthEnvelopedData with 1-Pass ECMQV:"
    },
    {
      "indent": 6,
      "text": "- MUST support the mqvSinglePass-sha256kdf-scheme key agreement, the id-aes128-wrap key wrap, and the id-aes128-ccm authenticated-content encryption; and",
      "ja": "- MUST support the mqvSinglePass-sha256kdf-scheme key agreement, the id-aes128-wrap key wrap, and the id-aes128-ccm authenticated-content encryption; and"
    },
    {
      "indent": 6,
      "text": "- MAY support the mqvSinglePass-sha1kdf-scheme, mqvSinglePass-sha224kdf-scheme, mqvSinglePass-sha384kdf-scheme, and mqvSinglePass-sha512kdf-scheme key agreement algorithms; the id-alg-CMS3DESwrap, id-aes192-wrap, and id-aes256-wrap key wrap algorithms; and the id-aes192-ccm, id-aes256-ccm, id-aes128-gcm, id-aes192-gcm, and id-aes256-ccm authenticated-content encryption algorithms; other algorithms MAY also be supported.",
      "ja": "- mqvSinglePass-sha1kdf-scheme、mqvSinglePass-sha224kdf-scheme、mqvSinglePass-sha384kdf-scheme、およびmqvSinglePass-sha512kdf-scheme鍵合意アルゴリズムをサポートする場合があります。 id-alg-CMS3DESwrap、id-aes192-wrap、id-aes256-wrapキーラップアルゴリズム。 id-aes192-ccm、id-aes256-ccm、id-aes128-gcm、id-aes192-gcm、id-aes256-ccmの認証済みコンテンツ暗号化アルゴリズム。他のアルゴリズムもサポートされるかもしれません。"
    },
    {
      "indent": 0,
      "text": "9. Security Considerations",
      "section_title": true,
      "ja": "9. セキュリティに関する考慮事項"
    },
    {
      "indent": 3,
      "text": "Cryptographic algorithms will be broken or weakened over time. Implementers and users need to check that the cryptographic algorithms listed in this document continue to provide the expected level of security. The IETF from time to time may issue documents dealing with the current state of the art.",
      "ja": "暗号化アルゴリズムは、時間の経過とともに壊れるか弱体化します。実装者とユーザーは、このドキュメントに記載されている暗号化アルゴリズムが、期待されるレベルのセキュリティを引き続き提供していることを確認する必要があります。 IETFは時々、最新の技術を扱うドキュメントを発行することがあります。"
    },
    {
      "indent": 3,
      "text": "Cryptographic algorithms rely on random numbers. See [RANDOM] for guidance on generation of random numbers.",
      "ja": "暗号化アルゴリズムは乱数に依存しています。乱数の生成に関するガイダンスについては、[RANDOM]を参照してください。"
    },
    {
      "indent": 3,
      "text": "Receiving agents that validate signatures and sending agents that encrypt messages need to be cautious of cryptographic processing usage when validating signatures and encrypting messages using keys larger than those mandated in this specification. An attacker could send keys and/or certificates with keys that would result in excessive cryptographic processing, for example, keys larger than those mandated in this specification, which could swamp the processing element. Agents that use such keys without first validating the certificate to a trust anchor are advised to have some sort of cryptographic resource management system to prevent such attacks.",
      "ja": "署名を検証する受信エージェントとメッセージを暗号化する送信エージェントは、署名を検証し、この仕様で規定されているものよりも大きいキーを使用してメッセージを暗号化するときは、暗号処理の使用に注意する必要があります。攻撃者は、過剰な暗号化処理を引き起こす鍵（たとえば、この仕様で規定されているものよりも大きい鍵）を含む鍵や証明書を送信する可能性があり、処理要素がいっぱいになる可能性があります。最初にトラストアンカーへの証明書を検証せずにこのようなキーを使用するエージェントは、このような攻撃を防ぐために何らかの暗号リソース管理システムを用意することをお勧めします。"
    },
    {
      "indent": 0,
      "text": " Using secret keys of an appropriate size is crucial to the security of a Diffie-Hellman exchange. For elliptic curve groups, the size of the secret key must be equal to the size of n (the order of the group generated by the point g). Using larger secret keys provides absolutely no additional security, and using smaller secret keys is likely to result in dramatically less security. (See [SP800-56A] for more information on selecting secret keys.) This specification is based on [CMS], [CMS-AES], [CMS-AESCG], [CMS-ALG], [CMS-AUTHENV], [CMS-DH], [CMS-SHA2], [FIPS180-3], [FIPS186-3], and [HMAC-SHA2], and the appropriate security considerations of those documents apply.",
      "ja": "適切なサイズの秘密鍵を使用することは、Diffie-Hellman交換のセキュリティにとって非常に重要です。楕円曲線グループの場合、秘密鍵のサイズはnのサイズ（点gによって生成されるグループの次数）と等しくなければなりません。大きな秘密鍵を使用してもセキュリティはまったく向上せず、小さな秘密鍵を使用するとセキュリティが大幅に低下する可能性があります。 （秘密鍵の選択の詳細については、[SP800-56A]を参照してください。）この仕様は、[CMS]、[CMS-AES]、[CMS-AESCG]、[CMS-ALG]、[CMS-AUTHENV]、[ CMS-DH]、[CMS-SHA2]、[FIPS180-3]、[FIPS186-3]、および[HMAC-SHA2]、およびこれらのドキュメントの適切なセキュリティに関する考慮事項が適用されます。"
    },
    {
      "indent": 3,
      "text": "In addition, implementers of AuthenticatedData and AuthEnvelopedData should be aware of the concerns expressed in [BON] when using AuthenticatedData and AuthEnvelopedData to send messages to more than one recipient. Also, users of MQV should be aware of the vulnerability described in [K].",
      "ja": "In addition, implementers of AuthenticatedData and AuthEnvelopedData should be aware of the concerns expressed in [BON] when using AuthenticatedData and AuthEnvelopedData to send messages to more than one recipient. Also, users of MQV should be aware of the vulnerability described in [K]."
    },
    {
      "indent": 3,
      "text": "When implementing EnvelopedData, AuthenticatedData, and AuthEnvelopedData, there are five algorithm-related choices that need to be made:",
      "ja": "EnvelopedData、AuthenticatedData、AuthEnvelopedDataを実装する場合、アルゴリズムに関連する5つの選択を行う必要があります。"
    },
    {
      "indent": 6,
      "text": "1) What is the public key size? 2) What is the KDF? 3) What is the key wrap algorithm? 4) What is the content encryption algorithm? 5) What is the curve?",
      "ja": "1）公開鍵のサイズは？ 2）KDFとは何ですか？ 3）キーラップアルゴリズムとは何ですか？ 4）コンテンツ暗号化アルゴリズムとは何ですか？ 5）曲線は何ですか？"
    },
    {
      "indent": 3,
      "text": "Consideration must be given to the strength of the security provided by each of these choices. Security algorithm strength is measured in bits, where bits is measured in equivalence to a symmetric cipher algorithm. Thus, a strong symmetric cipher algorithm with a key of X bits is said to provide X bits of security. For other algorithms, the key size is mapped to an equivalent symmetric cipher strength. It is recommended that the bits of security provided by each are roughly equivalent. The following table provides comparable minimum bits of security [SP800-57] for the ECDH/ECMQV key sizes, KDFs, key wrapping algorithms, and content encryption algorithms. It also lists curves [PKI-ALG] for the key sizes.",
      "ja": "Consideration must be given to the strength of the security provided by each of these choices. Security algorithm strength is measured in bits, where bits is measured in equivalence to a symmetric cipher algorithm. Thus, a strong symmetric cipher algorithm with a key of X bits is said to provide X bits of security. For other algorithms, the key size is mapped to an equivalent symmetric cipher strength. It is recommended that the bits of security provided by each are roughly equivalent. The following table provides comparable minimum bits of security [SP800-57] for the ECDH/ECMQV key sizes, KDFs, key wrapping algorithms, and content encryption algorithms. It also lists curves [PKI-ALG] for the key sizes."
    },
    {
      "indent": 0,
      "text": "   Minimum  | ECDH or  | Key        | Key      | Content     | Curves\n   Bits of  | ECMQV    | Derivation | Wrap     | Encryption  |\n   Security | Key Size | Function   | Alg.     | Alg.        |\n   ---------+----------+------------+----------+-------------+----------\n   80       | 160-223  | SHA-1      | 3DES     | 3DES CBC    | sect163k1\n            |          | SHA-224    | AES-128  | AES-128 CBC | secp163r2\n            |          | SHA-256    | AES-192  | AES-192 CBC | secp192r1\n            |          | SHA-384    | AES-256  | AES-256 CBC |\n            |          | SHA-512    |          |             |\n   ---------+----------+------------+----------+-------------+---------\n   112      | 224-255  | SHA-1      | 3DES     | 3DES CBC    | secp224r1\n            |          | SHA-224    | AES-128  | AES-128 CBC | sect233k1\n            |          | SHA-256    | AES-192  | AES-192 CBC | sect233r1\n            |          | SHA-384    | AES-256  | AES-256 CBC |\n            |          | SHA-512    |          |             |\n   ---------+----------+------------+----------+-------------+---------\n   128      | 256-383  | SHA-1      | AES-128  | AES-128 CBC | secp256r1\n            |          | SHA-224    | AES-192  | AES-192 CBC | sect283k1\n            |          | SHA-256    | AES-256  | AES-256 CBC | sect283r1\n            |          | SHA-384    |          |             |\n            |          | SHA-512    |          |             |\n   ---------+----------+------------+----------+-------------+---------\n   192      | 384-511  | SHA-224    | AES-192  | AES-192 CBC | secp384r1\n            |          | SHA-256    | AES-256  | AES-256 CBC | sect409k1\n            |          | SHA-384    |          |             | sect409r1\n            |          | SHA-512    |          |             |\n   ---------+----------+------------+----------+-------------+---------\n   256      | 512+     | SHA-256    | AES-256  | AES-256 CBC | secp521r1\n            |          | SHA-384    |          |             | sect571k1\n            |          | SHA-512    |          |             | sect571r1\n   ---------+----------+------------+----------+-------------+---------\n   To promote interoperability, the following choices are RECOMMENDED:",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "Minimum  | ECDH or  | Key        | Key      | Content     | Curve\nBits of  | ECMQV    | Derivation | Wrap     | Encryption  |\nSecurity | Key Size | Function   | Alg.     | Alg.        |\n---------+----------+------------+----------+-------------+----------\n80       | 192      | SHA-256    | 3DES     | 3DES CBC    | secp192r1\n---------+----------+------------+----------+-------------+----------\n112      | 224      | SHA-256    | 3DES     | 3DES CBC    | secp224r1\n---------+----------+------------+----------+-------------+----------\n128      | 256      | SHA-256    | AES-128  | AES-128 CBC | secp256r1\n---------+----------+------------+----------+-------------+----------\n192      | 384      | SHA-384    | AES-256  | AES-256 CBC | secp384r1\n---------+----------+------------+----------+-------------+----------\n256      | 512+     | SHA-512    | AES-256  | AES-256 CBC | secp521r1\n---------+----------+------------+----------+-------------+----------",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "When implementing SignedData, there are three algorithm-related choices that need to be made:",
      "ja": "When implementing SignedData, there are three algorithm-related choices that need to be made:"
    },
    {
      "indent": 6,
      "text": "1) What is the public key size? 2) What is the hash algorithm? 3) What is the curve?",
      "ja": "1）公開鍵のサイズは？ 2）ハッシュアルゴリズムとは何ですか？ 3）曲線とは何ですか？"
    },
    {
      "indent": 3,
      "text": "Consideration must be given to the bits of security provided by each of these choices. Security is measured in bits, where a strong symmetric cipher with a key of X bits is said to provide X bits of security. It is recommended that the bits of security provided by each choice are roughly equivalent. The following table provides comparable minimum bits of security [SP800-57] for the ECDSA key sizes and message digest algorithms. It also lists curves [PKI-ALG] for the key sizes.",
      "ja": "これらの選択肢のそれぞれによって提供されるセキュリティのビットを考慮する必要があります。セキュリティはビット単位で測定されます。Xビットのキーを持つ強力な対称暗号は、Xビットのセキュリティを提供すると言われています。各選択肢によって提供されるセキュリティのビットは、ほぼ同等であることが推奨されます。次の表は、ECDSAキーサイズとメッセージダイジェストアルゴリズムの同等のセキュリティの最小ビット[SP800-57]を示しています。また、キーサイズの曲線[PKI-ALG]もリストします。"
    },
    {
      "indent": 3,
      "text": "Minimum  | ECDSA    | Message   | Curve\nBits of  | Key Size | Digest    |\nSecurity |          | Algorithm |\n---------+----------+-----------+-----------\n80       | 160-223  | SHA-1     | sect163k1\n         |          | SHA-224   | secp163r2\n         |          | SHA-256   | secp192r1\n         |          | SHA-384   |\n         |          | SHA-512   |\n---------+----------+-----------+-----------\n112      | 224-255  | SHA-224   | secp224r1\n         |          | SHA-256   | sect233k1\n         |          | SHA-384   | sect233r1\n         |          | SHA-512   |\n---------+----------+-----------+-----------\n128      | 256-383  | SHA-256   | secp256r1\n         |          | SHA-384   | sect283k1\n         |          | SHA-512   | sect283r1\n---------+----------+-----------+-----------\n192      | 384-511  | SHA-384   | secp384r1\n         |          | SHA-512   | sect409k1\n         |          |           | sect409r1\n---------+----------+-----------+-----------\n256      | 512+     | SHA-512   | secp521r1\n         |          |           | sect571k1\n         |          |           | sect571r1\n---------+----------+-----------+-----------",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "To promote interoperability, the following choices are RECOMMENDED:",
      "ja": "To promote interoperability, the following choices are RECOMMENDED:"
    },
    {
      "indent": 3,
      "text": "Minimum  | ECDSA    | Message   | Curve\nBits of  | Key Size | Digest    |\nSecurity |          | Algorithm |\n---------+----------+-----------+-----------\n80       | 192      | SHA-256   | sect192r1\n---------+----------+-----------+-----------\n112      | 224      | SHA-256   | secp224r1\n---------+----------+-----------+-----------\n128      | 256      | SHA-256   | secp256r1\n---------+----------+-----------+-----------\n192      | 384      | SHA-384   | secp384r1\n---------+----------+-----------+-----------\n256      | 512+     | SHA-512   | secp521r1\n---------+----------+-----------+-----------",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "10. IANA Considerations",
      "section_title": true,
      "ja": "10. IANA Considerations"
    },
    {
      "indent": 3,
      "text": "This document makes extensive use of object identifiers to register originator public key types and algorithms. The algorithm object identifiers are registered in the ANSI X9.62, ANSI X9.63, NIST, RSA, and SECG arcs. Additionally, object identifiers are used to identify the ASN.1 modules found in Appendix A (there are two). These are defined by the SMIME WG Registrar in an arc delegated by RSA to the SMIME Working Group: iso(1) member-body(2) us(840) rsadsi(113549) pkcs(1) pkcs-9(9) smime(16) modules(0). No action by IANA is necessary for this document or any anticipated updates.",
      "ja": "This document makes extensive use of object identifiers to register originator public key types and algorithms. The algorithm object identifiers are registered in the ANSI X9.62, ANSI X9.63, NIST, RSA, and SECG arcs. Additionally, object identifiers are used to identify the ASN.1 modules found in Appendix A (there are two). These are defined by the SMIME WG Registrar in an arc delegated by RSA to the SMIME Working Group: iso(1) member-body(2) us(840) rsadsi(113549) pkcs(1) pkcs-9(9) smime(16) modules(0). No action by IANA is necessary for this document or any anticipated updates."
    },
    {
      "indent": 0,
      "text": "11. References",
      "section_title": true,
      "ja": "11. 参考文献"
    },
    {
      "indent": 0,
      "text": "11.1. Normative References",
      "section_title": true,
      "ja": "11.1. 引用文献"
    },
    {
      "indent": 3,
      "text": "[CMS] Housley, R., \"Cryptographic Message Syntax (CMS)\", RFC 5652, September 2009.",
      "ja": "[CMS] Housley, R., \"Cryptographic Message Syntax (CMS)\", RFC 5652, September 2009."
    },
    {
      "indent": 3,
      "text": "[CMS-AES] Schaad, J., \"Use of the Advanced Encryption Standard (AES) Encryption Algorithm in Cryptographic Message Syntax (CMS)\", RFC 3565, July 2003.",
      "ja": "[CMS-AES] Schaad、J。、「暗号化メッセージ構文（CMS）でのAdvanced Encryption Standard（AES）暗号化アルゴリズムの使用」、RFC 3565、2003年7月。"
    },
    {
      "indent": 3,
      "text": "[CMS-AESCG] Housley, R., \"Using AES-CCM and AES-GCM Authenticated Encryption in the Cryptographic Message Syntax (CMS)\", RFC 5084, December 2007.",
      "ja": "[CMS-AESCG] Housley、R。、「暗号化メッセージ構文（CMS）でのAES-CCMおよびAES-GCM Authenticated Encryptionの使用」、RFC 5084、2007年12月。"
    },
    {
      "indent": 3,
      "text": "[CMS-ALG] Housley, R., \"Cryptographic Message Syntax (CMS) Algorithms\", RFC 3370, August 2002.",
      "ja": "[CMS-ALG] Housley、R。、「Cryptographic Message Syntax（CMS）Algorithms」、RFC 3370、2002年8月。"
    },
    {
      "indent": 3,
      "text": "[CMS-AUTHENV] Housley, R., \"Cryptographic Message Syntax (CMS) Authenticated-Enveloped-Data Content Type\", RFC 5083, November 2007.",
      "ja": "[CMS-AUTHENV] Housley、R。、「Cryptographic Message Syntax（CMS）Authenticated-Enveloped-Data Content Type」、RFC 5083、2007年11月。"
    },
    {
      "indent": 3,
      "text": "[CMS-DH] Rescorla, E., \"Diffie-Hellman Key Agreement Method\", RFC 2631, June 1999.",
      "ja": "[CMS-DH] Rescorla、E。、「Diffie-Hellman Key Agreement Method」、RFC 2631、1999年6月。"
    },
    {
      "indent": 3,
      "text": "[CMS-SHA2] Turner, S., \"Using SHA2 Algorithms with Cryptographic Message Syntax\", RFC 5754, January 2010.",
      "ja": "[CMS-SHA2]ターナーS.、「暗号化メッセージ構文でのSHA2アルゴリズムの使用」、RFC 5754、2010年1月。"
    },
    {
      "indent": 3,
      "text": "[FIPS180-3] National Institute of Standards and Technology (NIST), FIPS Publication 180-3: Secure Hash Standard, October 2008.",
      "ja": "[FIPS180-3]国立標準技術研究所（NIST）、FIPS Publication 180-3：Secure Hash Standard、2008年10月。"
    },
    {
      "indent": 3,
      "text": "[FIPS186-3] National Institute of Standards and Technology (NIST), FIPS Publication 186-3: Digital Signature Standard, June 2009.",
      "ja": "[FIPS186-3] National Institute of Standards and Technology (NIST), FIPS Publication 186-3: Digital Signature Standard, June 2009."
    },
    {
      "indent": 3,
      "text": "[HMAC-SHA2] Nystrom, M., \"Identifiers and Test Vectors for HMAC-SHA-224, HMAC-SHA-256, HMAC-SHA-384, and HMAC-SHA-512\", RFC 4231, December 2005.",
      "ja": "[HMAC-SHA2] Nystrom, M., \"Identifiers and Test Vectors for HMAC-SHA-224, HMAC-SHA-256, HMAC-SHA-384, and HMAC-SHA-512\", RFC 4231, December 2005."
    },
    {
      "indent": 3,
      "text": "[MUST] Bradner, S., \"Key words for use in RFCs to Indicate Requirement Levels\", BCP 14, RFC 2119, March 1997.",
      "ja": "[必須] Bradner、S。、「RFCで使用して要件レベルを示すためのキーワード」、BCP 14、RFC 2119、1997年3月。"
    },
    {
      "indent": 3,
      "text": "[MSG] Ramsdell, B. and S. Turner, \"Secure/Multipurpose Internet Mail Extensions (S/MIME) Version 3.2 Message Specification\", RFC 5751, January 2010.",
      "ja": "[MSG] Ramsdell、B。およびS. Turner、「Secure / Multipurpose Internet Mail Extensions（S / MIME）Version 3.2 Message Specification」、RFC 5751、2010年1月。"
    },
    {
      "indent": 3,
      "text": "[PKI] Cooper, D., Santesson, S., Farrell, S., Boeyen, S., Housley, R., and W. Polk, \"Internet X.509 Public Key Infrastructure Certificate and Certificate Revocation List (CRL) Profile\", RFC 5280, May 2008.",
      "ja": "[PKI] Cooper、D.、Santesson、S.、Farrell、S.、Boeyen、S.、Housley、R。、およびW. Polk、「Internet X.509 Public Key Infrastructure Certificate and Certificate Revocation List（CRL）Profile \"、RFC 5280、2008年5月。"
    },
    {
      "indent": 3,
      "text": "[PKI-ALG] Turner, S., Brown, D., Yiu, K., Housley, R., and T. Polk, \"Elliptic Curve Cryptography Subject Public Key Information\", RFC 5480, March 2009.",
      "ja": "[PKI-ALG]ターナー、S。、ブラウン、D。、イウ、K。、ハウズリー、R。、およびT.ポーク、「楕円曲線暗号サブジェクト公開鍵情報」、RFC 5480、2009年3月。"
    },
    {
      "indent": 3,
      "text": "[RANDOM] Eastlake, D., 3rd, Schiller, J., and S. Crocker, \"Randomness Requirements for Security\", BCP 106, RFC 4086, June 2005.",
      "ja": "[ランダム] Eastlake、D.、3rd、Schiller、J。、およびS. Crocker、「Randomness Requirements for Security」、BCP 106、RFC 4086、2005年6月。"
    },
    {
      "indent": 3,
      "text": "[RSAOAEP] Schaad, J., Kaliski, B., and R. Housley, \"Additional Algorithms and Identifiers for RSA Cryptography for use in the Internet X.509 Public Key Infrastructure Certificate and Certificate Revocation List (CRL) Profile\", RFC 4055, June 2005.",
      "ja": "[RSAOAEP] Schaad、J.、Kaliski、B。、およびR. Housley、「インターネットX.509公開鍵インフラストラクチャ証明書および証明書失効リスト（CRL）プロファイルで使用するためのRSA暗号化の追加のアルゴリズムおよび識別子」、RFC 4055 、2005年6月。"
    },
    {
      "indent": 3,
      "text": "[SEC1] Standards for Efficient Cryptography Group, \"SEC 1: Elliptic Curve Cryptography\", version 2.0, May 2009, available from www.secg.org.",
      "ja": "[SEC1] Efficient Cryptography Groupの標準、「SEC 1：Elliptic Curve Cryptography」、バージョン2.0、2009年5月、www.secg.orgから入手可能。"
    },
    {
      "indent": 3,
      "text": "[SP800-56A] National Institute of Standards and Technology (NIST), Special Publication 800-56A: Recommendation Pair-Wise Key Establishment Schemes Using Discrete Logarithm Cryptography (Revised), March 2007.",
      "ja": "[SP800-56A] National Institute of Standards and Technology（NIST）、Special Publication 800-56A：Recommendation Pair-Wise Key Establishment Schemes Using Discrete Logarithm Cryptography（Revised）、2007年3月。"
    },
    {
      "indent": 3,
      "text": "[X.680] ITU-T Recommendation X.680 (2002) | ISO/IEC 8824-1:2002. Information Technology - Abstract Syntax Notation One.",
      "ja": "[X.680] ITU-T勧告X.680（2002）| ISO / IEC 8824-1：2002。情報技術-抽象構文記法1。"
    },
    {
      "indent": 0,
      "text": "11.2. Informative References",
      "section_title": true,
      "ja": "11.2. 参考引用"
    },
    {
      "indent": 3,
      "text": "[BON]          D. Boneh, \"The Security of Multicast MAC\",\n               Presentation at Selected Areas of Cryptography 2000,\n               Center for Applied Cryptographic Research, University\n               of Waterloo, 2000.  Paper version available from\n               http://crypto.stanford.edu/~dabo/papers/mmac.ps",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "[CERTCAP] Santesson, S., \"X.509 Certificate Extension for Secure/Multipurpose Internet Mail Extensions (S/MIME) Capabilities\", RFC 4262, December 2005.",
      "ja": "[CERTCAP] Santesson、S。、「X / 509 Certificate Extension for Secure / Multipurpose Internet Mail Extensions（S / MIME）Capabilities」、RFC 4262、2005年12月。"
    },
    {
      "indent": 3,
      "text": "[CMS-ASN] Hoffman, P. and J. Schaad, \"New ASN.1 Modules for CMS and S/MIME\", Work in Progress, August 2009.",
      "ja": "[CMS-ASN]ホフマン、P。およびJ.シャード、「CMSおよびS / MIMEの新しいASN.1モジュール」、作業中、2009年8月。"
    },
    {
      "indent": 3,
      "text": "[CMS-ECC] Blake-Wilson, S., Brown, D., and P. Lambert, \"Use of Elliptic Curve Cryptography (ECC) Algorithms in Cryptographic Message Syntax (CMS)\", RFC 3278, April 2002.",
      "ja": "[CMS-ECC] Blake-Wilson、S.、Brown、D。、およびP. Lambert、「Use of Elliptic Curve Cryptography（ECC）Algorithms in Cryptographic Message Syntax（CMS）」、RFC 3278、2002年4月。"
    },
    {
      "indent": 3,
      "text": "[CMS-KEA] Pawling, J., \"Use of the KEA and SKIPJACK Algorithms in CMS\", RFC 2876, July 2000.",
      "ja": "[CMS-KEA] Pawling、J。、「CMSでのKEAおよびSKIPJACKアルゴリズムの使用」、RFC 2876、2000年7月。"
    },
    {
      "indent": 3,
      "text": "[K] B. Kaliski, \"MQV Vulnerability\", Posting to ANSI X9F1 and IEEE P1363 newsgroups, 1998.",
      "ja": "[K] B.カリスキ、「MQVの脆弱性」、ANSI X9F1およびIEEE P1363ニュースグループへの投稿、1998年。"
    },
    {
      "indent": 3,
      "text": "[PKI-ASN] Hoffman, P. and J. Schaad, \"New ASN.1 Modules for PKIX\", Work in Progress, August 2009.",
      "ja": "[PKI-ASN]ホフマン、P。およびJ.シャード、「PKIXの新しいASN.1モジュール」、2009年8月、作業中。"
    },
    {
      "indent": 3,
      "text": "[SP800-57] National Institute of Standards and Technology (NIST), Special Publication 800-57: Recommendation for Key Management - Part 1 (Revised), March 2007.",
      "ja": "[SP800-57]米国国立標準技術研究所（NIST）、特別刊行物800-57：鍵管理の推奨-パート1（改訂）、2007年3月。"
    },
    {
      "indent": 3,
      "text": "[X.681] ITU-T Recommendation X.681 (2002) | ISO/IEC 8824-2:2002. Information Technology - Abstract Syntax Notation One: Information Object Specification.",
      "ja": "[X.681] ITU-T勧告X.681（2002）| ISO / IEC 8824-2：2002。情報技術-抽象構文記法1：情報オブジェクト仕様。"
    },
    {
      "indent": 3,
      "text": "[X.682] ITU-T Recommendation X.682 (2002) | ISO/IEC 8824-3:2002. Information Technology - Abstract Syntax Notation One: Constraint Specification.",
      "ja": "[X.682] ITU-T勧告X.682（2002）| ISO / IEC 8824-3：2002。情報技術-抽象構文記法1：制約仕様。"
    },
    {
      "indent": 3,
      "text": "[X.683] ITU-T Recommendation X.683 (2002) | ISO/IEC 8824-4:2002. Information Technology - Abstract Syntax Notation One: Parameterization of ASN.1 Specifications, 2002.",
      "ja": "[X.683] ITU-T勧告X.683（2002）| ISO / IEC 8824-4：2002。情報技術-抽象構文記法1：ASN.1仕様のパラメーター化、2002年。"
    },
    {
      "indent": 3,
      "text": "[X9.62] X9.62-2005, \"Public Key Cryptography for the Financial Services Industry: The Elliptic Curve Digital Signature Standard (ECDSA)\", November, 2005.",
      "ja": "[X9.62] X9.62-2005、「金融サービス業界の公開鍵暗号化：楕円曲線デジタル署名標準（ECDSA）」、2005年11月。"
    },
    {
      "indent": 0,
      "text": "Appendix A. ASN.1 Modules",
      "section_title": true,
      "ja": "付録A. ASN.1モジュール"
    },
    {
      "indent": 3,
      "text": "Appendix A.1 provides the normative ASN.1 definitions for the structures described in this specification using ASN.1 as defined in [X.680] for compilers that support the 1988 ASN.1.",
      "ja": "Appendix A.1 provides the normative ASN.1 definitions for the structures described in this specification using ASN.1 as defined in [X.680] for compilers that support the 1988 ASN.1."
    },
    {
      "indent": 3,
      "text": "Appendix A.2 provides informative ASN.1 definitions for the structures described in this specification using ASN.1 as defined in [X.680], [X.681], [X.682], and [X.683] for compilers that support the 2002 ASN.1. This appendix contains the same information as Appendix A.1 in a more recent (and precise) ASN.1 notation; however, Appendix A.1 takes precedence in case of conflict.",
      "ja": "付録A.2は、コンパイラの[X.680]、[X.681]、[X.682]、および[X.683]で定義されているASN.1を使用して、この仕様で説明されている構造の有益なASN.1定義を提供します2002 ASN.1をサポートします。この付録には、より最近の（正確な）ASN.1表記で、付録A.1と同じ情報が含まれています。ただし、競合が発生した場合は、付録A.1が優先されます。"
    },
    {
      "indent": 0,
      "text": "A.1. 1988 ASN.1 Module",
      "section_title": true,
      "ja": "A.1. 1988 ASN.1モジュール"
    },
    {
      "indent": 3,
      "text": "CMSECCAlgs-2009-88\n  { iso(1) member-body(2) us(840) rsadsi(113549) pkcs(1) pkcs-9(9)\n    smime(16) modules(0) id-mod-cms-ecc-alg-2009-88(45) }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "DEFINITIONS IMPLICIT TAGS ::=",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "BEGIN",
      "ja": "ベギン"
    },
    {
      "indent": 3,
      "text": "-- EXPORTS ALL",
      "ja": "-すべてエクスポート"
    },
    {
      "indent": 3,
      "text": "IMPORTS",
      "ja": "輸入"
    },
    {
      "indent": 3,
      "text": "-- From [PKI]",
      "ja": "-[PKI]から"
    },
    {
      "indent": 3,
      "text": "AlgorithmIdentifier\n  FROM PKIX1Explicit88\n    { iso(1) identified-organization(3) dod(6)\n      internet(1) security(5) mechanisms(5) pkix(7) mod(0)\n      pkix1-explicit(18) }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "-- From [RSAOAEP]",
      "ja": "-[RSAOAEP]から"
    },
    {
      "indent": 3,
      "text": "id-sha224, id-sha256, id-sha384, id-sha512\n  FROM PKIX1-PSS-OAEP-Algorithms\n    { iso(1) identified-organization(3) dod(6) internet(1)\n      security(5) mechanisms(5) pkix(7) id-mod(0)\n      id-mod-pkix1-rsa-pkalgs(33) }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "-- From [PKI-ALG]",
      "ja": "-[PKI-ALG]から"
    },
    {
      "indent": 3,
      "text": "id-sha1, ecdsa-with-SHA1, ecdsa-with-SHA224,\necdsa-with-SHA256, ecdsa-with-SHA384, ecdsa-with-SHA512,\nid-ecPublicKey, ECDSA-Sig-Value, ECPoint, ECParameters\n  FROM PKIX1Algorithms2008\n    { iso(1) identified-organization(3) dod(6) internet(1)\n      security(5) mechanisms(5) pkix(7) id-mod(0) 45 }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "-- From [CMS]",
      "ja": "-[CMS]から"
    },
    {
      "indent": 3,
      "text": "OriginatorPublicKey, UserKeyingMaterial\n  FROM CryptographicMessageSyntax2004\n    { iso(1) member-body(2) us(840) rsadsi(113549) pkcs(1) pkcs-9(9)\n      smime(16) modules(0) cms-2004(24) }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "-- From [CMS-ALG]",
      "ja": "-[CMS-ALG]から"
    },
    {
      "indent": 3,
      "text": "hMAC-SHA1, des-ede3-cbc, id-alg-CMS3DESwrap, CBCParameter\n  FROM CryptographicMessageSyntaxAlgorithms\n    { iso(1) member-body(2) us(840) rsadsi(113549) pkcs(1) pkcs-9(9)\n      smime(16) modules(0) cmsalg-2001(16) }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "-- From [CMS-AES]",
      "ja": "-[CMS-AES]から"
    },
    {
      "indent": 3,
      "text": "id-aes128-CBC, id-aes192-CBC, id-aes256-CBC, AES-IV,\nid-aes128-wrap, id-aes192-wrap, id-aes256-wrap\n  FROM CMSAesRsaesOaep\n    { iso(1) member-body(2) us(840) rsadsi(113549) pkcs(1) pkcs-9(9)\n      smime(16) modules(0) id-mod-cms-aes(19) }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "-- From [CMS-AESCG]",
      "ja": "-[CMS-AESCG]から"
    },
    {
      "indent": 3,
      "text": "id-aes128-CCM, id-aes192-CCM, id-aes256-CCM, CCMParameters\nid-aes128-GCM, id-aes192-GCM, id-aes256-GCM, GCMParameters\n  FROM CMS-AES-CCM-and-AES-GCM\n    { iso(1) member-body(2) us(840) rsadsi(113549) pkcs(1) pkcs-9(9)\n      smime(16) modules(0) id-mod-cms-aes(32) }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": ";",
      "ja": ";"
    },
    {
      "indent": 3,
      "text": "-- -- Message Digest Algorithms: Imported from [PKI-ALG] and [RSAOAEP] --",
      "ja": "--メッセージダイジェストアルゴリズム：[PKI-ALG]および[RSAOAEP]からインポート-"
    },
    {
      "indent": 3,
      "text": "-- id-sha1 Parameters are preferred absent\n-- id-sha224 Parameters are preferred absent\n-- id-sha256 Parameters are preferred absent",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "-- id-sha384 Parameters are preferred absent\n-- id-sha512 Parameters are preferred absent",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "-- -- Signature Algorithms: Imported from [PKI-ALG] --",
      "ja": "--署名アルゴリズム：[PKI-ALG]からインポート-"
    },
    {
      "indent": 3,
      "text": "-- ecdsa-with-SHA1 Parameters are NULL\n-- ecdsa-with-SHA224 Parameters are absent\n-- ecdsa-with-SHA256 Parameters are absent\n-- ecdsa-with-SHA384 Parameters are absent\n-- ecdsa-with-SHA512 Parameters are absent",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "-- ECDSA Signature Value\n-- Contents of SignatureValue OCTET STRING",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "-- ECDSA-Sig-Value ::= SEQUENCE {\n--   r  INTEGER,\n--   s  INTEGER\n-- }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "-- -- Key Agreement Algorithms --",
      "ja": "--鍵合意アルゴリズム-"
    },
    {
      "indent": 3,
      "text": "x9-63-scheme OBJECT IDENTIFIER ::= {\n  iso(1) identified-organization(3) tc68(133) country(16) x9(840)\n  x9-63(63) schemes(0) }\nsecg-scheme OBJECT IDENTIFIER ::= {\n  iso(1) identified-organization(3) certicom(132) schemes(1) }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "-- -- Diffie-Hellman Single Pass, Standard, with KDFs --",
      "ja": "--Diffie-Hellmanシングルパス、標準、KDFあり-"
    },
    {
      "indent": 3,
      "text": "-- Parameters are always present and indicate the key wrap algorithm\n-- with KeyWrapAlgorithm.",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "dhSinglePass-stdDH-sha1kdf-scheme OBJECT IDENTIFIER ::= {\n  x9-63-scheme 2 }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "dhSinglePass-stdDH-sha224kdf-scheme OBJECT IDENTIFIER ::= {\n  secg-scheme 11 0 }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "dhSinglePass-stdDH-sha256kdf-scheme OBJECT IDENTIFIER ::= {\n  secg-scheme 11 1 }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "dhSinglePass-stdDH-sha384kdf-scheme OBJECT IDENTIFIER ::= {\n  secg-scheme 11 2 }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "dhSinglePass-stdDH-sha512kdf-scheme OBJECT IDENTIFIER ::= {\n  secg-scheme 11 3 }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "-- -- Diffie-Hellman Single Pass, Cofactor, with KDFs --",
      "ja": "--Diffie-Hellmanシングルパス、コファクター、KDF付き-"
    },
    {
      "indent": 3,
      "text": "dhSinglePass-cofactorDH-sha1kdf-scheme OBJECT IDENTIFIER ::= {\n  x9-63-scheme 3 }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "dhSinglePass-cofactorDH-sha224kdf-scheme OBJECT IDENTIFIER ::= {\n  secg-scheme 14 0 }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "dhSinglePass-cofactorDH-sha256kdf-scheme OBJECT IDENTIFIER ::= {\n  secg-scheme 14 1 }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "dhSinglePass-cofactorDH-sha384kdf-scheme OBJECT IDENTIFIER ::= {\n  secg-scheme 14 2 }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "dhSinglePass-cofactorDH-sha512kdf-scheme OBJECT IDENTIFIER ::= {\n  secg-scheme 14 3 }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "-- -- MQV Single Pass, Cofactor, with KDFs --",
      "ja": "--MQVシングルパス、補因子、KDFあり-"
    },
    {
      "indent": 3,
      "text": "mqvSinglePass-sha1kdf-scheme OBJECT IDENTIFIER ::= {\n  x9-63-scheme 16 }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "mqvSinglePass-sha224kdf-scheme OBJECT IDENTIFIER ::= {\n  secg-scheme 15 0 }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "mqvSinglePass-sha256kdf-scheme OBJECT IDENTIFIER ::= {\n  secg-scheme 15 1 }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "mqvSinglePass-sha384kdf-scheme OBJECT IDENTIFIER ::= {\n  secg-scheme 15 2 }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "mqvSinglePass-sha512kdf-scheme OBJECT IDENTIFIER ::= {\n  secg-scheme 15 3 }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "   --\n   -- Key Wrap Algorithms: Imported from [CMS-ALG] and [CMS-AES]\n   --\n   KeyWrapAlgorithm ::= AlgorithmIdentifier",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "-- id-alg-CMS3DESwrap Parameters are NULL\n-- id-aes128-wrap Parameters are absent\n-- id-aes192-wrap Parameters are absent\n-- id-aes256-wrap Parameters are absent",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "--\n-- Content Encryption Algorithms: Imported from [CMS-ALG]\n-- and [CMS-AES]\n--",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "-- des-ede3-cbc Parameters are CBCParameter\n-- id-aes128-CBC Parameters are AES-IV\n-- id-aes192-CBC Parameters are AES-IV\n-- id-aes256-CBC Parameters are AES-IV\n-- id-aes128-CCM Parameters are CCMParameters\n-- id-aes192-CCM Parameters are CCMParameters\n-- id-aes256-CCM Parameters are CCMParameters\n-- id-aes128-GCM Parameters are GCMParameters\n-- id-aes192-GCM Parameters are GCMParameters\n-- id-aes256-GCM Parameters are GCMParameters",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "-- -- Message Authentication Code Algorithms --",
      "ja": "--メッセージ認証コードアルゴリズム-"
    },
    {
      "indent": 3,
      "text": "-- hMAC-SHA1 Parameters are preferred absent",
      "ja": "-hMAC-SHA1パラメータは指定しないことをお勧めします"
    },
    {
      "indent": 3,
      "text": "-- HMAC with SHA-224, SHA-256, SHA_384, and SHA-512 Parameters are\n-- absent",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "id-hmacWithSHA224 OBJECT IDENTIFIER ::= {\n  iso(1) member-body(2) us(840) rsadsi(113549)\n  digestAlgorithm(2) 8 }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "id-hmacWithSHA256 OBJECT IDENTIFIER ::= {\n  iso(1) member-body(2) us(840) rsadsi(113549)\n  digestAlgorithm(2) 9 }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "id-hmacWithSHA384 OBJECT IDENTIFIER ::= {\n  iso(1) member-body(2) us(840) rsadsi(113549)\n  digestAlgorithm(2) 10 }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "id-hmacWithSHA512 OBJECT IDENTIFIER ::= {\n  iso(1) member-body(2) us(840) rsadsi(113549)\n  digestAlgorithm(2) 11 }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "-- -- Originator Public Key Algorithms: Imported from [PKI-ALG] --",
      "ja": "--発信者公開鍵アルゴリズム：[PKI-ALG]からインポート-"
    },
    {
      "indent": 3,
      "text": "-- id-ecPublicKey Parameters are absent, NULL, or ECParameters",
      "ja": "-id-ecPublicKeyパラメーターが存在しない、NULL、またはECParameters"
    },
    {
      "indent": 3,
      "text": "-- Format for both ephemeral and static public keys: Imported from\n-- [PKI-ALG]",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "-- ECPoint ::= OCTET STRING",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "-- ECParameters ::= CHOICE {\n--   namedCurve      OBJECT IDENTIFIER\n--   commented out in [PKI-ALG]  implicitCurve   NULL\n--   commented out in [PKI-ALG]  specifiedCurve  SpecifiedECDomain\n--   commented out in [PKI-ALG]  ...\n-- }\n    -- implicitCurve and specifiedCurve MUST NOT be used in PKIX.\n    -- Details for SpecifiedECDomain can be found in [X9.62].\n    -- Any future additions to this CHOICE should be coordinated\n    -- with ANSI X9.",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "-- Format of KeyAgreeRecipientInfo ukm field when used with\n-- ECMQV",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "MQVuserKeyingMaterial ::= SEQUENCE {\n  ephemeralPublicKey       OriginatorPublicKey,\n  addedukm             [0] EXPLICIT UserKeyingMaterial OPTIONAL\n}",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "-- 'SharedInfo' for input to KDF when using ECDH and ECMQV with\n-- EnvelopedData, AuthenticatedData, or AuthEnvelopedData",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "ECC-CMS-SharedInfo ::= SEQUENCE {\n  keyInfo         AlgorithmIdentifier,\n  entityUInfo [0] EXPLICIT OCTET STRING OPTIONAL,\n  suppPubInfo [2] EXPLICIT OCTET STRING\n}",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "--\n-- S/MIME Capabilities\n-- An identifier followed by type.\n--",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "-- -- S/MIME Capabilities: Message Digest Algorithms --",
      "ja": "--S / MIME機能：メッセージダイジェストアルゴリズム-"
    },
    {
      "indent": 3,
      "text": "-- Found in [CMS-SHA2].",
      "ja": "-[CMS-SHA2]にあります。"
    },
    {
      "indent": 3,
      "text": "-- -- S/MIME Capabilities: Signature Algorithms --",
      "ja": "-- -- S/MIME Capabilities: Signature Algorithms --"
    },
    {
      "indent": 3,
      "text": "-- ecdsa-with-SHA1 Type NULL\n-- ecdsa-with-SHA224 Type absent\n-- ecdsa-with-SHA256 Type absent\n-- ecdsa-with-SHA384 Type absent\n-- ecdsa-with-SHA512 Type absent",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "-- -- S/MIME Capabilities: ECDH, Single Pass, Standard --",
      "ja": "--S / MIME機能：ECDH、シングルパス、標準-"
    },
    {
      "indent": 3,
      "text": "-- dhSinglePass-stdDH-sha1kdf Type is the KeyWrapAlgorithm\n-- dhSinglePass-stdDH-sha224kdf Type is the KeyWrapAlgorithm\n-- dhSinglePass-stdDH-sha256kdf Type is the KeyWrapAlgorithm\n-- dhSinglePass-stdDH-sha384kdf Type is the KeyWrapAlgorithm\n-- dhSinglePass-stdDH-sha512kdf Type is the KeyWrapAlgorithm",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "-- -- S/MIME Capabilities: ECDH, Single Pass, Cofactor --",
      "ja": "--S / MIME機能：ECDH、シングルパス、補因子-"
    },
    {
      "indent": 3,
      "text": "-- dhSinglePass-cofactorDH-sha1kdf Type is the KeyWrapAlgorithm\n-- dhSinglePass-cofactorDH-sha224kdf Type is the KeyWrapAlgorithm\n-- dhSinglePass-cofactorDH-sha256kdf Type is the KeyWrapAlgorithm\n-- dhSinglePass-cofactorDH-sha384kdf Type is the KeyWrapAlgorithm\n-- dhSinglePass-cofactorDH-sha512kdf Type is the KeyWrapAlgorithm",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "-- -- S/MIME Capabilities: ECMQV, Single Pass, Standard --",
      "ja": "--S / MIME機能：ECMQV、シングルパス、標準-"
    },
    {
      "indent": 3,
      "text": "-- mqvSinglePass-sha1kdf Type is the KeyWrapAlgorithm\n-- mqvSinglePass-sha224kdf Type is the KeyWrapAlgorithm\n-- mqvSinglePass-sha256kdf Type is the KeyWrapAlgorithm\n-- mqvSinglePass-sha384kdf Type is the KeyWrapAlgorithm\n-- mqvSinglePass-sha512kdf Type is the KeyWrapAlgorithm",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "-- -- S/MIME Capabilities: Message Authentication Code Algorithms --",
      "ja": "--S / MIME機能：メッセージ認証コードアルゴリズム-"
    },
    {
      "indent": 3,
      "text": "-- hMACSHA1 Type is preferred absent\n-- id-hmacWithSHA224 Type is absent\n-- if-hmacWithSHA256 Type is absent\n-- id-hmacWithSHA384 Type is absent\n-- id-hmacWithSHA512 Type is absent",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "END",
      "ja": "終わり"
    },
    {
      "indent": 0,
      "text": "A.2. 2004 ASN.1 Module",
      "section_title": true,
      "ja": "A.2. 2004 ASN.1モジュール"
    },
    {
      "indent": 0,
      "text": "CMSECCAlgs-2009-02\n  { iso(1) member-body(2) us(840) rsadsi(113549) pkcs(1) pkcs-9(9)\n    smime(16) modules(0) id-mod-cms-ecc-alg-2009-02(46) }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "DEFINITIONS IMPLICIT TAGS ::=",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "BEGIN",
      "ja": "ベギン"
    },
    {
      "indent": 0,
      "text": "-- EXPORTS ALL",
      "ja": "-すべてエクスポート"
    },
    {
      "indent": 0,
      "text": "IMPORTS",
      "ja": "輸入"
    },
    {
      "indent": 0,
      "text": "-- From [PKI-ASN]",
      "ja": "-[PKI-ASN]から"
    },
    {
      "indent": 0,
      "text": "mda-sha1, sa-ecdsaWithSHA1, sa-ecdsaWithSHA224, sa-ecdsaWithSHA256,\nsa-ecdsaWithSHA384, sa-ecdsaWithSHA512, id-ecPublicKey,\nECDSA-Sig-Value, ECPoint, ECParameters\n  FROM PKIXAlgs-2009\n    { iso(1) identified-organization(3) dod(6) internet(1)\n      security(5) mechanisms(5) pkix(7) id-mod(0)\n      id-mod-pkix1-algorithms2008-02(56) }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "-- From [PKI-ASN]",
      "ja": "-[PKI-ASN]から"
    },
    {
      "indent": 0,
      "text": "mda-sha224, mda-sha256, mda-sha384, mda-sha512\n  FROM PKIX1-PSS-OAEP-Algorithms-2009\n    { iso(1) identified-organization(3) dod(6) internet(1)\n      security(5) mechanisms(5) pkix(7) id-mod(0)\n      id-mod-pkix1-rsa-pkalgs-02(54) }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "-- FROM [CMS-ASN]",
      "ja": "-[CMS-ASN]から"
    },
    {
      "indent": 0,
      "text": "KEY-WRAP, SIGNATURE-ALGORITHM, DIGEST-ALGORITHM, ALGORITHM,\nPUBLIC-KEY, MAC-ALGORITHM, CONTENT-ENCRYPTION, KEY-AGREE, SMIME-CAPS,\nAlgorithmIdentifier{}\n  FROM AlgorithmInformation-2009\n    { iso(1) identified-organization(3) dod(6) internet(1)\n      security(5) mechanisms(5) pkix(7) id-mod(0)\n      id-mod-algorithmInformation-02(58) }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "-- From [CMS-ASN]",
      "ja": "-[CMS-ASN]から"
    },
    {
      "indent": 0,
      "text": "OriginatorPublicKey, UserKeyingMaterial\n  FROM CryptographicMessageSyntax-2009\n    { iso(1) member-body(2) us(840) rsadsi(113549) pkcs(1) pkcs-9(9)\n      smime(16) modules(0) id-mod-cms-2004-02(41) }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "-- From [CMS-ASN]",
      "ja": "-[CMS-ASN]から"
    },
    {
      "indent": 0,
      "text": "maca-hMAC-SHA1, cea-3DES-cbc, kwa-3DESWrap, CBCParameter\n  FROM CryptographicMessageSyntaxAlgorithms-2009\n    { iso(1) member-body(2) us(840) rsadsi(113549) pkcs(1) pkcs-9(9)\n      smime(16) modules(0) id-mod-cmsalg-2001-02(37) }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "-- From [CMS-ASN]",
      "ja": "-[CMS-ASN]から"
    },
    {
      "indent": 0,
      "text": "cea-aes128-cbc, cea-aes192-cbc, cea-aes256-cbc, kwa-aes128-wrap,\nkwa-aes192-wrap, kwa-aes256-wrap\n  FROM CMSAesRsaesOaep-2009\n    { iso(1) member-body(2) us(840) rsadsi(113549) pkcs(1) pkcs-9(9)\n      smime(16) modules(0) id-mod-cms-aes-02(38) }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "-- From [CMS-ASN]",
      "ja": "-[CMS-ASN]から"
    },
    {
      "indent": 0,
      "text": "cea-aes128-CCM, cea-aes192-CCM, cea-aes256-CCM, cea-aes128-GCM,\ncea-aes192-GCM, cea-aes256-GCM\n  FROM CMS-AES-CCM-and-AES-GCM-2009\n    { iso(1) member-body(2) us(840) rsadsi(113549) pkcs(1) pkcs-9(9)\n      smime(16) modules(0) id-mod-cms-aes-ccm-gcm-02(44) }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": ";",
      "ja": "；"
    },
    {
      "indent": 0,
      "text": "-- Constrains the SignedData digestAlgorithms field\n-- Constrains the SignedData SignerInfo digestAlgorithm field\n-- Constrains the AuthenticatedData digestAlgorithm field",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "-- Message Digest Algorithms: Imported from [PKI-ASN]",
      "ja": "-メッセージダイジェストアルゴリズム：[PKI-ASN]からインポート"
    },
    {
      "indent": 0,
      "text": "-- MessageDigestAlgs DIGEST-ALGORITHM ::= {\n--  mda-sha1   |\n--  mda-sha224 |\n--  mda-sha256 |\n--  mda-sha384 |\n--  mda-sha512,\n--  ...\n-- }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "-- Constrains the SignedData SignerInfo signatureAlgorithm field",
      "ja": "-SignedData SignerInfo signatureAlgorithmフィールドを制約します"
    },
    {
      "indent": 0,
      "text": "-- Signature Algorithms: Imported from [PKI-ASN]",
      "ja": "-署名アルゴリズム：[PKI-ASN]からインポート"
    },
    {
      "indent": 0,
      "text": "-- SignatureAlgs SIGNATURE-ALGORITHM ::= {\n--  sa-ecdsaWithSHA1   |\n--  sa-ecdsaWithSHA224 |\n--  sa-ecdsaWithSHA256 |",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "--  sa-ecdsaWithSHA384 |\n--  sa-ecdsaWithSHA512,\n--  ...\n-- }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "-- ECDSA Signature Value: Imported from [PKI-ALG]\n-- Contents of SignatureValue OCTET STRING",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "-- ECDSA-Sig-Value ::= SEQUENCE {\n--   r  INTEGER,\n--   s  INTEGER\n-- }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "-- -- Key Agreement Algorithms --",
      "ja": "--鍵合意アルゴリズム-"
    },
    {
      "indent": 0,
      "text": "-- Constrains the EnvelopedData RecipientInfo KeyAgreeRecipientInfo\n--   keyEncryption Algorithm field\n-- Constrains the AuthenticatedData RecipientInfo\n--   KeyAgreeRecipientInfo keyEncryption Algorithm field\n-- Constrains the AuthEnvelopedData RecipientInfo\n--   KeyAgreeRecipientInfo keyEncryption Algorithm field",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "-- DH variants are not used with AuthenticatedData or\n-- AuthEnvelopedData",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "KeyAgreementAlgs KEY-AGREE ::= {\n  kaa-dhSinglePass-stdDH-sha1kdf-scheme        |\n  kaa-dhSinglePass-stdDH-sha224kdf-scheme      |\n  kaa-dhSinglePass-stdDH-sha256kdf-scheme      |\n  kaa-dhSinglePass-stdDH-sha384kdf-scheme      |\n  kaa-dhSinglePass-stdDH-sha512kdf-scheme      |\n  kaa-dhSinglePass-cofactorDH-sha1kdf-scheme   |\n  kaa-dhSinglePass-cofactorDH-sha224kdf-scheme |\n  kaa-dhSinglePass-cofactorDH-sha256kdf-scheme |\n  kaa-dhSinglePass-cofactorDH-sha384kdf-scheme |\n  kaa-dhSinglePass-cofactorDH-sha512kdf-scheme |\n  kaa-mqvSinglePass-sha1kdf-scheme             |\n  kaa-mqvSinglePass-sha224kdf-scheme           |\n  kaa-mqvSinglePass-sha256kdf-scheme           |\n  kaa-mqvSinglePass-sha384kdf-scheme           |\n  kaa-mqvSinglePass-sha512kdf-scheme,\n  ...\n}\nx9-63-scheme OBJECT IDENTIFIER ::= {\n  iso(1) identified-organization(3) tc68(133) country(16) x9(840)\n  x9-63(63) schemes(0) }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "secg-scheme OBJECT IDENTIFIER ::= {\n  iso(1) identified-organization(3) certicom(132) schemes(1) }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "-- -- Diffie-Hellman Single Pass, Standard, with KDFs --",
      "ja": "--Diffie-Hellmanシングルパス、標準、KDFあり-"
    },
    {
      "indent": 0,
      "text": "-- Parameters are always present and indicate the Key Wrap Algorithm",
      "ja": "-パラメータは常に存在し、キーラップアルゴリズムを示します"
    },
    {
      "indent": 0,
      "text": "kaa-dhSinglePass-stdDH-sha1kdf-scheme KEY-AGREE ::= {\n  IDENTIFIER dhSinglePass-stdDH-sha1kdf-scheme\n  PARAMS TYPE KeyWrapAlgorithm ARE required\n  UKM -- TYPE unencoded data -- ARE preferredPresent\n  SMIME-CAPS cap-kaa-dhSinglePass-stdDH-sha1kdf-scheme\n}",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "dhSinglePass-stdDH-sha1kdf-scheme OBJECT IDENTIFIER ::= {\n  x9-63-scheme 2 }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "kaa-dhSinglePass-stdDH-sha224kdf-scheme KEY-AGREE ::= {\n  IDENTIFIER dhSinglePass-stdDH-sha224kdf-scheme\n  PARAMS TYPE KeyWrapAlgorithm ARE required\n  UKM -- TYPE unencoded data -- ARE preferredPresent\n  SMIME-CAPS cap-kaa-dhSinglePass-stdDH-sha224kdf-scheme\n}",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "dhSinglePass-stdDH-sha224kdf-scheme OBJECT IDENTIFIER ::= {\n  secg-scheme 11 0 }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "kaa-dhSinglePass-stdDH-sha256kdf-scheme KEY-AGREE ::= {\n  IDENTIFIER dhSinglePass-stdDH-sha256kdf-scheme\n  PARAMS TYPE KeyWrapAlgorithm ARE required\n  UKM -- TYPE unencoded data -- ARE preferredPresent\n  SMIME-CAPS cap-kaa-dhSinglePass-stdDH-sha256kdf-scheme\n}",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "dhSinglePass-stdDH-sha256kdf-scheme OBJECT IDENTIFIER ::= {\n  secg-scheme 11 1 }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "kaa-dhSinglePass-stdDH-sha384kdf-scheme KEY-AGREE ::= {\n  IDENTIFIER dhSinglePass-stdDH-sha384kdf-scheme\n  PARAMS TYPE KeyWrapAlgorithm ARE required\n  UKM -- TYPE unencoded data -- ARE preferredPresent\n  SMIME-CAPS cap-kaa-dhSinglePass-stdDH-sha384kdf-scheme\n}",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "dhSinglePass-stdDH-sha384kdf-scheme OBJECT IDENTIFIER ::= {\n  secg-scheme 11 2 }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "kaa-dhSinglePass-stdDH-sha512kdf-scheme KEY-AGREE ::= {\n  IDENTIFIER dhSinglePass-stdDH-sha512kdf-scheme\n  PARAMS TYPE KeyWrapAlgorithm ARE required\n  UKM -- TYPE unencoded data -- ARE preferredPresent\n  SMIME-CAPS cap-kaa-dhSinglePass-stdDH-sha512kdf-scheme\n}",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "dhSinglePass-stdDH-sha512kdf-scheme OBJECT IDENTIFIER ::= {\n  secg-scheme 11 3 }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "-- -- Diffie-Hellman Single Pass, Cofactor, with KDFs --",
      "ja": "--Diffie-Hellmanシングルパス、コファクター、KDF付き-"
    },
    {
      "indent": 0,
      "text": "kaa-dhSinglePass-cofactorDH-sha1kdf-scheme KEY-AGREE ::= {\n  IDENTIFIER dhSinglePass-cofactorDH-sha1kdf-scheme\n  PARAMS TYPE KeyWrapAlgorithm ARE required\n  UKM -- TYPE unencoded data -- ARE preferredPresent\n  SMIME-CAPS cap-kaa-dhSinglePass-cofactorDH-sha1kdf-scheme\n}",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "dhSinglePass-cofactorDH-sha1kdf-scheme OBJECT IDENTIFIER ::= {\n  x9-63-scheme 3 }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "kaa-dhSinglePass-cofactorDH-sha224kdf-scheme KEY-AGREE ::= {\n  IDENTIFIER dhSinglePass-cofactorDH-sha224kdf-scheme\n  PARAMS TYPE KeyWrapAlgorithm ARE required\n  UKM -- TYPE unencoded data -- ARE preferredPresent\n  SMIME-CAPS cap-kaa-dhSinglePass-cofactorDH-sha224kdf-scheme\n}",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "dhSinglePass-cofactorDH-sha224kdf-scheme OBJECT IDENTIFIER ::= {\n  secg-scheme 14 0 }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "kaa-dhSinglePass-cofactorDH-sha256kdf-scheme KEY-AGREE ::= {\n  IDENTIFIER dhSinglePass-cofactorDH-sha256kdf-scheme\n  PARAMS TYPE KeyWrapAlgorithm ARE required\n  UKM -- TYPE unencoded data -- ARE preferredPresent\n  SMIME-CAPS cap-kaa-dhSinglePass-cofactorDH-sha256kdf-scheme\n}",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "dhSinglePass-cofactorDH-sha256kdf-scheme OBJECT IDENTIFIER ::= {\n  secg-scheme 14 1 }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "kaa-dhSinglePass-cofactorDH-sha384kdf-scheme KEY-AGREE ::= {\n  IDENTIFIER dhSinglePass-cofactorDH-sha384kdf-scheme\n  PARAMS TYPE KeyWrapAlgorithm ARE required\n  UKM -- TYPE unencoded data -- ARE preferredPresent\n  SMIME-CAPS cap-kaa-dhSinglePass-cofactorDH-sha384kdf-scheme\n}",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "dhSinglePass-cofactorDH-sha384kdf-scheme OBJECT IDENTIFIER ::= {\n  secg-scheme 14 2 }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "kaa-dhSinglePass-cofactorDH-sha512kdf-scheme KEY-AGREE ::= {\n  IDENTIFIER dhSinglePass-cofactorDH-sha512kdf-scheme\n  PARAMS TYPE KeyWrapAlgorithm ARE required\n  UKM -- TYPE unencoded data -- ARE preferredPresent\n  SMIME-CAPS cap-kaa-dhSinglePass-cofactorDH-sha512kdf-scheme\n}",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "dhSinglePass-cofactorDH-sha512kdf-scheme OBJECT IDENTIFIER ::= {\n  secg-scheme 14 3 }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "-- -- MQV Single Pass, Cofactor, with KDFs --",
      "ja": "-- -- MQV Single Pass, Cofactor, with KDFs --"
    },
    {
      "indent": 0,
      "text": "kaa-mqvSinglePass-sha1kdf-scheme KEY-AGREE ::= {\n  IDENTIFIER mqvSinglePass-sha1kdf-scheme\n  PARAMS TYPE KeyWrapAlgorithm ARE required\n  UKM -- TYPE unencoded data -- ARE preferredPresent\n  SMIME-CAPS cap-kaa-mqvSinglePass-sha1kdf-scheme\n}",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "mqvSinglePass-sha1kdf-scheme OBJECT IDENTIFIER ::= {\n  x9-63-scheme 16 }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "kaa-mqvSinglePass-sha224kdf-scheme KEY-AGREE ::= {\n  IDENTIFIER mqvSinglePass-sha224kdf-scheme\n  PARAMS TYPE KeyWrapAlgorithm ARE required\n  UKM -- TYPE unencoded data -- ARE preferredPresent\n  SMIME-CAPS cap-kaa-mqvSinglePass-sha224kdf-scheme\n}",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "mqvSinglePass-sha224kdf-scheme OBJECT IDENTIFIER ::= {\n  secg-scheme 15 0 }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "kaa-mqvSinglePass-sha256kdf-scheme KEY-AGREE ::= {\n  IDENTIFIER mqvSinglePass-sha256kdf-scheme\n  PARAMS TYPE KeyWrapAlgorithm ARE required\n  UKM -- TYPE unencoded data -- ARE preferredPresent\n  SMIME-CAPS cap-kaa-mqvSinglePass-sha256kdf-scheme\n}",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "mqvSinglePass-sha256kdf-scheme OBJECT IDENTIFIER ::= {\n  secg-scheme 15 1 }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "kaa-mqvSinglePass-sha384kdf-scheme KEY-AGREE ::= {\n  IDENTIFIER mqvSinglePass-sha384kdf-scheme\n  PARAMS TYPE KeyWrapAlgorithm ARE required\n  UKM -- TYPE unencoded data -- ARE preferredPresent\n  SMIME-CAPS cap-kaa-mqvSinglePass-sha384kdf-scheme\n}",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "mqvSinglePass-sha384kdf-scheme OBJECT IDENTIFIER ::= {\n  secg-scheme 15 2 }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "kaa-mqvSinglePass-sha512kdf-scheme KEY-AGREE ::= {\n  IDENTIFIER mqvSinglePass-sha512kdf-scheme\n  PARAMS TYPE KeyWrapAlgorithm ARE required\n  UKM -- TYPE unencoded data -- ARE preferredPresent\n  SMIME-CAPS cap-kaa-mqvSinglePass-sha512kdf-scheme\n}",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "mqvSinglePass-sha512kdf-scheme OBJECT IDENTIFIER ::= {\n  secg-scheme 15 3 }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "--\n-- Key Wrap Algorithms: Imported from [CMS-ASN]\n--\nKeyWrapAlgorithm ::= AlgorithmIdentifier { KEY-WRAP, { KeyWrapAlgs } }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "KeyWrapAlgs KEY-WRAP ::= {\n  kwa-3DESWrap    |\n  kwa-aes128-wrap |\n  kwa-aes192-wrap |\n  kwa-aes256-wrap,\n  ...\n}",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "-- -- Content Encryption Algorithms: Imported from [CMS-ASN] --",
      "ja": "--コンテンツ暗号化アルゴリズム：[CMS-ASN]からインポート-"
    },
    {
      "indent": 0,
      "text": "-- Constrains the EnvelopedData EncryptedContentInfo encryptedContent\n-- field and the AuthEnvelopedData EncryptedContentInfo\n-- contentEncryptionAlgorithm field",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "-- ContentEncryptionAlgs CONTENT-ENCRYPTION ::= {\n--   cea-3DES-cbc |\n--   cea-aes128-cbc   |\n--   cea-aes192-cbc   |\n--   cea-aes256-cbc   |\n--   cea-aes128-ccm   |\n--   cea-aes192-ccm   |\n--   cea-aes256-ccm   |\n--   cea-aes128-gcm   |\n--   cea-aes192-gcm   |\n--   cea-aes256-gcm,\n--   ...\n--   }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "-- des-ede3-cbc and aes*-cbc are used with EnvelopedData and\n-- EncryptedData\n-- aes*-ccm are used with AuthEnvelopedData\n-- aes*-gcm are used with AuthEnvelopedData\n-- (where * is 128, 192, and 256)",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "-- -- Message Authentication Code Algorithms --",
      "ja": "--メッセージ認証コードアルゴリズム-"
    },
    {
      "indent": 0,
      "text": "-- Constrains the AuthenticatedData\n-- MessageAuthenticationCodeAlgorithm field\n--\nMessageAuthAlgs MAC-ALGORITHM ::= {\n--  maca-hMAC-SHA1 |\n  maca-hMAC-SHA224 |\n  maca-hMAC-SHA256 |\n  maca-hMAC-SHA384 |\n  maca-hMAC-SHA512,\n  ...\n}",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "maca-hMAC-SHA224 MAC-ALGORITHM ::= {\n  IDENTIFIER id-hmacWithSHA224\n  PARAMS ARE absent\n  IS-KEYED-MAC TRUE\n  SMIME-CAPS cap-hMAC-SHA224\n}",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "id-hmacWithSHA224 OBJECT IDENTIFIER ::= {\n  iso(1) member-body(2) us(840) rsadsi(113549)\n  digestAlgorithm(2) 8 }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "maca-hMAC-SHA256 MAC-ALGORITHM ::= {\n  IDENTIFIER id-hmacWithSHA256\n  PARAMS ARE absent\n  IS-KEYED-MAC TRUE\n  SMIME-CAPS cap-hMAC-SHA256\n}",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "id-hmacWithSHA256 OBJECT IDENTIFIER ::= {\n  iso(1) member-body(2) us(840) rsadsi(113549)\n  digestAlgorithm(2) 9 }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "maca-hMAC-SHA384 MAC-ALGORITHM ::= {\n  IDENTIFIER id-hmacWithSHA384\n  PARAMS ARE absent\n  IS-KEYED-MAC TRUE\n  SMIME-CAPS cap-hMAC-SHA384\n}",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "id-hmacWithSHA384 OBJECT IDENTIFIER ::= {\n  iso(1) member-body(2) us(840) rsadsi(113549)\n  digestAlgorithm(2) 10 }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "maca-hMAC-SHA512 MAC-ALGORITHM ::= {\n  IDENTIFIER id-hmacWithSHA512\n  PARAMS ARE absent\n  IS-KEYED-MAC TRUE\n  SMIME-CAPS cap-hMAC-SHA512\n}\nid-hmacWithSHA512 OBJECT IDENTIFIER ::= {\n  iso(1) member-body(2) us(840) rsadsi(113549)\n  digestAlgorithm(2) 11 }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "-- -- Originator Public Key Algorithms --",
      "ja": "--発信者公開鍵アルゴリズム-"
    },
    {
      "indent": 0,
      "text": "-- Constraints on KeyAgreeRecipientInfo OriginatorIdentifierOrKey\n-- OriginatorPublicKey algorithm field",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "OriginatorPKAlgorithms PUBLIC-KEY ::= {\n  opka-ec,\n  ...\n}",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "opka-ec PUBLIC-KEY ::={\n  IDENTIFIER id-ecPublicKey\n  KEY ECPoint\n  PARAMS TYPE CHOICE { n NULL, p ECParameters } ARE preferredAbsent\n}",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "-- Format for both ephemeral and static public keys: Imported from\n-- [PKI-ALG]",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "-- ECPoint ::= OCTET STRING",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "-- ECParameters ::= CHOICE {\n--   namedCurve      CURVE.&id({NamedCurve})\n--   commented out in [PKI-ALG] implicitCurve   NULL\n--   commented out in [PKI-ALG] specifiedCurve  SpecifiedECDomain\n--   commented out in [PKI-ALG] ...\n-- }\n  -- implicitCurve and specifiedCurve MUST NOT be used in PKIX.\n  -- Details for SpecifiedECDomain can be found in [X9.62].\n  -- Any future additions to this CHOICE should be coordinated\n  -- with ANSI X.9.",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "-- Format of KeyAgreeRecipientInfo ukm field when used with\n-- ECMQV",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "MQVuserKeyingMaterial ::= SEQUENCE {\n  ephemeralPublicKey       OriginatorPublicKey,\n  addedukm             [0] EXPLICIT UserKeyingMaterial OPTIONAL\n}",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "-- 'SharedInfo' for input to KDF when using ECDH and ECMQV with\n-- EnvelopedData, AuthenticatedData, or AuthEnvelopedData",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "ECC-CMS-SharedInfo ::= SEQUENCE {\n  keyInfo         KeyWrapAlgorithm,\n  entityUInfo [0] EXPLICIT OCTET STRING OPTIONAL,\n  suppPubInfo [2] EXPLICIT OCTET STRING\n}",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "--\n-- S/MIME CAPS for algorithms in this document\n--\nSMimeCAPS SMIME-CAPS ::= {\n--  mda-sha1.&smimeCaps                                   |\n--  mda-sha224.&smimeCaps                                 |\n--  mda-sha256.&smimeCaps                                 |\n--  mda-sha384.&smimeCaps                                 |\n--  mda-sha512.&smimeCaps                                 |\n--  sa-ecdsaWithSHA1.&smimeCaps                           |\n--  sa-ecdsaWithSHA224.&smimeCaps                         |\n--  sa-ecdsaWithSHA256.&smimeCaps                         |\n--  sa-ecdsaWithSHA384.&smimeCaps                         |\n--  sa-ecdsaWithSHA512.&smimeCaps                         |\n  kaa-dhSinglePass-stdDH-sha1kdf-scheme.&smimeCaps        |\n  kaa-dhSinglePass-stdDH-sha224kdf-scheme.&smimeCaps      |\n  kaa-dhSinglePass-stdDH-sha256kdf-scheme.&smimeCaps      |\n  kaa-dhSinglePass-stdDH-sha384kdf-scheme.&smimeCaps      |\n  kaa-dhSinglePass-stdDH-sha512kdf-scheme.&smimeCaps      |\n  kaa-dhSinglePass-cofactorDH-sha1kdf-scheme.&smimeCaps   |\n  kaa-dhSinglePass-cofactorDH-sha224kdf-scheme.&smimeCaps |\n  kaa-dhSinglePass-cofactorDH-sha256kdf-scheme.&smimeCaps |\n  kaa-dhSinglePass-cofactorDH-sha384kdf-scheme.&smimeCaps |\n  kaa-dhSinglePass-cofactorDH-sha512kdf-scheme.&smimeCaps |\n  kaa-mqvSinglePass-sha1kdf-scheme.&smimeCaps             |\n  kaa-mqvSinglePass-sha224kdf-scheme.&smimeCaps           |\n  kaa-mqvSinglePass-sha256kdf-scheme.&smimeCaps           |\n  kaa-mqvSinglePass-sha384kdf-scheme.&smimeCaps           |\n  kaa-mqvSinglePass-sha512kdf-scheme.&smimeCaps           |\n--  kwa-3des.&smimeCaps                                   |\n--  kwa-aes128.&smimeCaps                                 |\n--  kwa-aes192.&smimeCaps                                 |\n--  kwa-aes256.&smimeCaps                                 |\n--  cea-3DES-cbc.&smimeCaps                               |\n--  cea-aes128-cbc.&smimeCaps                             |\n--  cea-aes192-cbc.&smimeCaps                             |\n--  cea-aes256-cbc.&smimeCaps                             |\n--  cea-aes128-ccm.&smimeCaps                             |\n--  cea-aes192-ccm.&smimeCaps                             |\n--  cea-aes256-ccm.&smimeCaps                             |\n--  cea-aes128-gcm.&smimeCaps                             |\n--  cea-aes192-gcm.&smimeCaps                             |\n--  cea-aes256-gcm.&smimeCaps                             |\n--  maca-hMAC-SHA1.&smimeCaps                             |\n  maca-hMAC-SHA224.&smimeCaps                             |\n  maca-hMAC-SHA256.&smimeCaps                             |\n  maca-hMAC-SHA384.&smimeCaps                             |\n  maca-hMAC-SHA512.&smimeCaps,\n  ...\n}\ncap-kaa-dhSinglePass-stdDH-sha1kdf-scheme SMIME-CAPS ::= {\n  TYPE KeyWrapAlgorithm\n  IDENTIFIED BY dhSinglePass-stdDH-sha1kdf-scheme\n}",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "cap-kaa-dhSinglePass-stdDH-sha224kdf-scheme SMIME-CAPS ::= {\n  TYPE KeyWrapAlgorithm\n  IDENTIFIED BY dhSinglePass-stdDH-sha224kdf-scheme\n}",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "cap-kaa-dhSinglePass-stdDH-sha256kdf-scheme SMIME-CAPS ::= {\n  TYPE KeyWrapAlgorithm\n  IDENTIFIED BY dhSinglePass-stdDH-sha256kdf-scheme\n}",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "cap-kaa-dhSinglePass-stdDH-sha384kdf-scheme SMIME-CAPS ::= {\n   TYPE KeyWrapAlgorithm\n   IDENTIFIED BY dhSinglePass-stdDH-sha384kdf-scheme\n}",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "cap-kaa-dhSinglePass-stdDH-sha512kdf-scheme SMIME-CAPS ::= {\n  TYPE KeyWrapAlgorithm\n  IDENTIFIED BY dhSinglePass-stdDH-sha512kdf-scheme\n}",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "cap-kaa-dhSinglePass-cofactorDH-sha1kdf-scheme SMIME-CAPS ::={\n  TYPE KeyWrapAlgorithm\n  IDENTIFIED BY dhSinglePass-cofactorDH-sha1kdf-scheme\n}",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "cap-kaa-dhSinglePass-cofactorDH-sha224kdf-scheme SMIME-CAPS ::={\n  TYPE KeyWrapAlgorithm\n  IDENTIFIED BY dhSinglePass-cofactorDH-sha224kdf-scheme\n}",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "cap-kaa-dhSinglePass-cofactorDH-sha256kdf-scheme SMIME-CAPS ::={\n  TYPE KeyWrapAlgorithm\n  IDENTIFIED BY dhSinglePass-cofactorDH-sha256kdf-scheme\n}",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "cap-kaa-dhSinglePass-cofactorDH-sha384kdf-scheme SMIME-CAPS ::={\n  TYPE KeyWrapAlgorithm\n  IDENTIFIED BY dhSinglePass-cofactorDH-sha384kdf-scheme\n}\ncap-kaa-dhSinglePass-cofactorDH-sha512kdf-scheme SMIME-CAPS ::={\n  TYPE KeyWrapAlgorithm\n  IDENTIFIED BY dhSinglePass-cofactorDH-sha512kdf-scheme\n}",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "cap-kaa-mqvSinglePass-sha1kdf-scheme SMIME-CAPS ::={\n  TYPE KeyWrapAlgorithm\n  IDENTIFIED BY mqvSinglePass-sha1kdf-scheme\n}",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "cap-kaa-mqvSinglePass-sha224kdf-scheme SMIME-CAPS ::={\n  TYPE KeyWrapAlgorithm\n  IDENTIFIED BY mqvSinglePass-sha224kdf-scheme\n}",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "cap-kaa-mqvSinglePass-sha256kdf-scheme SMIME-CAPS ::={\n  TYPE KeyWrapAlgorithm\n  IDENTIFIED BY mqvSinglePass-sha256kdf-scheme\n}",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "cap-kaa-mqvSinglePass-sha384kdf-scheme SMIME-CAPS ::={\n  TYPE KeyWrapAlgorithm\n  IDENTIFIED BY mqvSinglePass-sha384kdf-scheme\n}",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "cap-kaa-mqvSinglePass-sha512kdf-scheme SMIME-CAPS ::={\n  TYPE KeyWrapAlgorithm\n  IDENTIFIED BY mqvSinglePass-sha512kdf-scheme\n}",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "cap-hMAC-SHA224 SMIME-CAPS ::={ IDENTIFIED BY id-hmacWithSHA224 }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "cap-hMAC-SHA256 SMIME-CAPS ::={ IDENTIFIED BY id-hmacWithSHA256 }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "cap-hMAC-SHA384 SMIME-CAPS ::={ IDENTIFIED BY id-hmacWithSHA384 }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "cap-hMAC-SHA512 SMIME-CAPS ::={ IDENTIFIED BY id-hmacWithSHA512 }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "END",
      "ja": "終わり"
    },
    {
      "indent": 0,
      "text": "Appendix B. Changes since RFC 3278",
      "section_title": true,
      "ja": "付録B. RFC 3278以降の変更"
    },
    {
      "indent": 3,
      "text": "The following summarizes the changes:",
      "ja": "変更の概要は次のとおりです。"
    },
    {
      "indent": 3,
      "text": "- Abstract: The basis of the document was changed to refer to NIST FIPS 186-3 and SP800-56A. However, to maintain backwards compatibility the Key Derivation Function from ANSI/SEC1 is retained.",
      "ja": "- Abstract: The basis of the document was changed to refer to NIST FIPS 186-3 and SP800-56A. However, to maintain backwards compatibility the Key Derivation Function from ANSI/SEC1 is retained."
    },
    {
      "indent": 3,
      "text": "- Section 1: A bullet was added to address AuthEnvelopedData.",
      "ja": "- セクション1：AuthEnvelopedDataに対処するための箇条書きが追加されました。"
    },
    {
      "indent": 3,
      "text": "- Section 2.1: A sentence was added to indicate FIPS180-3 is used with ECDSA. Replaced reference to ANSI X9.62 with FIPS186-3.",
      "ja": "- セクション2.1：FIPS180-3がECDSAで使用されることを示すために文が追加されました。 ANSI X9.62への参照をFIPS186-3に置き換えました。"
    },
    {
      "indent": 3,
      "text": "- Section 2.1.1: The permitted digest algorithms were expanded from SHA-1 to SHA-1, SHA-224, SHA-256, SHA-384, and SHA-512.",
      "ja": "- セクション2.1.1：許可されたダイジェストアルゴリズムがSHA-1からSHA-1、SHA-224、SHA-256、SHA-384、SHA-512に拡張されました。"
    },
    {
      "indent": 3,
      "text": "- Section 2.1.2 and 2.1.3: The bullet addressing integer \"e\" was deleted.",
      "ja": "- セクション2.1.2および2.1.3：整数「e」をアドレス指定する箇条書きが削除されました。"
    },
    {
      "indent": 3,
      "text": "- Section 3: Added explanation of why static-static ECDH is not included.",
      "ja": "- セクション3：静的-静的ECDHが含まれない理由の説明を追加しました。"
    },
    {
      "indent": 3,
      "text": "- Section 3.1: The reference for DH was changed from RFC 3852 to RFC 3370. Provided text to indicate fields of EnvelopedData are as in CMS.",
      "ja": "- セクション3.1：DHの参照がRFC 3852からRFC 3370に変更されました。EnvelopedDataのフィールドがCMSと同じであることを示すために提供されたテキスト。"
    },
    {
      "indent": 3,
      "text": "- Section 3.1.1: The text was updated to include description of all KeyAgreeRecipientInfo fields. Parameters for id-ecPublicKey field changed from NULL to absent or ECParameter. Additional information about ukm was added.",
      "ja": "- セクション3.1.1：すべてのKeyAgreeRecipientInfoフィールドの説明を含むようにテキストが更新されました。 id-ecPublicKeyフィールドのパラメーターがNULLから不在またはECParameterに変更されました。 ukmに関する追加情報が追加されました。"
    },
    {
      "indent": 3,
      "text": "- Section 3.2: The sentence describing the advantages of 1-Pass ECMQV was rewritten.",
      "ja": "- セクション3.2：1パスECMQVの利点を説明する文が書き直されました。"
    },
    {
      "indent": 3,
      "text": "- Section 3.2.1: The text was updated to include description of all fields. Parameters for id-ecPublicKey field changed from NULL to absent or ECParameters.",
      "ja": "- セクション3.2.1：すべてのフィールドの説明を含むようにテキストが更新されました。 id-ecPublicKeyフィールドのパラメーターがNULLから不在またはECParametersに変更されました。"
    },
    {
      "indent": 3,
      "text": "- Sections 3.2.2 and 4.1.2: The re-use of ephemeral keys paragraph was reworded.",
      "ja": "- セクション3.2.2および4.1.2：一時キーの再利用の段落が言い換えられました。"
    },
    {
      "indent": 3,
      "text": "- Section 4.1: The sentences describing the advantages of 1-Pass ECMQV was moved to Section 4.",
      "ja": "- セクション4.1：1パスECMQVの利点を説明する文は、セクション4に移動されました。"
    },
    {
      "indent": 3,
      "text": "- Section 4.1.2: The note about the attack was moved to Section 4.",
      "ja": "- セクション4.1.2：攻撃に関するメモがセクション4に移動されました。"
    },
    {
      "indent": 3,
      "text": "- Section 4.2: This section was added to address AuthEnvelopedData with ECMQV.",
      "ja": "- セクション4.2：このセクションは、ECMQVでAuthEnvelopedDataに対処するために追加されました。"
    },
    {
      "indent": 3,
      "text": "- Section 5: This section was moved to Section 8. The 1st paragraph was modified to recommend both SignedData and EnvelopedData. The requirements were updated for hash algorithms and recommendations for matching curves and hash algorithms. Also, the requirements were expanded to indicate which ECDH and ECMQV variants, key wrap algorithms, and content encryption algorithms are required for each of the content types used in this document. The permitted digest algorithms used in KDFs were expanded from SHA-1 to SHA-1, SHA-224, SHA-256, SHA-384, and SHA-512.",
      "ja": "- セクション5：このセクションはセクション8に移動されました。最初の段落は、SignedDataとEnvelopedDataの両方を推奨するように変更されました。ハッシュアルゴリズムの要件と、曲線とハッシュアルゴリズムの一致に関する推奨事項が更新されました。また、このドキュメントで使用されている各コンテンツタイプに必要なECDHおよびECMQVバリアント、キーラップアルゴリズム、およびコンテンツ暗号化アルゴリズムを示すために、要件が拡張されました。 KDFで使用される許可されたダイジェストアルゴリズムは、SHA-1からSHA-1、SHA-224、SHA-256、SHA-384、およびSHA-512に拡張されました。"
    },
    {
      "indent": 3,
      "text": "- Section 6 (formerly 7): This section was updated to allow for SMIMECapabilities to be present in certificates. The S/MIME capabilities for ECDSA with SHA-224, SHA-256, SHA-384, and SHA-512 were added to the list of S/MIME Capabilities. Also, updated to include S/MIME capabilities for ECDH and ECMQV using the SHA-224, SHA-256, SHA-384, and SHA-512 algorithms as the KDF.",
      "ja": "- セクション6（以前は7）：このセクションは、SMIMECapabilitiesが証明書に存在できるように更新されました。 SHA-224、SHA-256、SHA-384、およびSHA-512を備えたECDSAのS / MIME機能が、S / MIME機能のリストに追加されました。また、KDFとしてSHA-224、SHA-256、SHA-384、およびSHA-512アルゴリズムを使用するECDHおよびECMQVのS / MIME機能を含むように更新されました。"
    },
    {
      "indent": 3,
      "text": "- Section 7.1 (formerly 8.1): Added sub-sections for digest, signature, originator public key, key agreement, content encryption, key wrap, and message authentication code algorithms. Pointed to algorithms and parameters in appropriate documents for: SHA-224, SHA-256, SHA-384, and SHA-512 as well as SHA-224, SHA-256, SHA-384, and SHA-512 with ECDSA. Also, added algorithm identifiers for ECDH std, ECDH cofactor, and ECMQV with SHA-224, SHA-256, SHA-384, and SHA-512 algorithms as the KDF. Changed id-ecPublicKey parameters to be absent, NULL, or ECParameters, and if present the originator's ECParameters must match the recipient's ECParameters.",
      "ja": "- セクション7.1（以前の8.1）：ダイジェスト、署名、発信者の公開鍵、鍵合意、コンテンツの暗号化、鍵のラップ、およびメッセージ認証コードアルゴリズムのサブセクションを追加しました。 SHA-224、SHA-256、SHA-384、およびSHA-512、ならびにECDSAを備えたSHA-224、SHA-256、SHA-384、およびSHA-512の適切なドキュメントのアルゴリズムとパラメーターを示しました。また、KDFとしてSHA-224、SHA-256、SHA-384、およびSHA-512アルゴリズムを使用するECDH std、ECDH補因子、およびECMQVのアルゴリズム識別子を追加しました。 id-ecPublicKeyパラメーターを不在、NULL、またはECParametersに変更しました。存在する場合、発信者のECParametersは受信者のECParametersと一致する必要があります。"
    },
    {
      "indent": 3,
      "text": "- Section 7.2 (formerly 8.2): Updated to include AuthEnvelopedData. Also, added text to address support requirement for compressed, uncompressed, and hybrid keys; changed pointers from ANSI X9.61 to PKIX (where ECDSA-Sig-Value is imported); changed pointers from SECG to NIST specs; and updated example of suppPubInfo to be AES-256. keyInfo's parameters changed from NULL to any associated parameters (AES wraps have absent parameters).",
      "ja": "- セクション7.2（以前の8.2）：AuthEnvelopedDataを含むように更新されました。また、圧縮キー、非圧縮キー、およびハイブリッドキーのサポート要件に対処するためのテキストが追加されました。ポインターをANSI X9.61からPKIX（ECDSA-Sig-Valueがインポートされる場所）に変更しました。ポインタをSECGからNIST仕様に変更しました。また、suppPubInfoの例をAES-256に更新しました。 keyInfoのパラメーターがNULLから関連パラメーターに変更されました（AESラップにはパラメーターがありません）。"
    },
    {
      "indent": 3,
      "text": "- Section 9: Replaced text, which was a summary paragraph, with an updated security considerations section. Paragraph referring to definitions of SHA-224, SHA-256, SHA-384, and SHA-512 is deleted.",
      "ja": "- セクション9：要約段落であったテキストを、更新されたセキュリティに関する考慮事項セクションに置き換えました。 SHA-224、SHA-256、SHA-384、SHA-512の定義を参照する段落を削除。"
    },
    {
      "indent": 3,
      "text": "- Updated references.",
      "ja": "- 更新された参照。"
    },
    {
      "indent": 3,
      "text": "- Added ASN.1 modules.",
      "ja": "- ASN.1モジュールが追加されました。"
    },
    {
      "indent": 3,
      "text": "- Updated acknowledgements section.",
      "ja": "- 謝辞のセクションを更新しました。"
    },
    {
      "indent": 0,
      "text": "Acknowledgements",
      "ja": "謝辞"
    },
    {
      "indent": 3,
      "text": "The methods described in this document are based on work done by the ANSI X9F1 working group. The authors wish to extend their thanks to ANSI X9F1 for their assistance. The authors also wish to thank Peter de Rooij for his patient assistance. The technical comments of Francois Rousseau were valuable contributions.",
      "ja": "このドキュメントで説明する方法は、ANSI X9F1ワーキンググループによって行われた作業に基づいています。著者は、ANSI X9F1の支援に感謝します。著者はまた、彼の忍耐強い援助のためにピーター・デ・ルーイに感謝したいと思います。フランソワ・ルソーの技術的なコメントは貴重な貢献でした。"
    },
    {
      "indent": 3,
      "text": "Many thanks go out to the other authors of RFC 3278: Simon Blake-Wilson and Paul Lambert. Without RFC 3278, this version wouldn't exist.",
      "ja": "RFC 3278の他の作者であるSimon Blake-WilsonとPaul Lambertに感謝します。 RFC 3278がなければ、このバージョンは存在しません。"
    },
    {
      "indent": 3,
      "text": "The authors also wish to thank Alfred Hoenes, Jonathan Herzog, Paul Hoffman, Russ Housley, and Jim Schaad for their valuable input.",
      "ja": "著者はまた、貴重な情報を提供してくれたAlfred Hoenes、Jonathan Herzog、Paul Hoffman、Russ Housley、Jim Schaadに感謝します。"
    },
    {
      "indent": 0,
      "text": "Authors' Addresses",
      "ja": "著者のアドレス"
    },
    {
      "indent": 3,
      "text": "Sean Turner IECA, Inc. 3057 Nutley Street, Suite 106 Fairfax, VA 22031 USA",
      "ja": "Sean Turner IECA, Inc. 3057 Nutley Street, Suite 106 Fairfax, VA 22031 USA"
    },
    {
      "indent": 3,
      "text": "EMail: turners@ieca.com",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "Daniel R. L. Brown Certicom Corp 5520 Explorer Drive #400 Mississauga, ON L4W 5L1 Canada",
      "ja": "Daniel R. L. Brown Certicom Corp 5520 Explorer Drive＃400ミシサガ、ON L4W 5L1カナダ"
    },
    {
      "indent": 3,
      "text": "EMail: dbrown@certicom.com",
      "raw": true,
      "ja": ""
    }
  ]
}